using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace WebApiUpload.Models;

public partial class GetnetUatContext : DbContext
{
    public GetnetUatContext()
    {
    }

    public GetnetUatContext(DbContextOptions<GetnetUatContext> options)
        : base(options)
    {
    }

    public virtual DbSet<AsientosRegionale> AsientosRegionales { get; set; }

    public virtual DbSet<AuditoriasRealizada> AuditoriasRealizadas { get; set; }

    public virtual DbSet<BackupBdZonasCp> BackupBdZonasCps { get; set; }

    public virtual DbSet<BdAbreviaturaCp> BdAbreviaturaCps { get; set; }

    public virtual DbSet<BdAccesoriosRefaccionReparacion> BdAccesoriosRefaccionReparacions { get; set; }

    public virtual DbSet<BdActasAdmin> BdActasAdmins { get; set; }

    public virtual DbSet<BdAfiliacionesProyectoEspecial> BdAfiliacionesProyectoEspecials { get; set; }

    public virtual DbSet<BdAjustesInsumosPaso> BdAjustesInsumosPasos { get; set; }

    public virtual DbSet<BdAltaCancelacionArMasivo> BdAltaCancelacionArMasivos { get; set; }

    public virtual DbSet<BdAltaFecGarantium> BdAltaFecGarantia { get; set; }

    public virtual DbSet<BdAltaMasivaUnidadCa> BdAltaMasivaUnidadCas { get; set; }

    public virtual DbSet<BdApiProveedore> BdApiProveedores { get; set; }

    public virtual DbSet<BdApplicationVersion> BdApplicationVersions { get; set; }

    public virtual DbSet<BdAr> BdArs { get; set; }

    public virtual DbSet<BdArAccesorio> BdArAccesorios { get; set; }

    public virtual DbSet<BdArArchivosCompress> BdArArchivosCompresses { get; set; }

    public virtual DbSet<BdArArchivosVario> BdArArchivosVarios { get; set; }

    public virtual DbSet<BdArCausasCancelacion> BdArCausasCancelacions { get; set; }

    public virtual DbSet<BdArCierreManual> BdArCierreManuals { get; set; }

    public virtual DbSet<BdArDatosComerciosExtra> BdArDatosComerciosExtras { get; set; }

    public virtual DbSet<BdArDesviacion> BdArDesviacions { get; set; }

    public virtual DbSet<BdArDiasAtencion> BdArDiasAtencions { get; set; }

    public virtual DbSet<BdArDocumentosSalesforce> BdArDocumentosSalesforces { get; set; }

    public virtual DbSet<BdArExtension> BdArExtensions { get; set; }

    public virtual DbSet<BdArFecGarantium> BdArFecGarantia { get; set; }

    public virtual DbSet<BdArInsumo> BdArInsumos { get; set; }

    public virtual DbSet<BdArLogApiProveedore> BdArLogApiProveedores { get; set; }

    public virtual DbSet<BdArLogW> BdArLogWs { get; set; }

    public virtual DbSet<BdArLogWsSalesforce> BdArLogWsSalesforces { get; set; }

    public virtual DbSet<BdArMiComercio> BdArMiComercios { get; set; }

    public virtual DbSet<BdArNegotiationType> BdArNegotiationTypes { get; set; }

    public virtual DbSet<BdArNotificacionesAltum> BdArNotificacionesAlta { get; set; }

    public virtual DbSet<BdArPaso> BdArPasos { get; set; }

    public virtual DbSet<BdArPdf> BdArPdfs { get; set; }

    public virtual DbSet<BdArPrefacturacion> BdArPrefacturacions { get; set; }

    public virtual DbSet<BdArProducto> BdArProductos { get; set; }

    public virtual DbSet<BdArReasignacionLog> BdArReasignacionLogs { get; set; }

    public virtual DbSet<BdArSalesforce> BdArSalesforces { get; set; }

    public virtual DbSet<BdArSlaInventario> BdArSlaInventarios { get; set; }

    public virtual DbSet<BdArSparePart> BdArSpareParts { get; set; }

    public virtual DbSet<BdArTecnico> BdArTecnicos { get; set; }

    public virtual DbSet<BdArTerminalAsociadaAmex> BdArTerminalAsociadaAmexes { get; set; }

    public virtual DbSet<BdArViatico> BdArViaticos { get; set; }

    public virtual DbSet<BdArViaticoMotivo> BdArViaticoMotivos { get; set; }

    public virtual DbSet<BdArVisita> BdArVisitas { get; set; }

    public virtual DbSet<BdArchivo1> BdArchivo1s { get; set; }

    public virtual DbSet<BdArchivoDispersionSolicitudViatico> BdArchivoDispersionSolicitudViaticos { get; set; }

    public virtual DbSet<BdArchivosConfirmacione> BdArchivosConfirmaciones { get; set; }

    public virtual DbSet<BdArchivosContacto> BdArchivosContactos { get; set; }

    public virtual DbSet<BdArchivosContactosAfiliacione> BdArchivosContactosAfiliaciones { get; set; }

    public virtual DbSet<BdArchivosDispersion> BdArchivosDispersions { get; set; }

    public virtual DbSet<BdArchivosPrefacturacion> BdArchivosPrefacturacions { get; set; }

    public virtual DbSet<BdArchivosProsaAbc> BdArchivosProsaAbcs { get; set; }

    public virtual DbSet<BdAsignacionAutomaticaPaso> BdAsignacionAutomaticaPasos { get; set; }

    public virtual DbSet<BdAsignacionMasivaReparacion> BdAsignacionMasivaReparacions { get; set; }

    public virtual DbSet<BdAsignacionTecnicoArLog> BdAsignacionTecnicoArLogs { get; set; }

    public virtual DbSet<BdAttach> BdAttaches { get; set; }

    public virtual DbSet<BdAttachAccione> BdAttachAcciones { get; set; }

    public virtual DbSet<BdAttachDhl> BdAttachDhls { get; set; }

    public virtual DbSet<BdAuditoria> BdAuditorias { get; set; }

    public virtual DbSet<BdAuditoriaCierre> BdAuditoriaCierres { get; set; }

    public virtual DbSet<BdAuditoriaProcesosInterno> BdAuditoriaProcesosInternos { get; set; }

    public virtual DbSet<BdAuditoriaReporte> BdAuditoriaReportes { get; set; }

    public virtual DbSet<BdAuditoriaReporte2> BdAuditoriaReporte2s { get; set; }

    public virtual DbSet<BdAuditoriaReporte2Trash> BdAuditoriaReporte2Trashes { get; set; }

    public virtual DbSet<BdAuditoriaReporteInsumo2> BdAuditoriaReporteInsumo2s { get; set; }

    public virtual DbSet<BdBbvaPaso> BdBbvaPasos { get; set; }

    public virtual DbSet<BdBitacoraAcceso> BdBitacoraAccesos { get; set; }

    public virtual DbSet<BdBitacoraAccesoPrueba> BdBitacoraAccesoPruebas { get; set; }

    public virtual DbSet<BdBitacoraAccesoUsuario> BdBitacoraAccesoUsuarios { get; set; }

    public virtual DbSet<BdBitacoraAgendado> BdBitacoraAgendados { get; set; }

    public virtual DbSet<BdBitacoraAlmacenResponsable> BdBitacoraAlmacenResponsables { get; set; }

    public virtual DbSet<BdBitacoraAlmacenStatus> BdBitacoraAlmacenStatuses { get; set; }

    public virtual DbSet<BdBitacoraAplicativoUnidad> BdBitacoraAplicativoUnidads { get; set; }

    public virtual DbSet<BdBitacoraAr> BdBitacoraArs { get; set; }

    public virtual DbSet<BdBitacoraArAltum> BdBitacoraArAlta { get; set; }

    public virtual DbSet<BdBitacoraArCambiosAppMicroforma> BdBitacoraArCambiosAppMicroformas { get; set; }

    public virtual DbSet<BdBitacoraBdNegocio> BdBitacoraBdNegocios { get; set; }

    public virtual DbSet<BdBitacoraBorrarUnidad> BdBitacoraBorrarUnidads { get; set; }

    public virtual DbSet<BdBitacoraCambioCliente> BdBitacoraCambioClientes { get; set; }

    public virtual DbSet<BdBitacoraCambioFecGarantium> BdBitacoraCambioFecGarantia { get; set; }

    public virtual DbSet<BdBitacoraCambioInfoIngreso> BdBitacoraCambioInfoIngresos { get; set; }

    public virtual DbSet<BdBitacoraCambioMasivoDaniadum> BdBitacoraCambioMasivoDaniada { get; set; }

    public virtual DbSet<BdBitacoraCambioMensajerium> BdBitacoraCambioMensajeria { get; set; }

    public virtual DbSet<BdBitacoraCambioNegocio> BdBitacoraCambioNegocios { get; set; }

    public virtual DbSet<BdBitacoraCambioNoInventario> BdBitacoraCambioNoInventarios { get; set; }

    public virtual DbSet<BdBitacoraCambioSerie> BdBitacoraCambioSeries { get; set; }

    public virtual DbSet<BdBitacoraCambioStatusUnidad> BdBitacoraCambioStatusUnidads { get; set; }

    public virtual DbSet<BdBitacoraCambioUnidadNueva> BdBitacoraCambioUnidadNuevas { get; set; }

    public virtual DbSet<BdBitacoraCambiosAppMicroforma> BdBitacoraCambiosAppMicroformas { get; set; }

    public virtual DbSet<BdBitacoraCancelacionOdtGetnetMic> BdBitacoraCancelacionOdtGetnetMics { get; set; }

    public virtual DbSet<BdBitacoraCierresOdt> BdBitacoraCierresOdts { get; set; }

    public virtual DbSet<BdBitacoraCompromiso> BdBitacoraCompromisos { get; set; }

    public virtual DbSet<BdBitacoraConectividadUnidad> BdBitacoraConectividadUnidads { get; set; }

    public virtual DbSet<BdBitacoraCostosMensajeria> BdBitacoraCostosMensajerias { get; set; }

    public virtual DbSet<BdBitacoraDiagnostico> BdBitacoraDiagnosticos { get; set; }

    public virtual DbSet<BdBitacoraDiasFestivo> BdBitacoraDiasFestivos { get; set; }

    public virtual DbSet<BdBitacoraDoctosPrefacturacion> BdBitacoraDoctosPrefacturacions { get; set; }

    public virtual DbSet<BdBitacoraEmbarquesMensajerium> BdBitacoraEmbarquesMensajeria { get; set; }

    public virtual DbSet<BdBitacoraEnvio> BdBitacoraEnvios { get; set; }

    public virtual DbSet<BdBitacoraError> BdBitacoraErrors { get; set; }

    public virtual DbSet<BdBitacoraIguala> BdBitacoraIgualas { get; set; }

    public virtual DbSet<BdBitacoraInstalacionRetiroMasivo> BdBitacoraInstalacionRetiroMasivos { get; set; }

    public virtual DbSet<BdBitacoraInsumo> BdBitacoraInsumos { get; set; }

    public virtual DbSet<BdBitacoraItemsBorrado> BdBitacoraItemsBorrados { get; set; }

    public virtual DbSet<BdBitacoraItemsSolicitudAlmacen> BdBitacoraItemsSolicitudAlmacens { get; set; }

    public virtual DbSet<BdBitacoraJob> BdBitacoraJobs { get; set; }

    public virtual DbSet<BdBitacoraLiberacionProgramado> BdBitacoraLiberacionProgramados { get; set; }

    public virtual DbSet<BdBitacoraModeloUnidad> BdBitacoraModeloUnidads { get; set; }

    public virtual DbSet<BdBitacoraMovimientosAbc> BdBitacoraMovimientosAbcs { get; set; }

    public virtual DbSet<BdBitacoraMovimientosRetornosInsumo> BdBitacoraMovimientosRetornosInsumos { get; set; }

    public virtual DbSet<BdBitacoraNegocio> BdBitacoraNegocios { get; set; }

    public virtual DbSet<BdBitacoraNegocioMigracion> BdBitacoraNegocioMigracions { get; set; }

    public virtual DbSet<BdBitacoraNegociosCoordenada> BdBitacoraNegociosCoordenadas { get; set; }

    public virtual DbSet<BdBitacoraNoInsumoAr> BdBitacoraNoInsumoArs { get; set; }

    public virtual DbSet<BdBitacoraOdtOnbaseConfirmacion> BdBitacoraOdtOnbaseConfirmacions { get; set; }

    public virtual DbSet<BdBitacoraOtrosCliente> BdBitacoraOtrosClientes { get; set; }

    public virtual DbSet<BdBitacoraProcedure> BdBitacoraProcedures { get; set; }

    public virtual DbSet<BdBitacoraProducto> BdBitacoraProductos { get; set; }

    public virtual DbSet<BdBitacoraPropiedadCliente> BdBitacoraPropiedadClientes { get; set; }

    public virtual DbSet<BdBitacoraQueryModeloConectividad> BdBitacoraQueryModeloConectividads { get; set; }

    public virtual DbSet<BdBitacoraReasignacionTecnico> BdBitacoraReasignacionTecnicos { get; set; }

    public virtual DbSet<BdBitacoraRecalcularHorasSf> BdBitacoraRecalcularHorasSfs { get; set; }

    public virtual DbSet<BdBitacoraRechazosEnvio> BdBitacoraRechazosEnvios { get; set; }

    public virtual DbSet<BdBitacoraReparacion> BdBitacoraReparacions { get; set; }

    public virtual DbSet<BdBitacoraRfcCliente> BdBitacoraRfcClientes { get; set; }

    public virtual DbSet<BdBitacoraServicio> BdBitacoraServicios { get; set; }

    public virtual DbSet<BdBitacoraServiciosFalla> BdBitacoraServiciosFallas { get; set; }

    public virtual DbSet<BdBitacoraSolicitudDevolucion> BdBitacoraSolicitudDevolucions { get; set; }

    public virtual DbSet<BdBitacoraSolicitudRecoleccion> BdBitacoraSolicitudRecoleccions { get; set; }

    public virtual DbSet<BdBitacoraSolicitudesAlmacen> BdBitacoraSolicitudesAlmacens { get; set; }

    public virtual DbSet<BdBitacoraSolicitudesViatico> BdBitacoraSolicitudesViaticos { get; set; }

    public virtual DbSet<BdBitacoraStatusTipoUsuario> BdBitacoraStatusTipoUsuarios { get; set; }

    public virtual DbSet<BdBitacoraStatusUsuario> BdBitacoraStatusUsuarios { get; set; }

    public virtual DbSet<BdBitacoraSubServicio> BdBitacoraSubServicios { get; set; }

    public virtual DbSet<BdBitacoraSurtidoMensajerium> BdBitacoraSurtidoMensajeria { get; set; }

    public virtual DbSet<BdBitacoraTipoCausaCancelacion> BdBitacoraTipoCausaCancelacions { get; set; }

    public virtual DbSet<BdBitacoraTipoCusasRechazo> BdBitacoraTipoCusasRechazos { get; set; }

    public virtual DbSet<BdBitacoraTipoPlazaCliente> BdBitacoraTipoPlazaClientes { get; set; }

    public virtual DbSet<BdBitacoraTipoProductoNegocio> BdBitacoraTipoProductoNegocios { get; set; }

    public virtual DbSet<BdBitacoraTipoSubrechazo> BdBitacoraTipoSubrechazos { get; set; }

    public virtual DbSet<BdBitacoraTransferencia> BdBitacoraTransferencias { get; set; }

    public virtual DbSet<BdBitacoraUnidad> BdBitacoraUnidads { get; set; }

    public virtual DbSet<BdBitacoraUnidadDanadum> BdBitacoraUnidadDanada { get; set; }

    public virtual DbSet<BdBitacoraUnidadProveedor> BdBitacoraUnidadProveedors { get; set; }

    public virtual DbSet<BdBitacoraUnidadesFaltantesRecibo> BdBitacoraUnidadesFaltantesRecibos { get; set; }

    public virtual DbSet<BdBitacoraUsuariosActivo> BdBitacoraUsuariosActivos { get; set; }

    public virtual DbSet<BdBitacoraUsuariosInactivo> BdBitacoraUsuariosInactivos { get; set; }

    public virtual DbSet<BdBitacoraValidacionDevolucione> BdBitacoraValidacionDevoluciones { get; set; }

    public virtual DbSet<BdBitacoraValidacionPrefacturacion> BdBitacoraValidacionPrefacturacions { get; set; }

    public virtual DbSet<BdBloqueo> BdBloqueos { get; set; }

    public virtual DbSet<BdBloqueosPaso> BdBloqueosPasos { get; set; }

    public virtual DbSet<BdBloqueosRespaldo> BdBloqueosRespaldos { get; set; }

    public virtual DbSet<BdBorrarTablaTinte> BdBorrarTablaTintes { get; set; }

    public virtual DbSet<BdCArgasArchivo> BdCArgasArchivos { get; set; }

    public virtual DbSet<BdCadenaProsa> BdCadenaProsas { get; set; }

    public virtual DbSet<BdCallCenterQ1> BdCallCenterQ1s { get; set; }

    public virtual DbSet<BdCallCenterSeguimiento> BdCallCenterSeguimientos { get; set; }

    public virtual DbSet<BdCallcenterRQ1> BdCallcenterRQ1s { get; set; }

    public virtual DbSet<BdCallcenterRQ10> BdCallcenterRQ10s { get; set; }

    public virtual DbSet<BdCallcenterRQ11> BdCallcenterRQ11s { get; set; }

    public virtual DbSet<BdCallcenterRQ12> BdCallcenterRQ12s { get; set; }

    public virtual DbSet<BdCallcenterRQ13> BdCallcenterRQ13s { get; set; }

    public virtual DbSet<BdCallcenterRQ14> BdCallcenterRQ14s { get; set; }

    public virtual DbSet<BdCallcenterRQ2> BdCallcenterRQ2s { get; set; }

    public virtual DbSet<BdCallcenterRQ3> BdCallcenterRQ3s { get; set; }

    public virtual DbSet<BdCallcenterRQ4> BdCallcenterRQ4s { get; set; }

    public virtual DbSet<BdCallcenterRQ5> BdCallcenterRQ5s { get; set; }

    public virtual DbSet<BdCallcenterRQ6> BdCallcenterRQ6s { get; set; }

    public virtual DbSet<BdCallcenterRQ7> BdCallcenterRQ7s { get; set; }

    public virtual DbSet<BdCallcenterRQ8> BdCallcenterRQ8s { get; set; }

    public virtual DbSet<BdCallcenterRQ9> BdCallcenterRQ9s { get; set; }

    public virtual DbSet<BdCambioStatusAr> BdCambioStatusArs { get; set; }

    public virtual DbSet<BdCambiosEstatusPermititdosUnidade> BdCambiosEstatusPermititdosUnidades { get; set; }

    public virtual DbSet<BdCampanaDeployment> BdCampanaDeployments { get; set; }

    public virtual DbSet<BdCampanaMarketing> BdCampanaMarketings { get; set; }

    public virtual DbSet<BdCarga> BdCargas { get; set; }

    public virtual DbSet<BdCargaChangeComentario> BdCargaChangeComentarios { get; set; }

    public virtual DbSet<BdCargaChangeDiagnosticadum> BdCargaChangeDiagnosticada { get; set; }

    public virtual DbSet<BdCargaChangeStatus> BdCargaChangeStatuses { get; set; }

    public virtual DbSet<BdCargaCierresMasivosTexto> BdCargaCierresMasivosTextos { get; set; }

    public virtual DbSet<BdCargaCierresMasivosTextoMit> BdCargaCierresMasivosTextoMits { get; set; }

    public virtual DbSet<BdCargaCodigoRechazo> BdCargaCodigoRechazos { get; set; }

    public virtual DbSet<BdCargaEnviosDhlErrore> BdCargaEnviosDhlErrores { get; set; }

    public virtual DbSet<BdCargaEnviosDhlPaso> BdCargaEnviosDhlPasos { get; set; }

    public virtual DbSet<BdCargaEnviosEstafetaPaso> BdCargaEnviosEstafetaPasos { get; set; }

    public virtual DbSet<BdCargaLayoudMasivo> BdCargaLayoudMasivos { get; set; }

    public virtual DbSet<BdCargaUnidadNoInventario> BdCargaUnidadNoInventarios { get; set; }

    public virtual DbSet<BdCargasConfirmacione> BdCargasConfirmaciones { get; set; }

    public virtual DbSet<BdCargasDiagnosticadum> BdCargasDiagnosticada { get; set; }

    public virtual DbSet<BdCargasEquipo> BdCargasEquipos { get; set; }

    public virtual DbSet<BdCargasInstalacionRetiro> BdCargasInstalacionRetiros { get; set; }

    public virtual DbSet<BdCargasMasiva> BdCargasMasivas { get; set; }

    public virtual DbSet<BdCargasMovRengenierium> BdCargasMovRengenieria { get; set; }

    public virtual DbSet<BdCargasNegociosOtrosCliente> BdCargasNegociosOtrosClientes { get; set; }

    public virtual DbSet<BdCargasOdtElavon> BdCargasOdtElavons { get; set; }

    public virtual DbSet<BdCargasOdtElavon25ago2022> BdCargasOdtElavon25ago2022s { get; set; }

    public virtual DbSet<BdChangeMassiveStatus> BdChangeMassiveStatuses { get; set; }

    public virtual DbSet<BdChangeStatusArPaso> BdChangeStatusArPasos { get; set; }

    public virtual DbSet<BdClaveEstado> BdClaveEstados { get; set; }

    public virtual DbSet<BdClienteModelo> BdClienteModelos { get; set; }

    public virtual DbSet<BdClienteModeloCambioStatusUnidad> BdClienteModeloCambioStatusUnidads { get; set; }

    public virtual DbSet<BdClienteProductoStatusAr> BdClienteProductoStatusArs { get; set; }

    public virtual DbSet<BdClienteWeekhour> BdClienteWeekhours { get; set; }

    public virtual DbSet<BdClosedServicesSendSf> BdClosedServicesSendSfs { get; set; }

    public virtual DbSet<BdColumnsLayout> BdColumnsLayouts { get; set; }

    public virtual DbSet<BdComentarioAr> BdComentarioArs { get; set; }

    public virtual DbSet<BdComentariosReparacion> BdComentariosReparacions { get; set; }

    public virtual DbSet<BdComparativoWincorPaso> BdComparativoWincorPasos { get; set; }

    public virtual DbSet<BdComprobacionSolicitudesViatico> BdComprobacionSolicitudesViaticos { get; set; }

    public virtual DbSet<BdComprobacionViatico> BdComprobacionViaticos { get; set; }

    public virtual DbSet<BdComprobacionViaticos2> BdComprobacionViaticos2s { get; set; }

    public virtual DbSet<BdCompromiso> BdCompromisos { get; set; }

    public virtual DbSet<BdCompromisoBlog> BdCompromisoBlogs { get; set; }

    public virtual DbSet<BdCompromisoResponsable> BdCompromisoResponsables { get; set; }

    public virtual DbSet<BdCompromisosAccione> BdCompromisosAcciones { get; set; }

    public virtual DbSet<BdCompromisosCompromiso> BdCompromisosCompromisos { get; set; }

    public virtual DbSet<BdConfigHorasCorte> BdConfigHorasCortes { get; set; }

    public virtual DbSet<BdConfigServiciosFallasPrimeraOdt> BdConfigServiciosFallasPrimeraOdts { get; set; }

    public virtual DbSet<BdConfiguracionMensajerium> BdConfiguracionMensajeria { get; set; }

    public virtual DbSet<BdConfigureUsuario> BdConfigureUsuarios { get; set; }

    public virtual DbSet<BdConfirmacione> BdConfirmaciones { get; set; }

    public virtual DbSet<BdConfirmacionesIntermedium> BdConfirmacionesIntermedia { get; set; }

    public virtual DbSet<BdConjuntoModeloConectividad> BdConjuntoModeloConectividads { get; set; }

    public virtual DbSet<BdConsumiblesUnidad> BdConsumiblesUnidads { get; set; }

    public virtual DbSet<BdContactosMailjet> BdContactosMailjets { get; set; }

    public virtual DbSet<BdContactsOnBase> BdContactsOnBases { get; set; }

    public virtual DbSet<BdControlAlertasAr> BdControlAlertasArs { get; set; }

    public virtual DbSet<BdControlAlmacenAccesorio> BdControlAlmacenAccesorios { get; set; }

    public virtual DbSet<BdControlAlmacenInsumo> BdControlAlmacenInsumos { get; set; }

    public virtual DbSet<BdControlInsumo> BdControlInsumos { get; set; }

    public virtual DbSet<BdControlInsumosDetalle> BdControlInsumosDetalles { get; set; }

    public virtual DbSet<BdControlInsumosEnvio> BdControlInsumosEnvios { get; set; }

    public virtual DbSet<BdControlInsumosPaso> BdControlInsumosPasos { get; set; }

    public virtual DbSet<BdControlKitTecnico> BdControlKitTecnicos { get; set; }

    public virtual DbSet<BdControlMasivoDevolucione> BdControlMasivoDevoluciones { get; set; }

    public virtual DbSet<BdControlRestriccionProsa> BdControlRestriccionProsas { get; set; }

    public virtual DbSet<BdCostoRefaccione> BdCostoRefacciones { get; set; }

    public virtual DbSet<BdCostoViatico> BdCostoViaticos { get; set; }

    public virtual DbSet<BdCostoViaticosVistum> BdCostoViaticosVista { get; set; }

    public virtual DbSet<BdCotizaciones3m> BdCotizaciones3ms { get; set; }

    public virtual DbSet<BdCotizaciones3mDet> BdCotizaciones3mDets { get; set; }

    public virtual DbSet<BdCpAsignacionAutomatica> BdCpAsignacionAutomaticas { get; set; }

    public virtual DbSet<BdCuentasBancaria> BdCuentasBancarias { get; set; }

    public virtual DbSet<BdCurso> BdCursos { get; set; }

    public virtual DbSet<BdCursosAsignado> BdCursosAsignados { get; set; }

    public virtual DbSet<BdDatosCierresAplicacion> BdDatosCierresAplicacions { get; set; }

    public virtual DbSet<BdDatosEnvioSalesforce> BdDatosEnvioSalesforces { get; set; }

    public virtual DbSet<BdDatosListaMailjet> BdDatosListaMailjets { get; set; }

    public virtual DbSet<BdDatosPreodtSalesforce> BdDatosPreodtSalesforces { get; set; }

    public virtual DbSet<BdDbBackup> BdDbBackups { get; set; }

    public virtual DbSet<BdDevolucione> BdDevoluciones { get; set; }

    public virtual DbSet<BdDireccione> BdDirecciones { get; set; }

    public virtual DbSet<BdDireccionesRelacione> BdDireccionesRelaciones { get; set; }

    public virtual DbSet<BdDirectorioTelefonicoAr> BdDirectorioTelefonicoArs { get; set; }

    public virtual DbSet<BdDomiPrueba> BdDomiPruebas { get; set; }

    public virtual DbSet<BdDownloadControl> BdDownloadControls { get; set; }

    public virtual DbSet<BdElavonDispatch> BdElavonDispatches { get; set; }

    public virtual DbSet<BdElavonRecovery> BdElavonRecoveries { get; set; }

    public virtual DbSet<BdEmail> BdEmails { get; set; }

    public virtual DbSet<BdEmails2> BdEmails2s { get; set; }

    public virtual DbSet<BdEnvio> BdEnvios { get; set; }

    public virtual DbSet<BdEnvioDoctosDocto> BdEnvioDoctosDoctos { get; set; }

    public virtual DbSet<BdEnvioElavon> BdEnvioElavons { get; set; }

    public virtual DbSet<BdEnvioInsumo> BdEnvioInsumos { get; set; }

    public virtual DbSet<BdEnvioSim> BdEnvioSims { get; set; }

    public virtual DbSet<BdEnvioUnidad> BdEnvioUnidads { get; set; }

    public virtual DbSet<BdEnvioUnidadPaso> BdEnvioUnidadPasos { get; set; }

    public virtual DbSet<BdEnviosConsolidado> BdEnviosConsolidados { get; set; }

    public virtual DbSet<BdEnviosDocto> BdEnviosDoctos { get; set; }

    public virtual DbSet<BdEnviosEmail> BdEnviosEmails { get; set; }

    public virtual DbSet<BdEnviosEmailsDeployment> BdEnviosEmailsDeployments { get; set; }

    public virtual DbSet<BdEnviosProsaAbc> BdEnviosProsaAbcs { get; set; }

    public virtual DbSet<BdEnviosProsaAbcLog> BdEnviosProsaAbcLogs { get; set; }

    public virtual DbSet<BdEnviosSalesforceBusquedum> BdEnviosSalesforceBusqueda { get; set; }

    public virtual DbSet<BdEnviosServicioMensajeriasPrecio> BdEnviosServicioMensajeriasPrecios { get; set; }

    public virtual DbSet<BdEquivaleciasModelo> BdEquivaleciasModelos { get; set; }

    public virtual DbSet<BdEquivalenciaEstado> BdEquivalenciaEstados { get; set; }

    public virtual DbSet<BdErrorAsiganacionAutomaticaCp> BdErrorAsiganacionAutomaticaCps { get; set; }

    public virtual DbSet<BdErrorMasivoConectividadAplicativo> BdErrorMasivoConectividadAplicativos { get; set; }

    public virtual DbSet<BdErrorUnidadesDaniada> BdErrorUnidadesDaniadas { get; set; }

    public virtual DbSet<BdErroresCambioModelosMasivo> BdErroresCambioModelosMasivos { get; set; }

    public virtual DbSet<BdErroresCambioNoSerieActualNuevo> BdErroresCambioNoSerieActualNuevos { get; set; }

    public virtual DbSet<BdErroresMasivo> BdErroresMasivos { get; set; }

    public virtual DbSet<BdEspecificacionCausaRechazo> BdEspecificacionCausaRechazos { get; set; }

    public virtual DbSet<BdEspecificacionTipoFalla> BdEspecificacionTipoFallas { get; set; }

    public virtual DbSet<BdEtiquetaInformacionUnidadCliente> BdEtiquetaInformacionUnidadClientes { get; set; }

    public virtual DbSet<BdExecutiveOnBase> BdExecutiveOnBases { get; set; }

    public virtual DbSet<BdExistenciasConsumiblesTecnico> BdExistenciasConsumiblesTecnicos { get; set; }

    public virtual DbSet<BdExitoLayoutLog> BdExitoLayoutLogs { get; set; }

    public virtual DbSet<BdExtravioPorMensajeriaCargaMasivaPdf> BdExtravioPorMensajeriaCargaMasivaPdfs { get; set; }

    public virtual DbSet<BdExtravioPorMensajeriaCargaPdf> BdExtravioPorMensajeriaCargaPdfs { get; set; }

    public virtual DbSet<BdFallaConFallaEncontradum> BdFallaConFallaEncontrada { get; set; }

    public virtual DbSet<BdFallaEspecificaTipoFalla> BdFallaEspecificaTipoFallas { get; set; }

    public virtual DbSet<BdFallasSantander> BdFallasSantanders { get; set; }

    public virtual DbSet<BdFallasTecnicosReingenierium> BdFallasTecnicosReingenieria { get; set; }

    public virtual DbSet<BdFestivo> BdFestivos { get; set; }

    public virtual DbSet<BdFotoAr> BdFotoArs { get; set; }

    public virtual DbSet<BdGarantiaAlmacen> BdGarantiaAlmacens { get; set; }

    public virtual DbSet<BdGastosOperacion> BdGastosOperacions { get; set; }

    public virtual DbSet<BdGruposCliente> BdGruposClientes { get; set; }

    public virtual DbSet<BdHistoricoPassword> BdHistoricoPasswords { get; set; }

    public virtual DbSet<BdHorarioHorasMe> BdHorarioHorasMes { get; set; }

    public virtual DbSet<BdHorarioWeekhour> BdHorarioWeekhours { get; set; }

    public virtual DbSet<BdIatum> BdIata { get; set; }

    public virtual DbSet<BdIguala> BdIgualas { get; set; }

    public virtual DbSet<BdIgualasAltum> BdIgualasAlta { get; set; }

    public virtual DbSet<BdInfoErroresCargaMasiva> BdInfoErroresCargaMasivas { get; set; }

    public virtual DbSet<BdInformacionUnidadAr> BdInformacionUnidadArs { get; set; }

    public virtual DbSet<BdIngenieroAsignacion> BdIngenieroAsignacions { get; set; }

    public virtual DbSet<BdIngenieroAsignacion2> BdIngenieroAsignacion2s { get; set; }

    public virtual DbSet<BdIngreso> BdIngresos { get; set; }

    public virtual DbSet<BdIngresoArchivoInsumo> BdIngresoArchivoInsumos { get; set; }

    public virtual DbSet<BdIngresoArchivosAlmacen> BdIngresoArchivosAlmacens { get; set; }

    public virtual DbSet<BdIngresoArchivosAsignacion> BdIngresoArchivosAsignacions { get; set; }

    public virtual DbSet<BdIngresoArchivosExito> BdIngresoArchivosExitos { get; set; }

    public virtual DbSet<BdIngresoArchivosRechazo> BdIngresoArchivosRechazos { get; set; }

    public virtual DbSet<BdIngresoMovInventario> BdIngresoMovInventarios { get; set; }

    public virtual DbSet<BdIngresoMovInventariosLog> BdIngresoMovInventariosLogs { get; set; }

    public virtual DbSet<BdIngresosVistum> BdIngresosVista { get; set; }

    public virtual DbSet<BdInstalacionRetirosMasivo> BdInstalacionRetirosMasivos { get; set; }

    public virtual DbSet<BdInstalacione> BdInstalaciones { get; set; }

    public virtual DbSet<BdInsumo> BdInsumos { get; set; }

    public virtual DbSet<BdInsumosAltum> BdInsumosAlta { get; set; }

    public virtual DbSet<BdIntegrationRequestsOnBase> BdIntegrationRequestsOnBases { get; set; }

    public virtual DbSet<BdInvInsumosPaso> BdInvInsumosPasos { get; set; }

    public virtual DbSet<BdInvUnidadesPaso> BdInvUnidadesPasos { get; set; }

    public virtual DbSet<BdItemsSolicitudAlmacen> BdItemsSolicitudAlmacens { get; set; }

    public virtual DbSet<BdKitInsumo> BdKitInsumos { get; set; }

    public virtual DbSet<BdLegalRepresentativeOnBase> BdLegalRepresentativeOnBases { get; set; }

    public virtual DbSet<BdLicenciasReporteElavonSantander> BdLicenciasReporteElavonSantanders { get; set; }

    public virtual DbSet<BdLoadFilterDhl> BdLoadFilterDhls { get; set; }

    public virtual DbSet<BdLoadFilterEstafetum> BdLoadFilterEstafeta { get; set; }

    public virtual DbSet<BdLogCargaMasivaTablaTotalProcesado> BdLogCargaMasivaTablaTotalProcesados { get; set; }

    public virtual DbSet<BdLogCp> BdLogCps { get; set; }

    public virtual DbSet<BdLogErroresEmailSolicitude> BdLogErroresEmailSolicitudes { get; set; }

    public virtual DbSet<BdLogInboxSalesforce> BdLogInboxSalesforces { get; set; }

    public virtual DbSet<BdLogUsuariosAsignacion> BdLogUsuariosAsignacions { get; set; }

    public virtual DbSet<BdLoginUser> BdLoginUsers { get; set; }

    public virtual DbSet<BdLogro> BdLogros { get; set; }

    public virtual DbSet<BdLogroBlog> BdLogroBlogs { get; set; }

    public virtual DbSet<BdLogrosResponsable> BdLogrosResponsables { get; set; }

    public virtual DbSet<BdLogsCargaMasivaTablaErrore> BdLogsCargaMasivaTablaErrores { get; set; }

    public virtual DbSet<BdLogsCargaMasivaTablaErroresCorreo> BdLogsCargaMasivaTablaErroresCorreos { get; set; }

    public virtual DbSet<BdLogsCargaMasivaTablaErroresCorreo2> BdLogsCargaMasivaTablaErroresCorreo2s { get; set; }

    public virtual DbSet<BdLogsCargaMasivaTablaProcesadosCorreo> BdLogsCargaMasivaTablaProcesadosCorreos { get; set; }

    public virtual DbSet<BdMailControlW> BdMailControlWs { get; set; }

    public virtual DbSet<BdMailEmissionControl> BdMailEmissionControls { get; set; }

    public virtual DbSet<BdMailjetMessage> BdMailjetMessages { get; set; }

    public virtual DbSet<BdMasivoReparacion> BdMasivoReparacions { get; set; }

    public virtual DbSet<BdMcSim> BdMcSims { get; set; }

    public virtual DbSet<BdMcViaGeozonaCoordenada> BdMcViaGeozonaCoordenadas { get; set; }

    public virtual DbSet<BdMcViaGeozonaCoordenadasZona> BdMcViaGeozonaCoordenadasZonas { get; set; }

    public virtual DbSet<BdMcViaGeozonaTecnico> BdMcViaGeozonaTecnicos { get; set; }

    public virtual DbSet<BdMensajeriaCosto> BdMensajeriaCostos { get; set; }

    public virtual DbSet<BdMensajeriaCpZona> BdMensajeriaCpZonas { get; set; }

    public virtual DbSet<BdMenu> BdMenus { get; set; }

    public virtual DbSet<BdMenuTipoUsuario> BdMenuTipoUsuarios { get; set; }

    public virtual DbSet<BdMerchantOnBase> BdMerchantOnBases { get; set; }

    public virtual DbSet<BdModeloAccesorio> BdModeloAccesorios { get; set; }

    public virtual DbSet<BdModeloCategorium> BdModeloCategoria { get; set; }

    public virtual DbSet<BdModeloCelular> BdModeloCelulars { get; set; }

    public virtual DbSet<BdModeloConectividad> BdModeloConectividads { get; set; }

    public virtual DbSet<BdModeloInsumo> BdModeloInsumos { get; set; }

    public virtual DbSet<BdModeloLlave> BdModeloLlaves { get; set; }

    public virtual DbSet<BdModeloModulo> BdModeloModulos { get; set; }

    public virtual DbSet<BdModeloPrecio> BdModeloPrecios { get; set; }

    public virtual DbSet<BdModeloServicio> BdModeloServicios { get; set; }

    public virtual DbSet<BdModeloSku> BdModeloSkus { get; set; }

    public virtual DbSet<BdModeloSoftware> BdModeloSoftwares { get; set; }

    public virtual DbSet<BdModeloSparePart> BdModeloSpareParts { get; set; }

    public virtual DbSet<BdModeloSustituto> BdModeloSustitutos { get; set; }

    public virtual DbSet<BdModelosGetnet> BdModelosGetnets { get; set; }

    public virtual DbSet<BdModelosHomologadosSantander> BdModelosHomologadosSantanders { get; set; }

    public virtual DbSet<BdModelosModificado> BdModelosModificados { get; set; }

    public virtual DbSet<BdMovInventarioValGetnet> BdMovInventarioValGetnets { get; set; }

    public virtual DbSet<BdMultivaDiarioTmp> BdMultivaDiarioTmps { get; set; }

    public virtual DbSet<BdNegocio> BdNegocios { get; set; }

    public virtual DbSet<BdNegocioHorasMe> BdNegocioHorasMes { get; set; }

    public virtual DbSet<BdNegocios2> BdNegocios2s { get; set; }

    public virtual DbSet<BdNegociosAltum> BdNegociosAlta { get; set; }

    public virtual DbSet<BdNegociosMigradosLog> BdNegociosMigradosLogs { get; set; }

    public virtual DbSet<BdNegociosNuevosNotificacion> BdNegociosNuevosNotificacions { get; set; }

    public virtual DbSet<BdNegociosOtrosClientesPaso> BdNegociosOtrosClientesPasos { get; set; }

    public virtual DbSet<BdNegociosPaso> BdNegociosPasos { get; set; }

    public virtual DbSet<BdNegociosPaso2> BdNegociosPaso2s { get; set; }

    public virtual DbSet<BdNegociosServiciosDoble> BdNegociosServiciosDobles { get; set; }

    public virtual DbSet<BdNivelReparacionProveedor> BdNivelReparacionProveedors { get; set; }

    public virtual DbSet<BdNomina> BdNominas { get; set; }

    public virtual DbSet<BdNominaDetalle> BdNominaDetalles { get; set; }

    public virtual DbSet<BdNotificacionesOdt> BdNotificacionesOdts { get; set; }

    public virtual DbSet<BdObservacionesCambioUnidad> BdObservacionesCambioUnidads { get; set; }

    public virtual DbSet<BdOnbaseInbox> BdOnbaseInboxes { get; set; }

    public virtual DbSet<BdOnbaseInboxConfirmacion> BdOnbaseInboxConfirmacions { get; set; }

    public virtual DbSet<BdOpcionesReingenieriaTipoUsuario> BdOpcionesReingenieriaTipoUsuarios { get; set; }

    public virtual DbSet<BdOpcionesReingenierium> BdOpcionesReingenieria { get; set; }

    public virtual DbSet<BdOrdenCompra> BdOrdenCompras { get; set; }

    public virtual DbSet<BdOrdenCompraInsumo> BdOrdenCompraInsumos { get; set; }

    public virtual DbSet<BdOrdenCompraNoFactura> BdOrdenCompraNoFacturas { get; set; }

    public virtual DbSet<BdOrdenCompraUnidade> BdOrdenCompraUnidades { get; set; }

    public virtual DbSet<BdOrdenCompraVendedor> BdOrdenCompraVendedors { get; set; }

    public virtual DbSet<BdOrdenesCompraEvidencium> BdOrdenesCompraEvidencia { get; set; }

    public virtual DbSet<BdPaseListaTecnico> BdPaseListaTecnicos { get; set; }

    public virtual DbSet<BdPasoArNumber> BdPasoArNumbers { get; set; }

    public virtual DbSet<BdPasoCambioStatusUnidadMasivo> BdPasoCambioStatusUnidadMasivos { get; set; }

    public virtual DbSet<BdPasoCancelacionMasivaOdt> BdPasoCancelacionMasivaOdts { get; set; }

    public virtual DbSet<BdPasoComentarioOdt> BdPasoComentarioOdts { get; set; }

    public virtual DbSet<BdPasoConsolidado> BdPasoConsolidados { get; set; }

    public virtual DbSet<BdPasoTpvReporteSantanderDiario> BdPasoTpvReporteSantanderDiarios { get; set; }

    public virtual DbSet<BdPasoTpvReporteSantanderDiarioFabricante> BdPasoTpvReporteSantanderDiarioFabricantes { get; set; }

    public virtual DbSet<BdPasoTpvReporteSantanderDiarioInstalado> BdPasoTpvReporteSantanderDiarioInstalados { get; set; }

    public virtual DbSet<BdPasoTpvReporteSantanderDiarioStock> BdPasoTpvReporteSantanderDiarioStocks { get; set; }

    public virtual DbSet<BdPeriodoUsuarioInactivo> BdPeriodoUsuarioInactivos { get; set; }

    public virtual DbSet<BdPestanasBitacoraAr> BdPestanasBitacoraArs { get; set; }

    public virtual DbSet<BdPhonesOnBase> BdPhonesOnBases { get; set; }

    public virtual DbSet<BdPlazaCp> BdPlazaCps { get; set; }

    public virtual DbSet<BdPreciosLicenciaAndroid> BdPreciosLicenciaAndroids { get; set; }

    public virtual DbSet<BdPreciosLicenciaWeb> BdPreciosLicenciaWebs { get; set; }

    public virtual DbSet<BdPresupuesto> BdPresupuestos { get; set; }

    public virtual DbSet<BdPresupuestosEjercido> BdPresupuestosEjercidos { get; set; }

    public virtual DbSet<BdPresupuestosRegional> BdPresupuestosRegionals { get; set; }

    public virtual DbSet<BdProactiva> BdProactivas { get; set; }

    public virtual DbSet<BdProductoStatusAr> BdProductoStatusArs { get; set; }

    public virtual DbSet<BdProsaRespuestaAbc> BdProsaRespuestaAbcs { get; set; }

    public virtual DbSet<BdPrueba> BdPruebas { get; set; }

    public virtual DbSet<BdPruebaApi> BdPruebaApis { get; set; }

    public virtual DbSet<BdPruebaNoSeries> BdPruebaNoSeries { get; set; }

    public virtual DbSet<BdPruebaSp> BdPruebaSps { get; set; }

    public virtual DbSet<BdPruebasUnitaria> BdPruebasUnitarias { get; set; }

    public virtual DbSet<BdQuestsCallcenter> BdQuestsCallcenters { get; set; }

    public virtual DbSet<BdRecepcionElavon> BdRecepcionElavons { get; set; }

    public virtual DbSet<BdRecepcionInsumo> BdRecepcionInsumos { get; set; }

    public virtual DbSet<BdRecoverPassword> BdRecoverPasswords { get; set; }

    public virtual DbSet<BdReglasAsignacionAutomatica> BdReglasAsignacionAutomaticas { get; set; }

    public virtual DbSet<BdReglasCampanasDeployment> BdReglasCampanasDeployments { get; set; }

    public virtual DbSet<BdReglasCampanasMkt> BdReglasCampanasMkts { get; set; }

    public virtual DbSet<BdReglasModelo> BdReglasModelos { get; set; }

    public virtual DbSet<BdReglasOperativasProsa> BdReglasOperativasProsas { get; set; }

    public virtual DbSet<BdReglasStatusAlmacen> BdReglasStatusAlmacens { get; set; }

    public virtual DbSet<BdReglasStatusAr> BdReglasStatusArs { get; set; }

    public virtual DbSet<BdReingresoSim> BdReingresoSims { get; set; }

    public virtual DbSet<BdReingresoUnidad> BdReingresoUnidads { get; set; }

    public virtual DbSet<BdRelacionFacturaEnvio> BdRelacionFacturaEnvios { get; set; }

    public virtual DbSet<BdReparacionUnidad> BdReparacionUnidads { get; set; }

    public virtual DbSet<BdReparecionesCargaPdf> BdReparecionesCargaPdfs { get; set; }

    public virtual DbSet<BdReporteAuditoriaInsumo> BdReporteAuditoriaInsumos { get; set; }

    public virtual DbSet<BdReporteAuditoriaUnidad> BdReporteAuditoriaUnidads { get; set; }

    public virtual DbSet<BdReporteAuditoriaUnidadTrash> BdReporteAuditoriaUnidadTrashes { get; set; }

    public virtual DbSet<BdReporteCierre> BdReporteCierres { get; set; }

    public virtual DbSet<BdReporteCierreAr> BdReporteCierreArs { get; set; }

    public virtual DbSet<BdReporteMovInventario> BdReporteMovInventarios { get; set; }

    public virtual DbSet<BdReporteTipoUsuario> BdReporteTipoUsuarios { get; set; }

    public virtual DbSet<BdReportesAuditoriaInsumoIngAlm> BdReportesAuditoriaInsumoIngAlms { get; set; }

    public virtual DbSet<BdReportesAuditoriaUnidadIngAlm> BdReportesAuditoriaUnidadIngAlms { get; set; }

    public virtual DbSet<BdResponsableStatus> BdResponsableStatuses { get; set; }

    public virtual DbSet<BdRetiro> BdRetiros { get; set; }

    public virtual DbSet<BdRfcCliente> BdRfcClientes { get; set; }

    public virtual DbSet<BdRfcClientesPaso> BdRfcClientesPasos { get; set; }

    public virtual DbSet<BdSalesforceAbc> BdSalesforceAbcs { get; set; }

    public virtual DbSet<BdSalesforceInbox> BdSalesforceInboxes { get; set; }

    public virtual DbSet<BdSellerOnBase> BdSellerOnBases { get; set; }

    public virtual DbSet<BdServicesSendSupplier> BdServicesSendSuppliers { get; set; }

    public virtual DbSet<BdServicioCausa> BdServicioCausas { get; set; }

    public virtual DbSet<BdServicioCausaRechazoPrecio> BdServicioCausaRechazoPrecios { get; set; }

    public virtual DbSet<BdServicioMovInv> BdServicioMovInvs { get; set; }

    public virtual DbSet<BdServicioSegmento> BdServicioSegmentos { get; set; }

    public virtual DbSet<BdServicioSegmentoTarea> BdServicioSegmentoTareas { get; set; }

    public virtual DbSet<BdServicioSolucion> BdServicioSolucions { get; set; }

    public virtual DbSet<BdServicioSolucionPrecio> BdServicioSolucionPrecios { get; set; }

    public virtual DbSet<BdServicioTipoFalla> BdServicioTipoFallas { get; set; }

    public virtual DbSet<BdServicioWeekhour> BdServicioWeekhours { get; set; }

    public virtual DbSet<BdServiciosFalla> BdServiciosFallas { get; set; }

    public virtual DbSet<BdServiciosFallasProyEspeciale> BdServiciosFallasProyEspeciales { get; set; }

    public virtual DbSet<BdServiciosFallasProyectosSalesforce> BdServiciosFallasProyectosSalesforces { get; set; }

    public virtual DbSet<BdServiciosSantander> BdServiciosSantanders { get; set; }

    public virtual DbSet<BdServiciosTecnicosReingenierium> BdServiciosTecnicosReingenieria { get; set; }

    public virtual DbSet<BdSim> BdSims { get; set; }

    public virtual DbSet<BdSimsAltum> BdSimsAlta { get; set; }

    public virtual DbSet<BdSimsFaltantesEnero> BdSimsFaltantesEneros { get; set; }

    public virtual DbSet<BdSimsTemp> BdSimsTemps { get; set; }

    public virtual DbSet<BdSlaRulesState> BdSlaRulesStates { get; set; }

    public virtual DbSet<BdSoftelPaso> BdSoftelPasos { get; set; }

    public virtual DbSet<BdSolicitudAlmacenComentario> BdSolicitudAlmacenComentarios { get; set; }

    public virtual DbSet<BdSolicitudCorreo> BdSolicitudCorreos { get; set; }

    public virtual DbSet<BdSolicitudCorreoLog> BdSolicitudCorreoLogs { get; set; }

    public virtual DbSet<BdSolicitudCorreoOki> BdSolicitudCorreoOkis { get; set; }

    public virtual DbSet<BdSolicitudRecoleccion> BdSolicitudRecoleccions { get; set; }

    public virtual DbSet<BdSolicitudRecoleccionInsumo> BdSolicitudRecoleccionInsumos { get; set; }

    public virtual DbSet<BdSolicitudRecoleccionModelo> BdSolicitudRecoleccionModelos { get; set; }

    public virtual DbSet<BdSolicitudViaticosConceptosPaso> BdSolicitudViaticosConceptosPasos { get; set; }

    public virtual DbSet<BdSolicitudesAlmacen> BdSolicitudesAlmacens { get; set; }

    public virtual DbSet<BdSolicitudesAlmacenOld> BdSolicitudesAlmacenOlds { get; set; }

    public virtual DbSet<BdSolicitudesDevolucion> BdSolicitudesDevolucions { get; set; }

    public virtual DbSet<BdSolicitudesDevolucionInsumo> BdSolicitudesDevolucionInsumos { get; set; }

    public virtual DbSet<BdSolicitudesDevolucionItem> BdSolicitudesDevolucionItems { get; set; }

    public virtual DbSet<BdSolicitudesDevolucionModelo> BdSolicitudesDevolucionModelos { get; set; }

    public virtual DbSet<BdSolicitudesDevolucionUnidad> BdSolicitudesDevolucionUnidads { get; set; }

    public virtual DbSet<BdSolicitudesViatico> BdSolicitudesViaticos { get; set; }

    public virtual DbSet<BdSolicitudesViaticosConcepto> BdSolicitudesViaticosConceptos { get; set; }

    public virtual DbSet<BdSolicitudesViaticosConceptosTemp> BdSolicitudesViaticosConceptosTemps { get; set; }

    public virtual DbSet<BdSoporteTecnico> BdSoporteTecnicos { get; set; }

    public virtual DbSet<BdSparePartPrecio> BdSparePartPrecios { get; set; }

    public virtual DbSet<BdStatusDoctoTipoResponsablePrefacturacion> BdStatusDoctoTipoResponsablePrefacturacions { get; set; }

    public virtual DbSet<BdStatusTipoUsuario> BdStatusTipoUsuarios { get; set; }

    public virtual DbSet<BdStoreAltaManual> BdStoreAltaManuals { get; set; }

    public virtual DbSet<BdSustitucione> BdSustituciones { get; set; }

    public virtual DbSet<BdTarea> BdTareas { get; set; }

    public virtual DbSet<BdTemoCp> BdTemoCps { get; set; }

    public virtual DbSet<BdTempActualizaTipoPlazaCliente> BdTempActualizaTipoPlazaClientes { get; set; }

    public virtual DbSet<BdTempAfiliacionPrimeraOdt> BdTempAfiliacionPrimeraOdts { get; set; }

    public virtual DbSet<BdTempCambioSlaOdt> BdTempCambioSlaOdts { get; set; }

    public virtual DbSet<BdTempCorreccion> BdTempCorreccions { get; set; }

    public virtual DbSet<BdTempServicioCierrePdum> BdTempServicioCierrePda { get; set; }

    public virtual DbSet<BdTemplatesDeploymentMailjet> BdTemplatesDeploymentMailjets { get; set; }

    public virtual DbSet<BdTemplatesMailjet> BdTemplatesMailjets { get; set; }

    public virtual DbSet<BdTerminale> BdTerminales { get; set; }

    public virtual DbSet<BdTestigo> BdTestigos { get; set; }

    public virtual DbSet<BdTipoPlan> BdTipoPlans { get; set; }

    public virtual DbSet<BdTipoPlazaClienteCp> BdTipoPlazaClienteCps { get; set; }

    public virtual DbSet<BdTipoServicioProducto> BdTipoServicioProductos { get; set; }

    public virtual DbSet<BdTipoUsuariosMenu> BdTipoUsuariosMenus { get; set; }

    public virtual DbSet<BdTiposDeServiciosCosto> BdTiposDeServiciosCostos { get; set; }

    public virtual DbSet<BdTokensSalesforce> BdTokensSalesforces { get; set; }

    public virtual DbSet<BdTpvsAltum> BdTpvsAlta { get; set; }

    public virtual DbSet<BdTrackingLog> BdTrackingLogs { get; set; }

    public virtual DbSet<BdTransaccione> BdTransacciones { get; set; }

    public virtual DbSet<BdTransaccionesPaso> BdTransaccionesPasos { get; set; }

    public virtual DbSet<BdTransaccionesRespaldo> BdTransaccionesRespaldos { get; set; }

    public virtual DbSet<BdTransferencia> BdTransferencias { get; set; }

    public virtual DbSet<BdTransferenciasPaso> BdTransferenciasPasos { get; set; }

    public virtual DbSet<BdTransferenciasUnidad> BdTransferenciasUnidads { get; set; }

    public virtual DbSet<BdUnidadAccesorio> BdUnidadAccesorios { get; set; }

    public virtual DbSet<BdUnidade> BdUnidades { get; set; }

    public virtual DbSet<BdUnidadesAltum> BdUnidadesAlta { get; set; }

    public virtual DbSet<BdUnidadesNoReportada> BdUnidadesNoReportadas { get; set; }

    public virtual DbSet<BdUnidadesPasoTest> BdUnidadesPasoTests { get; set; }

    public virtual DbSet<BdUnidadesPorRecibirAlmacen> BdUnidadesPorRecibirAlmacens { get; set; }

    public virtual DbSet<BdUnidadesPorRecibirAlmacen2> BdUnidadesPorRecibirAlmacen2s { get; set; }

    public virtual DbSet<BdUnidadesProcesadasAlmacen> BdUnidadesProcesadasAlmacens { get; set; }

    public virtual DbSet<BdUnidadesRefaccionesAlmacen> BdUnidadesRefaccionesAlmacens { get; set; }

    public virtual DbSet<BdUnidadesRefaccionesAltum> BdUnidadesRefaccionesAlta { get; set; }

    public virtual DbSet<BdUnidadesReportada> BdUnidadesReportadas { get; set; }

    public virtual DbSet<BdUnidadesTemp> BdUnidadesTemps { get; set; }

    public virtual DbSet<BdUniversoSim> BdUniversoSims { get; set; }

    public virtual DbSet<BdUniversoUnidade> BdUniversoUnidades { get; set; }

    public virtual DbSet<BdUpdateIsContractNegocio> BdUpdateIsContractNegocios { get; set; }

    public virtual DbSet<BdUploadDhl> BdUploadDhls { get; set; }

    public virtual DbSet<BdUploadEstafetum> BdUploadEstafeta { get; set; }

    public virtual DbSet<BdUploadedFilesSendSf> BdUploadedFilesSendSfs { get; set; }

    public virtual DbSet<BdUsuarioAlmacen> BdUsuarioAlmacens { get; set; }

    public virtual DbSet<BdUsuarioArchivosVario> BdUsuarioArchivosVarios { get; set; }

    public virtual DbSet<BdUsuarioCelular> BdUsuarioCelulars { get; set; }

    public virtual DbSet<BdUsuarioCliente> BdUsuarioClientes { get; set; }

    public virtual DbSet<BdUsuarioModuloNotificacione> BdUsuarioModuloNotificaciones { get; set; }

    public virtual DbSet<BdUsuarioProducto> BdUsuarioProductos { get; set; }

    public virtual DbSet<BdUsuarioStatusUnidad> BdUsuarioStatusUnidads { get; set; }

    public virtual DbSet<BdUsuarioTecnico> BdUsuarioTecnicos { get; set; }

    public virtual DbSet<BdUsuarioVistaEscalamiento> BdUsuarioVistaEscalamientos { get; set; }

    public virtual DbSet<BdUsuarioZona> BdUsuarioZonas { get; set; }

    public virtual DbSet<BdUsuariosEnviarEmail> BdUsuariosEnviarEmails { get; set; }

    public virtual DbSet<BdUsuariosEnviorEmail2> BdUsuariosEnviorEmail2s { get; set; }

    public virtual DbSet<BdUsuariosNotificacionesAltum> BdUsuariosNotificacionesAlta { get; set; }

    public virtual DbSet<BdVacacione> BdVacaciones { get; set; }

    public virtual DbSet<BdValMovimientosInvServicioFalla> BdValMovimientosInvServicioFallas { get; set; }

    public virtual DbSet<BdVistaEscalamientoStatusAr> BdVistaEscalamientoStatusArs { get; set; }

    public virtual DbSet<BdWincorCliente> BdWincorClientes { get; set; }

    public virtual DbSet<BdWincorClientesServicio> BdWincorClientesServicios { get; set; }

    public virtual DbSet<BdWincorServicio> BdWincorServicios { get; set; }

    public virtual DbSet<BdWorkload> BdWorkloads { get; set; }

    public virtual DbSet<BdWsBancomer> BdWsBancomers { get; set; }

    public virtual DbSet<BdZonaCp> BdZonaCps { get; set; }

    public virtual DbSet<BdZonaDar> BdZonaDars { get; set; }

    public virtual DbSet<BdZonasCp> BdZonasCps { get; set; }

    public virtual DbSet<BdmassiveLayoutLog> BdmassiveLayoutLogs { get; set; }

    public virtual DbSet<BitacoraAActualizar> BitacoraAActualizars { get; set; }

    public virtual DbSet<BitacoraError> BitacoraErrors { get; set; }

    public virtual DbSet<BitacoraMensajeriaCp> BitacoraMensajeriaCps { get; set; }

    public virtual DbSet<BitacoraSolucionErroresLeberacion> BitacoraSolucionErroresLeberacions { get; set; }

    public virtual DbSet<BorrarActualizarUnidad> BorrarActualizarUnidads { get; set; }

    public virtual DbSet<BorrarInsertUnidadCarga> BorrarInsertUnidadCargas { get; set; }

    public virtual DbSet<BorrarInsertarUnidade> BorrarInsertarUnidades { get; set; }

    public virtual DbSet<BorrarReporte2020> BorrarReporte2020s { get; set; }

    public virtual DbSet<BorrarReporte2021> BorrarReporte2021s { get; set; }

    public virtual DbSet<BorrarReporte20222023> BorrarReporte20222023s { get; set; }

    public virtual DbSet<BuscaOdtRpR> BuscaOdtRpRs { get; set; }

    public virtual DbSet<CAccesorio> CAccesorios { get; set; }

    public virtual DbSet<CActasAdmin> CActasAdmins { get; set; }

    public virtual DbSet<CAlmacene> CAlmacenes { get; set; }

    public virtual DbSet<CArchivo> CArchivos { get; set; }

    public virtual DbSet<CArea> CAreas { get; set; }

    public virtual DbSet<CBanco> CBancos { get; set; }

    public virtual DbSet<CBbvaMicroformasServicio> CBbvaMicroformasServicios { get; set; }

    public virtual DbSet<CBitacoraAgendadosComentario> CBitacoraAgendadosComentarios { get; set; }

    public virtual DbSet<CCalifJuntum> CCalifJunta { get; set; }

    public virtual DbSet<CCanale> CCanales { get; set; }

    public virtual DbSet<CCarrier> CCarriers { get; set; }

    public virtual DbSet<CCategoriaValidaDispositivo> CCategoriaValidaDispositivos { get; set; }

    public virtual DbSet<CCategorium> CCategoria { get; set; }

    public virtual DbSet<CCausa> CCausas { get; set; }

    public virtual DbSet<CCausaCancelacion> CCausaCancelacions { get; set; }

    public virtual DbSet<CCausaCancelacionSolicitudAlmacen> CCausaCancelacionSolicitudAlmacens { get; set; }

    public virtual DbSet<CCausaRetiro> CCausaRetiros { get; set; }

    public virtual DbSet<CCausasRechazo> CCausasRechazos { get; set; }

    public virtual DbSet<CCausasRechazoDefinitivoDoctoPrefacturacion> CCausasRechazoDefinitivoDoctoPrefacturacions { get; set; }

    public virtual DbSet<CCausasRechazoSegmento> CCausasRechazoSegmentos { get; set; }

    public virtual DbSet<CChofere> CChoferes { get; set; }

    public virtual DbSet<CCliente> CClientes { get; set; }

    public virtual DbSet<CClientesPmo> CClientesPmos { get; set; }

    public virtual DbSet<CCodigosIntervencionNivel0> CCodigosIntervencionNivel0s { get; set; }

    public virtual DbSet<CCodigosIntervencionNivel1> CCodigosIntervencionNivel1s { get; set; }

    public virtual DbSet<CCodigosIntervencionNivel2> CCodigosIntervencionNivel2s { get; set; }

    public virtual DbSet<CConceptoAr> CConceptoArs { get; set; }

    public virtual DbSet<CConceptosPmo> CConceptosPmos { get; set; }

    public virtual DbSet<CConectividad> CConectividads { get; set; }

    public virtual DbSet<CConectividadSantanderReporte> CConectividadSantanderReportes { get; set; }

    public virtual DbSet<CConsecutivo3m> CConsecutivo3ms { get; set; }

    public virtual DbSet<CConsumible> CConsumibles { get; set; }

    public virtual DbSet<CCpDarBbva94> CCpDarBbva94s { get; set; }

    public virtual DbSet<CCpProsa> CCpProsas { get; set; }

    public virtual DbSet<CDatosTerminalProsaAbc> CDatosTerminalProsaAbcs { get; set; }

    public virtual DbSet<CDatosTerminalProsaAbcConfSalidum> CDatosTerminalProsaAbcConfSalida { get; set; }

    public virtual DbSet<CDescripcionTrabajo> CDescripcionTrabajos { get; set; }

    public virtual DbSet<CDesviacione> CDesviaciones { get; set; }

    public virtual DbSet<CDireccione> CDirecciones { get; set; }

    public virtual DbSet<CDocsTir> CDocsTirs { get; set; }

    public virtual DbSet<CDominiosEmail> CDominiosEmails { get; set; }

    public virtual DbSet<CElavonSantanderServicio> CElavonSantanderServicios { get; set; }

    public virtual DbSet<CEmisoresEmail> CEmisoresEmails { get; set; }

    public virtual DbSet<CEquipoCliente> CEquipoClientes { get; set; }

    public virtual DbSet<CEstadosDarBbva94> CEstadosDarBbva94s { get; set; }

    public virtual DbSet<CEtiquetaInformacionCierre> CEtiquetaInformacionCierres { get; set; }

    public virtual DbSet<CEtiquetaInformacionRechazo> CEtiquetaInformacionRechazos { get; set; }

    public virtual DbSet<CEtiquetaInformacionUnidad> CEtiquetaInformacionUnidads { get; set; }

    public virtual DbSet<CFalla> CFallas { get; set; }

    public virtual DbSet<CFallasEncontrada> CFallasEncontradas { get; set; }

    public virtual DbSet<CGrupo> CGrupos { get; set; }

    public virtual DbSet<CHora> CHoras { get; set; }

    public virtual DbSet<CHorario> CHorarios { get; set; }

    public virtual DbSet<CHorariosPersonal> CHorariosPersonals { get; set; }

    public virtual DbSet<CInsumo> CInsumos { get; set; }

    public virtual DbSet<CInsumosAltum> CInsumosAlta { get; set; }

    public virtual DbSet<CInsumosOld> CInsumosOlds { get; set; }

    public virtual DbSet<CLayout> CLayouts { get; set; }

    public virtual DbSet<CLlafe> CLlaves { get; set; }

    public virtual DbSet<CLogro> CLogros { get; set; }

    public virtual DbSet<CMarca> CMarcas { get; set; }

    public virtual DbSet<CMcAutomovile> CMcAutomoviles { get; set; }

    public virtual DbSet<CMcBoleto> CMcBoletos { get; set; }

    public virtual DbSet<CMcBoletosRuta> CMcBoletosRutas { get; set; }

    public virtual DbSet<CMcCaseta> CMcCasetas { get; set; }

    public virtual DbSet<CMcCasetasRuta> CMcCasetasRutas { get; set; }

    public virtual DbSet<CMcEstacionEvaluar> CMcEstacionEvaluars { get; set; }

    public virtual DbSet<CMcEstacionEvaluarRegla> CMcEstacionEvaluarReglas { get; set; }

    public virtual DbSet<CMcMedioTransporte> CMcMedioTransportes { get; set; }

    public virtual DbSet<CMcRuta> CMcRutas { get; set; }

    public virtual DbSet<CMcTopesMaximo> CMcTopesMaximos { get; set; }

    public virtual DbSet<CMcViaticosMotivo> CMcViaticosMotivos { get; set; }

    public virtual DbSet<CMcViaticosRazonesCancelacion> CMcViaticosRazonesCancelacions { get; set; }

    public virtual DbSet<CMenu> CMenus { get; set; }

    public virtual DbSet<CMenuCopium> CMenuCopia { get; set; }

    public virtual DbSet<CMinuto> CMinutos { get; set; }

    public virtual DbSet<CModelo> CModelos { get; set; }

    public virtual DbSet<CModelosValidosEglobal> CModelosValidosEglobals { get; set; }

    public virtual DbSet<CMoneda> CMonedas { get; set; }

    public virtual DbSet<CMovInv> CMovInvs { get; set; }

    public virtual DbSet<CMovimientosInv> CMovimientosInvs { get; set; }

    public virtual DbSet<CMovmientosInvArchivo> CMovmientosInvArchivos { get; set; }

    public virtual DbSet<CNivelReparacion> CNivelReparacions { get; set; }

    public virtual DbSet<CNombreArchivoAbc> CNombreArchivoAbcs { get; set; }

    public virtual DbSet<CNombreArchivoAbcRecibido> CNombreArchivoAbcRecibidos { get; set; }

    public virtual DbSet<CNombreCurso> CNombreCursos { get; set; }

    public virtual DbSet<CNombreJuntum> CNombreJunta { get; set; }

    public virtual DbSet<CNotificacionesEmail> CNotificacionesEmails { get; set; }

    public virtual DbSet<COperadore> COperadores { get; set; }

    public virtual DbSet<COtrosCliente> COtrosClientes { get; set; }

    public virtual DbSet<CPlantillasDeployment> CPlantillasDeployments { get; set; }

    public virtual DbSet<CPlantillasEmail> CPlantillasEmails { get; set; }

    public virtual DbSet<CPlaza> CPlazas { get; set; }

    public virtual DbSet<CPrioridade> CPrioridades { get; set; }

    public virtual DbSet<CProducto> CProductos { get; set; }

    public virtual DbSet<CProductoDhl> CProductoDhls { get; set; }

    public virtual DbSet<CProductosNegocio> CProductosNegocios { get; set; }

    public virtual DbSet<CProductosPmo> CProductosPmos { get; set; }

    public virtual DbSet<CProsaAbc> CProsaAbcs { get; set; }

    public virtual DbSet<CProveedoresUsuario> CProveedoresUsuarios { get; set; }

    public virtual DbSet<CProyecto> CProyectos { get; set; }

    public virtual DbSet<CProyectosEspeciale> CProyectosEspeciales { get; set; }

    public virtual DbSet<CProyectosPmo> CProyectosPmos { get; set; }

    public virtual DbSet<CPrueba> CPruebas { get; set; }

    public virtual DbSet<CPuesto> CPuestos { get; set; }

    public virtual DbSet<CRazonDevolucion> CRazonDevolucions { get; set; }

    public virtual DbSet<CReasignacionTecnicoStatusArProveedor> CReasignacionTecnicoStatusArProveedors { get; set; }

    public virtual DbSet<CRegione> CRegiones { get; set; }

    public virtual DbSet<CRegionesPmo> CRegionesPmos { get; set; }

    public virtual DbSet<CReglaCancelacionServiciosFalla> CReglaCancelacionServiciosFallas { get; set; }

    public virtual DbSet<CReglasReplicasServicio> CReglasReplicasServicios { get; set; }

    public virtual DbSet<CReglasReplicasTipoUsuario> CReglasReplicasTipoUsuarios { get; set; }

    public virtual DbSet<CReparacione> CReparaciones { get; set; }

    public virtual DbSet<CReporteMovInventario> CReporteMovInventarios { get; set; }

    public virtual DbSet<CReportesRetipificado> CReportesRetipificados { get; set; }

    public virtual DbSet<CResponsable> CResponsables { get; set; }

    public virtual DbSet<CResponsableCancelacionProgramado> CResponsableCancelacionProgramados { get; set; }

    public virtual DbSet<CResponsablesAgendado> CResponsablesAgendados { get; set; }

    public virtual DbSet<CSedeCurso> CSedeCursos { get; set; }

    public virtual DbSet<CSegmento> CSegmentos { get; set; }

    public virtual DbSet<CServicio> CServicios { get; set; }

    public virtual DbSet<CServicioMensajerium> CServicioMensajeria { get; set; }

    public virtual DbSet<CServicioRetiroSimsSantander> CServicioRetiroSimsSantanders { get; set; }

    public virtual DbSet<CServiciosBancomer> CServiciosBancomers { get; set; }

    public virtual DbSet<CServiciosDoble> CServiciosDobles { get; set; }

    public virtual DbSet<CServiciosSubserviciosReingenieriaLogBorrar> CServiciosSubserviciosReingenieriaLogBorrars { get; set; }

    public virtual DbSet<CServiciosSubserviciosReingenierium> CServiciosSubserviciosReingenieria { get; set; }

    public virtual DbSet<CSoftware> CSoftwares { get; set; }

    public virtual DbSet<CSolucione> CSoluciones { get; set; }

    public virtual DbSet<CSparePart> CSpareParts { get; set; }

    public virtual DbSet<CStatusAccesorio> CStatusAccesorios { get; set; }

    public virtual DbSet<CStatusAr> CStatusArs { get; set; }

    public virtual DbSet<CStatusArEq> CStatusArEqs { get; set; }

    public virtual DbSet<CStatusCarga> CStatusCargas { get; set; }

    public virtual DbSet<CStatusCot3m> CStatusCot3ms { get; set; }

    public virtual DbSet<CStatusCurso> CStatusCursos { get; set; }

    public virtual DbSet<CStatusDoctosPrefacturacion> CStatusDoctosPrefacturacions { get; set; }

    public virtual DbSet<CStatusDoctosPrefacturacionArchivo> CStatusDoctosPrefacturacionArchivos { get; set; }

    public virtual DbSet<CStatusEnvio> CStatusEnvios { get; set; }

    public virtual DbSet<CStatusInsumo> CStatusInsumos { get; set; }

    public virtual DbSet<CStatusItemsSolicitudAlmacen> CStatusItemsSolicitudAlmacens { get; set; }

    public virtual DbSet<CStatusJuntum> CStatusJunta { get; set; }

    public virtual DbSet<CStatusModelo> CStatusModelos { get; set; }

    public virtual DbSet<CStatusOrdenCompra> CStatusOrdenCompras { get; set; }

    public virtual DbSet<CStatusReasonCode> CStatusReasonCodes { get; set; }

    public virtual DbSet<CStatusReparacion> CStatusReparacions { get; set; }

    public virtual DbSet<CStatusReporteCierre> CStatusReporteCierres { get; set; }

    public virtual DbSet<CStatusSim> CStatusSims { get; set; }

    public virtual DbSet<CStatusSolicitudAlmacen> CStatusSolicitudAlmacens { get; set; }

    public virtual DbSet<CStatusSolicitudDevolucion> CStatusSolicitudDevolucions { get; set; }

    public virtual DbSet<CStatusSolicitudRecoleccion> CStatusSolicitudRecoleccions { get; set; }

    public virtual DbSet<CStatusSolicitudViatico> CStatusSolicitudViaticos { get; set; }

    public virtual DbSet<CStatusUnidad> CStatusUnidads { get; set; }

    public virtual DbSet<CStatusUsuario> CStatusUsuarios { get; set; }

    public virtual DbSet<CStatusValidacionPrefacturacion> CStatusValidacionPrefacturacions { get; set; }

    public virtual DbSet<CSubAlmacene> CSubAlmacenes { get; set; }

    public virtual DbSet<CSubrechazo> CSubrechazos { get; set; }

    public virtual DbSet<CTecnico> CTecnicos { get; set; }

    public virtual DbSet<CTiempo> CTiempos { get; set; }

    public virtual DbSet<CTiempoMedicion> CTiempoMedicions { get; set; }

    public virtual DbSet<CTiempoReferencium> CTiempoReferencia { get; set; }

    public virtual DbSet<CTiemposServiciosWincor> CTiemposServiciosWincors { get; set; }

    public virtual DbSet<CTimestamp> CTimestamps { get; set; }

    public virtual DbSet<CTipoAB> CTipoABs { get; set; }

    public virtual DbSet<CTipoArchivo> CTipoArchivos { get; set; }

    public virtual DbSet<CTipoAuditorium> CTipoAuditoria { get; set; }

    public virtual DbSet<CTipoCalculoUptime> CTipoCalculoUptimes { get; set; }

    public virtual DbSet<CTipoCierreTarea> CTipoCierreTareas { get; set; }

    public virtual DbSet<CTipoCobro> CTipoCobros { get; set; }

    public virtual DbSet<CTipoCobroNegocio> CTipoCobroNegocios { get; set; }

    public virtual DbSet<CTipoDowntimeTrigger> CTipoDowntimeTriggers { get; set; }

    public virtual DbSet<CTipoFalla> CTipoFallas { get; set; }

    public virtual DbSet<CTipoFallaSegmento> CTipoFallaSegmentos { get; set; }

    public virtual DbSet<CTipoInsumo> CTipoInsumos { get; set; }

    public virtual DbSet<CTipoInventario> CTipoInventarios { get; set; }

    public virtual DbSet<CTipoItemOrdenCompra> CTipoItemOrdenCompras { get; set; }

    public virtual DbSet<CTipoItemSolicitudAlmacen> CTipoItemSolicitudAlmacens { get; set; }

    public virtual DbSet<CTipoLocalidad> CTipoLocalidads { get; set; }

    public virtual DbSet<CTipoOutboxSantander> CTipoOutboxSantanders { get; set; }

    public virtual DbSet<CTipoPart> CTipoParts { get; set; }

    public virtual DbSet<CTipoPlaza> CTipoPlazas { get; set; }

    public virtual DbSet<CTipoPlazaCliente> CTipoPlazaClientes { get; set; }

    public virtual DbSet<CTipoPlazaNegocio> CTipoPlazaNegocios { get; set; }

    public virtual DbSet<CTipoPrecio> CTipoPrecios { get; set; }

    public virtual DbSet<CTipoProducto> CTipoProductos { get; set; }

    public virtual DbSet<CTipoReparacion> CTipoReparacions { get; set; }

    public virtual DbSet<CTipoResponsable> CTipoResponsables { get; set; }

    public virtual DbSet<CTipoResponsablePrefacturacion> CTipoResponsablePrefacturacions { get; set; }

    public virtual DbSet<CTipoServicio> CTipoServicios { get; set; }

    public virtual DbSet<CTipoServicioSolicitudAlmacen> CTipoServicioSolicitudAlmacens { get; set; }

    public virtual DbSet<CTipoSolicitudAlmacen> CTipoSolicitudAlmacens { get; set; }

    public virtual DbSet<CTipoSoporteTecnico> CTipoSoporteTecnicos { get; set; }

    public virtual DbSet<CTipoSparePart> CTipoSpareParts { get; set; }

    public virtual DbSet<CTipoTracking> CTipoTrackings { get; set; }

    public virtual DbSet<CTipoUsuario> CTipoUsuarios { get; set; }

    public virtual DbSet<CTipoZonaOld> CTipoZonaOlds { get; set; }

    public virtual DbSet<CTiposDocumentosSalesforce> CTiposDocumentosSalesforces { get; set; }

    public virtual DbSet<CTiposPlantilla> CTiposPlantillas { get; set; }

    public virtual DbSet<CUnidadMensajerium> CUnidadMensajeria { get; set; }

    public virtual DbSet<CUpdateTablasBb> CUpdateTablasBbs { get; set; }

    public virtual DbSet<CUrgenciaEnvio> CUrgenciaEnvios { get; set; }

    public virtual DbSet<CUrgenciaSolicitudAlmacen> CUrgenciaSolicitudAlmacens { get; set; }

    public virtual DbSet<CUsuario> CUsuarios { get; set; }

    public virtual DbSet<CUsuariosCorporativo> CUsuariosCorporativos { get; set; }

    public virtual DbSet<CUsuariosPrueba> CUsuariosPruebas { get; set; }

    public virtual DbSet<CVendedore> CVendedores { get; set; }

    public virtual DbSet<CViatico> CViaticos { get; set; }

    public virtual DbSet<CViaticosPmo> CViaticosPmos { get; set; }

    public virtual DbSet<CVistasEscalamiento> CVistasEscalamientos { get; set; }

    public virtual DbSet<CWeekDay> CWeekDays { get; set; }

    public virtual DbSet<CWeekhour> CWeekhours { get; set; }

    public virtual DbSet<CWincorEquivalenciasSg> CWincorEquivalenciasSgs { get; set; }

    public virtual DbSet<CWincorMedidum> CWincorMedida { get; set; }

    public virtual DbSet<CWincorModulo> CWincorModulos { get; set; }

    public virtual DbSet<CWincorSubmodulo> CWincorSubmodulos { get; set; }

    public virtual DbSet<CWincorTipoMedidum> CWincorTipoMedida { get; set; }

    public virtual DbSet<CZona> CZonas { get; set; }

    public virtual DbSet<CZonaAtencionSantander> CZonaAtencionSantanders { get; set; }

    public virtual DbSet<CZonasAgenteCallCenter> CZonasAgenteCallCenters { get; set; }

    public virtual DbSet<CadenaEnvio> CadenaEnvios { get; set; }

    public virtual DbSet<CadenaEnvios2> CadenaEnvios2s { get; set; }

    public virtual DbSet<CadenaNomina> CadenaNominas { get; set; }

    public virtual DbSet<CalculoRollosActiva> CalculoRollosActivas { get; set; }

    public virtual DbSet<CalculoRollosActiva2> CalculoRollosActiva2s { get; set; }

    public virtual DbSet<CalculoRollosActivaBk> CalculoRollosActivaBks { get; set; }

    public virtual DbSet<CambioIdSegmentoBanamexTnm> CambioIdSegmentoBanamexTnms { get; set; }

    public virtual DbSet<CambioMasivoBdUnidade> CambioMasivoBdUnidades { get; set; }

    public virtual DbSet<CambioMasivoBdUnidades2> CambioMasivoBdUnidades2s { get; set; }

    public virtual DbSet<CantIsRegion> CantIsRegions { get; set; }

    public virtual DbSet<CantServProdRegion> CantServProdRegions { get; set; }

    public virtual DbSet<CantStaffRegion> CantStaffRegions { get; set; }

    public virtual DbSet<CauthorizedServicesIntegration> CauthorizedServicesIntegrations { get; set; }

    public virtual DbSet<CdosysmailFailure> CdosysmailFailures { get; set; }

    public virtual DbSet<CevidenceType> CevidenceTypes { get; set; }

    public virtual DbSet<CgetnetSupportEmail> CgetnetSupportEmails { get; set; }

    public virtual DbSet<CierresElavon> CierresElavons { get; set; }

    public virtual DbSet<CinterfaceUser> CinterfaceUsers { get; set; }

    public virtual DbSet<ClienteProd> ClienteProds { get; set; }

    public virtual DbSet<CmailjetTemplateCatalog> CmailjetTemplateCatalogs { get; set; }

    public virtual DbSet<ConsultaDeployment> ConsultaDeployments { get; set; }

    public virtual DbSet<ConsultaOdt> ConsultaOdts { get; set; }

    public virtual DbSet<CostoIngeniero> CostoIngenieros { get; set; }

    public virtual DbSet<CostoIngeniero201501> CostoIngeniero201501s { get; set; }

    public virtual DbSet<CostoIs201501> CostoIs201501s { get; set; }

    public virtual DbSet<CostoIs201502> CostoIs201502s { get; set; }

    public virtual DbSet<CostoIs201502Bi> CostoIs201502Bis { get; set; }

    public virtual DbSet<CostoKgAdd> CostoKgAdds { get; set; }

    public virtual DbSet<CostoRefM> CostoRefMs { get; set; }

    public virtual DbSet<CostoRefMicrosip> CostoRefMicrosips { get; set; }

    public virtual DbSet<CpTipoPlazaSla> CpTipoPlazaSlas { get; set; }

    public virtual DbSet<CserviceConfigurationCdp> CserviceConfigurationCdps { get; set; }

    public virtual DbSet<CservicesFailuresSendSuccessfulEmail> CservicesFailuresSendSuccessfulEmails { get; set; }

    public virtual DbSet<Cumplimiento1erCitum> Cumplimiento1erCita { get; set; }

    public virtual DbSet<Dar> Dars { get; set; }

    public virtual DbSet<DiferenciasUltima> DiferenciasUltimas { get; set; }

    public virtual DbSet<Direccione> Direcciones { get; set; }

    public virtual DbSet<DispersionNomina> DispersionNominas { get; set; }

    public virtual DbSet<DispersionNominaCliente> DispersionNominaClientes { get; set; }

    public virtual DbSet<EdoResultado> EdoResultados { get; set; }

    public virtual DbSet<EdoResultadosRegion> EdoResultadosRegions { get; set; }

    public virtual DbSet<EdoResultadosRegionProducto> EdoResultadosRegionProductos { get; set; }

    public virtual DbSet<ElavonInbox> ElavonInboxes { get; set; }

    public virtual DbSet<ElavonOutbox> ElavonOutboxes { get; set; }

    public virtual DbSet<EnviosRegion> EnviosRegions { get; set; }

    public virtual DbSet<Equipo> Equipos { get; set; }

    public virtual DbSet<Errore> Errores { get; set; }

    public virtual DbSet<ErroresArPrefacturacion> ErroresArPrefacturacions { get; set; }

    public virtual DbSet<ErroresPmo> ErroresPmos { get; set; }

    public virtual DbSet<Existencia1Almacen> Existencia1Almacens { get; set; }

    public virtual DbSet<Existencia2Almacen> Existencia2Almacens { get; set; }

    public virtual DbSet<FillRate> FillRates { get; set; }

    public virtual DbSet<FillRateElavon> FillRateElavons { get; set; }

    public virtual DbSet<FillRateOtro> FillRateOtros { get; set; }

    public virtual DbSet<GasolinaAvion> GasolinaAvions { get; set; }

    public virtual DbSet<GeneralAr> GeneralArs { get; set; }

    public virtual DbSet<GuiasCosto> GuiasCostos { get; set; }

    public virtual DbSet<HistoricoBbva> HistoricoBbvas { get; set; }

    public virtual DbSet<HistoricoDireccionNegocio> HistoricoDireccionNegocios { get; set; }

    public virtual DbSet<HistoricoE> HistoricoEs { get; set; }

    public virtual DbSet<HistoricoElavon> HistoricoElavons { get; set; }

    public virtual DbSet<HistoricoElavonPaso> HistoricoElavonPasos { get; set; }

    public virtual DbSet<Informe> Informes { get; set; }

    public virtual DbSet<Ingreso> Ingresos { get; set; }

    public virtual DbSet<LayoutMasivo> LayoutMasivos { get; set; }

    public virtual DbSet<LayoutMasivo05082019> LayoutMasivo05082019s { get; set; }

    public virtual DbSet<LayoutMasivo11062019> LayoutMasivo11062019s { get; set; }

    public virtual DbSet<LayoutMasivoApi> LayoutMasivoApis { get; set; }

    public virtual DbSet<LayoutMasivoCheck> LayoutMasivoChecks { get; set; }

    public virtual DbSet<LayoutMasivoNew> LayoutMasivoNews { get; set; }

    public virtual DbSet<LayoutMasivoNuevo> LayoutMasivoNuevos { get; set; }

    public virtual DbSet<LayoutMasivoOdt> LayoutMasivoOdts { get; set; }

    public virtual DbSet<LayoutMasivoOdtNew> LayoutMasivoOdtNews { get; set; }

    public virtual DbSet<LayoutMasivoValidaSla> LayoutMasivoValidaSlas { get; set; }

    public virtual DbSet<LayoutNuevoOdt> LayoutNuevoOdts { get; set; }

    public virtual DbSet<LayoutReplicasRechazo> LayoutReplicasRechazos { get; set; }

    public virtual DbSet<LogBdNegocio> LogBdNegocios { get; set; }

    public virtual DbSet<LogBdNegocios2> LogBdNegocios2s { get; set; }

    public virtual DbSet<LogBdNegocios3> LogBdNegocios3s { get; set; }

    public virtual DbSet<MfDispersionIngenierium> MfDispersionIngenieria { get; set; }

    public virtual DbSet<ModeloConect> ModeloConects { get; set; }

    public virtual DbSet<NegociosBanamex> NegociosBanamexes { get; set; }

    public virtual DbSet<NegociosBansefi> NegociosBansefis { get; set; }

    public virtual DbSet<NegociosBbva> NegociosBbvas { get; set; }

    public virtual DbSet<NegociosBbvaWincor> NegociosBbvaWincors { get; set; }

    public virtual DbSet<NegociosBmxAtm> NegociosBmxAtms { get; set; }

    public virtual DbSet<NegociosBmxpl> NegociosBmxpls { get; set; }

    public virtual DbSet<NegociosBmxtnm> NegociosBmxtnms { get; set; }

    public virtual DbSet<NegociosFujitsuBajio> NegociosFujitsuBajios { get; set; }

    public virtual DbSet<NegociosFujitsuBanjercito> NegociosFujitsuBanjercitos { get; set; }

    public virtual DbSet<NegociosFujitsuHsbc> NegociosFujitsuHsbcs { get; set; }

    public virtual DbSet<NegociosFujitsuInd> NegociosFujitsuInds { get; set; }

    public virtual DbSet<NegociosGnp> NegociosGnps { get; set; }

    public virtual DbSet<NegociosHsbc> NegociosHsbcs { get; set; }

    public virtual DbSet<NegociosHsbcFujitsu> NegociosHsbcFujitsus { get; set; }

    public virtual DbSet<NegociosHsbcWincor> NegociosHsbcWincors { get; set; }

    public virtual DbSet<NegociosMontepio> NegociosMontepios { get; set; }

    public virtual DbSet<NegociosSantander> NegociosSantanders { get; set; }

    public virtual DbSet<NegociosSantanderWincor> NegociosSantanderWincors { get; set; }

    public virtual DbSet<NegociosSat> NegociosSats { get; set; }

    public virtual DbSet<NegociosSoftel> NegociosSoftels { get; set; }

    public virtual DbSet<NegociosTelefonica> NegociosTelefonicas { get; set; }

    public virtual DbSet<NoSeriesFaltante> NoSeriesFaltantes { get; set; }

    public virtual DbSet<Nomina> Nominas { get; set; }

    public virtual DbSet<Odt> Odts { get; set; }

    public virtual DbSet<OdtTemporal> OdtTemporals { get; set; }

    public virtual DbSet<Paso> Pasos { get; set; }

    public virtual DbSet<PendientesXRefacción> PendientesXRefaccións { get; set; }

    public virtual DbSet<PresupuestosCubo> PresupuestosCubos { get; set; }

    public virtual DbSet<PresupuestosCuboConcepto> PresupuestosCuboConceptos { get; set; }

    public virtual DbSet<PresupuestosCuboNew> PresupuestosCuboNews { get; set; }

    public virtual DbSet<PresupuestosCuboNewProducto> PresupuestosCuboNewProductos { get; set; }

    public virtual DbSet<PresupuestosCuboProducto> PresupuestosCuboProductos { get; set; }

    public virtual DbSet<PresupuestosCuboRegion> PresupuestosCuboRegions { get; set; }

    public virtual DbSet<Producto> Productos { get; set; }

    public virtual DbSet<ProsaCorregido> ProsaCorregidos { get; set; }

    public virtual DbSet<ProvisionIngresoRegionProd> ProvisionIngresoRegionProds { get; set; }

    public virtual DbSet<PruebaBorrar> PruebaBorrars { get; set; }

    public virtual DbSet<PruebaErrore> PruebaErrores { get; set; }

    public virtual DbSet<PruebaFecha> PruebaFechas { get; set; }

    public virtual DbSet<PruebaTest> PruebaTests { get; set; }

    public virtual DbSet<PruebasErrore> PruebasErrores { get; set; }

    public virtual DbSet<Query> Queries { get; set; }

    public virtual DbSet<RefaccInstalada> RefaccInstaladas { get; set; }

    public virtual DbSet<RefaccInstaladas3> RefaccInstaladas3s { get; set; }

    public virtual DbSet<RefaccRetirada> RefaccRetiradas { get; set; }

    public virtual DbSet<RefaccRetiradas2> RefaccRetiradas2s { get; set; }

    public virtual DbSet<RefaccionesInstalada> RefaccionesInstaladas { get; set; }

    public virtual DbSet<RegistroArchivosComprimido> RegistroArchivosComprimidos { get; set; }

    public virtual DbSet<RegistroArchivosOriginale> RegistroArchivosOriginales { get; set; }

    public virtual DbSet<Reincidente> Reincidentes { get; set; }

    public virtual DbSet<ReporteF11> ReporteF11s { get; set; }

    public virtual DbSet<ReporteHojaServicio> ReporteHojaServicios { get; set; }

    public virtual DbSet<ResStatusBdArBorrar> ResStatusBdArBorrars { get; set; }

    public virtual DbSet<RespBdArStatus> RespBdArStatuses { get; set; }

    public virtual DbSet<Respaldo> Respaldos { get; set; }

    public virtual DbSet<RespaldoActualizacionFecha> RespaldoActualizacionFechas { get; set; }

    public virtual DbSet<RespaldoAdam> RespaldoAdams { get; set; }

    public virtual DbSet<RespaldoBdMenu> RespaldoBdMenus { get; set; }

    public virtual DbSet<RespaldoCProductosNegocio> RespaldoCProductosNegocios { get; set; }

    public virtual DbSet<RespaldoFechaGarantium> RespaldoFechaGarantia { get; set; }

    public virtual DbSet<RespaldoLogBdIngenieroAsignacion> RespaldoLogBdIngenieroAsignacions { get; set; }

    public virtual DbSet<RespaldoMenu> RespaldoMenus { get; set; }

    public virtual DbSet<RespaldoTabla> RespaldoTablas { get; set; }

    public virtual DbSet<ResultadoDiferencia> ResultadoDiferencias { get; set; }

    public virtual DbSet<ResumenGeneralAr> ResumenGeneralArs { get; set; }

    public virtual DbSet<SantanderInboxTemp> SantanderInboxTemps { get; set; }

    public virtual DbSet<SantanderOutbox> SantanderOutboxes { get; set; }

    public virtual DbSet<SantanderOutboxCierre> SantanderOutboxCierres { get; set; }

    public virtual DbSet<Sepomex> Sepomexes { get; set; }

    public virtual DbSet<SepomexAnterior> SepomexAnteriors { get; set; }

    public virtual DbSet<SepomexEstado> SepomexEstados { get; set; }

    public virtual DbSet<SepomexOld> SepomexOlds { get; set; }

    public virtual DbSet<ServTecClt> ServTecClts { get; set; }

    public virtual DbSet<ServTecClte> ServTecCltes { get; set; }

    public virtual DbSet<ServiciosCerradosMe> ServiciosCerradosMes { get; set; }

    public virtual DbSet<ServiciosEnero2015> ServiciosEnero2015s { get; set; }

    public virtual DbSet<ServiciosFebrero2015> ServiciosFebrero2015s { get; set; }

    public virtual DbSet<SiBdLog> SiBdLogs { get; set; }

    public virtual DbSet<SiCServicio> SiCServicios { get; set; }

    public virtual DbSet<SiDashboard> SiDashboards { get; set; }

    public virtual DbSet<SlaTemp> SlaTemps { get; set; }

    public virtual DbSet<SlaTemp2> SlaTemp2s { get; set; }

    public virtual DbSet<Tabla> Tablas { get; set; }

    public virtual DbSet<TablaBancoBbvaReporte> TablaBancoBbvaReportes { get; set; }

    public virtual DbSet<TablaPruebaConsolidado> TablaPruebaConsolidados { get; set; }

    public virtual DbSet<TablaPruebaPaso> TablaPruebaPasos { get; set; }

    public virtual DbSet<TablaRemesaBbvaReporte> TablaRemesaBbvaReportes { get; set; }

    public virtual DbSet<TablaTemporalPmo> TablaTemporalPmos { get; set; }

    public virtual DbSet<TablaTemporalRetiradum> TablaTemporalRetirada { get; set; }

    public virtual DbSet<Tecnico> Tecnicos { get; set; }

    public virtual DbSet<TemReporteNegocio> TemReporteNegocios { get; set; }

    public virtual DbSet<TemRespaldoBdMensajeriaCosto> TemRespaldoBdMensajeriaCostos { get; set; }

    public virtual DbSet<TemRespaldoCostoKgAdd> TemRespaldoCostoKgAdds { get; set; }

    public virtual DbSet<Temp> Temps { get; set; }

    public virtual DbSet<Temp1> Temp1s { get; set; }

    public virtual DbSet<Temp2> Temp2s { get; set; }

    public virtual DbSet<TempAdam> TempAdams { get; set; }

    public virtual DbSet<TempAfiliacione> TempAfiliaciones { get; set; }

    public virtual DbSet<TempAfiliacionesTelefono> TempAfiliacionesTelefonos { get; set; }

    public virtual DbSet<TempAreaCierre> TempAreaCierres { get; set; }

    public virtual DbSet<TempAreaCierreProveedor> TempAreaCierreProveedors { get; set; }

    public virtual DbSet<TempAreaCierreProveedorDetalle> TempAreaCierreProveedorDetalles { get; set; }

    public virtual DbSet<TempBdTelefono> TempBdTelefonos { get; set; }

    public virtual DbSet<TempBdTelefonosReporte> TempBdTelefonosReportes { get; set; }

    public virtual DbSet<TempCadenaProsa> TempCadenaProsas { get; set; }

    public virtual DbSet<TempCambioConectividad> TempCambioConectividads { get; set; }

    public virtual DbSet<TempCancelarAr> TempCancelarArs { get; set; }

    public virtual DbSet<TempCargaUnidade> TempCargaUnidades { get; set; }

    public virtual DbSet<TempConciliacionUniversoGetnet> TempConciliacionUniversoGetnets { get; set; }

    public virtual DbSet<TempConsumoBancomer> TempConsumoBancomers { get; set; }

    public virtual DbSet<TempConsumoTrimestralBancomer> TempConsumoTrimestralBancomers { get; set; }

    public virtual DbSet<TempContenidoEnvio> TempContenidoEnvios { get; set; }

    public virtual DbSet<TempDhl> TempDhls { get; set; }

    public virtual DbSet<TempDiagnostico> TempDiagnosticos { get; set; }

    public virtual DbSet<TempDir> TempDirs { get; set; }

    public virtual DbSet<TempDireccione> TempDirecciones { get; set; }

    public virtual DbSet<TempDisponibleBancomer> TempDisponibleBancomers { get; set; }

    public virtual DbSet<TempErroresCarga> TempErroresCargas { get; set; }

    public virtual DbSet<TempF114> TempF114s { get; set; }

    public virtual DbSet<TempFillRateBbva> TempFillRateBbvas { get; set; }

    public virtual DbSet<TempHorario> TempHorarios { get; set; }

    public virtual DbSet<TempHorariosSantander> TempHorariosSantanders { get; set; }

    public virtual DbSet<TempInsumosArTecnico> TempInsumosArTecnicos { get; set; }

    public virtual DbSet<TempLayoutReplicasRechazo> TempLayoutReplicasRechazos { get; set; }

    public virtual DbSet<TempLicenciasDhl> TempLicenciasDhls { get; set; }

    public virtual DbSet<TempModelosMic> TempModelosMics { get; set; }

    public virtual DbSet<TempNegocio> TempNegocios { get; set; }

    public virtual DbSet<TempNegociosBanamex> TempNegociosBanamexes { get; set; }

    public virtual DbSet<TempNegociosBanamexAtm> TempNegociosBanamexAtms { get; set; }

    public virtual DbSet<TempNegociosRegistro> TempNegociosRegistros { get; set; }

    public virtual DbSet<TempOkiServiciosCorrectivo> TempOkiServiciosCorrectivos { get; set; }

    public virtual DbSet<TempOkiServiciosCorrectivos2> TempOkiServiciosCorrectivos2s { get; set; }

    public virtual DbSet<TempOkiServiciosCorrectivosOki> TempOkiServiciosCorrectivosOkis { get; set; }

    public virtual DbSet<TempPreporteInventariosTpvVerifoneSustitucionesFecha> TempPreporteInventariosTpvVerifoneSustitucionesFechas { get; set; }

    public virtual DbSet<TempPresupuestosCubo> TempPresupuestosCubos { get; set; }

    public virtual DbSet<TempProgramado> TempProgramados { get; set; }

    public virtual DbSet<TempProgramados2> TempProgramados2s { get; set; }

    public virtual DbSet<TempPrueba> TempPruebas { get; set; }

    public virtual DbSet<TempPrueba1> TempPruebas1 { get; set; }

    public virtual DbSet<TempPruebaA> TempPruebaAs { get; set; }

    public virtual DbSet<TempRepTpvEglobalGral> TempRepTpvEglobalGrals { get; set; }

    public virtual DbSet<TempReporteFillRateBancomer> TempReporteFillRateBancomers { get; set; }

    public virtual DbSet<TempReporteFillRateBancomerDisponible> TempReporteFillRateBancomerDisponibles { get; set; }

    public virtual DbSet<TempReporteInventarioMultivaFecha> TempReporteInventarioMultivaFechas { get; set; }

    public virtual DbSet<TempReporteInventariosBanamexTnmFecha> TempReporteInventariosBanamexTnmFechas { get; set; }

    public virtual DbSet<TempReporteInventariosIngenico> TempReporteInventariosIngenicos { get; set; }

    public virtual DbSet<TempReporteInventariosIngenicoBanbajio> TempReporteInventariosIngenicoBanbajios { get; set; }

    public virtual DbSet<TempReporteInventariosIngenicoSantander> TempReporteInventariosIngenicoSantanders { get; set; }

    public virtual DbSet<TempReporteInventariosMit> TempReporteInventariosMits { get; set; }

    public virtual DbSet<TempReporteInventariosSolucion> TempReporteInventariosSolucions { get; set; }

    public virtual DbSet<TempReporteInventariosTedisa> TempReporteInventariosTedisas { get; set; }

    public virtual DbSet<TempReporteInventariosVerifonElavonSantander> TempReporteInventariosVerifonElavonSantanders { get; set; }

    public virtual DbSet<TempRespaldoAfiliacione> TempRespaldoAfiliaciones { get; set; }

    public virtual DbSet<TempRespaldoCUsuario> TempRespaldoCUsuarios { get; set; }

    public virtual DbSet<TempSegmentoBanamex> TempSegmentoBanamexes { get; set; }

    public virtual DbSet<TempSim1> TempSim1s { get; set; }

    public virtual DbSet<TempSim2> TempSim2s { get; set; }

    public virtual DbSet<TempSim3> TempSim3s { get; set; }

    public virtual DbSet<TempSim4> TempSim4s { get; set; }

    public virtual DbSet<TempSim5> TempSim5s { get; set; }

    public virtual DbSet<TempTableNg> TempTableNgs { get; set; }

    public virtual DbSet<TempTelefono> TempTelefonos { get; set; }

    public virtual DbSet<TempTipoPlazaCliente> TempTipoPlazaClientes { get; set; }

    public virtual DbSet<TempUpdateDireccione> TempUpdateDirecciones { get; set; }

    public virtual DbSet<TempUpdateFecCierre> TempUpdateFecCierres { get; set; }

    public virtual DbSet<TempUpdateNoInventario> TempUpdateNoInventarios { get; set; }

    public virtual DbSet<TempUsuario> TempUsuarios { get; set; }

    public virtual DbSet<TempUsuariosActivosGetnet> TempUsuariosActivosGetnets { get; set; }

    public virtual DbSet<TempoMarcaModeloBanamex> TempoMarcaModeloBanamexes { get; set; }

    public virtual DbSet<TempoUnidadesSim> TempoUnidadesSims { get; set; }

    public virtual DbSet<Temporal2> Temporal2s { get; set; }

    public virtual DbSet<TemporalModemSoftel> TemporalModemSoftels { get; set; }

    public virtual DbSet<TemporalOki> TemporalOkis { get; set; }

    public virtual DbSet<TemporalReporte> TemporalReportes { get; set; }

    public virtual DbSet<TemporalReporteRetiro> TemporalReporteRetiros { get; set; }

    public virtual DbSet<TemporalRespaldo> TemporalRespaldos { get; set; }

    public virtual DbSet<TemporalWincor> TemporalWincors { get; set; }

    public virtual DbSet<TemporalWincor2> TemporalWincor2s { get; set; }

    public virtual DbSet<TestDepuraInsumo> TestDepuraInsumos { get; set; }

    public virtual DbSet<TiempoAltaCau> TiempoAltaCaus { get; set; }

    public virtual DbSet<TiempoPrimerAsCdo> TiempoPrimerAsCdos { get; set; }

    public virtual DbSet<TiempoPrimerAsignacion> TiempoPrimerAsignacions { get; set; }

    public virtual DbSet<Tmp01> Tmp01s { get; set; }

    public virtual DbSet<Tmp3m> Tmp3ms { get; set; }

    public virtual DbSet<TmpBdPresupuestoEjercidoMensual> TmpBdPresupuestoEjercidoMensuals { get; set; }

    public virtual DbSet<TmpBody> TmpBodies { get; set; }

    public virtual DbSet<TmpCalificaPdf> TmpCalificaPdfs { get; set; }

    public virtual DbSet<UnidadesAActualizar> UnidadesAActualizars { get; set; }

    public virtual DbSet<UnidadesBnmAtm> UnidadesBnmAtms { get; set; }

    public virtual DbSet<UnidadesDisponible> UnidadesDisponibles { get; set; }

    public virtual DbSet<UnidadesFujitsu> UnidadesFujitsus { get; set; }

    public virtual DbSet<UnidadesNoInstalada> UnidadesNoInstaladas { get; set; }

    public virtual DbSet<UnidadesTransito> UnidadesTransitos { get; set; }

    public virtual DbSet<UnidadesWincor> UnidadesWincors { get; set; }

    public virtual DbSet<UnidadesWincorFujitsu> UnidadesWincorFujitsus { get; set; }

    public virtual DbSet<VBdUniversoSim> VBdUniversoSims { get; set; }

    public virtual DbSet<VBdUniversoUnidade> VBdUniversoUnidades { get; set; }

    public virtual DbSet<VDarReporte> VDarReportes { get; set; }

    public virtual DbSet<VEquipoDisponible> VEquipoDisponibles { get; set; }

    public virtual DbSet<Vehiculo> Vehiculos { get; set; }

    public virtual DbSet<ViaticosPmo> ViaticosPmos { get; set; }

    public virtual DbSet<ViewAsignacionDeCitasWincorRegion> ViewAsignacionDeCitasWincorRegions { get; set; }

    public virtual DbSet<ViewEfectividadCargaRegion> ViewEfectividadCargaRegions { get; set; }

    public virtual DbSet<ViewEquipo> ViewEquipos { get; set; }

    public virtual DbSet<ViewReporteRetiro> ViewReporteRetiros { get; set; }

    public virtual DbSet<Visita> Visitas { get; set; }

    public virtual DbSet<VwAmCheck> VwAmChecks { get; set; }

    public virtual DbSet<VwCierresDiarioTecnico> VwCierresDiarioTecnicos { get; set; }

    public virtual DbSet<VwCostoTotalInsumoPorAr> VwCostoTotalInsumoPorArs { get; set; }

    public virtual DbSet<VwRandom> VwRandoms { get; set; }

    public virtual DbSet<VwReportePrefacturacion> VwReportePrefacturacions { get; set; }

    public virtual DbSet<VwTotalTareasWincor> VwTotalTareasWincors { get; set; }

    public virtual DbSet<WincorInbox> WincorInboxes { get; set; }

    public virtual DbSet<WincorOutbox> WincorOutboxes { get; set; }

    public virtual DbSet<ZonaEstadoSepomex> ZonaEstadoSepomexes { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.UseCollation("Modern_Spanish_CI_AS");

        modelBuilder.Entity<AsientosRegionale>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ASIENTOS_REGIONALES");

            entity.Property(e => e.Cuenta)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("CUENTA");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(200)
                .IsFixedLength()
                .HasColumnName("DESCRIPCION");
            entity.Property(e => e.Fecha)
                .HasColumnType("date")
                .HasColumnName("FECHA");
            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID");
            entity.Property(e => e.Importe).HasColumnName("IMPORTE");
            entity.Property(e => e.Nombre)
                .HasMaxLength(80)
                .IsFixedLength()
                .HasColumnName("NOMBRE");
            entity.Property(e => e.Poliza)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("POLIZA");
            entity.Property(e => e.Region)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("REGION");
        });

        modelBuilder.Entity<AuditoriasRealizada>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AUDITORIAS_REALIZADAS");

            entity.Property(e => e.Costo)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("COSTO");
            entity.Property(e => e.Efectividad)
                .HasColumnType("decimal(8, 2)")
                .HasColumnName("EFECTIVIDAD");
            entity.Property(e => e.IdFisico).HasColumnName("ID_FISICO");
            entity.Property(e => e.IdModelo).HasColumnName("ID_MODELO");
            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");
            entity.Property(e => e.IdRegion).HasColumnName("ID_REGION");
            entity.Property(e => e.IdTipoInventario).HasColumnName("ID_TIPO_INVENTARIO");
            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.IdZona).HasColumnName("ID_ZONA");
        });

        modelBuilder.Entity<BackupBdZonasCp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BACKUP_BD_ZONAS_CP");

            entity.Property(e => e.AbreviaturaDestino)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("ABREVIATURA_DESTINO");
            entity.Property(e => e.AbreviaturaOrigen)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("ABREVIATURA_ORIGEN");
            entity.Property(e => e.Zona).HasColumnName("ZONA");
        });

        modelBuilder.Entity<BdAbreviaturaCp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_ABREVIATURA_CP");

            entity.Property(e => e.Abreviatura)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("ABREVIATURA");
            entity.Property(e => e.Cp)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CP");
            entity.Property(e => e.IdAbreviaturaCp)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_ABREVIATURA_CP");
        });

        modelBuilder.Entity<BdAccesoriosRefaccionReparacion>(entity =>
        {
            entity.HasKey(e => e.IdAccesoriosRefaccionReparacion).HasName("PK__BD_ACCES__FBF75A0F730A0BB9");

            entity.ToTable("BD_ACCESORIOS_REFACCION_REPARACION");

            entity.Property(e => e.IdAccesoriosRefaccionReparacion).HasColumnName("ID_ACCESORIOS_REFACCION_REPARACION");
            entity.Property(e => e.Cantidad).HasColumnName("CANTIDAD");
            entity.Property(e => e.CantidadInstalacion).HasColumnName("CANTIDAD_INSTALACION");
            entity.Property(e => e.FechaAlta)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ALTA");
            entity.Property(e => e.IdAccesorioRefaccion).HasColumnName("ID_ACCESORIO_REFACCION");
            entity.Property(e => e.IdReparacionUnidad).HasColumnName("ID_REPARACION_UNIDAD");
            entity.Property(e => e.IdResponsable).HasColumnName("ID_RESPONSABLE");
            entity.Property(e => e.IdTipoResponsable).HasColumnName("ID_TIPO_RESPONSABLE");
            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.Status)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.Tipo)
                .IsUnicode(false)
                .HasColumnName("TIPO");
            entity.Property(e => e.TipoAccesorioRefaccion)
                .IsUnicode(false)
                .HasColumnName("TIPO_ACCESORIO_REFACCION");
        });

        modelBuilder.Entity<BdActasAdmin>(entity =>
        {
            entity.HasKey(e => e.IdActaAdmin).HasName("PK_BD_ACTA_ADMIN");

            entity.ToTable("BD_ACTAS_ADMIN");

            entity.Property(e => e.IdActaAdmin).HasColumnName("ID_ACTA_ADMIN");
            entity.Property(e => e.Comentarios)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("COMENTARIOS");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdArea).HasColumnName("ID_AREA");
            entity.Property(e => e.IdResponsable).HasColumnName("ID_RESPONSABLE");
            entity.Property(e => e.IdTipoActaAdmin).HasColumnName("ID_TIPO_ACTA_ADMIN");
            entity.Property(e => e.IdUsuarioActa).HasColumnName("ID_USUARIO_ACTA");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.StatusActaAdmin)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS_ACTA_ADMIN");
        });

        modelBuilder.Entity<BdAfiliacionesProyectoEspecial>(entity =>
        {
            entity.HasKey(e => e.IdAfiliacionProyEsp);

            entity.ToTable("BD_AFILIACIONES_PROYECTO_ESPECIAL");

            entity.Property(e => e.IdAfiliacionProyEsp).HasColumnName("ID_AFILIACION_PROY_ESP");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdProyectoEspecial).HasColumnName("ID_PROYECTO_ESPECIAL");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.IsProcesado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("IS_PROCESADO");
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(50)
                .IsFixedLength()
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdAjustesInsumosPaso>(entity =>
        {
            entity.HasKey(e => e.IdAjuste).HasName("PK__BD_AJUST__7C4D8AC8DBD55290");

            entity.ToTable("BD_AJUSTES_INSUMOS_PASO");

            entity.Property(e => e.IdAjuste).HasColumnName("ID_AJUSTE");
            entity.Property(e => e.Entrada).HasColumnName("ENTRADA");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdBdInsumo).HasColumnName("ID_BD_INSUMO");
            entity.Property(e => e.IdResponsable).HasColumnName("ID_RESPONSABLE");
            entity.Property(e => e.IdTipoResponsable).HasColumnName("ID_TIPO_RESPONSABLE");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.SalidaActual).HasColumnName("SALIDA_ACTUAL");
            entity.Property(e => e.SalidaAnterior).HasColumnName("SALIDA_ANTERIOR");
            entity.Property(e => e.Total).HasColumnName("TOTAL");
        });

        modelBuilder.Entity<BdAltaCancelacionArMasivo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_ALTA_CANCELACION_AR_MASIVO");

            entity.Property(e => e.Comentario)
                .IsUnicode(false)
                .HasColumnName("COMENTARIO");
            entity.Property(e => e.Error)
                .IsUnicode(false)
                .HasColumnName("ERROR");
            entity.Property(e => e.IdAlta)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_ALTA");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IdCarga).HasColumnName("ID_CARGA");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdAltaFecGarantium>(entity =>
        {
            entity.HasKey(e => e.IdAlta).HasName("PK__BD_ALTA___149699216FD7BF73");

            entity.ToTable("BD_ALTA_FEC_GARANTIA");

            entity.Property(e => e.IdAlta).HasColumnName("ID_ALTA");
            entity.Property(e => e.Error)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("ERROR");
            entity.Property(e => e.Fecha)
                .HasColumnType("date")
                .HasColumnName("FECHA");
            entity.Property(e => e.Hora).HasColumnName("HORA");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IdCarga).HasColumnName("ID_CARGA");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.Status)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdAltaMasivaUnidadCa>(entity =>
        {
            entity.HasKey(e => e.IdUnidadCa).HasName("PK__BD_ALTA___052710832B92C76C");

            entity.ToTable("BD_ALTA_MASIVA_UNIDAD_CA");

            entity.Property(e => e.IdUnidadCa).HasColumnName("ID_UNIDAD_CA");
            entity.Property(e => e.Error)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("ERROR");
            entity.Property(e => e.IdAplicativo).HasColumnName("ID_APLICATIVO");
            entity.Property(e => e.IdCarga).HasColumnName("ID_CARGA");
            entity.Property(e => e.IdConectividad).HasColumnName("ID_CONECTIVIDAD");
            entity.Property(e => e.IdModelo).HasColumnName("ID_MODELO");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.NoSerie)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdApiProveedore>(entity =>
        {
            entity.HasKey(e => e.IdApiProveedor).HasName("PK__BD_API_P__F86EE13E7C50CA71");

            entity.ToTable("BD_API_PROVEEDORES");

            entity.Property(e => e.IdApiProveedor).HasColumnName("ID_API_PROVEEDOR");
            entity.Property(e => e.FechaAlta)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ALTA");
            entity.Property(e => e.IdApi)
                .HasMaxLength(450)
                .HasColumnName("ID_API");
            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
        });

        modelBuilder.Entity<BdApplicationVersion>(entity =>
        {
            entity.HasKey(e => e.IdApplicationVersion).HasName("PK__BD_APPLI__FBF2DC32734110C2");

            entity.ToTable("BD_APPLICATION_VERSIONS");

            entity.Property(e => e.IdApplicationVersion).HasColumnName("ID_APPLICATION_VERSION");
            entity.Property(e => e.BuildNumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BUILD_NUMBER");
            entity.Property(e => e.DischargeDate)
                .HasColumnType("datetime")
                .HasColumnName("DISCHARGE_DATE");
            entity.Property(e => e.Status).HasColumnName("STATUS");
            entity.Property(e => e.Version)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("VERSION");
        });

        modelBuilder.Entity<BdAr>(entity =>
        {
            entity.HasKey(e => e.IdAr);

            entity.ToTable("BD_AR", tb => tb.HasTrigger("TR_Services_Send_Suppliers"));

            entity.HasIndex(e => e.HorasGarantia, "IX_BD_AR");

            entity.HasIndex(e => e.IdProveedor, "IX_BD_AR_1");

            entity.HasIndex(e => e.IdTecnico, "IX_BD_AR_2");

            entity.HasIndex(e => e.MiComercio, "IX_BD_AR_3");

            entity.HasIndex(e => e.Rp, "IX_BD_AR_4");

            entity.HasIndex(e => e.Rs, "IX_BD_AR_5");

            entity.HasIndex(e => e.VoltajeNeutro, "IX_BD_AR_6");

            entity.HasIndex(e => e.VoltajeTierra, "IX_BD_AR_7");

            entity.HasIndex(e => e.VoltajeTierraNeutro, "IX_BD_AR_8");

            entity.HasIndex(e => e.Status, "IX_BD_AR_BUSQUEDA");

            entity.HasIndex(e => e.NoAr, "IX_BD_AR_NO_DUPLICADOS").IsUnique();

            entity.HasIndex(e => e.IdStatusAr, "IX_INDEX_REPORTE_EXCEPCIONES");

            entity.HasIndex(e => new { e.IdStatusAr, e.Status }, "missing_index_1096_1095");

            entity.HasIndex(e => new { e.NoAfiliacion, e.Status, e.IdProveedor, e.IdStatusAr }, "missing_index_1137_1136");

            entity.HasIndex(e => new { e.NoAr, e.Status, e.IdProveedor, e.IdStatusAr }, "missing_index_1139_1138");

            entity.HasIndex(e => new { e.Status, e.IdProveedor, e.IdStatusAr }, "missing_index_1145_1144");

            entity.HasIndex(e => new { e.IdStatusAr, e.Status, e.IdProveedor }, "missing_index_1157_1156");

            entity.HasIndex(e => new { e.Status, e.IdStatusAr }, "missing_index_118_117");

            entity.HasIndex(e => new { e.Status, e.IdStatusAr }, "missing_index_1224_1223");

            entity.HasIndex(e => new { e.IdCarga, e.NoAr, e.IdStatusAr }, "missing_index_122_121");

            entity.HasIndex(e => new { e.IdCarga, e.Status }, "missing_index_157_156");

            entity.HasIndex(e => new { e.IdCliente, e.NoAr, e.IdAr }, "missing_index_159_158");

            entity.HasIndex(e => e.NoAr, "missing_index_161_160");

            entity.HasIndex(e => e.IdCarga, "missing_index_163_162");

            entity.HasIndex(e => new { e.IdNegocio, e.IdProyecto, e.FecCierre, e.IdStatusAr }, "missing_index_165_164");

            entity.HasIndex(e => e.NoAr, "missing_index_167_166");

            entity.HasIndex(e => new { e.IdCarga, e.Status }, "missing_index_172_171");

            entity.HasIndex(e => e.NoAr, "missing_index_174_173");

            entity.HasIndex(e => e.NoAr, "missing_index_1760_1759");

            entity.HasIndex(e => e.NoAr, "missing_index_1762_1761");

            entity.HasIndex(e => e.Status, "missing_index_176_175");

            entity.HasIndex(e => new { e.IdCliente, e.NoAr, e.IdCarga }, "missing_index_178_177");

            entity.HasIndex(e => e.IdCarga, "missing_index_180_179");

            entity.HasIndex(e => new { e.IdCarga, e.Status }, "missing_index_184_183");

            entity.HasIndex(e => e.IdCarga, "missing_index_187_186");

            entity.HasIndex(e => new { e.IdCarga, e.Status }, "missing_index_189_188");

            entity.HasIndex(e => new { e.IdCarga, e.Status }, "missing_index_192_191");

            entity.HasIndex(e => new { e.IdCarga, e.Status }, "missing_index_198_197");

            entity.HasIndex(e => new { e.Status, e.IdStatusAr }, "missing_index_248_247");

            entity.HasIndex(e => new { e.NoAfiliacion, e.Status, e.IdStatusAr }, "missing_index_250_249");

            entity.HasIndex(e => new { e.NoAr, e.Status, e.IdStatusAr }, "missing_index_252_251");

            entity.HasIndex(e => new { e.IdCarga, e.Status }, "missing_index_2696_2695");

            entity.HasIndex(e => e.IdCarga, "missing_index_2708_2707");

            entity.HasIndex(e => new { e.IdCarga, e.Status }, "missing_index_2710_2709");

            entity.HasIndex(e => new { e.Status, e.IdProveedor, e.IdStatusAr }, "missing_index_2743_2742");

            entity.HasIndex(e => e.IdStatusAr, "missing_index_2815_2814");

            entity.HasIndex(e => new { e.NoAr, e.IdStatusAr }, "missing_index_2860_2859");

            entity.HasIndex(e => new { e.Status, e.IdStatusAr }, "missing_index_2932_2931");

            entity.HasIndex(e => new { e.Status, e.NoAr }, "missing_index_2_1");

            entity.HasIndex(e => e.NoAr, "missing_index_3318_3317");

            entity.HasIndex(e => new { e.IdStatusAr, e.Status }, "missing_index_3476_3475");

            entity.HasIndex(e => new { e.Status, e.IdStatusAr }, "missing_index_3478_3477");

            entity.HasIndex(e => new { e.Status, e.IdProveedor, e.IdStatusAr }, "missing_index_3487_3486");

            entity.HasIndex(e => e.NoAfiliacion, "missing_index_3491_3490");

            entity.HasIndex(e => e.IdTecnico, "missing_index_3618_3617");

            entity.HasIndex(e => new { e.IdStatusAr, e.Status }, "missing_index_3806_3805");

            entity.HasIndex(e => new { e.Status, e.IdProveedor, e.IdStatusAr }, "missing_index_4007_4006");

            entity.HasIndex(e => new { e.IdRegion, e.Status, e.IdStatusAr }, "missing_index_4014_4013");

            entity.HasIndex(e => new { e.Status, e.IdStatusAr }, "missing_index_4016_4015");

            entity.HasIndex(e => e.IdRegion, "missing_index_4018_4017");

            entity.HasIndex(e => new { e.Status, e.IdProveedor, e.IdStatusAr }, "missing_index_4098_4097");

            entity.HasIndex(e => new { e.IdStatusAr, e.Status, e.IdProveedor }, "missing_index_4101_4100");

            entity.HasIndex(e => e.IdProyecto, "missing_index_4130_4129");

            entity.HasIndex(e => new { e.IdProyecto, e.IdServicio, e.IdFalla }, "missing_index_4132_4131");

            entity.HasIndex(e => e.IdProyecto, "missing_index_4135_4134");

            entity.HasIndex(e => new { e.IdFalla, e.IdStatusAr, e.NoAfiliacion }, "missing_index_46_45");

            entity.HasIndex(e => new { e.IdFalla, e.IdStatusAr }, "missing_index_49_48");

            entity.HasIndex(e => new { e.NoAr, e.Status }, "missing_index_52_51");

            entity.HasIndex(e => e.IdZona, "missing_index_61_60");

            entity.HasIndex(e => new { e.Status, e.IdProveedor, e.IdStatusAr }, "missing_index_63_62");

            entity.HasIndex(e => e.Status, "missing_index_6_5");

            entity.HasIndex(e => e.Status, "missing_index_903_902");

            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.AerolineaRp3)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("AEROLINEA_RP3");
            entity.Property(e => e.AgregarDiasAtencion).HasColumnName("AGREGAR_DIAS_ATENCION");
            entity.Property(e => e.Atiende)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ATIENDE");
            entity.Property(e => e.AutorizadorRechazo)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("AUTORIZADOR_RECHAZO");
            entity.Property(e => e.Bitacora)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("BITACORA");
            entity.Property(e => e.CadenaCierre)
                .IsUnicode(false)
                .HasColumnName("CADENA_CIERRE");
            entity.Property(e => e.CadenaCierreEscrita)
                .HasMaxLength(3000)
                .IsUnicode(false)
                .HasColumnName("CADENA_CIERRE_ESCRITA");
            entity.Property(e => e.Caja)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CAJA");
            entity.Property(e => e.Campana)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CAMPANA");
            entity.Property(e => e.CausaCancelacion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CAUSA_CANCELACION");
            entity.Property(e => e.CausaRechazo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CAUSA_RECHAZO");
            entity.Property(e => e.ClaveRechazo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CLAVE_RECHAZO");
            entity.Property(e => e.CodigoIntervencion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CODIGO_INTERVENCION");
            entity.Property(e => e.Colonia)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("COLONIA");
            entity.Property(e => e.Concepto)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CONCEPTO");
            entity.Property(e => e.CorreoEjecutivo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CORREO_EJECUTIVO");
            entity.Property(e => e.Cp)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("CP");
            entity.Property(e => e.DescCorta)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_CORTA");
            entity.Property(e => e.DescEquipo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_EQUIPO");
            entity.Property(e => e.DescNegocio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_NEGOCIO");
            entity.Property(e => e.DescripcionTrabajo)
                .HasMaxLength(3000)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_TRABAJO");
            entity.Property(e => e.DigitoVerificador)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("DIGITO_VERIFICADOR");
            entity.Property(e => e.Direccion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");
            entity.Property(e => e.DireccionAlternaComercio)
                .IsUnicode(false)
                .HasColumnName("DIRECCION_ALTERNA_COMERCIO");
            entity.Property(e => e.DueBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("due_by");
            entity.Property(e => e.Duracion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DURACION");
            entity.Property(e => e.Equipo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("EQUIPO");
            entity.Property(e => e.Estado)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ESTADO");
            entity.Property(e => e.FallaEncontrada)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("FALLA_ENCONTRADA");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.FecAltaHorasAtencion)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA_HORAS_ATENCION");
            entity.Property(e => e.FecAltaReglaStatusAr)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA_REGLA_STATUS_AR");
            entity.Property(e => e.FecAtencion)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ATENCION");
            entity.Property(e => e.FecAtencionOriginal)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ATENCION_ORIGINAL");
            entity.Property(e => e.FecCarga)
                .HasColumnType("datetime")
                .HasColumnName("FEC_CARGA");
            entity.Property(e => e.FecCierre)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_CIERRE");
            entity.Property(e => e.FecConvenio)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_CONVENIO");
            entity.Property(e => e.FecFinIngeniero)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_FIN_INGENIERO");
            entity.Property(e => e.FecGarantia)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_GARANTIA");
            entity.Property(e => e.FecIniIngeniero)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_INI_INGENIERO");
            entity.Property(e => e.FecInicio)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_INICIO");
            entity.Property(e => e.FecIntento1)
                .HasColumnType("datetime")
                .HasColumnName("FEC_INTENTO_1");
            entity.Property(e => e.FecIntento2)
                .HasColumnType("datetime")
                .HasColumnName("FEC_INTENTO_2");
            entity.Property(e => e.FecIntento3)
                .HasColumnType("datetime")
                .HasColumnName("FEC_INTENTO_3");
            entity.Property(e => e.FecIntento4)
                .HasColumnType("datetime")
                .HasColumnName("FEC_INTENTO_4");
            entity.Property(e => e.FecLlegada)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_LLEGADA");
            entity.Property(e => e.FecLlegadaTerceros)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_LLEGADA_TERCEROS");
            entity.Property(e => e.FecStatusAr)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_STATUS_AR");
            entity.Property(e => e.FolioServicio)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FOLIO_SERVICIO");
            entity.Property(e => e.FolioTas)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FOLIO_TAS");
            entity.Property(e => e.FolioTelecarga)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FOLIO_TELECARGA");
            entity.Property(e => e.FolioTir)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FOLIO_TIR");
            entity.Property(e => e.FolioValidacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FOLIO_VALIDACION");
            entity.Property(e => e.Globalizador)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("GLOBALIZADOR");
            entity.Property(e => e.HoraAtencionFin).HasColumnName("HORA_ATENCION_FIN");
            entity.Property(e => e.HoraAtencionIni).HasColumnName("HORA_ATENCION_INI");
            entity.Property(e => e.HorasAtencion).HasColumnName("HORAS_ATENCION");
            entity.Property(e => e.HorasAtencionWincor)
                .HasColumnType("numeric(18, 0)")
                .HasColumnName("HORAS_ATENCION_WINCOR");
            entity.Property(e => e.HorasGarantia).HasColumnName("HORAS_GARANTIA");
            entity.Property(e => e.HorasGarantiaWincor)
                .HasColumnType("numeric(18, 0)")
                .HasColumnName("HORAS_GARANTIA_WINCOR");
            entity.Property(e => e.Iata)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("IATA");
            entity.Property(e => e.IataAerolinea)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("IATA_AEROLINEA");
            entity.Property(e => e.IataMatriz)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("IATA_MATRIZ");
            entity.Property(e => e.IdAplicativo).HasColumnName("ID_APLICATIVO");
            entity.Property(e => e.IdArOriginal).HasColumnName("ID_AR_ORIGINAL");
            entity.Property(e => e.IdAttach1).HasColumnName("ID_ATTACH1");
            entity.Property(e => e.IdAttach2).HasColumnName("ID_ATTACH2");
            entity.Property(e => e.IdCalificaContacto).HasColumnName("ID_CALIFICA_CONTACTO");
            entity.Property(e => e.IdCalificaIntento1).HasColumnName("ID_CALIFICA_INTENTO_1");
            entity.Property(e => e.IdCalificaIntento2).HasColumnName("ID_CALIFICA_INTENTO_2");
            entity.Property(e => e.IdCalificaIntento3).HasColumnName("ID_CALIFICA_INTENTO_3");
            entity.Property(e => e.IdCalificaIntento4).HasColumnName("ID_CALIFICA_INTENTO_4");
            entity.Property(e => e.IdCarga).HasColumnName("ID_CARGA");
            entity.Property(e => e.IdCausa).HasColumnName("ID_CAUSA");
            entity.Property(e => e.IdCausaRechazo).HasColumnName("ID_CAUSA_RECHAZO");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdConcepto).HasColumnName("ID_CONCEPTO");
            entity.Property(e => e.IdConectividad).HasColumnName("ID_CONECTIVIDAD");
            entity.Property(e => e.IdDescripcionTrabajo).HasColumnName("ID_DESCRIPCION_TRABAJO");
            entity.Property(e => e.IdDispatcher).HasColumnName("ID_DISPATCHER");
            entity.Property(e => e.IdEquipoCliente).HasColumnName("ID_EQUIPO_CLIENTE");
            entity.Property(e => e.IdEspecifTipoFalla).HasColumnName("ID_ESPECIF_TIPO_FALLA");
            entity.Property(e => e.IdEspecificaCausaRechazo).HasColumnName("ID_ESPECIFICA_CAUSA_RECHAZO");
            entity.Property(e => e.IdEstado).HasColumnName("ID_ESTADO");
            entity.Property(e => e.IdFalla).HasColumnName("ID_FALLA");
            entity.Property(e => e.IdModeloFalla).HasColumnName("ID_MODELO_FALLA");
            entity.Property(e => e.IdModeloReq).HasColumnName("ID_MODELO_REQ");
            entity.Property(e => e.IdMoneda).HasColumnName("ID_MONEDA");
            entity.Property(e => e.IdNegocio).HasColumnName("ID_NEGOCIO");
            entity.Property(e => e.IdPlaza).HasColumnName("ID_PLAZA");
            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");
            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");
            entity.Property(e => e.IdProyecto).HasColumnName("ID_PROYECTO");
            entity.Property(e => e.IdRegion).HasColumnName("ID_REGION");
            entity.Property(e => e.IdReglaStatusAr).HasColumnName("ID_REGLA_STATUS_AR");
            entity.Property(e => e.IdReporteCierre).HasColumnName("ID_REPORTE_CIERRE");
            entity.Property(e => e.IdResponsableCancelacionProgramado).HasColumnName("ID_RESPONSABLE_CANCELACION_PROGRAMADO");
            entity.Property(e => e.IdSegmento).HasColumnName("ID_SEGMENTO");
            entity.Property(e => e.IdServicio).HasColumnName("ID_SERVICIO");
            entity.Property(e => e.IdSolucion).HasColumnName("ID_SOLUCION");
            entity.Property(e => e.IdStatusAr).HasColumnName("ID_STATUS_AR");
            entity.Property(e => e.IdStatusReasonCodes).HasColumnName("ID_STATUS_REASON_CODES");
            entity.Property(e => e.IdStatusValidacionPrefacturacion).HasColumnName("ID_STATUS_VALIDACION_PREFACTURACION");
            entity.Property(e => e.IdTecnico).HasColumnName("ID_TECNICO");
            entity.Property(e => e.IdTipoCobro).HasColumnName("ID_TIPO_COBRO");
            entity.Property(e => e.IdTipoEquipo).HasColumnName("ID_TIPO_EQUIPO");
            entity.Property(e => e.IdTipoFallaEncontrada).HasColumnName("ID_TIPO_FALLA_ENCONTRADA");
            entity.Property(e => e.IdTipoPlaza).HasColumnName("ID_TIPO_PLAZA");
            entity.Property(e => e.IdTipoPrecio).HasColumnName("ID_TIPO_PRECIO");
            entity.Property(e => e.IdTipoServicio).HasColumnName("ID_TIPO_SERVICIO");
            entity.Property(e => e.IdUnidadAtendida).HasColumnName("ID_UNIDAD_ATENDIDA");
            entity.Property(e => e.IdUsuarioCierre).HasColumnName("ID_USUARIO_CIERRE");
            entity.Property(e => e.IdZona).HasColumnName("ID_ZONA");
            entity.Property(e => e.Insumos).HasColumnName("INSUMOS");
            entity.Property(e => e.IntensidadSenial)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("INTENSIDAD_SENIAL");
            entity.Property(e => e.IntentoContacto).HasColumnName("INTENTO_CONTACTO");
            entity.Property(e => e.IsActualizacion).HasColumnName("IS_ACTUALIZACION");
            entity.Property(e => e.IsBoletin).HasColumnName("IS_BOLETIN");
            entity.Property(e => e.IsCobrable).HasColumnName("IS_COBRABLE");
            entity.Property(e => e.IsDuplicada).HasColumnName("IS_DUPLICADA");
            entity.Property(e => e.IsExito).HasColumnName("IS_EXITO");
            entity.Property(e => e.IsFollowDispatch).HasColumnName("IS_FOLLOW_DISPATCH");
            entity.Property(e => e.IsGarantia).HasColumnName("IS_GARANTIA");
            entity.Property(e => e.IsIngresoManual).HasColumnName("IS_INGRESO_MANUAL");
            entity.Property(e => e.IsInstalacion).HasColumnName("IS_INSTALACION");
            entity.Property(e => e.IsInterfazBancomer).HasColumnName("IS_INTERFAZ_BANCOMER");
            entity.Property(e => e.IsLocal).HasColumnName("IS_LOCAL");
            entity.Property(e => e.IsPdf).HasColumnName("IS_PDF");
            entity.Property(e => e.IsProgramado).HasColumnName("IS_PROGRAMADO");
            entity.Property(e => e.IsRetipificado).HasColumnName("IS_RETIPIFICADO");
            entity.Property(e => e.IsRetiro).HasColumnName("IS_RETIRO");
            entity.Property(e => e.IsSimRemplazada)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("IS_SIM_REMPLAZADA");
            entity.Property(e => e.IsSoporteCliente).HasColumnName("IS_SOPORTE_CLIENTE");
            entity.Property(e => e.IsSustitucion).HasColumnName("IS_SUSTITUCION");
            entity.Property(e => e.IsTecnicoForaneo).HasColumnName("IS_TECNICO_FORANEO");
            entity.Property(e => e.MiComercio)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("MI_COMERCIO");
            entity.Property(e => e.MinsDowntime)
                .HasDefaultValueSql("((0))")
                .HasColumnName("MINS_DOWNTIME");
            entity.Property(e => e.MotivoCobro)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("MOTIVO_COBRO");
            entity.Property(e => e.MotivoRetipificado)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("MOTIVO_RETIPIFICADO");
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.NoAr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AR");
            entity.Property(e => e.NoDiasLiberacion).HasColumnName("NO_DIAS_LIBERACION");
            entity.Property(e => e.NoEquipo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_EQUIPO");
            entity.Property(e => e.NoInventario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_INVENTARIO");
            entity.Property(e => e.NoInventarioFalla)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_INVENTARIO_FALLA");
            entity.Property(e => e.NoReincidencias).HasColumnName("NO_REINCIDENCIAS");
            entity.Property(e => e.NoSerie)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");
            entity.Property(e => e.NoSerieFalla)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE_FALLA");
            entity.Property(e => e.NoSim)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("NO_SIM");
            entity.Property(e => e.NotViaticos).HasColumnName("NOT_VIATICOS");
            entity.Property(e => e.NotasRemedy)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NOTAS_REMEDY");
            entity.Property(e => e.OtorganteSoporteCliente)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("OTORGANTE_SOPORTE_CLIENTE");
            entity.Property(e => e.OtorganteTas)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("OTORGANTE_TAS");
            entity.Property(e => e.OtorganteVobo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("OTORGANTE_VOBO");
            entity.Property(e => e.OtorganteVoboCliente)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("OTORGANTE_VOBO_CLIENTE");
            entity.Property(e => e.OtorganteVoboTerceros)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("OTORGANTE_VOBO_TERCEROS");
            entity.Property(e => e.PersonaAtenderaComercio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("PERSONA_ATENDERA_COMERCIO");
            entity.Property(e => e.Poblacion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("POBLACION");
            entity.Property(e => e.Precio)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PRECIO");
            entity.Property(e => e.PrecioExito)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("PRECIO_EXITO");
            entity.Property(e => e.ProveedorAtenderaComercio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("PROVEEDOR_ATENDERA_COMERCIO");
            entity.Property(e => e.Responsable)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RESPONSABLE");
            entity.Property(e => e.Rp).HasColumnName("RP");
            entity.Property(e => e.Rs).HasColumnName("RS");
            entity.Property(e => e.Segmento).HasColumnName("SEGMENTO");
            entity.Property(e => e.Sintoma)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("SINTOMA");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.Telefono)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");
            entity.Property(e => e.TelefonoComercio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("TELEFONO_COMERCIO");
            entity.Property(e => e.TerminalAmex).HasColumnName("TERMINAL_AMEX");
            entity.Property(e => e.TipoFalla).HasColumnName("TIPO_FALLA");
            entity.Property(e => e.TipoServicio).HasColumnName("TIPO_SERVICIO");
            entity.Property(e => e.Traslado).HasColumnName("TRASLADO");
            entity.Property(e => e.VoltajeNeutro)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("VOLTAJE_NEUTRO");
            entity.Property(e => e.VoltajeTierra)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("VOLTAJE_TIERRA");
            entity.Property(e => e.VoltajeTierraNeutro)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("VOLTAJE_TIERRA_NEUTRO");
        });

        modelBuilder.Entity<BdArAccesorio>(entity =>
        {
            entity.HasKey(e => e.IdArAccesorio).HasName("PK__BD_AR_AC__3C0DB632687A5639");

            entity.ToTable("BD_AR_ACCESORIOS");

            entity.HasIndex(e => e.IdAr, "missing_index_ACCESORIOS_ID_AR");

            entity.Property(e => e.IdArAccesorio).HasColumnName("ID_AR_ACCESORIO");
            entity.Property(e => e.Base)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BASE");
            entity.Property(e => e.Bateria)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BATERIA");
            entity.Property(e => e.CableAc)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CABLE_AC");
            entity.Property(e => e.Eliminador)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ELIMINADOR");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.Movimiento)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("MOVIMIENTO");
            entity.Property(e => e.Tapa)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("TAPA");
        });

        modelBuilder.Entity<BdArArchivosCompress>(entity =>
        {
            entity.HasKey(e => e.IdArArchivoCompress).HasName("PK__BD_AR_AR__4D4514CA465E8AC0");

            entity.ToTable("BD_AR_ARCHIVOS_COMPRESS");

            entity.Property(e => e.IdArArchivoCompress).HasColumnName("ID_AR_ARCHIVO_COMPRESS");
            entity.Property(e => e.FecCompress)
                .HasColumnType("datetime")
                .HasColumnName("FEC_COMPRESS");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IdArArchivoVarios).HasColumnName("ID_AR_ARCHIVO_VARIOS");
            entity.Property(e => e.IsCompress).HasColumnName("IS_COMPRESS");
        });

        modelBuilder.Entity<BdArArchivosVario>(entity =>
        {
            entity.HasKey(e => e.IdArArchivoVarios);

            entity.ToTable("BD_AR_ARCHIVOS_VARIOS");

            entity.HasIndex(e => new { e.IdArArchivoVarios, e.IdAr, e.NombreArchivoSistema, e.NombreArchivoUsuario, e.Status }, "IX_BD_AR_ARCHIVOS_VARIOS");

            entity.HasIndex(e => new { e.IdAr, e.Status, e.NombreArchivoUsuario }, "IX_BD_AR_ARCHIVOS_VARIOS_ID_AR, STATUS");

            entity.HasIndex(e => new { e.IdAr, e.Status }, "IX_BD_AR_ARCHIVOS_VARIOS_ID_AR_STATUS_E2708");

            entity.HasIndex(e => new { e.IdAr, e.Status }, "IX_BD_AR_ARCHIVOS_VARIOS_ID_AR_STATUS_EF57C");

            entity.Property(e => e.IdArArchivoVarios).HasColumnName("ID_AR_ARCHIVO_VARIOS");
            entity.Property(e => e.FechaAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_ALTA");
            entity.Property(e => e.FechaStatus)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_STATUS");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IdTipoArchivo).HasColumnName("ID_TIPO_ARCHIVO");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.IdUsuarioStatus).HasColumnName("ID_USUARIO_STATUS");
            entity.Property(e => e.NombreArchivoSistema)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NOMBRE_ARCHIVO_SISTEMA");
            entity.Property(e => e.NombreArchivoUsuario)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NOMBRE_ARCHIVO_USUARIO");
            entity.Property(e => e.Ruta)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("RUTA");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdArCausasCancelacion>(entity =>
        {
            entity.HasKey(e => e.IdArCausaCancelacion).HasName("PK__BD_AR_CA__DCE7FEACEBEBAB20");

            entity.ToTable("BD_AR_CAUSAS_CANCELACION");

            entity.HasIndex(e => e.IdAr, "Index_by_ID_AR");

            entity.Property(e => e.IdArCausaCancelacion).HasColumnName("ID_AR_CAUSA_CANCELACION");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IdCausaCancelacion).HasColumnName("ID_CAUSA_CANCELACION");
        });

        modelBuilder.Entity<BdArCierreManual>(entity =>
        {
            entity.HasKey(e => e.IdCierreManual);

            entity.ToTable("BD_AR_CIERRE_MANUAL");

            entity.HasIndex(e => e.IdAr, "IX_BD_AR_CIERRE_MANUAL");

            entity.HasIndex(e => e.IdCierreMasivo, "IX_BD_AR_CIERRE_MANUAL_1");

            entity.Property(e => e.IdCierreManual).HasColumnName("ID_CIERRE_MANUAL");
            entity.Property(e => e.AfiliacionAmex).HasColumnName("AFILIACION_AMEX");
            entity.Property(e => e.ArchivoCambioConect)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("ARCHIVO_CAMBIO_CONECT");
            entity.Property(e => e.ArchivoSimInstalacion)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("ARCHIVO_SIM_INSTALACION");
            entity.Property(e => e.ArchivoSimRetirado)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("ARCHIVO_SIM_RETIRADO");
            entity.Property(e => e.ArchivoTerminalInstalacion)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("ARCHIVO_TERMINAL_INSTALACION");
            entity.Property(e => e.ArchivoTerminalRetiro)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("ARCHIVO_TERMINAL_RETIRO");
            entity.Property(e => e.Atiende)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("ATIENDE");
            entity.Property(e => e.Base)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("BASE");
            entity.Property(e => e.BaseRet)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("BASE_RET");
            entity.Property(e => e.Bateria)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("BATERIA");
            entity.Property(e => e.BateriaRet)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("BATERIA_RET");
            entity.Property(e => e.CableAc)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("CABLE_AC");
            entity.Property(e => e.CableAcRet)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("CABLE_AC_RET");
            entity.Property(e => e.Caja).HasColumnName("CAJA");
            entity.Property(e => e.ComentariosServicio)
                .HasMaxLength(2000)
                .IsFixedLength()
                .HasColumnName("COMENTARIOS_SERVICIO");
            entity.Property(e => e.ConclusionesAmex)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("CONCLUSIONES_AMEX");
            entity.Property(e => e.Discover)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("DISCOVER");
            entity.Property(e => e.Eliminador)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("ELIMINADOR");
            entity.Property(e => e.EliminadorRet)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("ELIMINADOR_RET");
            entity.Property(e => e.Estatus)
                .HasMaxLength(12)
                .IsFixedLength()
                .HasColumnName("ESTATUS");
            entity.Property(e => e.FechaCierre)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_CIERRE");
            entity.Property(e => e.Getnet)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("GETNET");
            entity.Property(e => e.IdAmex).HasColumnName("ID_AMEX");
            entity.Property(e => e.IdAplicativoCambioConect).HasColumnName("ID_APLICATIVO_CAMBIO_CONECT");
            entity.Property(e => e.IdAplicativoInstalacion).HasColumnName("ID_APLICATIVO_INSTALACION");
            entity.Property(e => e.IdAplicativoRetiro).HasColumnName("ID_APLICATIVO_RETIRO");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IdCarrierCambioConect).HasColumnName("ID_CARRIER_CAMBIO_CONECT");
            entity.Property(e => e.IdCarrierInstalacion).HasColumnName("ID_CARRIER_INSTALACION");
            entity.Property(e => e.IdCarrierRet).HasColumnName("ID_CARRIER_RET");
            entity.Property(e => e.IdCierreMasivo).HasColumnName("ID_CIERRE_MASIVO");
            entity.Property(e => e.IdConectividadCambioConect).HasColumnName("ID_CONECTIVIDAD_CAMBIO_CONECT");
            entity.Property(e => e.IdConectividadCambioConectNueva).HasColumnName("ID_CONECTIVIDAD_CAMBIO_CONECT_NUEVA");
            entity.Property(e => e.IdConectividadCambioConectNuevaExiste).HasColumnName("ID_CONECTIVIDAD_CAMBIO_CONECT_NUEVA_EXISTE");
            entity.Property(e => e.IdConectividadInstalacion).HasColumnName("ID_CONECTIVIDAD_INSTALACION");
            entity.Property(e => e.IdConectividadRetiro).HasColumnName("ID_CONECTIVIDAD_RETIRO");
            entity.Property(e => e.IdCriterioCambio).HasColumnName("ID_CRITERIO_CAMBIO");
            entity.Property(e => e.IdMarcaCambioConect).HasColumnName("ID_MARCA_CAMBIO_CONECT");
            entity.Property(e => e.IdMarcaRetiro).HasColumnName("ID_MARCA_RETIRO");
            entity.Property(e => e.IdModeloCambioConect).HasColumnName("ID_MODELO_CAMBIO_CONECT");
            entity.Property(e => e.IdModeloRetiro).HasColumnName("ID_MODELO_RETIRO");
            entity.Property(e => e.IdSerieCambioConect).HasColumnName("ID_SERIE_CAMBIO_CONECT");
            entity.Property(e => e.IdTecnico).HasColumnName("ID_TECNICO");
            entity.Property(e => e.IdTipoAtencion).HasColumnName("ID_TIPO_ATENCION");
            entity.Property(e => e.IsAmex)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("IS_AMEX");
            entity.Property(e => e.NoSeRetiraSim).HasColumnName("NO_SE_RETIRA_SIM");
            entity.Property(e => e.NoSerieCambioConect)
                .HasMaxLength(30)
                .IsFixedLength()
                .HasColumnName("NO_SERIE_CAMBIO_CONECT_");
            entity.Property(e => e.NoSerieInstalacion)
                .HasMaxLength(30)
                .IsFixedLength()
                .HasColumnName("NO_SERIE_INSTALACION");
            entity.Property(e => e.NoSerieRetiro)
                .HasMaxLength(30)
                .IsFixedLength()
                .HasColumnName("NO_SERIE_RETIRO");
            entity.Property(e => e.Origen)
                .HasMaxLength(3)
                .IsFixedLength()
                .HasColumnName("ORIGEN");
            entity.Property(e => e.OtorganteVobo)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("OTORGANTE_VOBO");
            entity.Property(e => e.RetiroSimCambioConect)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("RETIRO_SIM_CAMBIO_CONECT");
            entity.Property(e => e.RollosInstalados).HasColumnName("ROLLOS_INSTALADOS");
            entity.Property(e => e.SeDejaMismoSim).HasColumnName("SE_DEJA_MISMO_SIM");
            entity.Property(e => e.SimCambioConect)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("SIM_CAMBIO_CONECT");
            entity.Property(e => e.SimExistente)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("SIM_EXISTENTE");
            entity.Property(e => e.SimInstalacion)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("SIM_INSTALACION");
            entity.Property(e => e.SimRetiro)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("SIM_RETIRO");
            entity.Property(e => e.SimSinRetirar)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("SIM_SIN_RETIRAR");
            entity.Property(e => e.Tapa)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("TAPA");
            entity.Property(e => e.TapaRet)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("TAPA_RET");
            entity.Property(e => e.TipoMovimiento)
                .HasMaxLength(30)
                .IsFixedLength()
                .HasColumnName("TIPO_MOVIMIENTO");
            entity.Property(e => e.UsuarioId).HasColumnName("USUARIO_ID");
            entity.Property(e => e.VersionCambioConect)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("VERSION_CAMBIO_CONECT");
            entity.Property(e => e.VersionInstalacion)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("VERSION_INSTALACION");
            entity.Property(e => e.VersionRetiro)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("VERSION_RETIRO");
        });

        modelBuilder.Entity<BdArDatosComerciosExtra>(entity =>
        {
            entity.HasKey(e => e.IdArDatoComercioExtra).HasName("PK__BD_AR_DA__F4BBDEAE0F219F6C");

            entity.ToTable("BD_AR_DATOS_COMERCIOS_EXTRA");

            entity.Property(e => e.IdArDatoComercioExtra).HasColumnName("ID_AR_DATO_COMERCIO_EXTRA");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.NoAr)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NO_AR");
            entity.Property(e => e.PersonaAtendera)
                .IsUnicode(false)
                .HasColumnName("PERSONA_ATENDERA");
            entity.Property(e => e.ProveedorAtendera)
                .IsUnicode(false)
                .HasColumnName("PROVEEDOR_ATENDERA");
            entity.Property(e => e.Telefono)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");
        });

        modelBuilder.Entity<BdArDesviacion>(entity =>
        {
            entity.HasKey(e => e.IdArDesviacion);

            entity.ToTable("BD_AR_DESVIACION");

            entity.Property(e => e.IdArDesviacion).HasColumnName("ID_AR_DESVIACION");
            entity.Property(e => e.Comentario)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("COMENTARIO");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.FechaFin)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_FIN");
            entity.Property(e => e.FechaInicio)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_INICIO");
            entity.Property(e => e.HaveDescripcion).HasColumnName("HAVE_DESCRIPCION");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IdDesviacion).HasColumnName("ID_DESVIACION");
            entity.Property(e => e.IdTecnico).HasColumnName("ID_TECNICO");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");

            entity.HasOne(d => d.IdDesviacionNavigation).WithMany(p => p.BdArDesviacions)
                .HasForeignKey(d => d.IdDesviacion)
                .HasConstraintName("FK_BD_AR_DESVIACION_C_DESVIACIONES");
        });

        modelBuilder.Entity<BdArDiasAtencion>(entity =>
        {
            entity.HasKey(e => e.IdArDiasAtencion).HasName("PK__BD_AR_DI__1FA76D7F34B45D23");

            entity.ToTable("BD_AR_DIAS_ATENCION");

            entity.HasIndex(e => e.IdAr, "IX_BD_AR_DIAS_ATENCION");

            entity.HasIndex(e => e.FecAlta, "IX_BD_AR_DIAS_ATENCION_1");

            entity.HasIndex(e => e.IdAr, "missing_index_1843_1842");

            entity.HasIndex(e => e.IdAr, "missing_index_448_447");

            entity.Property(e => e.IdArDiasAtencion).HasColumnName("ID_AR_DIAS_ATENCION");
            entity.Property(e => e.Domingo).HasColumnName("DOMINGO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Jueves).HasColumnName("JUEVES");
            entity.Property(e => e.Lunes).HasColumnName("LUNES");
            entity.Property(e => e.Martes).HasColumnName("MARTES");
            entity.Property(e => e.Miercoles).HasColumnName("MIERCOLES");
            entity.Property(e => e.Sabado).HasColumnName("SABADO");
            entity.Property(e => e.Viernes).HasColumnName("VIERNES");
        });

        modelBuilder.Entity<BdArDocumentosSalesforce>(entity =>
        {
            entity.HasKey(e => e.IdArDocumentoSalesforce).HasName("PK__BD_AR_DO__CA4684FE42C66CE9");

            entity.ToTable("BD_AR_DOCUMENTOS_SALESFORCE");

            entity.Property(e => e.IdArDocumentoSalesforce).HasColumnName("ID_AR_DOCUMENTO_SALESFORCE");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IdDocumentoSalesforce)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ID_DOCUMENTO_SALESFORCE");
            entity.Property(e => e.IdTipoDocumento).HasColumnName("ID_TIPO_DOCUMENTO");
        });

        modelBuilder.Entity<BdArExtension>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_BD_EXTENSION_BD_AR");

            entity.ToTable("BD_AR_EXTENSION");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.FecLlegadaIngPartner)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_LLEGADA_ING_PARTNER");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.Is2TaquetesAdicionales).HasColumnName("IS_2_TAQUETES_ADICIONALES");
            entity.Property(e => e.IsBlindajeTuercaSeguridad).HasColumnName("IS_BLINDAJE_TUERCA_SEGURIDAD");
            entity.Property(e => e.IsFotografias).HasColumnName("IS_FOTOGRAFIAS");
            entity.Property(e => e.IsInstalacionPlacaFrontal).HasColumnName("IS_INSTALACION_PLACA_FRONTAL");
            entity.Property(e => e.IsInstalacionPlacaLateral).HasColumnName("IS_INSTALACION_PLACA_LATERAL");
            entity.Property(e => e.IsSustitucion4Tuercas).HasColumnName("IS_SUSTITUCION_4_TUERCAS");
            entity.Property(e => e.IsValidacionAlarmas).HasColumnName("IS_VALIDACION_ALARMAS");
            entity.Property(e => e.Motivo2TaquetesAdicionales)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("MOTIVO_2_TAQUETES_ADICIONALES");
            entity.Property(e => e.MotivoBlindajeTuercaSeguridad)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("MOTIVO_BLINDAJE_TUERCA_SEGURIDAD");
            entity.Property(e => e.MotivoFotografias)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("MOTIVO_FOTOGRAFIAS");
            entity.Property(e => e.MotivoInstalacionPlacaFrontal)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("MOTIVO_INSTALACION_PLACA_FRONTAL");
            entity.Property(e => e.MotivoInstalacionPlacaLateral)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("MOTIVO_INSTALACION_PLACA_LATERAL");
            entity.Property(e => e.MotivoSustitucion4Tuercas)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MOTIVO_SUSTITUCION_4_TUERCAS");
            entity.Property(e => e.OtorganteVoboIngPartner)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("OTORGANTE_VOBO_ING_PARTNER");
            entity.Property(e => e.PersonalBanco)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("PERSONAL_BANCO");
            entity.Property(e => e.ReporteServicioPartner)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("REPORTE_SERVICIO_PARTNER");
        });

        modelBuilder.Entity<BdArFecGarantium>(entity =>
        {
            entity.HasKey(e => e.IdArFecGarantia).HasName("PK__BD_AR_FE__8E7CE109CCF2D87C");

            entity.ToTable("BD_AR_FEC_GARANTIA");

            entity.Property(e => e.IdArFecGarantia).HasColumnName("ID_AR_FEC_GARANTIA");
            entity.Property(e => e.Error)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("ERROR");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdArInsumo>(entity =>
        {
            entity.HasKey(e => e.IdArInsumo);

            entity.ToTable("BD_AR_INSUMO");

            entity.HasIndex(e => new { e.IsMicrosip, e.ControlMicrosip }, "IX_BD_AR_INSUMO");

            entity.Property(e => e.IdArInsumo).HasColumnName("ID_AR_INSUMO");
            entity.Property(e => e.Cantidad).HasColumnName("CANTIDAD");
            entity.Property(e => e.ControlMicrosip).HasColumnName("CONTROL_MICROSIP");
            entity.Property(e => e.CostoTotal)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("COSTO_TOTAL");
            entity.Property(e => e.CostoUnitario)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("COSTO_UNITARIO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IdInsumo).HasColumnName("ID_INSUMO");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.IsMicrosip).HasColumnName("IS_MICROSIP");
        });

        modelBuilder.Entity<BdArLogApiProveedore>(entity =>
        {
            entity.HasKey(e => e.IdArLogApiProveedor).HasName("PK__BD_AR_LO__5B0795DEE6E53224");

            entity.ToTable("BD_AR_LOG_API_PROVEEDORES");

            entity.HasIndex(e => e.NoAr, "IX_BD_AR_LOG_API_PROVEEDORES_NO_AR_E4F4C");

            entity.Property(e => e.IdArLogApiProveedor).HasColumnName("ID_AR_LOG_API_PROVEEDOR");
            entity.Property(e => e.Estado)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ESTADO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IdProveedorAlta).HasColumnName("ID_PROVEEDOR_ALTA");
            entity.Property(e => e.Jsonp)
                .IsUnicode(false)
                .HasColumnName("JSONP");
            entity.Property(e => e.NoAr)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("NO_AR");
        });

        modelBuilder.Entity<BdArLogW>(entity =>
        {
            entity.HasKey(e => e.IdArLogWs).HasName("PK__BD_AR_LO__198419D80AD9AB5B");

            entity.ToTable("BD_AR_LOG_WS");

            entity.Property(e => e.IdArLogWs).HasColumnName("ID_AR_LOG_WS");
            entity.Property(e => e.Error)
                .IsUnicode(false)
                .HasColumnName("ERROR");
            entity.Property(e => e.Estatus)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ESTATUS");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.NoAr)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NO_AR");
        });

        modelBuilder.Entity<BdArLogWsSalesforce>(entity =>
        {
            entity.HasKey(e => e.IdArLogWsSalesforce).HasName("PK__BD_AR_LO__9634FD2DB0685B03");

            entity.ToTable("BD_AR_LOG_WS_SALESFORCE");

            entity.HasIndex(e => new { e.Estatus, e.FecAlta }, "IX_BD_AR_LOG_WS_SALESFORCE_ESTATUS_FEC_ALTA_75C86");

            entity.Property(e => e.IdArLogWsSalesforce).HasColumnName("ID_AR_LOG_WS_SALESFORCE");
            entity.Property(e => e.Error)
                .IsUnicode(false)
                .HasColumnName("ERROR");
            entity.Property(e => e.Estatus)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ESTATUS");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.NoAr)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NO_AR");
        });

        modelBuilder.Entity<BdArMiComercio>(entity =>
        {
            entity.HasKey(e => e.IdArMiComercio).HasName("PK__BD_AR_MI__75E1F5CA2ED5E011");

            entity.ToTable("BD_AR_MI_COMERCIO");

            entity.Property(e => e.IdArMiComercio).HasColumnName("ID_AR_MI_COMERCIO");
            entity.Property(e => e.DescargarApp).HasColumnName("DESCARGAR_APP");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.Notificado).HasColumnName("NOTIFICADO");
            entity.Property(e => e.Promociones).HasColumnName("PROMOCIONES");
            entity.Property(e => e.Telefono1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("TELEFONO_1");
            entity.Property(e => e.Telefono2)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("TELEFONO_2");
        });

        modelBuilder.Entity<BdArNegotiationType>(entity =>
        {
            entity.HasKey(e => e.IdArTipoNegociacion).HasName("PK__BdArNego__E97E7AAD514A6A92");

            entity.ToTable("BdArNegotiationType");

            entity.Property(e => e.NegotiationType)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<BdArNotificacionesAltum>(entity =>
        {
            entity.HasKey(e => e.IdArNotificacionesAlta).HasName("PK__BD_AR_NO__E13466A397010A04");

            entity.ToTable("BD_AR_NOTIFICACIONES_ALTA");

            entity.Property(e => e.IdArNotificacionesAlta).HasColumnName("ID_AR_NOTIFICACIONES_ALTA");
            entity.Property(e => e.EmailTo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("EMAIL_TO");
            entity.Property(e => e.FecEnviado)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ENVIADO");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IdTecnico).HasColumnName("ID_TECNICO");
            entity.Property(e => e.IsEnviado).HasColumnName("IS_ENVIADO");
        });

        modelBuilder.Entity<BdArPaso>(entity =>
        {
            entity.HasKey(e => e.IdArPaso).HasName("PK__BD_AR_PA__74E2F80DC95D8C1E");

            entity.ToTable("BD_AR_PASO");

            entity.Property(e => e.IdArPaso).HasColumnName("ID_AR_PASO");
            entity.Property(e => e.AfiliacionTerminalAmex)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("AFILIACION_TERMINAL_AMEX");
            entity.Property(e => e.AsociadaTerminal)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("ASOCIADA_TERMINAL");
            entity.Property(e => e.CajaId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CAJA_ID");
            entity.Property(e => e.CantidadRollos)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CANTIDAD_ROLLOS");
            entity.Property(e => e.Contacto)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CONTACTO");
            entity.Property(e => e.CorreoEjecutivo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CORREO_EJECUTIVO");
            entity.Property(e => e.Descripcion)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");
            entity.Property(e => e.DiasAtencion)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("DIAS_ATENCION");
            entity.Property(e => e.Direccion)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");
            entity.Property(e => e.DireccionAlterna)
                .IsUnicode(false)
                .HasColumnName("DIRECCION_ALTERNA");
            entity.Property(e => e.Dom)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("DOM");
            entity.Property(e => e.FecInicio)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FEC_INICIO");
            entity.Property(e => e.FechaCargaTemporal)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_CARGA_TEMPORAL");
            entity.Property(e => e.FolioTelecarga)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("FOLIO_TELECARGA");
            entity.Property(e => e.Hri)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("HRI");
            entity.Property(e => e.Htf)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("HTF");
            entity.Property(e => e.IdProducto)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ID_PRODUCTO");
            entity.Property(e => e.IdTecnico)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ID_TECNICO");
            entity.Property(e => e.IdTerminalAmex)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ID_TERMINAL_AMEX");
            entity.Property(e => e.IsProgramado)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("IS_PROGRAMADO");
            entity.Property(e => e.Jue)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("JUE");
            entity.Property(e => e.Lun)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("LUN");
            entity.Property(e => e.Mar)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("MAR");
            entity.Property(e => e.Mie)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("MIE");
            entity.Property(e => e.Minf)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MINF");
            entity.Property(e => e.Mini)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MINI");
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.NoSerie)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");
            entity.Property(e => e.NombreComercio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NOMBRE_COMERCIO");
            entity.Property(e => e.Observaciones)
                .IsUnicode(false)
                .HasColumnName("OBSERVACIONES");
            entity.Property(e => e.Odt)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ODT");
            entity.Property(e => e.PersonaAtiendeComercio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("PERSONA_ATIENDE_COMERCIO");
            entity.Property(e => e.ProveedorComercio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("PROVEEDOR_COMERCIO");
            entity.Property(e => e.ProveedorServicio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("PROVEEDOR_SERVICIO");
            entity.Property(e => e.Responsable)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("RESPONSABLE");
            entity.Property(e => e.Sab)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SAB");
            entity.Property(e => e.SubtipoServicio)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUBTIPO_SERVICIO");
            entity.Property(e => e.Telefono)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");
            entity.Property(e => e.TelefonoComercio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("TELEFONO_COMERCIO");
            entity.Property(e => e.Timeh)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("TIMEH");
            entity.Property(e => e.Timem)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("TIMEM");
            entity.Property(e => e.TipoAb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TIPO_AB");
            entity.Property(e => e.TipoComercio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("TIPO_COMERCIO");
            entity.Property(e => e.TipoServicio)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TIPO_SERVICIO");
            entity.Property(e => e.Vie)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("VIE");
        });

        modelBuilder.Entity<BdArPdf>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_AR_PDF");

            entity.HasIndex(e => e.IdPdfAr, "IX_BD_AR_PDF");

            entity.HasIndex(e => new { e.FileName, e.IdPdfAr, e.FecCarga, e.Estatus, e.IdCarga }, "IX_BD_AR_PDF_1");

            entity.Property(e => e.Estatus).HasColumnName("ESTATUS");
            entity.Property(e => e.FecCarga)
                .HasColumnType("datetime")
                .HasColumnName("FEC_CARGA");
            entity.Property(e => e.FileName)
                .IsRequired()
                .HasMaxLength(60)
                .IsFixedLength()
                .HasColumnName("FILE_NAME");
            entity.Property(e => e.IdCarga).HasColumnName("ID_CARGA");
            entity.Property(e => e.IdPdfAr)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_PDF_AR");
        });

        modelBuilder.Entity<BdArPrefacturacion>(entity =>
        {
            entity.HasKey(e => e.IdArPrefacturacion);

            entity.ToTable("BD_AR_PREFACTURACION");

            entity.HasIndex(e => new { e.IdAr, e.Status }, "IX_BD_AR_PREFACTURACION_ID_AR, STATUS");

            entity.HasIndex(e => new { e.IdTipoResponsableDoctoPrefacturacionFisico, e.IdStatusDoctoPrefacturacionFisico, e.Status }, "IX_BD_AR_PREFACTURACION_ID_TIPO_RESPONSABLE_DOCTO_PREFACTURACION_FISICO, ID_STATUS_DOCTO_PREFACTURACION_FISICO, STATUS").HasFillFactor(80);

            entity.HasIndex(e => e.Status, "IX_BD_AR_PREFACTURACION_STATUS").HasFillFactor(80);

            entity.HasIndex(e => e.Status, "IX_MI_BD_AR_PREFACTURACION_122_121");

            entity.HasIndex(e => e.Status, "IX_MI_BD_AR_PREFACTURACION_13804_13803");

            entity.HasIndex(e => e.Status, "IX_MI_BD_AR_PREFACTURACION_6509_6508");

            entity.Property(e => e.IdArPrefacturacion).HasColumnName("ID_AR_PREFACTURACION");
            entity.Property(e => e.Counter).HasColumnName("COUNTER");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.FecStatus)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_STATUS");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IdBitacoraAgendado).HasColumnName("ID_BITACORA_AGENDADO");
            entity.Property(e => e.IdCausaRechazoDefinitivoDoctoPrefacturacion).HasColumnName("ID_CAUSA_RECHAZO_DEFINITIVO_DOCTO_PREFACTURACION");
            entity.Property(e => e.IdResponsableDoctoPrefacturacionDigital).HasColumnName("ID_RESPONSABLE_DOCTO_PREFACTURACION_DIGITAL");
            entity.Property(e => e.IdResponsableDoctoPrefacturacionFisico).HasColumnName("ID_RESPONSABLE_DOCTO_PREFACTURACION_FISICO");
            entity.Property(e => e.IdStatusArPrefacturacion).HasColumnName("ID_STATUS_AR_PREFACTURACION");
            entity.Property(e => e.IdStatusDoctoPrefacturacionDigital).HasColumnName("ID_STATUS_DOCTO_PREFACTURACION_DIGITAL");
            entity.Property(e => e.IdStatusDoctoPrefacturacionFisico).HasColumnName("ID_STATUS_DOCTO_PREFACTURACION_FISICO");
            entity.Property(e => e.IdTarea).HasColumnName("ID_TAREA");
            entity.Property(e => e.IdTipoResponsableDoctoPrefacturacionDigital).HasColumnName("ID_TIPO_RESPONSABLE_DOCTO_PREFACTURACION_DIGITAL");
            entity.Property(e => e.IdTipoResponsableDoctoPrefacturacionFisico).HasColumnName("ID_TIPO_RESPONSABLE_DOCTO_PREFACTURACION_FISICO");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.IdUsuarioStatus).HasColumnName("ID_USUARIO_STATUS");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdArProducto>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_AR_PRODUCTOS");

            entity.HasIndex(e => e.IdCarga, "missing_index_3622_3621");

            entity.HasIndex(e => e.IdAr, "missing_index_907_906");

            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IdArProducto)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_AR_PRODUCTO");
            entity.Property(e => e.IdCarga).HasColumnName("ID_CARGA");
            entity.Property(e => e.IsProducto).HasColumnName("IS_PRODUCTO");
            entity.Property(e => e.Producto)
                .IsUnicode(false)
                .HasColumnName("PRODUCTO");
        });

        modelBuilder.Entity<BdArReasignacionLog>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_AR_REASIGNACION_LOG");

            entity.Property(e => e.AgregarDiasAtencion).HasColumnName("AGREGAR_DIAS_ATENCION");
            entity.Property(e => e.Bitacora)
                .IsUnicode(false)
                .HasColumnName("BITACORA");
            entity.Property(e => e.Caja)
                .IsUnicode(false)
                .HasColumnName("CAJA");
            entity.Property(e => e.Colonia)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("COLONIA");
            entity.Property(e => e.Concepto)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CONCEPTO");
            entity.Property(e => e.CorreoEjecutivo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CORREO_EJECUTIVO");
            entity.Property(e => e.Cp)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("CP");
            entity.Property(e => e.DescCorta)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_CORTA");
            entity.Property(e => e.DescEquipo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_EQUIPO");
            entity.Property(e => e.DescNegocio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_NEGOCIO");
            entity.Property(e => e.Direccion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");
            entity.Property(e => e.DireccionAlternaComercio)
                .IsUnicode(false)
                .HasColumnName("DIRECCION_ALTERNA_COMERCIO");
            entity.Property(e => e.Equipo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("EQUIPO");
            entity.Property(e => e.Estado)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ESTADO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.FecCierre).HasColumnName("FEC_CIERRE");
            entity.Property(e => e.FecConvenio)
                .HasColumnType("datetime")
                .HasColumnName("FEC_CONVENIO");
            entity.Property(e => e.FecInicio)
                .HasColumnType("datetime")
                .HasColumnName("FEC_INICIO");
            entity.Property(e => e.FecStatusAr)
                .HasColumnType("datetime")
                .HasColumnName("FEC_STATUS_AR");
            entity.Property(e => e.FolioTelecarga).HasColumnName("FOLIO_TELECARGA");
            entity.Property(e => e.HoraAtencionFin).HasColumnName("HORA_ATENCION_FIN");
            entity.Property(e => e.HoraAtencionIni).HasColumnName("HORA_ATENCION_INI");
            entity.Property(e => e.HorasGarantia).HasColumnName("HORAS_GARANTIA");
            entity.Property(e => e.IdArOriginal).HasColumnName("ID_AR_ORIGINAL");
            entity.Property(e => e.IdCarga).HasColumnName("ID_CARGA");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdConcepto).HasColumnName("ID_CONCEPTO");
            entity.Property(e => e.IdEquipoCliente).HasColumnName("ID_EQUIPO_CLIENTE");
            entity.Property(e => e.IdEstado).HasColumnName("ID_ESTADO");
            entity.Property(e => e.IdFalla).HasColumnName("ID_FALLA");
            entity.Property(e => e.IdModeloReq).HasColumnName("ID_MODELO_REQ");
            entity.Property(e => e.IdMoneda).HasColumnName("ID_MONEDA");
            entity.Property(e => e.IdNegocio).HasColumnName("ID_NEGOCIO");
            entity.Property(e => e.IdPlaza).HasColumnName("ID_PLAZA");
            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");
            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");
            entity.Property(e => e.IdProyecto).HasColumnName("ID_PROYECTO");
            entity.Property(e => e.IdRegion).HasColumnName("ID_REGION");
            entity.Property(e => e.IdSegmento).HasColumnName("ID_SEGMENTO");
            entity.Property(e => e.IdServicio).HasColumnName("ID_SERVICIO");
            entity.Property(e => e.IdStatusAr).HasColumnName("ID_STATUS_AR");
            entity.Property(e => e.IdTecnico).HasColumnName("ID_TECNICO");
            entity.Property(e => e.IdTipoCobro).HasColumnName("ID_TIPO_COBRO");
            entity.Property(e => e.IdTipoEquipo).HasColumnName("ID_TIPO_EQUIPO");
            entity.Property(e => e.IdTipoPlaza).HasColumnName("ID_TIPO_PLAZA");
            entity.Property(e => e.IdTipoPrecio).HasColumnName("ID_TIPO_PRECIO");
            entity.Property(e => e.IdTipoServicio).HasColumnName("ID_TIPO_SERVICIO");
            entity.Property(e => e.IdZona).HasColumnName("ID_ZONA");
            entity.Property(e => e.Insumos).HasColumnName("INSUMOS");
            entity.Property(e => e.IsActualizacion).HasColumnName("IS_ACTUALIZACION");
            entity.Property(e => e.IsCobrable).HasColumnName("IS_COBRABLE");
            entity.Property(e => e.IsDuplicada).HasColumnName("IS_DUPLICADA");
            entity.Property(e => e.IsExito).HasColumnName("IS_EXITO");
            entity.Property(e => e.IsFollowDispatch).HasColumnName("IS_FOLLOW_DISPATCH");
            entity.Property(e => e.IsIngresoManual).HasColumnName("IS_INGRESO_MANUAL");
            entity.Property(e => e.IsInstalacion).HasColumnName("IS_INSTALACION");
            entity.Property(e => e.IsProgramado).HasColumnName("IS_PROGRAMADO");
            entity.Property(e => e.IsRetiro).HasColumnName("IS_RETIRO");
            entity.Property(e => e.IsSustitucion).HasColumnName("IS_SUSTITUCION");
            entity.Property(e => e.IsTecnicoForaneo).HasColumnName("IS_TECNICO_FORANEO");
            entity.Property(e => e.MinsDowntime).HasColumnName("MINS_DOWNTIME");
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.NoAr)
                .IsUnicode(false)
                .HasColumnName("NO_AR");
            entity.Property(e => e.NoDiasLiberacion).HasColumnName("NO_DIAS_LIBERACION");
            entity.Property(e => e.NoInventario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_INVENTARIO");
            entity.Property(e => e.NoReincidencias).HasColumnName("NO_REINCIDENCIAS");
            entity.Property(e => e.NoSerie)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");
            entity.Property(e => e.NotasRemedy)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NOTAS_REMEDY");
            entity.Property(e => e.PersonaAtenderaComercio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("PERSONA_ATENDERA_COMERCIO");
            entity.Property(e => e.Poblacion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("POBLACION");
            entity.Property(e => e.Precio)
                .IsUnicode(false)
                .HasColumnName("PRECIO");
            entity.Property(e => e.PrecioExito)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("PRECIO_EXITO");
            entity.Property(e => e.ProveedorAtenderaComercio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("PROVEEDOR_ATENDERA_COMERCIO");
            entity.Property(e => e.Responsable)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RESPONSABLE");
            entity.Property(e => e.Rs).HasColumnName("RS");
            entity.Property(e => e.Segmento).HasColumnName("SEGMENTO");
            entity.Property(e => e.Sintoma)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("SINTOMA");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.Telefono)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");
            entity.Property(e => e.TelefonoComercio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("TELEFONO_COMERCIO");
            entity.Property(e => e.TerminalAmex).HasColumnName("TERMINAL_AMEX");
            entity.Property(e => e.TipoFalla).HasColumnName("TIPO_FALLA");
            entity.Property(e => e.TipoServicio).HasColumnName("TIPO_SERVICIO");
            entity.Property(e => e.VoltajeTierraNeutro).HasColumnName("VOLTAJE_TIERRA_NEUTRO");
        });

        modelBuilder.Entity<BdArSalesforce>(entity =>
        {
            entity.HasKey(e => e.IdArSalesforce).HasName("PK__BD_AR_SA__832C3D82F44A8272");

            entity.ToTable("BD_AR_SALESFORCE");

            entity.Property(e => e.IdArSalesforce).HasColumnName("ID_AR_SALESFORCE");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
        });

        modelBuilder.Entity<BdArSlaInventario>(entity =>
        {
            entity.HasKey(e => e.IdSlaInv);

            entity.ToTable("BD_AR_SLA_INVENTARIOS");

            entity.Property(e => e.IdSlaInv).HasColumnName("ID_SLA_INV");
            entity.Property(e => e.FecFinSla)
                .HasColumnType("datetime")
                .HasColumnName("FEC_FIN_SLA");
            entity.Property(e => e.FecInicioSla)
                .HasColumnType("datetime")
                .HasColumnName("FEC_INICIO_SLA");
            entity.Property(e => e.FecReal)
                .HasColumnType("datetime")
                .HasColumnName("FEC_REAL");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.IdUsuarioMovInv).HasColumnName("ID_USUARIO_MOV_INV");
        });

        modelBuilder.Entity<BdArSparePart>(entity =>
        {
            entity.HasKey(e => e.IdArSparePart);

            entity.ToTable("BD_AR_SPARE_PART");

            entity.Property(e => e.IdArSparePart).HasColumnName("ID_AR_SPARE_PART");
            entity.Property(e => e.Cantidad).HasColumnName("CANTIDAD");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IdSparePart).HasColumnName("ID_SPARE_PART");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.PrecioTotal)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("PRECIO_TOTAL");
            entity.Property(e => e.PrecioUnitario)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("PRECIO_UNITARIO");

            entity.HasOne(d => d.IdSparePartNavigation).WithMany(p => p.BdArSpareParts)
                .HasForeignKey(d => d.IdSparePart)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BD_AR_SPARE_PART_C_SPARE_PARTS");
        });

        modelBuilder.Entity<BdArTecnico>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_AR_TECNICO");

            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IdArTecnico)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_AR_TECNICO");
            entity.Property(e => e.IdCarga).HasColumnName("ID_CARGA");
            entity.Property(e => e.IdTecnico).HasColumnName("ID_TECNICO");
            entity.Property(e => e.Segmento)
                .IsUnicode(false)
                .HasColumnName("SEGMENTO");
        });

        modelBuilder.Entity<BdArTerminalAsociadaAmex>(entity =>
        {
            entity.HasKey(e => e.IdArTerminalAsociadaAmex).HasName("PK__BD_AR_TE__007BB9C43669A860");

            entity.ToTable("BD_AR_TERMINAL_ASOCIADA_AMEX");

            entity.HasIndex(e => e.FecAlta, "IX_BD_AR_TERMINAL_ASOCIADA_AMEX");

            entity.HasIndex(e => e.AfiliacionTerminalAmex, "IX_BD_AR_TERMINAL_ASOCIADA_AMEX_1");

            entity.HasIndex(e => e.IdUsuarioAlta, "IX_BD_AR_TERMINAL_ASOCIADA_AMEX_2");

            entity.HasIndex(e => e.IdAr, "missing_index_260_259");

            entity.Property(e => e.IdArTerminalAsociadaAmex).HasColumnName("ID_AR_TERMINAL_ASOCIADA_AMEX");
            entity.Property(e => e.AfiliacionTerminalAmex)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AFILIACION_TERMINAL_AMEX");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IdTerminalAmex)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ID_TERMINAL_AMEX");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
        });

        modelBuilder.Entity<BdArViatico>(entity =>
        {
            entity.HasKey(e => e.IdArViatico);

            entity.ToTable("BD_AR_VIATICO");

            entity.Property(e => e.IdArViatico).HasColumnName("ID_AR_VIATICO");
            entity.Property(e => e.Costo)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("COSTO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.IdViatico).HasColumnName("ID_VIATICO");

            entity.HasOne(d => d.IdViaticoNavigation).WithMany(p => p.BdArViaticos)
                .HasForeignKey(d => d.IdViatico)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BD_AR_VIATICO_C_VIATICOS");
        });

        modelBuilder.Entity<BdArViaticoMotivo>(entity =>
        {
            entity.HasKey(e => e.IdArViaticoMotivo);

            entity.ToTable("BD_AR_VIATICO_MOTIVO");

            entity.Property(e => e.IdArViaticoMotivo).HasColumnName("ID_AR_VIATICO_MOTIVO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdMotivo).HasColumnName("ID_MOTIVO");
            entity.Property(e => e.IdSolicitudViatico).HasColumnName("ID_SOLICITUD_VIATICO");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.NoAr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AR");
        });

        modelBuilder.Entity<BdArVisita>(entity =>
        {
            entity.HasKey(e => e.IdArVisita);

            entity.ToTable("BD_AR_VISITAS");

            entity.Property(e => e.IdArVisita).HasColumnName("ID_AR_VISITA");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.FecStatus)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_STATUS");
            entity.Property(e => e.FecVisita)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_VISITA");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IdMoneda).HasColumnName("ID_MONEDA");
            entity.Property(e => e.IdTecnico).HasColumnName("ID_TECNICO");
            entity.Property(e => e.IdTipoCobro).HasColumnName("ID_TIPO_COBRO");
            entity.Property(e => e.IdTipoPrecio).HasColumnName("ID_TIPO_PRECIO");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.IdUsuarioStatus).HasColumnName("ID_USUARIO_STATUS");
            entity.Property(e => e.IsCobrable).HasColumnName("IS_COBRABLE");
            entity.Property(e => e.Precio)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("PRECIO");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");

            entity.HasOne(d => d.IdTipoCobroNavigation).WithMany(p => p.BdArVisita)
                .HasForeignKey(d => d.IdTipoCobro)
                .HasConstraintName("FK_BD_AR_VISITAS_C_TIPO_COBRO");
        });

        modelBuilder.Entity<BdArchivo1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_ARCHIVO1");

            entity.HasIndex(e => e.IdCarga, "IX_BD_ARCHIVO1_ID_CARGA").HasFillFactor(80);

            entity.Property(e => e.Afiliación).HasMaxLength(255);
            entity.Property(e => e.Ar)
                .HasMaxLength(255)
                .HasColumnName("AR");
            entity.Property(e => e.Bitácora).HasMaxLength(4000);
            entity.Property(e => e.Colonia).HasMaxLength(255);
            entity.Property(e => e.Concepto).HasMaxLength(255);
            entity.Property(e => e.Cp)
                .HasMaxLength(255)
                .HasColumnName("CP");
            entity.Property(e => e.DescCorta)
                .HasMaxLength(255)
                .HasColumnName("Desc#Corta");
            entity.Property(e => e.DescEquipo).HasMaxLength(255);
            entity.Property(e => e.Dirección).HasMaxLength(255);
            entity.Property(e => e.Estado).HasMaxLength(255);
            entity.Property(e => e.FechaAtencion).HasMaxLength(255);
            entity.Property(e => e.FechaConvenio).HasMaxLength(255);
            entity.Property(e => e.FechaInicio).HasMaxLength(255);
            entity.Property(e => e.IdCarga).HasColumnName("ID_CARGA");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdEquipo).HasMaxLength(255);
            entity.Property(e => e.IdSegmento).HasMaxLength(255);
            entity.Property(e => e.Idaplicativo).HasColumnName("IDaplicativo");
            entity.Property(e => e.Idconectividad).HasColumnName("IDconectividad");
            entity.Property(e => e.IdmodeloReq)
                .HasMaxLength(255)
                .HasColumnName("IDModeloReq");
            entity.Property(e => e.Idproyecto)
                .HasMaxLength(255)
                .HasColumnName("IDProyecto");
            entity.Property(e => e.IdtipoFalla)
                .HasMaxLength(255)
                .HasColumnName("IDTipoFalla");
            entity.Property(e => e.IdtipoServicio)
                .HasMaxLength(255)
                .HasColumnName("IDTipoServicio");
            entity.Property(e => e.Inventario).HasMaxLength(255);
            entity.Property(e => e.IsProgramado).HasMaxLength(255);
            entity.Property(e => e.Negocio).HasMaxLength(255);
            entity.Property(e => e.NoDiasLiberacion).HasMaxLength(255);
            entity.Property(e => e.NotasRemedy).HasMaxLength(255);
            entity.Property(e => e.Población).HasMaxLength(255);
            entity.Property(e => e.SeguimientoPorDispatch).HasMaxLength(255);
            entity.Property(e => e.Serie).HasMaxLength(255);
            entity.Property(e => e.Síntoma).HasMaxLength(255);
            entity.Property(e => e.Teléfono).HasMaxLength(255);

            entity.HasOne(d => d.IdCargaNavigation).WithMany()
                .HasForeignKey(d => d.IdCarga)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BD_ARCHIVO1_BD_CARGAS");

            entity.HasOne(d => d.IdClienteNavigation).WithMany()
                .HasForeignKey(d => d.IdCliente)
                .HasConstraintName("FK_BD_ARCHIVO1_C_CLIENTES");
        });

        modelBuilder.Entity<BdArchivoDispersionSolicitudViatico>(entity =>
        {
            entity.HasKey(e => e.IdArchivoDispersionSolicitudViaticos);

            entity.ToTable("BD_ARCHIVO_DISPERSION_SOLICITUD_VIATICOS");

            entity.HasIndex(e => e.IdSolicitudViaticos, "IX_BD_ARCHIVO_DISPERSION_SOLICITUD_VIATICOS_ID_SOLICITUD_VIATICOS").HasFillFactor(80);

            entity.HasIndex(e => e.IdArchivoDispersion, "IX_MI_BD_ARCHIVO_DISPERSION_SOLICITUD_VIATICOS_5743_5742");

            entity.Property(e => e.IdArchivoDispersionSolicitudViaticos).HasColumnName("ID_ARCHIVO_DISPERSION_SOLICITUD_VIATICOS");
            entity.Property(e => e.IdArchivoDispersion).HasColumnName("ID_ARCHIVO_DISPERSION");
            entity.Property(e => e.IdSolicitudViaticos).HasColumnName("ID_SOLICITUD_VIATICOS");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");

            entity.HasOne(d => d.IdArchivoDispersionNavigation).WithMany(p => p.BdArchivoDispersionSolicitudViaticos)
                .HasForeignKey(d => d.IdArchivoDispersion)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BD_ARCHIVO_DISPERSION_SOLICITUD_VIATICOS_BD_ARCHIVOS_DISPERSION");

            entity.HasOne(d => d.IdSolicitudViaticosNavigation).WithMany(p => p.BdArchivoDispersionSolicitudViaticos)
                .HasForeignKey(d => d.IdSolicitudViaticos)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BD_ARCHIVO_DISPERSION_SOLICITUD_VIATICOS_BD_SOLICITUDES_VIATICOS");
        });

        modelBuilder.Entity<BdArchivosConfirmacione>(entity =>
        {
            entity.HasKey(e => e.IdArchivoConfirmaciones);

            entity.ToTable("BD_ARCHIVOS_CONFIRMACIONES");

            entity.Property(e => e.IdArchivoConfirmaciones).HasColumnName("ID_ARCHIVO_CONFIRMACIONES");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdCargaConfirmaciones).HasColumnName("ID_CARGA_CONFIRMACIONES");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.NombreArchivoConfirmacionesSystem)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("NOMBRE_ARCHIVO_CONFIRMACIONES_SYSTEM");
            entity.Property(e => e.NombreArchivoConfirmacionesUser)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("NOMBRE_ARCHIVO_CONFIRMACIONES_USER");

            entity.HasOne(d => d.IdCargaConfirmacionesNavigation).WithMany(p => p.BdArchivosConfirmaciones)
                .HasForeignKey(d => d.IdCargaConfirmaciones)
                .HasConstraintName("FK_BD_ARCHIVOS_CONFIRMACIONES_BD_CARGAS_CONFIRMACIONES");
        });

        modelBuilder.Entity<BdArchivosContacto>(entity =>
        {
            entity.HasKey(e => e.IdArchivoContacto).HasName("PK__BD_ARCHI__3E3EE67721B3EEB1");

            entity.ToTable("BD_ARCHIVOS_CONTACTOS");

            entity.Property(e => e.IdArchivoContacto).HasColumnName("ID_ARCHIVO_CONTACTO");
            entity.Property(e => e.Archivo)
                .IsUnicode(false)
                .HasColumnName("ARCHIVO");
            entity.Property(e => e.DescArchivo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_ARCHIVO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
        });

        modelBuilder.Entity<BdArchivosContactosAfiliacione>(entity =>
        {
            entity.HasKey(e => e.IdArchivoContacto).HasName("PK__BD_ARCHI__3E3EE67700AF1493");

            entity.ToTable("BD_ARCHIVOS_CONTACTOS_AFILIACIONES");

            entity.Property(e => e.IdArchivoContacto).HasColumnName("ID_ARCHIVO_CONTACTO");
            entity.Property(e => e.Archivo)
                .IsUnicode(false)
                .HasColumnName("ARCHIVO");
            entity.Property(e => e.DescArchivo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_ARCHIVO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
        });

        modelBuilder.Entity<BdArchivosDispersion>(entity =>
        {
            entity.HasKey(e => e.IdArchivoDispersion).HasName("PK_BD_ARCHIVO_DISPERSION");

            entity.ToTable("BD_ARCHIVOS_DISPERSION");

            entity.Property(e => e.IdArchivoDispersion).HasColumnName("ID_ARCHIVO_DISPERSION");
            entity.Property(e => e.Carpeta)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("CARPETA");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdBanco).HasColumnName("ID_BANCO");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.NombreArchivoDispersion)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("NOMBRE_ARCHIVO_DISPERSION");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdArchivosPrefacturacion>(entity =>
        {
            entity.HasKey(e => e.IdArchivoPrefacturacion);

            entity.ToTable("BD_ARCHIVOS_PREFACTURACION");

            entity.HasIndex(e => e.IdArPrefacturacion, "IX_BD_ARCHIVOS_PREFACTURACION_ID_AR_PREFACTURACION").HasFillFactor(80);

            entity.Property(e => e.IdArchivoPrefacturacion).HasColumnName("ID_ARCHIVO_PREFACTURACION");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdArPrefacturacion).HasColumnName("ID_AR_PREFACTURACION");
            entity.Property(e => e.IdStatusCargaArchivoPrefacturacion).HasColumnName("ID_STATUS_CARGA_ARCHIVO_PREFACTURACION");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.NombreArchivoPrefacturacionSystem)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("NOMBRE_ARCHIVO_PREFACTURACION_SYSTEM");
            entity.Property(e => e.NombreArchivoPrefacturacionUser)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("NOMBRE_ARCHIVO_PREFACTURACION_USER");
        });

        modelBuilder.Entity<BdArchivosProsaAbc>(entity =>
        {
            entity.HasKey(e => e.IdArchivosProsaAbc).HasName("PK__BD_ARCHI__9D34C20F36B0216B");

            entity.ToTable("BD_ARCHIVOS_PROSA_ABC");

            entity.Property(e => e.IdArchivosProsaAbc).HasColumnName("ID_ARCHIVOS_PROSA_ABC");
            entity.Property(e => e.FechaAlta)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ALTA");
            entity.Property(e => e.NombreArchivoOrigen)
                .IsUnicode(false)
                .HasColumnName("NOMBRE_ARCHIVO_ORIGEN");
            entity.Property(e => e.NombreArchivoSistema)
                .IsUnicode(false)
                .HasColumnName("NOMBRE_ARCHIVO_SISTEMA");
        });

        modelBuilder.Entity<BdAsignacionAutomaticaPaso>(entity =>
        {
            entity.HasKey(e => e.IdAsignacionAutomaticaPaso).HasName("PK__BD_ASIGN__E220F956EE46FDF0");

            entity.ToTable("BD_ASIGNACION_AUTOMATICA_PASO");

            entity.Property(e => e.IdAsignacionAutomaticaPaso).HasColumnName("ID_ASIGNACION_AUTOMATICA_PASO");
            entity.Property(e => e.Cp)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CP");
            entity.Property(e => e.IdCarga).HasColumnName("ID_CARGA");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdRegion).HasColumnName("ID_REGION");
            entity.Property(e => e.IdTecnico).HasColumnName("ID_TECNICO");
            entity.Property(e => e.IdZona).HasColumnName("ID_ZONA");
            entity.Property(e => e.IsProcesada).HasColumnName("IS_PROCESADA");
            entity.Property(e => e.Mensaje)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("MENSAJE");
        });

        modelBuilder.Entity<BdAsignacionMasivaReparacion>(entity =>
        {
            entity.HasKey(e => e.IdAsignacionMasivaReparacion).HasName("PK__BD_ASIGN__45BD1DECACC33F59");

            entity.ToTable("BD_ASIGNACION_MASIVA_REPARACION");

            entity.Property(e => e.IdAsignacionMasivaReparacion).HasColumnName("ID_ASIGNACION_MASIVA_REPARACION");
            entity.Property(e => e.IdCargasDiagnosticada).HasColumnName("ID_CARGAS_DIAGNOSTICADA");
            entity.Property(e => e.NoSerie)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");
            entity.Property(e => e.Observaciones)
                .IsUnicode(false)
                .HasColumnName("OBSERVACIONES");
            entity.Property(e => e.Proveedor)
                .IsUnicode(false)
                .HasColumnName("PROVEEDOR");
            entity.Property(e => e.Status)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdAsignacionTecnicoArLog>(entity =>
        {
            entity.HasKey(e => e.IdAsignacionTecnicoArLog).HasName("PK__BD_ASIGN__A04A54960C0F7485");

            entity.ToTable("BD_ASIGNACION_TECNICO_AR_LOG");

            entity.Property(e => e.IdAsignacionTecnicoArLog).HasColumnName("ID_ASIGNACION_TECNICO_AR_LOG");
            entity.Property(e => e.Error)
                .IsUnicode(false)
                .HasColumnName("ERROR");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdCargaMasiva).HasColumnName("ID_CARGA_MASIVA");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Odt)
                .IsUnicode(false)
                .HasColumnName("ODT");
            entity.Property(e => e.Status)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.Tecnico)
                .IsUnicode(false)
                .HasColumnName("TECNICO");
        });

        modelBuilder.Entity<BdAttach>(entity =>
        {
            entity.HasKey(e => e.IdAttach);

            entity.ToTable("BD_ATTACH");

            entity.HasIndex(e => new { e.DescAttach, e.SystemFilename, e.IdUsuarioAlta }, "IX_MI_BD_ATTACH_26_25");

            entity.Property(e => e.IdAttach).HasColumnName("ID_ATTACH");
            entity.Property(e => e.DescAttach)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("DESC_ATTACH");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdTipoArchivo).HasColumnName("ID_TIPO_ARCHIVO");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.SystemFilename)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("SYSTEM_FILENAME");
            entity.Property(e => e.UserFilename)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("USER_FILENAME");
        });

        modelBuilder.Entity<BdAttachAccione>(entity =>
        {
            entity.HasKey(e => e.IdAttachAcciones);

            entity.ToTable("BD_ATTACH_ACCIONES");

            entity.Property(e => e.IdAttachAcciones).HasColumnName("ID_ATTACH_ACCIONES");
            entity.Property(e => e.DescAttach)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("DESC_ATTACH");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdCompromisosAcciones).HasColumnName("ID_COMPROMISOS_ACCIONES");
            entity.Property(e => e.IdTipoArchivo).HasColumnName("ID_TIPO_ARCHIVO");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.SystemFilename)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("SYSTEM_FILENAME");
            entity.Property(e => e.UserFilename)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("USER_FILENAME");
        });

        modelBuilder.Entity<BdAttachDhl>(entity =>
        {
            entity.HasKey(e => e.IdAttachDhl).HasName("PK__BD_ATTAC__9661FD0AB2A16046");

            entity.ToTable("BD_ATTACH_DHL");

            entity.Property(e => e.IdAttachDhl).HasColumnName("ID_ATTACH_DHL");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdCarga).HasColumnName("ID_CARGA");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.NoFactura)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NO_FACTURA");
            entity.Property(e => e.NombreArchivoSistema)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NOMBRE_ARCHIVO_SISTEMA");
            entity.Property(e => e.NombreArchivoUsuario)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NOMBRE_ARCHIVO_USUARIO");
        });

        modelBuilder.Entity<BdAuditoria>(entity =>
        {
            entity.HasKey(e => e.IdAuditoria);

            entity.ToTable("BD_AUDITORIAS");

            entity.Property(e => e.IdAuditoria).HasColumnName("ID_AUDITORIA");
            entity.Property(e => e.DescAuditoria)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_AUDITORIA");
            entity.Property(e => e.FechaAlta)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ALTA");
            entity.Property(e => e.FechaFin)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_FIN");
            entity.Property(e => e.FechaInicio)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_INICIO");
            entity.Property(e => e.IdRegion).HasColumnName("ID_REGION");
            entity.Property(e => e.IdTipoAuditoria).HasColumnName("ID_TIPO_AUDITORIA");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");

            entity.HasOne(d => d.IdTipoAuditoriaNavigation).WithMany(p => p.BdAuditoria)
                .HasForeignKey(d => d.IdTipoAuditoria)
                .HasConstraintName("FK_BD_AUDITORIAS_C_TIPO_AUDITORIA");

            entity.HasOne(d => d.IdUsuarioAltaNavigation).WithMany(p => p.BdAuditoria)
                .HasForeignKey(d => d.IdUsuarioAlta)
                .HasConstraintName("FK_BD_AUDITORIAS_C_USUARIOS");
        });

        modelBuilder.Entity<BdAuditoriaCierre>(entity =>
        {
            entity.HasKey(e => e.IdAuditoriaCierres).HasName("PK__BD_AUDIT__C883666ED8295865");

            entity.ToTable("BD_AUDITORIA_CIERRES");

            entity.Property(e => e.IdAuditoriaCierres).HasColumnName("ID_AUDITORIA_CIERRES");
            entity.Property(e => e.Accion)
                .IsUnicode(false)
                .HasColumnName("ACCION");
            entity.Property(e => e.Descripcion)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdArchivo).HasColumnName("ID_ARCHIVO");
            entity.Property(e => e.IdTabla).HasColumnName("ID_TABLA");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.Paso).HasColumnName("PASO");
            entity.Property(e => e.Proceso)
                .IsUnicode(false)
                .HasColumnName("PROCESO");
            entity.Property(e => e.TablaAfectada)
                .IsUnicode(false)
                .HasColumnName("TABLA_AFECTADA");
        });

        modelBuilder.Entity<BdAuditoriaProcesosInterno>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__BD_AUDIT__3214EC27BF27703A");

            entity.ToTable("BD_AUDITORIA_PROCESOS_INTERNOS");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.ErrorMessage).HasColumnName("ERROR_MESSAGE");
            entity.Property(e => e.ErrorNumber).HasColumnName("ERROR_NUMBER");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.Proceso)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("PROCESO");
            entity.Property(e => e.Referencia)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("REFERENCIA");
        });

        modelBuilder.Entity<BdAuditoriaReporte>(entity =>
        {
            entity.HasKey(e => e.IdAuditoriaReporte);

            entity.ToTable("BD_AUDITORIA_REPORTE");

            entity.Property(e => e.IdAuditoriaReporte).HasColumnName("ID_AUDITORIA_REPORTE");
            entity.Property(e => e.Efectividad).HasColumnName("EFECTIVIDAD");
            entity.Property(e => e.FechaAlta)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ALTA");
            entity.Property(e => e.IdArchivoAttach).HasColumnName("ID_ARCHIVO_ATTACH");
            entity.Property(e => e.IdAuditoria).HasColumnName("ID_AUDITORIA");
            entity.Property(e => e.IdResponsableInventario).HasColumnName("ID_RESPONSABLE_INVENTARIO");
            entity.Property(e => e.IdTipoInventario).HasColumnName("ID_TIPO_INVENTARIO");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.ItemsEnSistema).HasColumnName("ITEMS_EN_SISTEMA");
            entity.Property(e => e.Reporte)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("REPORTE");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");

            entity.HasOne(d => d.IdAuditoriaNavigation).WithMany(p => p.BdAuditoriaReportes)
                .HasForeignKey(d => d.IdAuditoria)
                .HasConstraintName("FK_BD_AUDITORIA_REPORTE_BD_AUDITORIAS");

            entity.HasOne(d => d.IdTipoInventarioNavigation).WithMany(p => p.BdAuditoriaReportes)
                .HasForeignKey(d => d.IdTipoInventario)
                .HasConstraintName("FK_BD_AUDITORIA_REPORTE_C_TIPO_INVENTARIO");
        });

        modelBuilder.Entity<BdAuditoriaReporte2>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_AUDITORIA_REPORTE_2");

            entity.Property(e => e.Efectividad)
                .HasColumnType("decimal(8, 2)")
                .HasColumnName("EFECTIVIDAD");
            entity.Property(e => e.FechaAlta)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ALTA");
            entity.Property(e => e.IdAuditoria).HasColumnName("ID_AUDITORIA");
            entity.Property(e => e.IdAuditoriaReporte)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_AUDITORIA_REPORTE");
            entity.Property(e => e.IdResponsableInventario).HasColumnName("ID_RESPONSABLE_INVENTARIO");
            entity.Property(e => e.IdTipoInventario).HasColumnName("ID_TIPO_INVENTARIO");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.ItemsEnSistema).HasColumnName("ITEMS_EN_SISTEMA");
            entity.Property(e => e.ItemsReportados).HasColumnName("ITEMS_REPORTADOS");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.StatusAuditoria)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("STATUS_AUDITORIA");
        });

        modelBuilder.Entity<BdAuditoriaReporte2Trash>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_AUDITORIA_REPORTE_2_TRASH");

            entity.Property(e => e.Efectividad)
                .HasColumnType("decimal(8, 2)")
                .HasColumnName("EFECTIVIDAD");
            entity.Property(e => e.FechaAlta)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ALTA");
            entity.Property(e => e.FechaEnLaQueSeElimino)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_EN_LA_QUE_SE_ELIMINO");
            entity.Property(e => e.IdAuditoria).HasColumnName("ID_AUDITORIA");
            entity.Property(e => e.IdAuditoriaReporte).HasColumnName("ID_AUDITORIA_REPORTE");
            entity.Property(e => e.IdResponsableInventario).HasColumnName("ID_RESPONSABLE_INVENTARIO");
            entity.Property(e => e.IdTipoInventario).HasColumnName("ID_TIPO_INVENTARIO");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.IdUsuarioQueElimino).HasColumnName("ID_USUARIO_QUE_ELIMINO");
            entity.Property(e => e.ItemsEnSistema).HasColumnName("ITEMS_EN_SISTEMA");
            entity.Property(e => e.ItemsReportados).HasColumnName("ITEMS_REPORTADOS");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdAuditoriaReporteInsumo2>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_AUDITORIA_REPORTE_INSUMO_2");

            entity.Property(e => e.Efectividad)
                .HasColumnType("decimal(8, 2)")
                .HasColumnName("EFECTIVIDAD");
            entity.Property(e => e.FechaAlta)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ALTA");
            entity.Property(e => e.IdAuditoria).HasColumnName("ID_AUDITORIA");
            entity.Property(e => e.IdAuditoriaReporte)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_AUDITORIA_REPORTE");
            entity.Property(e => e.IdResponsableInventario).HasColumnName("ID_RESPONSABLE_INVENTARIO");
            entity.Property(e => e.IdTipoInventario).HasColumnName("ID_TIPO_INVENTARIO");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.ItemsEnSistema).HasColumnName("ITEMS_EN_SISTEMA");
            entity.Property(e => e.ItemsReportados).HasColumnName("ITEMS_REPORTADOS");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.StatusAuditoria)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("STATUS_AUDITORIA");
        });

        modelBuilder.Entity<BdBbvaPaso>(entity =>
        {
            entity.HasKey(e => e.IdBbvaPaso).HasName("PK__BD_BBVA___E65BC1FA0EFA7622");

            entity.ToTable("BD_BBVA_PASO");

            entity.Property(e => e.IdBbvaPaso).HasColumnName("ID_BBVA_PASO");
            entity.Property(e => e.Body)
                .IsUnicode(false)
                .HasColumnName("BODY");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.From)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("FROM");
            entity.Property(e => e.NumberMsg).HasColumnName("NUMBER_MSG");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.Subject)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("SUBJECT");
        });

        modelBuilder.Entity<BdBitacoraAcceso>(entity =>
        {
            entity.HasKey(e => e.IdBitacora).HasName("PK_BD_BITACORA");

            entity.ToTable("BD_BITACORA_ACCESO");

            entity.HasIndex(e => e.IdUsuario, "IX_BD_BITACORA_ACCESO_ID_USUARIO").HasFillFactor(80);

            entity.HasIndex(e => e.Status, "IX_BD_BITACORA_ACCESO_STATUS").HasFillFactor(80);

            entity.Property(e => e.IdBitacora).HasColumnName("ID_BITACORA");
            entity.Property(e => e.Acceso)
                .HasColumnType("smalldatetime")
                .HasColumnName("ACCESO");
            entity.Property(e => e.FecStatus)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_STATUS");
            entity.Property(e => e.Host)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("HOST");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.IpCliente)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IP_CLIENTE");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdBitacoraAccesoPrueba>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_BITACORA_ACCESO_PRUEBA");

            entity.Property(e => e.Acceso)
                .HasColumnType("smalldatetime")
                .HasColumnName("ACCESO");
            entity.Property(e => e.FecStatus)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_STATUS");
            entity.Property(e => e.Host)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("HOST");
            entity.Property(e => e.IdBitacora)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_BITACORA");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.IpCliente)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IP_CLIENTE");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdBitacoraAccesoUsuario>(entity =>
        {
            entity.HasKey(e => e.IdBitacoraAccesoUsuario).HasName("PK__BD_BITAC__D52DBEBB22623E53");

            entity.ToTable("BD_BITACORA_ACCESO_USUARIOS");

            entity.Property(e => e.IdBitacoraAccesoUsuario).HasColumnName("ID_BITACORA_ACCESO_USUARIO");
            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");
            entity.Property(e => e.IpMachine)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("IP_MACHINE");
            entity.Property(e => e.IsAccess).HasColumnName("IS_ACCESS");
            entity.Property(e => e.Pass)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("PASS");
            entity.Property(e => e.Username)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("USERNAME");
        });

        modelBuilder.Entity<BdBitacoraAgendado>(entity =>
        {
            entity.HasKey(e => e.IdBitacoraAgendado).HasName("PK_BD_BITACORA_AGENDADO");

            entity.ToTable("BD_BITACORA_AGENDADOS");

            entity.Property(e => e.IdBitacoraAgendado).HasColumnName("ID_BITACORA_AGENDADO");
            entity.Property(e => e.Autorizador)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("AUTORIZADOR");
            entity.Property(e => e.Comentario)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("COMENTARIO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.FecAtencionFin)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ATENCION_FIN");
            entity.Property(e => e.FecAtencionIni)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ATENCION_INI");
            entity.Property(e => e.FolioTir)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("FOLIO_TIR");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IdComentarioAgendado).HasColumnName("ID_COMENTARIO_AGENDADO");
            entity.Property(e => e.IdResponsableAgendado).HasColumnName("ID_RESPONSABLE_AGENDADO");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.IsVisitaAgendado).HasColumnName("IS_VISITA_AGENDADO");

            entity.HasOne(d => d.IdResponsableAgendadoNavigation).WithMany(p => p.BdBitacoraAgendados)
                .HasForeignKey(d => d.IdResponsableAgendado)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BD_BITACORA_AGENDADOS_C_RESPONSABLES_AGENDADOS");
        });

        modelBuilder.Entity<BdBitacoraAlmacenResponsable>(entity =>
        {
            entity.HasKey(e => e.IdBitacoraAlmacenResponsable).HasName("PK__BD_BITAC__C7B56735102FD125");

            entity.ToTable("BD_BITACORA_ALMACEN_RESPONSABLE");

            entity.Property(e => e.IdBitacoraAlmacenResponsable).HasColumnName("ID_BITACORA_ALMACEN_RESPONSABLE");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdAlmacen).HasColumnName("ID_ALMACEN");
            entity.Property(e => e.IdResponsableActual).HasColumnName("ID_RESPONSABLE_ACTUAL");
            entity.Property(e => e.IdResponsableAnterior).HasColumnName("ID_RESPONSABLE_ANTERIOR");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
        });

        modelBuilder.Entity<BdBitacoraAlmacenStatus>(entity =>
        {
            entity.HasKey(e => e.IdBitacora).HasName("PK__BD_BITAC__44E70BF3CBD33EC1");

            entity.ToTable("BD_BITACORA_ALMACEN_STATUS");

            entity.Property(e => e.IdBitacora).HasColumnName("ID_BITACORA");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdAlmacen).HasColumnName("ID_ALMACEN");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.StatusActual)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS_ACTUAL");
            entity.Property(e => e.StatusAnterior)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS_ANTERIOR");
        });

        modelBuilder.Entity<BdBitacoraAplicativoUnidad>(entity =>
        {
            entity.HasKey(e => e.IdAplicativoUnidad).HasName("PK__BD_BITAC__5AD934711BCD189D");

            entity.ToTable("BD_BITACORA_APLICATIVO_UNIDAD");

            entity.HasIndex(e => e.IdUnidad, "missing_index_3577761_3577760");

            entity.Property(e => e.IdAplicativoUnidad).HasColumnName("ID_APLICATIVO_UNIDAD");
            entity.Property(e => e.FechaAlta)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ALTA");
            entity.Property(e => e.IdAplicativoNuevo).HasColumnName("ID_APLICATIVO_NUEVO");
            entity.Property(e => e.IdAplicativoViejo).HasColumnName("ID_APLICATIVO_VIEJO");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
        });

        modelBuilder.Entity<BdBitacoraAr>(entity =>
        {
            entity.HasKey(e => e.IdBitacoraAr);

            entity.ToTable("BD_BITACORA_AR", tb =>
                {
                    tb.HasTrigger("TR_BITACORA_AR_INSERT");
                    tb.HasTrigger("TR_Services_Send_Suppliers_Log");
                });

            entity.HasIndex(e => e.IdAr, "IX_BD_BITACORA_AR").HasFillFactor(80);

            entity.HasIndex(e => new { e.IdAr, e.Comentario }, "IX_BD_BITACORA_AR_1");

            entity.HasIndex(e => new { e.FecAlta, e.IdAr }, "IX_BD_BITACORA_AR_2");

            entity.HasIndex(e => e.IdUsuarioAlta, "IX_BD_BITACORA_AR_3");

            entity.HasIndex(e => new { e.IdBitacoraAr, e.IdAr, e.Comentario, e.IdStatusArFin }, "IX_BD_BITACORA_AR_4");

            entity.HasIndex(e => new { e.IdStatusArIni, e.IdStatusArFin, e.Comentario }, "IX_BD_BITACORA_AR_ID_AR_FEC_ALTA");

            entity.HasIndex(e => e.IdStatusArFin, "IX_BD_BITACORA_AR_ID_STATUS_AR_FIN").HasFillFactor(80);

            entity.Property(e => e.IdBitacoraAr).HasColumnName("ID_BITACORA_AR");
            entity.Property(e => e.Comentario)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("COMENTARIO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IdStatusArFin).HasColumnName("ID_STATUS_AR_FIN");
            entity.Property(e => e.IdStatusArIni).HasColumnName("ID_STATUS_AR_INI");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.IsCambioValido).HasColumnName("IS_CAMBIO_VALIDO");
            entity.Property(e => e.IsPda).HasColumnName("IS_PDA");
        });

        modelBuilder.Entity<BdBitacoraArAltum>(entity =>
        {
            entity.HasKey(e => e.IdArBitacoraArAlta).HasName("PK__BD_BITAC__98F6235C730E7EEE");

            entity.ToTable("BD_BITACORA_AR_ALTA");

            entity.HasIndex(e => e.IdAr, "missing_index_170_169");

            entity.Property(e => e.IdArBitacoraArAlta).HasColumnName("ID_AR_BITACORA_AR_ALTA");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
        });

        modelBuilder.Entity<BdBitacoraArCambiosAppMicroforma>(entity =>
        {
            entity.HasKey(e => e.IdBitacoraArCambiosAppMicroformas).HasName("PK__BD_BITAC__256F72F4D3747C45");

            entity.ToTable("BD_BITACORA_AR_CAMBIOS_APP_MICROFORMAS");

            entity.Property(e => e.IdBitacoraArCambiosAppMicroformas).HasColumnName("ID_BITACORA_AR_CAMBIOS_APP_MICROFORMAS");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdBitacoraAr).HasColumnName("ID_BITACORA_AR");
        });

        modelBuilder.Entity<BdBitacoraBdNegocio>(entity =>
        {
            entity.HasKey(e => e.IdBitacoraBdNegocios).HasName("PK__BD_BITAC__0E4591F6D23E286C");

            entity.ToTable("BD_BITACORA_BD_NEGOCIOS");

            entity.Property(e => e.IdBitacoraBdNegocios).HasColumnName("ID_BITACORA_BD_NEGOCIOS");
            entity.Property(e => e.ColoniaActual)
                .IsUnicode(false)
                .HasColumnName("COLONIA_ACTUAL");
            entity.Property(e => e.ColoniaAnterior)
                .IsUnicode(false)
                .HasColumnName("COLONIA_ANTERIOR");
            entity.Property(e => e.CpActual)
                .IsUnicode(false)
                .HasColumnName("CP_ACTUAL");
            entity.Property(e => e.CpAnterior)
                .IsUnicode(false)
                .HasColumnName("CP_ANTERIOR");
            entity.Property(e => e.DescNegocioActual)
                .IsUnicode(false)
                .HasColumnName("DESC_NEGOCIO_ACTUAL");
            entity.Property(e => e.DescNegocioAnterior)
                .IsUnicode(false)
                .HasColumnName("DESC_NEGOCIO_ANTERIOR");
            entity.Property(e => e.DireccionActual)
                .IsUnicode(false)
                .HasColumnName("DIRECCION_ACTUAL");
            entity.Property(e => e.DireccionAnterior)
                .IsUnicode(false)
                .HasColumnName("DIRECCION_ANTERIOR");
            entity.Property(e => e.EstadoActual)
                .IsUnicode(false)
                .HasColumnName("ESTADO_ACTUAL");
            entity.Property(e => e.EstadoAnterior)
                .IsUnicode(false)
                .HasColumnName("ESTADO_ANTERIOR");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.FecAltaIgualaActual)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA_IGUALA_ACTUAL");
            entity.Property(e => e.FecAltaIgualaAnterior)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA_IGUALA_ANTERIOR");
            entity.Property(e => e.FecBajaIgualaActual)
                .HasColumnType("datetime")
                .HasColumnName("FEC_BAJA_IGUALA_ACTUAL");
            entity.Property(e => e.FecBajaIgualaAnterior)
                .HasColumnType("datetime")
                .HasColumnName("FEC_BAJA_IGUALA_ANTERIOR");
            entity.Property(e => e.IdClienteActual).HasColumnName("ID_CLIENTE_ACTUAL");
            entity.Property(e => e.IdClienteAnterior).HasColumnName("ID_CLIENTE_ANTERIOR");
            entity.Property(e => e.IdEstadoActual).HasColumnName("ID_ESTADO_ACTUAL");
            entity.Property(e => e.IdEstadoAnterior).HasColumnName("ID_ESTADO_ANTERIOR");
            entity.Property(e => e.IdHorarioAccesoActual).HasColumnName("ID_HORARIO_ACCESO_ACTUAL");
            entity.Property(e => e.IdHorarioAccesoAnterior).HasColumnName("ID_HORARIO_ACCESO_ANTERIOR");
            entity.Property(e => e.IdHorarioUptimeActual).HasColumnName("ID_HORARIO_UPTIME_ACTUAL");
            entity.Property(e => e.IdHorarioUptimeAnterior).HasColumnName("ID_HORARIO_UPTIME_ANTERIOR");
            entity.Property(e => e.IdMonedaActual).HasColumnName("ID_MONEDA_ACTUAL");
            entity.Property(e => e.IdMonedaAnterior).HasColumnName("ID_MONEDA_ANTERIOR");
            entity.Property(e => e.IdNegocio).HasColumnName("ID_NEGOCIO");
            entity.Property(e => e.IdRegionActual).HasColumnName("ID_REGION_ACTUAL");
            entity.Property(e => e.IdRegionAnterior).HasColumnName("ID_REGION_ANTERIOR");
            entity.Property(e => e.IdSegmentoActual).HasColumnName("ID_SEGMENTO_ACTUAL");
            entity.Property(e => e.IdSegmentoAnterior).HasColumnName("ID_SEGMENTO_ANTERIOR");
            entity.Property(e => e.IdTipoCobroNegocioActual).HasColumnName("ID_TIPO_COBRO_NEGOCIO_ACTUAL");
            entity.Property(e => e.IdTipoCobroNegocioAnterior).HasColumnName("ID_TIPO_COBRO_NEGOCIO_ANTERIOR");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.IdZonaActual).HasColumnName("ID_ZONA_ACTUAL");
            entity.Property(e => e.IdZonaAnterior).HasColumnName("ID_ZONA_ANTERIOR");
            entity.Property(e => e.LatitudActual)
                .IsUnicode(false)
                .HasColumnName("LATITUD_ACTUAL");
            entity.Property(e => e.LatitudAnterior)
                .IsUnicode(false)
                .HasColumnName("LATITUD_ANTERIOR");
            entity.Property(e => e.LongitudActual)
                .IsUnicode(false)
                .HasColumnName("LONGITUD_ACTUAL");
            entity.Property(e => e.LongitudAnterior)
                .IsUnicode(false)
                .HasColumnName("LONGITUD_ANTERIOR");
            entity.Property(e => e.NoAfiliacionActual)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION_ACTUAL");
            entity.Property(e => e.NoAfiliacionAnterior)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION_ANTERIOR");
            entity.Property(e => e.PoblacionActual)
                .IsUnicode(false)
                .HasColumnName("POBLACION_ACTUAL");
            entity.Property(e => e.PoblacionAnterior)
                .IsUnicode(false)
                .HasColumnName("POBLACION_ANTERIOR");
            entity.Property(e => e.PrecioActual)
                .IsUnicode(false)
                .HasColumnName("PRECIO_ACTUAL");
            entity.Property(e => e.PrecioAnterior)
                .IsUnicode(false)
                .HasColumnName("PRECIO_ANTERIOR");
            entity.Property(e => e.StatusActual)
                .IsUnicode(false)
                .HasColumnName("STATUS_ACTUAL");
            entity.Property(e => e.StatusAnterior)
                .IsUnicode(false)
                .HasColumnName("STATUS_ANTERIOR");
            entity.Property(e => e.TelefonoActual)
                .IsUnicode(false)
                .HasColumnName("TELEFONO_ACTUAL");
            entity.Property(e => e.TelefonoAnterior)
                .IsUnicode(false)
                .HasColumnName("TELEFONO_ANTERIOR");
        });

        modelBuilder.Entity<BdBitacoraBorrarUnidad>(entity =>
        {
            entity.HasKey(e => e.IdBitacoraBorrarUnidad);

            entity.ToTable("BD_BITACORA_BORRAR_UNIDAD");

            entity.Property(e => e.IdBitacoraBorrarUnidad).HasColumnName("ID_BITACORA_BORRAR_UNIDAD");
            entity.Property(e => e.FecBorrado)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_BORRADO");
            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");
            entity.Property(e => e.IdUsuarioBorrado).HasColumnName("ID_USUARIO_BORRADO");
        });

        modelBuilder.Entity<BdBitacoraCambioCliente>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_BITACORA_CAMBIO_CLIENTE");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");
            entity.Property(e => e.IdBitacoraCambioCliente)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_BITACORA_CAMBIO_CLIENTE");
            entity.Property(e => e.IdClienteFinal).HasColumnName("ID_CLIENTE_FINAL");
            entity.Property(e => e.IdClientesInicial).HasColumnName("ID_CLIENTES_INICIAL");
            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
        });

        modelBuilder.Entity<BdBitacoraCambioFecGarantium>(entity =>
        {
            entity.HasKey(e => e.IdBitacoraCambioFecGarantia).HasName("PK__BD_BITAC__4A98A30D75134910");

            entity.ToTable("BD_BITACORA_CAMBIO_FEC_GARANTIA");

            entity.Property(e => e.IdBitacoraCambioFecGarantia).HasColumnName("ID_BITACORA_CAMBIO_FEC_GARANTIA");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.FecAtencionActual)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ATENCION_ACTUAL");
            entity.Property(e => e.FecAtencionAnterior)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ATENCION_ANTERIOR");
            entity.Property(e => e.FecGarantiaActual)
                .HasColumnType("datetime")
                .HasColumnName("FEC_GARANTIA_ACTUAL");
            entity.Property(e => e.FecGarantiaAnterior)
                .HasColumnType("datetime")
                .HasColumnName("FEC_GARANTIA_ANTERIOR");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
        });

        modelBuilder.Entity<BdBitacoraCambioInfoIngreso>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_BITACORA_CAMBIO_INFO_INGRESO");

            entity.Property(e => e.EmailActual)
                .IsUnicode(false)
                .HasColumnName("EMAIL_ACTUAL");
            entity.Property(e => e.EmailAnterior)
                .IsUnicode(false)
                .HasColumnName("EMAIL_ANTERIOR");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdBitacoraCambioInfoIngreso)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_BITACORA_CAMBIO_INFO_INGRESO");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
        });

        modelBuilder.Entity<BdBitacoraCambioMasivoDaniadum>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_BITACORA_CAMBIO_MASIVO_DANIADA");

            entity.Property(e => e.IdCarga).HasColumnName("ID_CARGA");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.IsDaniada).HasColumnName("IS_DANIADA");
            entity.Property(e => e.Serie)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("SERIE");
        });

        modelBuilder.Entity<BdBitacoraCambioMensajerium>(entity =>
        {
            entity.HasKey(e => e.IdBitacoraCambioMensajeria).HasName("PK__BD_BITAC__DE3FA500EC2545D0");

            entity.ToTable("BD_BITACORA_CAMBIO_MENSAJERIA");

            entity.Property(e => e.IdBitacoraCambioMensajeria).HasColumnName("ID_BITACORA_CAMBIO_MENSAJERIA");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdEnvio).HasColumnName("ID_ENVIO");
            entity.Property(e => e.IdMensajeriaFin).HasColumnName("ID_MENSAJERIA_FIN");
            entity.Property(e => e.IdMensajeriaIni).HasColumnName("ID_MENSAJERIA_INI");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
        });

        modelBuilder.Entity<BdBitacoraCambioNegocio>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_BITACORA_CAMBIO_NEGOCIO");

            entity.Property(e => e.ColoniaActual)
                .IsUnicode(false)
                .HasColumnName("COLONIA_ACTUAL");
            entity.Property(e => e.ColoniaAnterior)
                .IsUnicode(false)
                .HasColumnName("COLONIA_ANTERIOR");
            entity.Property(e => e.CorreoEjecutivoActual)
                .IsUnicode(false)
                .HasColumnName("CORREO_EJECUTIVO_ACTUAL");
            entity.Property(e => e.CorreoEjecutivoAnterior)
                .IsUnicode(false)
                .HasColumnName("CORREO_EJECUTIVO_ANTERIOR");
            entity.Property(e => e.CpActual)
                .IsUnicode(false)
                .HasColumnName("CP_ACTUAL");
            entity.Property(e => e.CpAnterior)
                .IsUnicode(false)
                .HasColumnName("CP_ANTERIOR");
            entity.Property(e => e.DescNegocioActual)
                .IsUnicode(false)
                .HasColumnName("DESC_NEGOCIO_ACTUAL");
            entity.Property(e => e.DescNegocioAnterior)
                .IsUnicode(false)
                .HasColumnName("DESC_NEGOCIO_ANTERIOR");
            entity.Property(e => e.DireccionActual)
                .IsUnicode(false)
                .HasColumnName("DIRECCION_ACTUAL");
            entity.Property(e => e.DireccionAnterior)
                .IsUnicode(false)
                .HasColumnName("DIRECCION_ANTERIOR");
            entity.Property(e => e.EstadoActual)
                .IsUnicode(false)
                .HasColumnName("ESTADO_ACTUAL");
            entity.Property(e => e.EstadoAnterior)
                .IsUnicode(false)
                .HasColumnName("ESTADO_ANTERIOR");
            entity.Property(e => e.FechaAlta)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ALTA");
            entity.Property(e => e.IdBitacoraCambioNegocio)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_BITACORA_CAMBIO_NEGOCIO");
            entity.Property(e => e.IdCarga).HasColumnName("ID_CARGA");
            entity.Property(e => e.IdCargaStatusAnterior).HasColumnName("ID_CARGA_STATUS_ANTERIOR");
            entity.Property(e => e.IdEstadoActual).HasColumnName("ID_ESTADO_ACTUAL");
            entity.Property(e => e.IdEstadoAnterior).HasColumnName("ID_ESTADO_ANTERIOR");
            entity.Property(e => e.IdNegocio).HasColumnName("ID_NEGOCIO");
            entity.Property(e => e.IdRegioActual).HasColumnName("ID_REGIO_ACTUAL");
            entity.Property(e => e.IdRegionAnterior).HasColumnName("ID_REGION_ANTERIOR");
            entity.Property(e => e.IdSegmentoActual).HasColumnName("ID_SEGMENTO_ACTUAL");
            entity.Property(e => e.IdSegmentoAnterior).HasColumnName("ID_SEGMENTO_ANTERIOR");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.IdZonaActual).HasColumnName("ID_ZONA_ACTUAL");
            entity.Property(e => e.IdZonaAnterior).HasColumnName("ID_ZONA_ANTERIOR");
            entity.Property(e => e.PoblacionActual)
                .IsUnicode(false)
                .HasColumnName("POBLACION_ACTUAL");
            entity.Property(e => e.PoblacionAnterior)
                .IsUnicode(false)
                .HasColumnName("POBLACION_ANTERIOR");
            entity.Property(e => e.RazonSocialActual)
                .IsUnicode(false)
                .HasColumnName("RAZON_SOCIAL_ACTUAL");
            entity.Property(e => e.RazonSocialAnterior)
                .IsUnicode(false)
                .HasColumnName("RAZON_SOCIAL_ANTERIOR");
            entity.Property(e => e.RfcFiscalActual)
                .IsUnicode(false)
                .HasColumnName("RFC_FISCAL_ACTUAL");
            entity.Property(e => e.RfcFiscalAnterior)
                .IsUnicode(false)
                .HasColumnName("RFC_FISCAL_ANTERIOR");
            entity.Property(e => e.TelefonoActual)
                .IsUnicode(false)
                .HasColumnName("TELEFONO_ACTUAL");
            entity.Property(e => e.TelefonoAnterior)
                .IsUnicode(false)
                .HasColumnName("TELEFONO_ANTERIOR");
        });

        modelBuilder.Entity<BdBitacoraCambioNoInventario>(entity =>
        {
            entity.HasKey(e => e.IdBitacoraCambioNoInventario).HasName("PK__BD_BITAC__F428328E38F56859");

            entity.ToTable("BD_BITACORA_CAMBIO_NO_INVENTARIO");

            entity.Property(e => e.IdBitacoraCambioNoInventario).HasColumnName("ID_BITACORA_CAMBIO_NO_INVENTARIO");
            entity.Property(e => e.IdCarga).HasColumnName("ID_CARGA");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.NoInventario)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NO_INVENTARIO");
            entity.Property(e => e.Serie)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("SERIE");
        });

        modelBuilder.Entity<BdBitacoraCambioSerie>(entity =>
        {
            entity.HasKey(e => e.IdBitacora).HasName("PK__BD_BITAC__44E70BF307B4B974");

            entity.ToTable("BD_BITACORA_CAMBIO_SERIE");

            entity.Property(e => e.IdBitacora).HasColumnName("ID_BITACORA");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.NoSerieNew)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE_NEW");
            entity.Property(e => e.Serie)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("SERIE");
        });

        modelBuilder.Entity<BdBitacoraCambioStatusUnidad>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_BITACORA_CAMBIO_STATUS_UNIDAD");

            entity.Property(e => e.DescStatusUnidadActual)
                .IsUnicode(false)
                .HasColumnName("DESC_STATUS_UNIDAD_ACTUAL");
            entity.Property(e => e.DescStatusUnidadFinal)
                .IsUnicode(false)
                .HasColumnName("DESC_STATUS_UNIDAD_FINAL");
            entity.Property(e => e.FechaAlta)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ALTA");
            entity.Property(e => e.IdCambioStatusUnidad)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_CAMBIO_STATUS_UNIDAD");
            entity.Property(e => e.StatusActual)
                .IsUnicode(false)
                .HasColumnName("STATUS_ACTUAL");
            entity.Property(e => e.StatusFinal)
                .IsUnicode(false)
                .HasColumnName("STATUS_FINAL");
            entity.Property(e => e.UsuarioAlta).HasColumnName("USUARIO_ALTA");
        });

        modelBuilder.Entity<BdBitacoraCambioUnidadNueva>(entity =>
        {
            entity.HasKey(e => e.IdBitacoraCambioUnidadNueva).HasName("PK__BD_BITAC__26B9B0F3A536F58F");

            entity.ToTable("BD_BITACORA_CAMBIO_UNIDAD_NUEVA");

            entity.HasIndex(e => new { e.IdUnidad, e.IsNueva }, "missing_index_55770_55769");

            entity.Property(e => e.IdBitacoraCambioUnidadNueva).HasColumnName("ID_BITACORA_CAMBIO_UNIDAD_NUEVA");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdBitacoraUnidad).HasColumnName("ID_BITACORA_UNIDAD");
            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");
            entity.Property(e => e.IsNueva).HasColumnName("IS_NUEVA");
        });

        modelBuilder.Entity<BdBitacoraCambiosAppMicroforma>(entity =>
        {
            entity.HasKey(e => e.IdBitacoraCambiosAppMicroformas).HasName("PK__BD_BITAC__D47CE56895AED85C");

            entity.ToTable("BD_BITACORA_CAMBIOS_APP_MICROFORMAS");

            entity.Property(e => e.IdBitacoraCambiosAppMicroformas).HasColumnName("ID_BITACORA_CAMBIOS_APP_MICROFORMAS");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
        });

        modelBuilder.Entity<BdBitacoraCancelacionOdtGetnetMic>(entity =>
        {
            entity.HasKey(e => e.IdBitacoraCancelacionOdtGetnetMic).HasName("PK__BD_BITAC__1462F923F09EA71F");

            entity.ToTable("BD_BITACORA_CANCELACION_ODT_GETNET_MIC");

            entity.Property(e => e.IdBitacoraCancelacionOdtGetnetMic).HasColumnName("ID_BITACORA_CANCELACION_ODT_GETNET_MIC");
            entity.Property(e => e.CierreSalesforce)
                .IsUnicode(false)
                .HasColumnName("CIERRE_SALESFORCE");
            entity.Property(e => e.FechaAlta)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ALTA");
            entity.Property(e => e.IdArGetnet).HasColumnName("ID_AR_GETNET");
            entity.Property(e => e.IdCausaCancelacion).HasColumnName("ID_CAUSA_CANCELACION");
            entity.Property(e => e.Status)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdBitacoraCierresOdt>(entity =>
        {
            entity.HasKey(e => e.IdBitacoraCierresOdt).HasName("PK__BD_BITAC__5CC8F318F131E199");

            entity.ToTable("BD_BITACORA_CIERRES_ODT");

            entity.Property(e => e.IdBitacoraCierresOdt).HasColumnName("ID_BITACORA_CIERRES_ODT");
            entity.Property(e => e.FechaAlta)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ALTA");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Insumos).HasColumnName("INSUMOS");
            entity.Property(e => e.NoAfiliacion)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.TotalRollosActual).HasColumnName("TOTAL_ROLLOS_ACTUAL");
            entity.Property(e => e.TotalRollosAnterior).HasColumnName("TOTAL_ROLLOS_ANTERIOR");
        });

        modelBuilder.Entity<BdBitacoraCompromiso>(entity =>
        {
            entity.HasKey(e => e.IdBitacoraCompromisos);

            entity.ToTable("BD_BITACORA_COMPROMISOS");

            entity.Property(e => e.IdBitacoraCompromisos).HasColumnName("ID_BITACORA_COMPROMISOS");
            entity.Property(e => e.Comentario)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("COMENTARIO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdCompromiso).HasColumnName("ID_COMPROMISO");
            entity.Property(e => e.IdStatusJuntaFin).HasColumnName("ID_STATUS_JUNTA_FIN");
            entity.Property(e => e.IdStatusJuntaIni).HasColumnName("ID_STATUS_JUNTA_INI");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
        });

        modelBuilder.Entity<BdBitacoraConectividadUnidad>(entity =>
        {
            entity.HasKey(e => e.IdConectividadUnidad).HasName("PK__BD_BITAC__0532997335CA4CCA");

            entity.ToTable("BD_BITACORA_CONECTIVIDAD_UNIDAD");

            entity.HasIndex(e => e.IdUnidad, "missing_index_3577759_3577758");

            entity.Property(e => e.IdConectividadUnidad).HasColumnName("ID_CONECTIVIDAD_UNIDAD");
            entity.Property(e => e.FechaAlta)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ALTA");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IdConectividadNueva).HasColumnName("ID_CONECTIVIDAD_NUEVA");
            entity.Property(e => e.IdConectividadVieja).HasColumnName("ID_CONECTIVIDAD_VIEJA");
            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
        });

        modelBuilder.Entity<BdBitacoraCostosMensajeria>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_BITACORA_COSTOS_MENSAJERIAS");

            entity.Property(e => e.CostoActual)
                .HasColumnType("decimal(8, 2)")
                .HasColumnName("COSTO_ACTUAL");
            entity.Property(e => e.CostoAnterior)
                .HasColumnType("decimal(8, 2)")
                .HasColumnName("COSTO_ANTERIOR");
            entity.Property(e => e.FechaAlta)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ALTA");
            entity.Property(e => e.IdBitacoraCostoFiull)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_BITACORA_COSTO_FIULL");
            entity.Property(e => e.IdTabla).HasColumnName("ID_TABLA");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.TablaModificada)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TABLA_MODIFICADA");
        });

        modelBuilder.Entity<BdBitacoraDiagnostico>(entity =>
        {
            entity.HasKey(e => e.IdBitacoraDiagnostico).HasName("PK_BD_BITACORA_DIAGNOSTICO_1");

            entity.ToTable("BD_BITACORA_DIAGNOSTICO");

            entity.HasIndex(e => e.IdUnidad, "IX_BD_BITACORA_DIAGNOSTICO_ID_UNIDAD");

            entity.Property(e => e.IdBitacoraDiagnostico).HasColumnName("ID_BITACORA_DIAGNOSTICO");
            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");
            entity.Property(e => e.IdNivelDiagnostico).HasColumnName("ID_NIVEL_DIAGNOSTICO");
            entity.Property(e => e.IdTecnicoCambio).HasColumnName("ID_TECNICO_CAMBIO");
            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");
        });

        modelBuilder.Entity<BdBitacoraDiasFestivo>(entity =>
        {
            entity.HasKey(e => e.IdBitacoraDiasFestivos).HasName("PK__BD_BITAC__0DD961F717224166");

            entity.ToTable("BD_BITACORA_DIAS_FESTIVOS");

            entity.Property(e => e.IdBitacoraDiasFestivos).HasColumnName("ID_BITACORA_DIAS_FESTIVOS");
            entity.Property(e => e.Comentario)
                .IsUnicode(false)
                .HasColumnName("COMENTARIO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdFestivos).HasColumnName("ID_FESTIVOS");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
        });

        modelBuilder.Entity<BdBitacoraDoctosPrefacturacion>(entity =>
        {
            entity.HasKey(e => e.IdBitacoraDoctosPrefacturacion);

            entity.ToTable("BD_BITACORA_DOCTOS_PREFACTURACION");

            entity.HasIndex(e => new { e.IdArPrefacturacion, e.IdStatusDoctoPrefacturacionFin }, "IX_BD_BITACORA_DOCTOS_PREFACTURACION_ID_AR_PREFACTURACION, ID_STATUS_DOCTO_PREFACTURACION_FIN").HasFillFactor(80);

            entity.Property(e => e.IdBitacoraDoctosPrefacturacion).HasColumnName("ID_BITACORA_DOCTOS_PREFACTURACION");
            entity.Property(e => e.Comentario)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("COMENTARIO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdArPrefacturacion).HasColumnName("ID_AR_PREFACTURACION");
            entity.Property(e => e.IdResponsablePrefacturacion).HasColumnName("ID_RESPONSABLE_PREFACTURACION");
            entity.Property(e => e.IdStatusDoctoPrefacturacionFin).HasColumnName("ID_STATUS_DOCTO_PREFACTURACION_FIN");
            entity.Property(e => e.IdStatusDoctoPrefacturacionIni).HasColumnName("ID_STATUS_DOCTO_PREFACTURACION_INI");
            entity.Property(e => e.IdTipoDoctoPrefacturacion).HasColumnName("ID_TIPO_DOCTO_PREFACTURACION");
            entity.Property(e => e.IdTipoResponsablePrefacturacion)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("ID_TIPO_RESPONSABLE_PREFACTURACION");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
        });

        modelBuilder.Entity<BdBitacoraEmbarquesMensajerium>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_BITACORA_EMBARQUES_MENSAJERIA");

            entity.Property(e => e.FechaAlta)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ALTA");
            entity.Property(e => e.HoraEntrega)
                .HasColumnType("datetime")
                .HasColumnName("HORA_ENTREGA");
            entity.Property(e => e.IdChofer).HasColumnName("ID_CHOFER");
            entity.Property(e => e.IdEmbarqueMensajeria)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_EMBARQUE_MENSAJERIA");
            entity.Property(e => e.IdEnvio).HasColumnName("ID_ENVIO");
            entity.Property(e => e.IdSolicitudAlmacen).HasColumnName("ID_SOLICITUD_ALMACEN");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Mensajeria).HasColumnName("MENSAJERIA");
            entity.Property(e => e.NoGuia)
                .IsUnicode(false)
                .HasColumnName("NO_GUIA");
            entity.Property(e => e.Status).HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdBitacoraEnvio>(entity =>
        {
            entity.HasKey(e => e.IdBitacoraEnvio);

            entity.ToTable("BD_BITACORA_ENVIO");

            entity.HasIndex(e => e.IdEnvio, "IX_MI_BD_BITACORA_ENVIO_9263_9262");

            entity.Property(e => e.IdBitacoraEnvio).HasColumnName("ID_BITACORA_ENVIO");
            entity.Property(e => e.Comentario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("COMENTARIO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdEnvio).HasColumnName("ID_ENVIO");
            entity.Property(e => e.IdResponsableDestino).HasColumnName("ID_RESPONSABLE_DESTINO");
            entity.Property(e => e.IdResponsableOrigen).HasColumnName("ID_RESPONSABLE_ORIGEN");
            entity.Property(e => e.IdStatusEnvioFin).HasColumnName("ID_STATUS_ENVIO_FIN");
            entity.Property(e => e.IdStatusEnvioIni).HasColumnName("ID_STATUS_ENVIO_INI");
            entity.Property(e => e.IdTipoResponsableDestino).HasColumnName("ID_TIPO_RESPONSABLE_DESTINO");
            entity.Property(e => e.IdTipoResponsableOrigen).HasColumnName("ID_TIPO_RESPONSABLE_ORIGEN");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
        });

        modelBuilder.Entity<BdBitacoraError>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_BITACORA_ERROR");

            entity.Property(e => e.DescError)
                .IsUnicode(false)
                .HasColumnName("DESC_ERROR");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdError)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_ERROR");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
        });

        modelBuilder.Entity<BdBitacoraIguala>(entity =>
        {
            entity.HasKey(e => e.IdBitacoraIgualas);

            entity.ToTable("BD_BITACORA_IGUALAS");

            entity.Property(e => e.IdBitacoraIgualas).HasColumnName("ID_BITACORA_IGUALAS");
            entity.Property(e => e.Comentario)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("COMENTARIO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdIgualas).HasColumnName("ID_IGUALAS");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.StatusFin)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("STATUS_FIN");
            entity.Property(e => e.StatusIni)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("STATUS_INI");
        });

        modelBuilder.Entity<BdBitacoraInstalacionRetiroMasivo>(entity =>
        {
            entity.HasKey(e => e.IdBitacoraInstalacionRetiroMasivo).HasName("PK__BD_BITAC__62D76EBD59845E23");

            entity.ToTable("BD_BITACORA_INSTALACION_RETIRO_MASIVO");

            entity.Property(e => e.IdBitacoraInstalacionRetiroMasivo).HasColumnName("ID_BITACORA_INSTALACION_RETIRO_MASIVO");
            entity.Property(e => e.FechaAlta)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ALTA");
            entity.Property(e => e.IdInstalacion).HasColumnName("ID_INSTALACION");
            entity.Property(e => e.IdInstalacionRetirosMasivos).HasColumnName("ID_INSTALACION_RETIROS_MASIVOS");
            entity.Property(e => e.IdInstalacionSim).HasColumnName("ID_INSTALACION_SIM");
            entity.Property(e => e.IdRetiro).HasColumnName("ID_RETIRO");
            entity.Property(e => e.IdRetiroSim).HasColumnName("ID_RETIRO_SIM");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.NoSerieEntrada)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE_ENTRADA");
            entity.Property(e => e.NoSerieSale)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE_SALE");
            entity.Property(e => e.NoSerieSimEntrada)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE_SIM_ENTRADA");
            entity.Property(e => e.NoSerieSimSale)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE_SIM_SALE");
            entity.Property(e => e.Odt)
                .IsUnicode(false)
                .HasColumnName("ODT");
            entity.Property(e => e.Status)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdBitacoraInsumo>(entity =>
        {
            entity.HasKey(e => e.IdBitacoraInsumo).HasName("PK_BD_BITACORA_INSUMO");

            entity.ToTable("BD_BITACORA_INSUMOS");

            entity.Property(e => e.IdBitacoraInsumo).HasColumnName("ID_BITACORA_INSUMO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdInsumo).HasColumnName("ID_INSUMO");
            entity.Property(e => e.IdResponsable).HasColumnName("ID_RESPONSABLE");
            entity.Property(e => e.IdStatusInsumoFin).HasColumnName("ID_STATUS_INSUMO_FIN");
            entity.Property(e => e.IdStatusInsumoIni).HasColumnName("ID_STATUS_INSUMO_INI");
            entity.Property(e => e.IdTipoResponsable).HasColumnName("ID_TIPO_RESPONSABLE");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");

            entity.HasOne(d => d.IdStatusInsumoFinNavigation).WithMany(p => p.BdBitacoraInsumoIdStatusInsumoFinNavigations)
                .HasForeignKey(d => d.IdStatusInsumoFin)
                .HasConstraintName("FK_BD_BITACORA_INSUMOS_C_STATUS_INSUMOS1");

            entity.HasOne(d => d.IdStatusInsumoIniNavigation).WithMany(p => p.BdBitacoraInsumoIdStatusInsumoIniNavigations)
                .HasForeignKey(d => d.IdStatusInsumoIni)
                .HasConstraintName("FK_BD_BITACORA_INSUMOS_C_STATUS_INSUMOS");

            entity.HasOne(d => d.IdTipoResponsableNavigation).WithMany(p => p.BdBitacoraInsumos)
                .HasForeignKey(d => d.IdTipoResponsable)
                .HasConstraintName("FK_BD_BITACORA_INSUMOS_C_TIPO_RESPONSABLE");
        });

        modelBuilder.Entity<BdBitacoraItemsBorrado>(entity =>
        {
            entity.HasKey(e => e.IdBitacoraItemsBorrados).HasName("PK__BD_BITAC__7B29BB006838319E");

            entity.ToTable("BD_BITACORA_ITEMS_BORRADOS");

            entity.Property(e => e.IdBitacoraItemsBorrados).HasColumnName("ID_BITACORA_ITEMS_BORRADOS");
            entity.Property(e => e.Cantidad).HasColumnName("CANTIDAD");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdInsumo).HasColumnName("ID_INSUMO");
            entity.Property(e => e.IdSolicitudAlmacen).HasColumnName("ID_SOLICITUD_ALMACEN");
            entity.Property(e => e.IdStatusItemsSolicitudAlmacen).HasColumnName("ID_STATUS_ITEMS_SOLICITUD_ALMACEN");
            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
        });

        modelBuilder.Entity<BdBitacoraItemsSolicitudAlmacen>(entity =>
        {
            entity.HasKey(e => e.IdBitacoraItemsSolicitudAlmacen).HasName("PK_C_BITACORA_ITEMS_SOLICITUD_ALMACEN");

            entity.ToTable("BD_BITACORA_ITEMS_SOLICITUD_ALMACEN");

            entity.HasIndex(e => e.IdItemsSolicitudAlmacen, "IX_BD_BITACORA_ITEMS_SOLICITUD_ALMACEN_ID_ITEMS_SOLICITUD_ALMACEN").HasFillFactor(80);

            entity.Property(e => e.IdBitacoraItemsSolicitudAlmacen).HasColumnName("ID_BITACORA_ITEMS_SOLICITUD_ALMACEN");
            entity.Property(e => e.Comentario)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("COMENTARIO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdItemsSolicitudAlmacen).HasColumnName("ID_ITEMS_SOLICITUD_ALMACEN");
            entity.Property(e => e.IdStatusItemsSolicitudAlmacenFin).HasColumnName("ID_STATUS_ITEMS_SOLICITUD_ALMACEN_FIN");
            entity.Property(e => e.IdStatusItemsSolicitudAlmacenIni).HasColumnName("ID_STATUS_ITEMS_SOLICITUD_ALMACEN_INI");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
        });

        modelBuilder.Entity<BdBitacoraJob>(entity =>
        {
            entity.HasKey(e => e.IdBitacoraJob);

            entity.ToTable("BD_BITACORA_JOBS");

            entity.Property(e => e.IdBitacoraJob).HasColumnName("ID_BITACORA_JOB");
            entity.Property(e => e.Fecha)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA");
            entity.Property(e => e.JobName)
                .HasMaxLength(50)
                .HasColumnName("JOB_NAME");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdBitacoraLiberacionProgramado>(entity =>
        {
            entity.HasKey(e => e.IdBitacoraLiberacionProgramado).HasName("PK__BD_BITAC__E130E9DFE891201A");

            entity.ToTable("BD_BITACORA_LIBERACION_PROGRAMADO");

            entity.Property(e => e.IdBitacoraLiberacionProgramado).HasColumnName("ID_BITACORA_LIBERACION_PROGRAMADO");
            entity.Property(e => e.FecAltaFin)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA_FIN");
            entity.Property(e => e.FecAltaInicio)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA_INICIO");
            entity.Property(e => e.FecInicioAnterior)
                .HasColumnType("datetime")
                .HasColumnName("FEC_INICIO_ANTERIOR");
            entity.Property(e => e.FecInicioFin)
                .HasColumnType("datetime")
                .HasColumnName("FEC_INICIO_FIN");
            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
        });

        modelBuilder.Entity<BdBitacoraModeloUnidad>(entity =>
        {
            entity.HasKey(e => e.IdBitacoraModeloUnidad);

            entity.ToTable("BD_BITACORA_MODELO_UNIDAD");

            entity.HasIndex(e => e.IdUnidad, "IX_BD_BITACORA_MODELO_UNIDAD_ID_UNIDAD");

            entity.Property(e => e.IdBitacoraModeloUnidad).HasColumnName("ID_BITACORA_MODELO_UNIDAD");
            entity.Property(e => e.FechaAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_ALTA");
            entity.Property(e => e.IdModeloNuevo).HasColumnName("ID_MODELO_NUEVO");
            entity.Property(e => e.IdModeloViejo).HasColumnName("ID_MODELO_VIEJO");
            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");

            entity.HasOne(d => d.IdModeloNuevoNavigation).WithMany(p => p.BdBitacoraModeloUnidadIdModeloNuevoNavigations)
                .HasForeignKey(d => d.IdModeloNuevo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BD_BITACORA_MODELO_UNIDAD_C_MODELOS");

            entity.HasOne(d => d.IdModeloViejoNavigation).WithMany(p => p.BdBitacoraModeloUnidadIdModeloViejoNavigations)
                .HasForeignKey(d => d.IdModeloViejo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BD_BITACORA_MODELO_UNIDAD_C_MODELOS1");

            entity.HasOne(d => d.IdUnidadNavigation).WithMany(p => p.BdBitacoraModeloUnidads)
                .HasForeignKey(d => d.IdUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BD_BITACORA_MODELO_UNIDAD_BD_UNIDADES");

            entity.HasOne(d => d.IdUsuarioAltaNavigation).WithMany(p => p.BdBitacoraModeloUnidads)
                .HasForeignKey(d => d.IdUsuarioAlta)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BD_BITACORA_MODELO_UNIDAD_C_USUARIOS");
        });

        modelBuilder.Entity<BdBitacoraMovimientosAbc>(entity =>
        {
            entity.HasKey(e => e.IdBitacoraMovimientosAbc).HasName("PK__BD_BITAC__C6E7CDD09CB12EE0");

            entity.ToTable("BD_BITACORA_MOVIMIENTOS_ABC");

            entity.Property(e => e.IdBitacoraMovimientosAbc).HasColumnName("ID_BITACORA_MOVIMIENTOS_ABC");
            entity.Property(e => e.Afiliacion)
                .IsUnicode(false)
                .HasColumnName("AFILIACION");
            entity.Property(e => e.Caja)
                .IsUnicode(false)
                .HasColumnName("CAJA");
            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");
            entity.Property(e => e.FolioTelecarga)
                .IsUnicode(false)
                .HasColumnName("FOLIO_TELECARGA");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.Observaciones)
                .IsUnicode(false)
                .HasColumnName("OBSERVACIONES");
            entity.Property(e => e.Status)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.TipoMovimiento)
                .IsUnicode(false)
                .HasColumnName("TIPO_MOVIMIENTO");
        });

        modelBuilder.Entity<BdBitacoraMovimientosRetornosInsumo>(entity =>
        {
            entity.HasKey(e => e.IdBitacoraMri).HasName("PK__BD_BITAC__8E656FDB0DD2385A");

            entity.ToTable("BD_BITACORA_MOVIMIENTOS_RETORNOS_INSUMOS");

            entity.Property(e => e.IdBitacoraMri).HasColumnName("ID_BITACORA_MRI");
            entity.Property(e => e.Entrada).HasColumnName("ENTRADA");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdConsolidado)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(((((CONVERT([varchar],datepart(day,getdate()),(0))+CONVERT([varchar],datepart(month,getdate()),(0)))+CONVERT([varchar],datepart(year,getdate()),(0)))+'_')+CONVERT([varchar],datepart(hour,getdate()),(0)))+CONVERT([varchar],datepart(minute,getdate()),(0)))")
                .HasColumnName("ID_CONSOLIDADO");
            entity.Property(e => e.IdEnvio).HasColumnName("ID_ENVIO");
            entity.Property(e => e.IdInsumo).HasColumnName("ID_INSUMO");
            entity.Property(e => e.IdResponsableDestino).HasColumnName("ID_RESPONSABLE_DESTINO");
            entity.Property(e => e.IdResponsableOrigen).HasColumnName("ID_RESPONSABLE_ORIGEN");
            entity.Property(e => e.IdStatusInsumo).HasColumnName("ID_STATUS_INSUMO");
            entity.Property(e => e.IdTipoResponsableDestino).HasColumnName("ID_TIPO_RESPONSABLE_DESTINO");
            entity.Property(e => e.IdTipoResponsableOrigen).HasColumnName("ID_TIPO_RESPONSABLE_ORIGEN");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
        });

        modelBuilder.Entity<BdBitacoraNegocio>(entity =>
        {
            entity.HasKey(e => e.IdBitacoraNegocios).HasName("PK__BD_BITAC__712EC7C568D2D7F5");

            entity.ToTable("BD_BITACORA_NEGOCIOS");

            entity.Property(e => e.IdBitacoraNegocios).HasColumnName("ID_BITACORA_NEGOCIOS");
            entity.Property(e => e.Colonia)
                .IsUnicode(false)
                .HasColumnName("COLONIA");
            entity.Property(e => e.Cp)
                .IsUnicode(false)
                .HasColumnName("CP");
            entity.Property(e => e.DescNegocio)
                .IsUnicode(false)
                .HasColumnName("DESC_NEGOCIO");
            entity.Property(e => e.Direccion)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");
            entity.Property(e => e.Estado)
                .IsUnicode(false)
                .HasColumnName("ESTADO");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdOtrosClientesActual).HasColumnName("ID_OTROS_CLIENTES_ACTUAL");
            entity.Property(e => e.IdOtrosClientesAnterior).HasColumnName("ID_OTROS_CLIENTES_ANTERIOR");
            entity.Property(e => e.IdSegmento).HasColumnName("ID_SEGMENTO");
            entity.Property(e => e.IdUsuarioAltaBitacora).HasColumnName("ID_USUARIO_ALTA_BITACORA");
            entity.Property(e => e.IsActualizacion).HasColumnName("IS_ACTUALIZACION");
            entity.Property(e => e.NoAfiliacion)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.Poblacion)
                .IsUnicode(false)
                .HasColumnName("POBLACION");
            entity.Property(e => e.RfcFiscal)
                .IsUnicode(false)
                .HasColumnName("RFC_FISCAL");
            entity.Property(e => e.StatusBitacora)
                .IsUnicode(false)
                .HasColumnName("STATUS_BITACORA");
            entity.Property(e => e.Telefono)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");
        });

        modelBuilder.Entity<BdBitacoraNegocioMigracion>(entity =>
        {
            entity.HasKey(e => e.IdBitacoraNegocioMigracion).HasName("PK__BD_BITAC__AFE0BF26C9AD68F4");

            entity.ToTable("BD_BITACORA_NEGOCIO_MIGRACION");

            entity.Property(e => e.IdBitacoraNegocioMigracion).HasColumnName("ID_BITACORA_NEGOCIO_MIGRACION");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
        });

        modelBuilder.Entity<BdBitacoraNegociosCoordenada>(entity =>
        {
            entity.HasKey(e => e.IdBitcoraNegocioCoordenada).HasName("PK__BD_BITAC__BA413A8D76CC7CD8");

            entity.ToTable("BD_BITACORA_NEGOCIOS_COORDENADAS");

            entity.Property(e => e.IdBitcoraNegocioCoordenada).HasColumnName("ID_BITCORA_NEGOCIO_COORDENADA");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IdNegocio).HasColumnName("ID_NEGOCIO");
            entity.Property(e => e.IdStatusAr).HasColumnName("ID_STATUS_AR");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Latitud)
                .HasColumnType("numeric(20, 15)")
                .HasColumnName("LATITUD");
            entity.Property(e => e.Longitud)
                .HasColumnType("numeric(20, 15)")
                .HasColumnName("LONGITUD");
        });

        modelBuilder.Entity<BdBitacoraNoInsumoAr>(entity =>
        {
            entity.HasKey(e => e.IdBitacoraNoInsumoAr).HasName("PK__BD_BITAC__126B50BDE7877995");

            entity.ToTable("BD_BITACORA_NO_INSUMO_AR");

            entity.Property(e => e.IdBitacoraNoInsumoAr).HasColumnName("ID_BITACORA_NO_INSUMO_AR");
            entity.Property(e => e.Causa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CAUSA");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IdInsumo).HasColumnName("ID_INSUMO");
            entity.Property(e => e.IdTecnico).HasColumnName("ID_TECNICO");
        });

        modelBuilder.Entity<BdBitacoraOdtOnbaseConfirmacion>(entity =>
        {
            entity.HasKey(e => e.IdBitacoraOdtOnbaseConfirmacion).HasName("PK__BD_BITAC__CB69D503EFF88BFD");

            entity.ToTable("BD_BITACORA_ODT_ONBASE_CONFIRMACION");

            entity.Property(e => e.IdBitacoraOdtOnbaseConfirmacion).HasColumnName("ID_BITACORA_ODT_ONBASE_CONFIRMACION");
            entity.Property(e => e.FecModificacion)
                .HasColumnType("datetime")
                .HasColumnName("FEC_MODIFICACION");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
        });

        modelBuilder.Entity<BdBitacoraOtrosCliente>(entity =>
        {
            entity.HasKey(e => e.IdBitacoraOtrosClientes).HasName("PK__BD_BITAC__8A75BDDEAB414A61");

            entity.ToTable("BD_BITACORA_OTROS_CLIENTES");

            entity.Property(e => e.IdBitacoraOtrosClientes).HasColumnName("ID_BITACORA_OTROS_CLIENTES");
            entity.Property(e => e.DescOtrosClientesActual)
                .IsUnicode(false)
                .HasColumnName("DESC_OTROS_CLIENTES_ACTUAL");
            entity.Property(e => e.DescOtrosClientesAnterior)
                .IsUnicode(false)
                .HasColumnName("DESC_OTROS_CLIENTES_ANTERIOR");
            entity.Property(e => e.FechaAlta)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ALTA");
            entity.Property(e => e.IdOtrosClientes).HasColumnName("ID_OTROS_CLIENTES");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Status)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.StatusActual)
                .IsUnicode(false)
                .HasColumnName("STATUS_ACTUAL");
            entity.Property(e => e.StatusAnterior)
                .IsUnicode(false)
                .HasColumnName("STATUS_ANTERIOR");
        });

        modelBuilder.Entity<BdBitacoraProcedure>(entity =>
        {
            entity.HasKey(e => e.IdBitacoraProcedure).HasName("PK__BD_BITAC__2A24B496DD081A42");

            entity.ToTable("BD_BITACORA_PROCEDURE");

            entity.Property(e => e.IdBitacoraProcedure).HasColumnName("ID_BITACORA_PROCEDURE");
            entity.Property(e => e.Descripcion)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");
            entity.Property(e => e.FechaUso)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_USO");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
        });

        modelBuilder.Entity<BdBitacoraProducto>(entity =>
        {
            entity.HasKey(e => e.IdBitacoraProducto).HasName("PK__BD_BITAC__586DE537DD73E260");

            entity.ToTable("BD_BITACORA_PRODUCTO");

            entity.Property(e => e.IdBitacoraProducto).HasColumnName("ID_BITACORA_PRODUCTO");
            entity.Property(e => e.DescProducto)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_PRODUCTO");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.IsUpdate).HasColumnName("IS_UPDATE");
            entity.Property(e => e.Status)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdBitacoraPropiedadCliente>(entity =>
        {
            entity.HasKey(e => e.IdBitacoraPropiedadCliente).HasName("PK__BD_BITAC__D07251D722B0844E");

            entity.ToTable("BD_BITACORA_PROPIEDAD_CLIENTE");

            entity.Property(e => e.IdBitacoraPropiedadCliente).HasColumnName("ID_BITACORA_PROPIEDAD_CLIENTE");
            entity.Property(e => e.FechaAlta)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ALTA");
            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.IsPropiedadClienteActual).HasColumnName("IS_PROPIEDAD_CLIENTE_ACTUAL");
            entity.Property(e => e.IsPropiedadClienteNuevo).HasColumnName("IS_PROPIEDAD_CLIENTE_NUEVO");

            entity.HasOne(d => d.IdUnidadNavigation).WithMany(p => p.BdBitacoraPropiedadClientes)
                .HasForeignKey(d => d.IdUnidad)
                .HasConstraintName("FK__BD_BITACO__ID_UN__258CF0F9");
        });

        modelBuilder.Entity<BdBitacoraQueryModeloConectividad>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_BITACORA_QUERY_MODELO_CONECTIVIDAD");

            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Query)
                .IsUnicode(false)
                .HasColumnName("QUERY");
        });

        modelBuilder.Entity<BdBitacoraReasignacionTecnico>(entity =>
        {
            entity.HasKey(e => e.IdBitacora);

            entity.ToTable("BD_BITACORA_REASIGNACION_TECNICOS");

            entity.HasIndex(e => e.IdReparacionUnidad, "IX_MI_BD_BITACORA_REASIGNACION_TECNICOS_85_84");

            entity.Property(e => e.IdBitacora).HasColumnName("ID_BITACORA");
            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");
            entity.Property(e => e.IdReparacionUnidad).HasColumnName("ID_REPARACION_UNIDAD");
            entity.Property(e => e.IdUsuarioAnterior).HasColumnName("ID_USUARIO_ANTERIOR");
            entity.Property(e => e.IdUsuarioAsignado).HasColumnName("ID_USUARIO_ASIGNADO");
            entity.Property(e => e.IdUsuarioCambio).HasColumnName("ID_USUARIO_CAMBIO");
            entity.Property(e => e.Status)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdBitacoraRecalcularHorasSf>(entity =>
        {
            entity.HasKey(e => e.IdBitacoraRecalcularHorasSf).HasName("PK__BD_BITAC__0C4EFE83D9F06835");

            entity.ToTable("BD_BITACORA_RECALCULAR_HORAS_SF");

            entity.Property(e => e.IdBitacoraRecalcularHorasSf).HasColumnName("ID_BITACORA_RECALCULAR_HORAS_SF");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.FecAtencion)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ATENCION");
            entity.Property(e => e.FecGarantia)
                .HasColumnType("datetime")
                .HasColumnName("FEC_GARANTIA");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
        });

        modelBuilder.Entity<BdBitacoraRechazosEnvio>(entity =>
        {
            entity.HasKey(e => e.IdBitacoraRechazo).HasName("PK__BD_BITAC__F048B2F65F2362EA");

            entity.ToTable("BD_BITACORA_RECHAZOS_ENVIOS");

            entity.Property(e => e.IdBitacoraRechazo).HasColumnName("ID_BITACORA_RECHAZO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdEnvio).HasColumnName("ID_ENVIO");
            entity.Property(e => e.IdInsumo).HasColumnName("ID_INSUMO");
            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
        });

        modelBuilder.Entity<BdBitacoraReparacion>(entity =>
        {
            entity.HasKey(e => e.IdBitacoraReparacion).HasName("PK__BD_BITAC__BE6830FC6F47C2DA");

            entity.ToTable("BD_BITACORA_REPARACION");

            entity.Property(e => e.IdBitacoraReparacion).HasColumnName("ID_BITACORA_REPARACION");
            entity.Property(e => e.Comentario)
                .IsUnicode(false)
                .HasColumnName("COMENTARIO");
            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");
            entity.Property(e => e.IdReparacionUnidad).HasColumnName("ID_REPARACION_UNIDAD");
            entity.Property(e => e.IdStatusUnidadActual).HasColumnName("ID_STATUS_UNIDAD_ACTUAL");
            entity.Property(e => e.IdStatusUnidadAnterior).HasColumnName("ID_STATUS_UNIDAD_ANTERIOR");
            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");
            entity.Property(e => e.IdUsuarioAnterior).HasColumnName("ID_USUARIO_ANTERIOR");
            entity.Property(e => e.IdUsuarioAsignado).HasColumnName("ID_USUARIO_ASIGNADO");
            entity.Property(e => e.IdUsuarioCambio).HasColumnName("ID_USUARIO_CAMBIO");
        });

        modelBuilder.Entity<BdBitacoraRfcCliente>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_BITACORA_RFC_CLIENTES");

            entity.Property(e => e.ClienteActual)
                .IsUnicode(false)
                .HasColumnName("CLIENTE_ACTUAL");
            entity.Property(e => e.ClienteAnterior)
                .IsUnicode(false)
                .HasColumnName("CLIENTE_ANTERIOR");
            entity.Property(e => e.FechaAlta)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ALTA");
            entity.Property(e => e.IdBitacoraRfcClientes)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_BITACORA_RFC_CLIENTES");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.NoAfiliacion)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.Rfc)
                .IsUnicode(false)
                .HasColumnName("RFC");
            entity.Property(e => e.Status)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdBitacoraServicio>(entity =>
        {
            entity.HasKey(e => e.IdBitacoraServicios).HasName("PK__BD_BITAC__E2FFADA2928C1D14");

            entity.ToTable("BD_BITACORA_SERVICIOS");

            entity.Property(e => e.IdBitacoraServicios).HasColumnName("ID_BITACORA_SERVICIOS");
            entity.Property(e => e.CodigoActual)
                .IsUnicode(false)
                .HasColumnName("CODIGO_ACTUAL");
            entity.Property(e => e.CodigoAnterior)
                .IsUnicode(false)
                .HasColumnName("CODIGO_ANTERIOR");
            entity.Property(e => e.DescServicioActual)
                .IsUnicode(false)
                .HasColumnName("DESC_SERVICIO_ACTUAL");
            entity.Property(e => e.DescServicioAnterior)
                .IsUnicode(false)
                .HasColumnName("DESC_SERVICIO_ANTERIOR");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdServicio).HasColumnName("ID_SERVICIO");
            entity.Property(e => e.IdUsuariosAlta).HasColumnName("ID_USUARIOS_ALTA");
            entity.Property(e => e.IsCallCenterActual)
                .IsUnicode(false)
                .HasColumnName("IS_CALL_CENTER_ACTUAL");
            entity.Property(e => e.IsCallCenterAnterior)
                .IsUnicode(false)
                .HasColumnName("IS_CALL_CENTER_ANTERIOR");
            entity.Property(e => e.IsProyectoActual)
                .IsUnicode(false)
                .HasColumnName("IS_PROYECTO_ACTUAL");
            entity.Property(e => e.IsProyectoAnterior)
                .IsUnicode(false)
                .HasColumnName("IS_PROYECTO_ANTERIOR");
            entity.Property(e => e.MinPromedioActual)
                .IsUnicode(false)
                .HasColumnName("MIN_PROMEDIO_ACTUAL");
            entity.Property(e => e.MinPromedioAnterior)
                .IsUnicode(false)
                .HasColumnName("MIN_PROMEDIO_ANTERIOR");
            entity.Property(e => e.NoDiasActual)
                .IsUnicode(false)
                .HasColumnName("NO_DIAS_ACTUAL");
            entity.Property(e => e.NoDiasAnterior)
                .IsUnicode(false)
                .HasColumnName("NO_DIAS_ANTERIOR");
            entity.Property(e => e.StatusActual)
                .IsUnicode(false)
                .HasColumnName("STATUS_ACTUAL");
            entity.Property(e => e.StatusAnterior)
                .IsUnicode(false)
                .HasColumnName("STATUS_ANTERIOR");
        });

        modelBuilder.Entity<BdBitacoraServiciosFalla>(entity =>
        {
            entity.HasKey(e => e.IdBitacoraServiciosFalla).HasName("PK__BD_BITAC__7C30246C0ED2DBD8");

            entity.ToTable("BD_BITACORA_SERVICIOS_FALLA");

            entity.Property(e => e.IdBitacoraServiciosFalla).HasColumnName("ID_BITACORA_SERVICIOS_FALLA");
            entity.Property(e => e.Accion)
                .IsUnicode(false)
                .HasColumnName("ACCION");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdFalla).HasColumnName("ID_FALLA");
            entity.Property(e => e.IdOtrosClientes).HasColumnName("ID_OTROS_CLIENTES");
            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");
            entity.Property(e => e.IdServicio).HasColumnName("ID_SERVICIO");
            entity.Property(e => e.IdServicioFalla).HasColumnName("ID_SERVICIO_FALLA");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
        });

        modelBuilder.Entity<BdBitacoraSolicitudDevolucion>(entity =>
        {
            entity.HasKey(e => e.IdBitacoraSolicitudDevolucion);

            entity.ToTable("BD_BITACORA_SOLICITUD_DEVOLUCION");

            entity.Property(e => e.IdBitacoraSolicitudDevolucion).HasColumnName("ID_BITACORA_SOLICITUD_DEVOLUCION");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdSolicitudDevolucion).HasColumnName("ID_SOLICITUD_DEVOLUCION");
            entity.Property(e => e.IdStatusSolicitudDevolucionFin).HasColumnName("ID_STATUS_SOLICITUD_DEVOLUCION_FIN");
            entity.Property(e => e.IdStatusSolicitudDevolucionIni).HasColumnName("ID_STATUS_SOLICITUD_DEVOLUCION_INI");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");

            entity.HasOne(d => d.IdStatusSolicitudDevolucionFinNavigation).WithMany(p => p.BdBitacoraSolicitudDevolucionIdStatusSolicitudDevolucionFinNavigations)
                .HasForeignKey(d => d.IdStatusSolicitudDevolucionFin)
                .HasConstraintName("FK_BD_BITACORA_SOLICITUD_DEVOLUCION_C_STATUS_SOLICITUD_DEVOLUCION1");

            entity.HasOne(d => d.IdStatusSolicitudDevolucionIniNavigation).WithMany(p => p.BdBitacoraSolicitudDevolucionIdStatusSolicitudDevolucionIniNavigations)
                .HasForeignKey(d => d.IdStatusSolicitudDevolucionIni)
                .HasConstraintName("FK_BD_BITACORA_SOLICITUD_DEVOLUCION_C_STATUS_SOLICITUD_DEVOLUCION");

            entity.HasOne(d => d.IdUsuarioAltaNavigation).WithMany(p => p.BdBitacoraSolicitudDevolucions)
                .HasForeignKey(d => d.IdUsuarioAlta)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BD_BITACORA_SOLICITUD_DEVOLUCION_C_USUARIOS");
        });

        modelBuilder.Entity<BdBitacoraSolicitudRecoleccion>(entity =>
        {
            entity.HasKey(e => e.IdBitacoraSolicitudRecoleccion);

            entity.ToTable("BD_BITACORA_SOLICITUD_RECOLECCION");

            entity.HasIndex(e => e.IdSolicitudRecoleccion, "IX_BD_BITACORA_SOLICITUD_RECOLECCION_ID_SOLICITUD_RECOLECCION").HasFillFactor(80);

            entity.HasIndex(e => e.IdSolicitudRecoleccion, "IX_MI_BD_BITACORA_SOLICITUD_RECOLECCION_132815_132814");

            entity.Property(e => e.IdBitacoraSolicitudRecoleccion).HasColumnName("ID_BITACORA_SOLICITUD_RECOLECCION");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdSolicitudRecoleccion).HasColumnName("ID_SOLICITUD_RECOLECCION");
            entity.Property(e => e.IdStatusSolicitudRecoleccionFin).HasColumnName("ID_STATUS_SOLICITUD_RECOLECCION_FIN");
            entity.Property(e => e.IdStatusSolicitudRecoleccionIni).HasColumnName("ID_STATUS_SOLICITUD_RECOLECCION_INI");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");

            entity.HasOne(d => d.IdSolicitudRecoleccionNavigation).WithMany(p => p.BdBitacoraSolicitudRecoleccions)
                .HasForeignKey(d => d.IdSolicitudRecoleccion)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BD_BITACORA_SOLICITUD_RECOLECCION_BD_SOLICITUD_RECOLECCION");

            entity.HasOne(d => d.IdStatusSolicitudRecoleccionFinNavigation).WithMany(p => p.BdBitacoraSolicitudRecoleccionIdStatusSolicitudRecoleccionFinNavigations)
                .HasForeignKey(d => d.IdStatusSolicitudRecoleccionFin)
                .HasConstraintName("FK_BD_BITACORA_SOLICITUD_RECOLECCION_C_STATUS_SOLICITUD_RECOLECCION1");

            entity.HasOne(d => d.IdStatusSolicitudRecoleccionIniNavigation).WithMany(p => p.BdBitacoraSolicitudRecoleccionIdStatusSolicitudRecoleccionIniNavigations)
                .HasForeignKey(d => d.IdStatusSolicitudRecoleccionIni)
                .HasConstraintName("FK_BD_BITACORA_SOLICITUD_RECOLECCION_C_STATUS_SOLICITUD_RECOLECCION");
        });

        modelBuilder.Entity<BdBitacoraSolicitudesAlmacen>(entity =>
        {
            entity.HasKey(e => e.IdBitacoraSolicitudAlmacen).HasName("PK_BD_BITACORA_SOLICITUD_ALMACEN");

            entity.ToTable("BD_BITACORA_SOLICITUDES_ALMACEN");

            entity.HasIndex(e => e.IdSolicitudAlmacen, "IX_BD_BITACORA_SOLICITUDES_ALMACEN_ID_SOLICITUD_ALMACEN").HasFillFactor(80);

            entity.Property(e => e.IdBitacoraSolicitudAlmacen).HasColumnName("ID_BITACORA_SOLICITUD_ALMACEN");
            entity.Property(e => e.Comentario)
                .HasColumnType("text")
                .HasColumnName("COMENTARIO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdSolicitudAlmacen).HasColumnName("ID_SOLICITUD_ALMACEN");
            entity.Property(e => e.IdStatusSolicitudAlmacenFin).HasColumnName("ID_STATUS_SOLICITUD_ALMACEN_FIN");
            entity.Property(e => e.IdStatusSolicitudAlmacenIni).HasColumnName("ID_STATUS_SOLICITUD_ALMACEN_INI");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");

            entity.HasOne(d => d.IdStatusSolicitudAlmacenFinNavigation).WithMany(p => p.BdBitacoraSolicitudesAlmacenIdStatusSolicitudAlmacenFinNavigations)
                .HasForeignKey(d => d.IdStatusSolicitudAlmacenFin)
                .HasConstraintName("FK_BD_BITACORA_SOLICITUDES_ALMACEN_C_STATUS_SOLICITUD_ALMACEN1");

            entity.HasOne(d => d.IdStatusSolicitudAlmacenIniNavigation).WithMany(p => p.BdBitacoraSolicitudesAlmacenIdStatusSolicitudAlmacenIniNavigations)
                .HasForeignKey(d => d.IdStatusSolicitudAlmacenIni)
                .HasConstraintName("FK_BD_BITACORA_SOLICITUDES_ALMACEN_C_STATUS_SOLICITUD_ALMACEN");
        });

        modelBuilder.Entity<BdBitacoraSolicitudesViatico>(entity =>
        {
            entity.HasKey(e => e.IdBitacoraSolicitudViaticos);

            entity.ToTable("BD_BITACORA_SOLICITUDES_VIATICOS");

            entity.HasIndex(e => e.IdSolicitudViaticos, "IX_BD_BITACORA_SOLICITUDES_VIATICOS_ID_SOLICITUD_VIATICOS").HasFillFactor(80);

            entity.Property(e => e.IdBitacoraSolicitudViaticos).HasColumnName("ID_BITACORA_SOLICITUD_VIATICOS");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdSolicitudViaticos).HasColumnName("ID_SOLICITUD_VIATICOS");
            entity.Property(e => e.IdStatusSolicitudViaticosFin).HasColumnName("ID_STATUS_SOLICITUD_VIATICOS_FIN");
            entity.Property(e => e.IdStatusSolicitudViaticosIni).HasColumnName("ID_STATUS_SOLICITUD_VIATICOS_INI");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");

            entity.HasOne(d => d.IdSolicitudViaticosNavigation).WithMany(p => p.BdBitacoraSolicitudesViaticos)
                .HasForeignKey(d => d.IdSolicitudViaticos)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BD_BITACORA_SOLICITUDES_VIATICOS_BD_SOLICITUDES_VIATICOS1");

            entity.HasOne(d => d.IdStatusSolicitudViaticosFinNavigation).WithMany(p => p.BdBitacoraSolicitudesViaticoIdStatusSolicitudViaticosFinNavigations)
                .HasForeignKey(d => d.IdStatusSolicitudViaticosFin)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BD_BITACORA_SOLICITUDES_VIATICOS_C_STATUS_SOLICITUD_VIATICOS");

            entity.HasOne(d => d.IdStatusSolicitudViaticosIniNavigation).WithMany(p => p.BdBitacoraSolicitudesViaticoIdStatusSolicitudViaticosIniNavigations)
                .HasForeignKey(d => d.IdStatusSolicitudViaticosIni)
                .HasConstraintName("FK_BD_BITACORA_SOLICITUDES_VIATICOS_BD_SOLICITUDES_VIATICOS");
        });

        modelBuilder.Entity<BdBitacoraStatusTipoUsuario>(entity =>
        {
            entity.HasKey(e => e.IdBitacoraStatusTipoUsuario);

            entity.ToTable("BD_BITACORA_STATUS_TIPO_USUARIO");

            entity.Property(e => e.IdBitacoraStatusTipoUsuario).HasColumnName("ID_BITACORA_STATUS_TIPO_USUARIO");
            entity.Property(e => e.Cambio)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("CAMBIO");
            entity.Property(e => e.FecCambio)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_CAMBIO");
            entity.Property(e => e.IdTipoUsuario).HasColumnName("ID_TIPO_USUARIO");
            entity.Property(e => e.IdUsuarioCambio).HasColumnName("ID_USUARIO_CAMBIO");
        });

        modelBuilder.Entity<BdBitacoraStatusUsuario>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_BITACORA_STATUS_USUARIO");

            entity.Property(e => e.FecCambio)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_CAMBIO");
            entity.Property(e => e.IdBitacoraStatusUsuario)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_BITACORA_STATUS_USUARIO");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.IdUsuarioCambio).HasColumnName("ID_USUARIO_CAMBIO");
            entity.Property(e => e.StatusAnterior)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("STATUS_ANTERIOR");
            entity.Property(e => e.StatusNuevo)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("STATUS_NUEVO");
        });

        modelBuilder.Entity<BdBitacoraSubServicio>(entity =>
        {
            entity.HasKey(e => e.IdBitacoraSubServicios).HasName("PK__BD_BITAC__09FA6FC819490277");

            entity.ToTable("BD_BITACORA_SUB_SERVICIOS");

            entity.Property(e => e.IdBitacoraSubServicios).HasColumnName("ID_BITACORA_SUB_SERVICIOS");
            entity.Property(e => e.DescFallaActual)
                .IsUnicode(false)
                .HasColumnName("DESC_FALLA_ACTUAL");
            entity.Property(e => e.DescFallaAnterior)
                .IsUnicode(false)
                .HasColumnName("DESC_FALLA_ANTERIOR");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdFalla).HasColumnName("ID_FALLA");
            entity.Property(e => e.IdUsuariosAlta).HasColumnName("ID_USUARIOS_ALTA");
            entity.Property(e => e.IsDowntimeActual).HasColumnName("IS_DOWNTIME_ACTUAL");
            entity.Property(e => e.IsDowntimeAnterior).HasColumnName("IS_DOWNTIME_ANTERIOR");
            entity.Property(e => e.StatusActual)
                .IsUnicode(false)
                .HasColumnName("STATUS_ACTUAL");
            entity.Property(e => e.StatusAnterior)
                .IsUnicode(false)
                .HasColumnName("STATUS_ANTERIOR");
        });

        modelBuilder.Entity<BdBitacoraSurtidoMensajerium>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_BITACORA_SURTIDO_MENSAJERIA");

            entity.Property(e => e.Costo)
                .HasColumnType("decimal(8, 2)")
                .HasColumnName("COSTO");
            entity.Property(e => e.FechaAlta)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ALTA");
            entity.Property(e => e.IdEnvio).HasColumnName("ID_ENVIO");
            entity.Property(e => e.IdSolicitudAlmacen).HasColumnName("ID_SOLICITUD_ALMACEN");
            entity.Property(e => e.IdSurtidoMensajeria)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_SURTIDO_MENSAJERIA");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Mensajeria).HasColumnName("MENSAJERIA");
            entity.Property(e => e.Peso)
                .HasColumnType("decimal(8, 4)")
                .HasColumnName("PESO");
            entity.Property(e => e.Servicio).HasColumnName("SERVICIO");
            entity.Property(e => e.Status).HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdBitacoraTipoCausaCancelacion>(entity =>
        {
            entity.HasKey(e => e.IdBitacoraTipoCausaCancelacion).HasName("PK__BD_BITAC__CE758421A9725650");

            entity.ToTable("BD_BITACORA_TIPO_CAUSA_CANCELACION");

            entity.Property(e => e.IdBitacoraTipoCausaCancelacion).HasColumnName("ID_BITACORA_TIPO_CAUSA_CANCELACION");
            entity.Property(e => e.DescCausaCancelacionActual)
                .IsUnicode(false)
                .HasColumnName("DESC_CAUSA_CANCELACION_ACTUAL");
            entity.Property(e => e.DescCausaCancelacionAnterior)
                .IsUnicode(false)
                .HasColumnName("DESC_CAUSA_CANCELACION_ANTERIOR");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdCausaCancelacion).HasColumnName("ID_CAUSA_CANCELACION");
            entity.Property(e => e.IdTipoCanceladoActual)
                .IsUnicode(false)
                .HasColumnName("ID_TIPO_CANCELADO_ACTUAL");
            entity.Property(e => e.IdTipoCanceladoAnterior)
                .IsUnicode(false)
                .HasColumnName("ID_TIPO_CANCELADO_ANTERIOR");
            entity.Property(e => e.StatusActual)
                .IsUnicode(false)
                .HasColumnName("STATUS_ACTUAL");
            entity.Property(e => e.StatusAnterior)
                .IsUnicode(false)
                .HasColumnName("STATUS_ANTERIOR");
            entity.Property(e => e.UsuariosAlta).HasColumnName("USUARIOS_ALTA");
        });

        modelBuilder.Entity<BdBitacoraTipoCusasRechazo>(entity =>
        {
            entity.HasKey(e => e.IdBitacoraTipoCusasRechazo).HasName("PK__BD_BITAC__1C11FD8D75AF8607");

            entity.ToTable("BD_BITACORA_TIPO_CUSAS_RECHAZO");

            entity.Property(e => e.IdBitacoraTipoCusasRechazo).HasColumnName("ID_BITACORA_TIPO_CUSAS_RECHAZO");
            entity.Property(e => e.DescCausaRechazoActual)
                .IsUnicode(false)
                .HasColumnName("DESC_CAUSA_RECHAZO_ACTUAL");
            entity.Property(e => e.DescCausaRechazoAnterior)
                .IsUnicode(false)
                .HasColumnName("DESC_CAUSA_RECHAZO_ANTERIOR");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdCausaRechazo).HasColumnName("ID_CAUSA_RECHAZO");
            entity.Property(e => e.IdTrechazoActual)
                .IsUnicode(false)
                .HasColumnName("ID_TRECHAZO_ACTUAL");
            entity.Property(e => e.IdTrechazoAnterior)
                .IsUnicode(false)
                .HasColumnName("ID_TRECHAZO_ANTERIOR");
            entity.Property(e => e.StatusActual)
                .IsUnicode(false)
                .HasColumnName("STATUS_ACTUAL");
            entity.Property(e => e.StatusAnterior)
                .IsUnicode(false)
                .HasColumnName("STATUS_ANTERIOR");
            entity.Property(e => e.UsuariosAlta).HasColumnName("USUARIOS_ALTA");
        });

        modelBuilder.Entity<BdBitacoraTipoPlazaCliente>(entity =>
        {
            entity.HasKey(e => e.IdBitacoraTipoPlazaCliente).HasName("PK__BD_BITAC__1337F659E1B53E23");

            entity.ToTable("BD_BITACORA_TIPO_PLAZA_CLIENTE");

            entity.Property(e => e.IdBitacoraTipoPlazaCliente).HasColumnName("ID_BITACORA_TIPO_PLAZA_CLIENTE");
            entity.Property(e => e.Cp)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CP");
            entity.Property(e => e.Descripcion)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdTipoPlaza).HasColumnName("ID_TIPO_PLAZA");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
        });

        modelBuilder.Entity<BdBitacoraTipoProductoNegocio>(entity =>
        {
            entity.HasKey(e => e.IdBitacoraTipoProductoNegocio).HasName("PK__BD_BITAC__8636BE2695A8E7FD");

            entity.ToTable("BD_BITACORA_TIPO_PRODUCTO_NEGOCIO");

            entity.Property(e => e.IdBitacoraTipoProductoNegocio).HasColumnName("ID_BITACORA_TIPO_PRODUCTO_NEGOCIO");
            entity.Property(e => e.DescProductoNegocioActual)
                .IsUnicode(false)
                .HasColumnName("DESC_PRODUCTO_NEGOCIO_ACTUAL");
            entity.Property(e => e.DescProductoNegocioAnterior)
                .IsUnicode(false)
                .HasColumnName("DESC_PRODUCTO_NEGOCIO_ANTERIOR");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdProductoNegocio).HasColumnName("ID_PRODUCTO_NEGOCIO");
            entity.Property(e => e.StatusActual)
                .IsUnicode(false)
                .HasColumnName("STATUS_ACTUAL");
            entity.Property(e => e.StatusAnterior)
                .IsUnicode(false)
                .HasColumnName("STATUS_ANTERIOR");
            entity.Property(e => e.UsuarioAlta).HasColumnName("USUARIO_ALTA");
        });

        modelBuilder.Entity<BdBitacoraTipoSubrechazo>(entity =>
        {
            entity.HasKey(e => e.IdBitacoraTipoSubrechazo).HasName("PK__BD_BITAC__3D8C8A32A70B2E1A");

            entity.ToTable("BD_BITACORA_TIPO_SUBRECHAZO");

            entity.Property(e => e.IdBitacoraTipoSubrechazo).HasColumnName("ID_BITACORA_TIPO_SUBRECHAZO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdActual)
                .IsUnicode(false)
                .HasColumnName("ID_ACTUAL");
            entity.Property(e => e.IdAnterior)
                .IsUnicode(false)
                .HasColumnName("ID_ANTERIOR");
            entity.Property(e => e.IdSubrechazo).HasColumnName("ID_SUBRECHAZO");
            entity.Property(e => e.StatusActual)
                .IsUnicode(false)
                .HasColumnName("STATUS_ACTUAL");
            entity.Property(e => e.StatusAnterior)
                .IsUnicode(false)
                .HasColumnName("STATUS_ANTERIOR");
            entity.Property(e => e.SubrechazoActual)
                .IsUnicode(false)
                .HasColumnName("SUBRECHAZO_ACTUAL");
            entity.Property(e => e.SubrechazoAnterior)
                .IsUnicode(false)
                .HasColumnName("SUBRECHAZO_ANTERIOR");
            entity.Property(e => e.UsuariosAlta).HasColumnName("USUARIOS_ALTA");
        });

        modelBuilder.Entity<BdBitacoraTransferencia>(entity =>
        {
            entity.HasKey(e => e.IdBitacoraTransferencia).HasName("PK__BD_BITAC__02A9C9E40A0794DC");

            entity.ToTable("BD_BITACORA_TRANSFERENCIAS");

            entity.Property(e => e.IdBitacoraTransferencia).HasColumnName("ID_BITACORA_TRANSFERENCIA");
            entity.Property(e => e.Comentarios)
                .IsUnicode(false)
                .HasColumnName("COMENTARIOS");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdResponsableActual).HasColumnName("ID_RESPONSABLE_ACTUAL");
            entity.Property(e => e.IdResponsableAnterior).HasColumnName("ID_RESPONSABLE_ANTERIOR");
            entity.Property(e => e.IdTipoResponsableActual).HasColumnName("ID_TIPO_RESPONSABLE_ACTUAL");
            entity.Property(e => e.IdTipoResponsableAnterior).HasColumnName("ID_TIPO_RESPONSABLE_ANTERIOR");
            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
        });

        modelBuilder.Entity<BdBitacoraUnidad>(entity =>
        {
            entity.HasKey(e => e.IdBitacoraUnidad).HasName("PK_BD_BITACORA_UNDIAD");

            entity.ToTable("BD_BITACORA_UNIDAD", tb =>
                {
                    tb.HasTrigger("TR_BITACORA_CAMBIO_UNIDAD_NUEVA");
                    tb.HasTrigger("TR_REGLAS_BD_BITACORA_UNIDADES");
                });

            entity.HasIndex(e => new { e.IdStatusUnidadIni, e.IdStatusUnidadFin }, "IX_BD_BITACORA_UNIDAD_ID_STATUS_UNIDAD_INI, ID_STATUS_UNIDAD_FIN");

            entity.HasIndex(e => e.IdUnidad, "IX_BD_BITACORA_UNIDAD_ID_UNIDAD").HasFillFactor(80);

            entity.Property(e => e.IdBitacoraUnidad).HasColumnName("ID_BITACORA_UNIDAD");
            entity.Property(e => e.Comentario)
                .IsUnicode(false)
                .HasColumnName("COMENTARIO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdResponsable).HasColumnName("ID_RESPONSABLE");
            entity.Property(e => e.IdStatusUnidadFin).HasColumnName("ID_STATUS_UNIDAD_FIN");
            entity.Property(e => e.IdStatusUnidadIni).HasColumnName("ID_STATUS_UNIDAD_INI");
            entity.Property(e => e.IdTipoResponsable).HasColumnName("ID_TIPO_RESPONSABLE");
            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");

            entity.HasOne(d => d.IdStatusUnidadFinNavigation).WithMany(p => p.BdBitacoraUnidadIdStatusUnidadFinNavigations)
                .HasForeignKey(d => d.IdStatusUnidadFin)
                .HasConstraintName("FK_BD_BITACORA_UNIDAD_C_STATUS_UNIDAD1");

            entity.HasOne(d => d.IdStatusUnidadIniNavigation).WithMany(p => p.BdBitacoraUnidadIdStatusUnidadIniNavigations)
                .HasForeignKey(d => d.IdStatusUnidadIni)
                .HasConstraintName("FK_BD_BITACORA_UNIDAD_C_STATUS_UNIDAD");

            entity.HasOne(d => d.IdTipoResponsableNavigation).WithMany(p => p.BdBitacoraUnidads)
                .HasForeignKey(d => d.IdTipoResponsable)
                .HasConstraintName("FK_BD_BITACORA_UNIDAD_C_TIPO_RESPONSABLE");

            entity.HasOne(d => d.IdUnidadNavigation).WithMany(p => p.BdBitacoraUnidads)
                .HasForeignKey(d => d.IdUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BD_BITACORA_UNIDAD_BD_UNIDADES");
        });

        modelBuilder.Entity<BdBitacoraUnidadDanadum>(entity =>
        {
            entity.HasKey(e => e.IdBitacoraUnidadDanada).HasName("PK__BD_BITAC__628C55831EDFF36A");

            entity.ToTable("BD_BITACORA_UNIDAD_DANADA");

            entity.Property(e => e.IdBitacoraUnidadDanada).HasColumnName("ID_BITACORA_UNIDAD_DANADA");
            entity.Property(e => e.FechaAlta)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ALTA");
            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.IsDaniadaActual).HasColumnName("IS_DANIADA_ACTUAL");
            entity.Property(e => e.IsDaniadaNuevo).HasColumnName("IS_DANIADA_NUEVO");

            entity.HasOne(d => d.IdUnidadNavigation).WithMany(p => p.BdBitacoraUnidadDanada)
                .HasForeignKey(d => d.IdUnidad)
                .HasConstraintName("FK__BD_BITACO__ID_UN__2498CCC0");
        });

        modelBuilder.Entity<BdBitacoraUnidadProveedor>(entity =>
        {
            entity.HasKey(e => e.IdBitacoraUnidadProveedor).HasName("PK__BD_BITAC__B9BEFDF96C65205C");

            entity.ToTable("BD_BITACORA_UNIDAD_PROVEEDOR");

            entity.Property(e => e.IdBitacoraUnidadProveedor).HasColumnName("ID_BITACORA_UNIDAD_PROVEEDOR");
            entity.Property(e => e.FechaAlta)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ALTA");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IdProveedorActual).HasColumnName("ID_PROVEEDOR_ACTUAL");
            entity.Property(e => e.IdProveedorAnterior).HasColumnName("ID_PROVEEDOR_ANTERIOR");
            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.Status)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdBitacoraUnidadesFaltantesRecibo>(entity =>
        {
            entity.HasKey(e => e.IdBitacoraUnidadFaltante).HasName("PK__BD_BITAC__69286212EA1FF754");

            entity.ToTable("BD_BITACORA_UNIDADES_FALTANTES_RECIBO");

            entity.Property(e => e.IdBitacoraUnidadFaltante).HasColumnName("ID_BITACORA_UNIDAD_FALTANTE");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.FecEnvio)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("FEC_ENVIO");
            entity.Property(e => e.IdEnvio).HasColumnName("ID_ENVIO");
            entity.Property(e => e.IdResponsableDestino).HasColumnName("ID_RESPONSABLE_DESTINO");
            entity.Property(e => e.IdResponsableOrigen).HasColumnName("ID_RESPONSABLE_ORIGEN");
            entity.Property(e => e.IdStatusEnvio).HasColumnName("ID_STATUS_ENVIO");
            entity.Property(e => e.IdTipoResponsableDestino).HasColumnName("ID_TIPO_RESPONSABLE_DESTINO");
            entity.Property(e => e.IdTipoResponsableOrigen).HasColumnName("ID_TIPO_RESPONSABLE_ORIGEN");
            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");
            entity.Property(e => e.NoUnidadesInsumosNoRecibidas).HasColumnName("NO_UNIDADES_INSUMOS_NO_RECIBIDAS");
            entity.Property(e => e.NoUnidadesNoRecibidas).HasColumnName("NO_UNIDADES_NO_RECIBIDAS");
        });

        modelBuilder.Entity<BdBitacoraUsuariosActivo>(entity =>
        {
            entity.HasKey(e => e.IdBitacoraUsuariosActivos);

            entity.ToTable("BD_BITACORA_USUARIOS_ACTIVOS");

            entity.Property(e => e.IdBitacoraUsuariosActivos).HasColumnName("ID_BITACORA_USUARIOS_ACTIVOS");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.TotalUsuariosActivos).HasColumnName("TOTAL_USUARIOS_ACTIVOS");
            entity.Property(e => e.UsuariosActivosPda).HasColumnName("USUARIOS_ACTIVOS_PDA");
            entity.Property(e => e.UsuariosActivosWeb).HasColumnName("USUARIOS_ACTIVOS_WEB");
        });

        modelBuilder.Entity<BdBitacoraUsuariosInactivo>(entity =>
        {
            entity.HasKey(e => e.IdBitacoraUsuariosInactivos).HasName("PK__BD_BITAC__1A8FB2FE957762F4");

            entity.ToTable("BD_BITACORA_USUARIOS_INACTIVOS");

            entity.Property(e => e.IdBitacoraUsuariosInactivos).HasColumnName("ID_BITACORA_USUARIOS_INACTIVOS");
            entity.Property(e => e.FechaAlta)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ALTA");
            entity.Property(e => e.FechaUltimoAcceso)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ULTIMO_ACCESO");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.Status)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdBitacoraValidacionDevolucione>(entity =>
        {
            entity.HasKey(e => e.IdBitacoraValidacionDevoluciones);

            entity.ToTable("BD_BITACORA_VALIDACION_DEVOLUCIONES");

            entity.Property(e => e.IdBitacoraValidacionDevoluciones).HasColumnName("ID_BITACORA_VALIDACION_DEVOLUCIONES");
            entity.Property(e => e.Comentario)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("COMENTARIO");
            entity.Property(e => e.Documento)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("DOCUMENTO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdSolicitudDevolucion).HasColumnName("ID_SOLICITUD_DEVOLUCION");
            entity.Property(e => e.IdStatusFin).HasColumnName("ID_STATUS_FIN");
            entity.Property(e => e.IdStatusIni).HasColumnName("ID_STATUS_INI");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
        });

        modelBuilder.Entity<BdBitacoraValidacionPrefacturacion>(entity =>
        {
            entity.HasKey(e => e.IdBitacoraValidacionPrefacturacion);

            entity.ToTable("BD_BITACORA_VALIDACION_PREFACTURACION");

            entity.HasIndex(e => new { e.IdAr, e.IdStatusFin }, "IX_MI_BD_BITACORA_VALIDACION_PREFACTURACION_10212_10211");

            entity.HasIndex(e => e.IdAr, "IX_MI_BD_BITACORA_VALIDACION_PREFACTURACION_20_19");

            entity.HasIndex(e => e.IdAr, "IX_MI_BD_BITACORA_VALIDACION_PREFACTURACION_22_21");

            entity.HasIndex(e => new { e.IdAr, e.IdStatusFin }, "IX_MI_BD_BITACORA_VALIDACION_PREFACTURACION_7149_7148");

            entity.Property(e => e.IdBitacoraValidacionPrefacturacion).HasColumnName("ID_BITACORA_VALIDACION_PREFACTURACION");
            entity.Property(e => e.Comentario)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("COMENTARIO");
            entity.Property(e => e.Documento)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("DOCUMENTO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IdStatusFin).HasColumnName("ID_STATUS_FIN");
            entity.Property(e => e.IdStatusIni).HasColumnName("ID_STATUS_INI");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
        });

        modelBuilder.Entity<BdBloqueo>(entity =>
        {
            entity.HasKey(e => e.IdBloqueo);

            entity.ToTable("BD_BLOQUEOS");

            entity.HasIndex(e => new { e.Month, e.Year, e.NoAfiliacion, e.Bloqueo }, "IX_BD_BLOQUEOS");

            entity.HasIndex(e => new { e.Proveedor, e.Territorio, e.NoAfiliacion }, "IX_BD_BLOQUEOS_1");

            entity.HasIndex(e => e.NoAfiliacion, "IX_BD_BLOQUEOS_2");

            entity.HasIndex(e => e.TotalRollos, "missing_index_139812_139811");

            entity.HasIndex(e => e.TotalRollos, "missing_index_139814_139813");

            entity.HasIndex(e => e.TotalRollos, "missing_index_145827_145826");

            entity.HasIndex(e => e.Bloqueo, "missing_index_149702_149701");

            entity.Property(e => e.IdBloqueo).HasColumnName("ID_BLOQUEO");
            entity.Property(e => e.Bloqueo).HasColumnName("BLOQUEO");
            entity.Property(e => e.Cp)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("CP");
            entity.Property(e => e.Mensaje)
                .HasMaxLength(200)
                .IsFixedLength()
                .HasColumnName("MENSAJE");
            entity.Property(e => e.Month).HasColumnName("MONTH");
            entity.Property(e => e.NoAfiliacion)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.Proveedor)
                .IsRequired()
                .HasMaxLength(30)
                .IsFixedLength()
                .HasColumnName("PROVEEDOR");
            entity.Property(e => e.Territorio)
                .IsRequired()
                .HasMaxLength(30)
                .IsFixedLength()
                .HasColumnName("TERRITORIO");
            entity.Property(e => e.TotalRollos).HasColumnName("TOTAL_ROLLOS");
            entity.Property(e => e.Year).HasColumnName("YEAR");
        });

        modelBuilder.Entity<BdBloqueosPaso>(entity =>
        {
            entity.HasKey(e => e.IdBloqueoPaso);

            entity.ToTable("BD_BLOQUEOS_PASO");

            entity.HasIndex(e => e.IdCarga, "missing_index_139426_139425");

            entity.HasIndex(e => new { e.IdCarga, e.IsError }, "missing_index_139428_139427");

            entity.HasIndex(e => e.IdCarga, "missing_index_139437_139436");

            entity.HasIndex(e => e.IdCarga, "missing_index_139439_139438");

            entity.HasIndex(e => e.NoAfiliacion, "missing_index_411720_411719");

            entity.HasIndex(e => e.IdCarga, "missing_index_420329_420328");

            entity.HasIndex(e => e.IdCarga, "missing_index_656385_656384");

            entity.Property(e => e.IdBloqueoPaso).HasColumnName("ID_BLOQUEO_PASO");
            entity.Property(e => e.Bloqueo).HasColumnName("BLOQUEO");
            entity.Property(e => e.Cp)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("CP");
            entity.Property(e => e.DescError)
                .IsUnicode(false)
                .HasColumnName("DESC_ERROR");
            entity.Property(e => e.IdCarga).HasColumnName("ID_CARGA");
            entity.Property(e => e.IsError).HasColumnName("IS_ERROR");
            entity.Property(e => e.Mensaje)
                .HasMaxLength(200)
                .IsFixedLength()
                .HasColumnName("MENSAJE");
            entity.Property(e => e.Month).HasColumnName("MONTH");
            entity.Property(e => e.NoAfiliacion)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.Proveedor)
                .IsRequired()
                .HasMaxLength(30)
                .IsFixedLength()
                .HasColumnName("PROVEEDOR");
            entity.Property(e => e.Territorio)
                .IsRequired()
                .HasMaxLength(30)
                .IsFixedLength()
                .HasColumnName("TERRITORIO");
            entity.Property(e => e.TotalRollos).HasColumnName("TOTAL_ROLLOS");
            entity.Property(e => e.Year).HasColumnName("YEAR");
        });

        modelBuilder.Entity<BdBloqueosRespaldo>(entity =>
        {
            entity.HasKey(e => e.IdBloqueoRespaldo).HasName("PK__BD_BLOQU__5AB20C33E2465819");

            entity.ToTable("BD_BLOQUEOS_RESPALDO");

            entity.Property(e => e.IdBloqueoRespaldo).HasColumnName("ID_BLOQUEO_RESPALDO");
            entity.Property(e => e.Bloqueo).HasColumnName("BLOQUEO");
            entity.Property(e => e.Cp)
                .IsUnicode(false)
                .HasColumnName("CP");
            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.Mensaje)
                .IsUnicode(false)
                .HasColumnName("MENSAJE");
            entity.Property(e => e.Month).HasColumnName("MONTH");
            entity.Property(e => e.NoAfiliacion)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.Proveedor)
                .IsUnicode(false)
                .HasColumnName("PROVEEDOR");
            entity.Property(e => e.Territorio)
                .IsUnicode(false)
                .HasColumnName("TERRITORIO");
            entity.Property(e => e.TotalRollos).HasColumnName("TOTAL_ROLLOS");
            entity.Property(e => e.Year).HasColumnName("YEAR");
        });

        modelBuilder.Entity<BdBorrarTablaTinte>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("bd_borrar_tabla_tinte");

            entity.Property(e => e.Descripcion)
                .IsUnicode(false)
                .HasColumnName("descripcion");
            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("fecha");
            entity.Property(e => e.IdUsuario).HasColumnName("id_usuario");
            entity.Property(e => e.Paso)
                .IsUnicode(false)
                .HasColumnName("paso");
        });

        modelBuilder.Entity<BdCArgasArchivo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_cARGAS_ARCHIVO");

            entity.Property(e => e.IdCarga).HasColumnName("ID_CARGA");
            entity.Property(e => e.IdCargaArchivo)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_CARGA_ARCHIVO");
            entity.Property(e => e.NombreArchivoSistema)
                .IsUnicode(false)
                .HasColumnName("NOMBRE_ARCHIVO_SISTEMA");
            entity.Property(e => e.NombreArchivoUsuario)
                .IsUnicode(false)
                .HasColumnName("NOMBRE_ARCHIVO_USUARIO");
        });

        modelBuilder.Entity<BdCadenaProsa>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_CADENA_PROSA");

            entity.Property(e => e.Cadena)
                .IsUnicode(false)
                .HasColumnName("CADENA");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.LongitudPermitida).HasColumnName("LONGITUD_PERMITIDA");
            entity.Property(e => e.Nombre)
                .IsUnicode(false)
                .HasColumnName("NOMBRE");
            entity.Property(e => e.Posicion).HasColumnName("POSICION");
            entity.Property(e => e.TipoCampo)
                .IsUnicode(false)
                .HasColumnName("TIPO_CAMPO");
            entity.Property(e => e.Validacion)
                .IsUnicode(false)
                .HasColumnName("VALIDACION");
        });

        modelBuilder.Entity<BdCallCenterQ1>(entity =>
        {
            entity.HasKey(e => e.IdCuestionario1);

            entity.ToTable("BD_CALL_CENTER_Q1");

            entity.Property(e => e.IdCuestionario1).HasColumnName("ID_CUESTIONARIO_1");
            entity.Property(e => e.IdCallCenter).HasColumnName("ID_CALL_CENTER");
            entity.Property(e => e.Pregunta1)
                .HasColumnType("text")
                .HasColumnName("Pregunta_1");
            entity.Property(e => e.Pregunta2)
                .HasColumnType("text")
                .HasColumnName("Pregunta_2");
            entity.Property(e => e.Pregunta3)
                .HasColumnType("text")
                .HasColumnName("Pregunta_3");
            entity.Property(e => e.Pregunta4)
                .HasColumnType("text")
                .HasColumnName("Pregunta_4");
            entity.Property(e => e.Pregunta5)
                .HasColumnType("text")
                .HasColumnName("Pregunta_5");
            entity.Property(e => e.Pregunta6)
                .HasColumnType("text")
                .HasColumnName("Pregunta_6");
            entity.Property(e => e.Pregunta7)
                .HasColumnType("text")
                .HasColumnName("Pregunta_7");
            entity.Property(e => e.Pregunta8)
                .HasColumnType("text")
                .HasColumnName("Pregunta_8");
            entity.Property(e => e.Respuesta1)
                .HasMaxLength(30)
                .IsFixedLength()
                .HasColumnName("Respuesta_1");
            entity.Property(e => e.Respuesta2)
                .HasMaxLength(30)
                .IsFixedLength()
                .HasColumnName("REspuesta_2");
            entity.Property(e => e.Respuesta3)
                .HasMaxLength(30)
                .IsFixedLength()
                .HasColumnName("Respuesta_3");
            entity.Property(e => e.Respuesta4)
                .HasMaxLength(30)
                .IsFixedLength()
                .HasColumnName("Respuesta_4");
            entity.Property(e => e.Respuesta5)
                .HasMaxLength(30)
                .IsFixedLength()
                .HasColumnName("Respuesta_5");
            entity.Property(e => e.Respuesta6)
                .HasMaxLength(30)
                .IsFixedLength()
                .HasColumnName("Respuesta_6");
            entity.Property(e => e.Respuesta7)
                .HasMaxLength(30)
                .IsFixedLength()
                .HasColumnName("Respuesta_7");
            entity.Property(e => e.Respuesta8)
                .HasMaxLength(30)
                .IsFixedLength()
                .HasColumnName("Respuesta_8");
            entity.Property(e => e.Valida1).HasColumnName("Valida_1");
            entity.Property(e => e.Valida2).HasColumnName("Valida_2");
            entity.Property(e => e.Valida3).HasColumnName("Valida_3");
            entity.Property(e => e.Valida4).HasColumnName("Valida_4");
            entity.Property(e => e.Valida5).HasColumnName("Valida_5");
            entity.Property(e => e.Valida6).HasColumnName("Valida_6");
            entity.Property(e => e.Valida7).HasColumnName("Valida_7");
            entity.Property(e => e.Valida8).HasColumnName("Valida_8");
        });

        modelBuilder.Entity<BdCallCenterSeguimiento>(entity =>
        {
            entity.HasKey(e => e.IdCallCenter);

            entity.ToTable("BD_CALL_CENTER_SEGUIMIENTO");

            entity.Property(e => e.IdCallCenter).HasColumnName("ID_CALL_CENTER");
            entity.Property(e => e.AceptaServicio)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("ACEPTA_SERVICIO");
            entity.Property(e => e.Contacto)
                .HasMaxLength(80)
                .IsFixedLength()
                .HasColumnName("CONTACTO");
            entity.Property(e => e.Exito).HasColumnName("EXITO");
            entity.Property(e => e.IdAgente).HasColumnName("ID_AGENTE");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IdMotivoNoContacto).HasColumnName("ID_MOTIVO_NO_CONTACTO");
            entity.Property(e => e.IdMotivoRechazo).HasColumnName("ID_MOTIVO_RECHAZO");
            entity.Property(e => e.Intento).HasColumnName("INTENTO");
        });

        modelBuilder.Entity<BdCallcenterRQ1>(entity =>
        {
            entity.HasKey(e => e.IdRespuestaQ1);

            entity.ToTable("BD_CALLCENTER_R_Q1");

            entity.Property(e => e.IdRespuestaQ1).HasColumnName("ID_RESPUESTA_Q1");
            entity.Property(e => e.AtiendeLlamada)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("ATIENDE_LLAMADA");
            entity.Property(e => e.CodRechazo1).HasColumnName("COD_RECHAZO_1");
            entity.Property(e => e.CodRechazo3).HasColumnName("COD_RECHAZO_3");
            entity.Property(e => e.CodRechazo4).HasColumnName("COD_RECHAZO_4");
            entity.Property(e => e.CodRechazo5).HasColumnName("COD_RECHAZO_5");
            entity.Property(e => e.CodRechazo7).HasColumnName("COD_RECHAZO_7");
            entity.Property(e => e.FecCreacion)
                .HasColumnType("datetime")
                .HasColumnName("FEC_CREACION");
            entity.Property(e => e.HorarioCita)
                .HasColumnType("datetime")
                .HasColumnName("HORARIO_CITA");
            entity.Property(e => e.IdCallCenterSeguimiento).HasColumnName("ID_CALL_CENTER_SEGUIMIENTO");
            entity.Property(e => e.IdLlamadaContacto)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("ID_LLAMADA_CONTACTO");
            entity.Property(e => e.IdLlamadaElavon)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("ID_LLAMADA_ELAVON");
            entity.Property(e => e.NombreAtenderaServicio)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("NOMBRE_ATENDERA_SERVICIO");
            entity.Property(e => e.Nota1)
                .HasColumnType("text")
                .HasColumnName("NOTA_1");
            entity.Property(e => e.Nota2)
                .HasColumnType("text")
                .HasColumnName("NOTA_2");
            entity.Property(e => e.Nota3)
                .HasColumnType("text")
                .HasColumnName("NOTA_3");
            entity.Property(e => e.Nota4)
                .HasColumnType("text")
                .HasColumnName("NOTA_4");
            entity.Property(e => e.Nota5)
                .HasColumnType("text")
                .HasColumnName("NOTA_5");
            entity.Property(e => e.Nota6)
                .HasColumnType("text")
                .HasColumnName("NOTA_6");
            entity.Property(e => e.Nota7)
                .HasColumnType("text")
                .HasColumnName("NOTA_7");
            entity.Property(e => e.Nota8)
                .HasColumnType("text")
                .HasColumnName("NOTA_8");
            entity.Property(e => e.Respuesta1)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_1");
            entity.Property(e => e.Respuesta2)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_2");
            entity.Property(e => e.Respuesta3)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_3");
            entity.Property(e => e.Respuesta4)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_4");
            entity.Property(e => e.Respuesta5)
                .HasMaxLength(22)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_5");
            entity.Property(e => e.Respuesta6)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_6");
            entity.Property(e => e.Respuesta7)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_7");
            entity.Property(e => e.Respuesta8)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_8");
            entity.Property(e => e.TelefonoAtenderaServicio)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("TELEFONO_ATENDERA_SERVICIO");
        });

        modelBuilder.Entity<BdCallcenterRQ10>(entity =>
        {
            entity.HasKey(e => e.IdRespuestaQ10);

            entity.ToTable("BD_CALLCENTER_R_Q10");

            entity.Property(e => e.IdRespuestaQ10).HasColumnName("ID_RESPUESTA_Q10");
            entity.Property(e => e.AtiendeLlamada)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("ATIENDE_LLAMADA");
            entity.Property(e => e.CodRechazo1).HasColumnName("COD_RECHAZO_1");
            entity.Property(e => e.CodRechazo2).HasColumnName("COD_RECHAZO_2");
            entity.Property(e => e.CodRechazo3).HasColumnName("COD_RECHAZO_3");
            entity.Property(e => e.CodRechazo4).HasColumnName("COD_RECHAZO_4");
            entity.Property(e => e.CodRechazo5).HasColumnName("COD_RECHAZO_5");
            entity.Property(e => e.CodRechazo7).HasColumnName("COD_RECHAZO_7");
            entity.Property(e => e.FecCreacion)
                .HasColumnType("datetime")
                .HasColumnName("FEC_CREACION");
            entity.Property(e => e.HorarioCita)
                .HasColumnType("datetime")
                .HasColumnName("HORARIO_CITA");
            entity.Property(e => e.IdCallCenterSeguimiento).HasColumnName("ID_CALL_CENTER_SEGUIMIENTO");
            entity.Property(e => e.IdLlamadaContacto)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("ID_LLAMADA_CONTACTO");
            entity.Property(e => e.IdLlamadaElavon)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("ID_LLAMADA_ELAVON");
            entity.Property(e => e.NombreAtenderaServicio)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("NOMBRE_ATENDERA_SERVICIO");
            entity.Property(e => e.Nota1)
                .HasColumnType("text")
                .HasColumnName("NOTA_1");
            entity.Property(e => e.Nota2)
                .HasColumnType("text")
                .HasColumnName("NOTA_2");
            entity.Property(e => e.Nota3)
                .HasColumnType("text")
                .HasColumnName("NOTA_3");
            entity.Property(e => e.Nota4)
                .HasColumnType("text")
                .HasColumnName("NOTA_4");
            entity.Property(e => e.Nota5)
                .HasColumnType("text")
                .HasColumnName("NOTA_5");
            entity.Property(e => e.Nota6)
                .HasColumnType("text")
                .HasColumnName("NOTA_6");
            entity.Property(e => e.Nota7)
                .HasColumnType("text")
                .HasColumnName("NOTA_7");
            entity.Property(e => e.Nota8)
                .HasColumnType("text")
                .HasColumnName("NOTA_8");
            entity.Property(e => e.Respuesta1)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_1");
            entity.Property(e => e.Respuesta2)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_2");
            entity.Property(e => e.Respuesta3)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_3");
            entity.Property(e => e.Respuesta4)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_4");
            entity.Property(e => e.Respuesta5)
                .HasMaxLength(22)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_5");
            entity.Property(e => e.Respuesta6)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_6");
            entity.Property(e => e.Respuesta7)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_7");
            entity.Property(e => e.Respuesta8)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_8");
            entity.Property(e => e.TelefonoAtenderaServicio)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("TELEFONO_ATENDERA_SERVICIO");
        });

        modelBuilder.Entity<BdCallcenterRQ11>(entity =>
        {
            entity.HasKey(e => e.IdRespuestaQ11);

            entity.ToTable("BD_CALLCENTER_R_Q11");

            entity.Property(e => e.IdRespuestaQ11).HasColumnName("ID_RESPUESTA_Q11");
            entity.Property(e => e.AtiendeLlamada)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("ATIENDE_LLAMADA");
            entity.Property(e => e.CodRechazo1).HasColumnName("COD_RECHAZO_1");
            entity.Property(e => e.CodRechazo2).HasColumnName("COD_RECHAZO_2");
            entity.Property(e => e.CodRechazo3).HasColumnName("COD_RECHAZO_3");
            entity.Property(e => e.CodRechazo4).HasColumnName("COD_RECHAZO_4");
            entity.Property(e => e.CodRechazo5).HasColumnName("COD_RECHAZO_5");
            entity.Property(e => e.CodRechazo7).HasColumnName("COD_RECHAZO_7");
            entity.Property(e => e.FecCreacion)
                .HasColumnType("datetime")
                .HasColumnName("FEC_CREACION");
            entity.Property(e => e.HorarioCita)
                .HasColumnType("datetime")
                .HasColumnName("HORARIO_CITA");
            entity.Property(e => e.IdCallCenterSeguimiento).HasColumnName("ID_CALL_CENTER_SEGUIMIENTO");
            entity.Property(e => e.IdLlamadaContacto)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("ID_LLAMADA_CONTACTO");
            entity.Property(e => e.IdLlamadaElavon)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("ID_LLAMADA_ELAVON");
            entity.Property(e => e.NombreAtenderaServicio)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("NOMBRE_ATENDERA_SERVICIO");
            entity.Property(e => e.Nota1)
                .HasColumnType("text")
                .HasColumnName("NOTA_1");
            entity.Property(e => e.Nota2)
                .HasColumnType("text")
                .HasColumnName("NOTA_2");
            entity.Property(e => e.Nota3)
                .HasColumnType("text")
                .HasColumnName("NOTA_3");
            entity.Property(e => e.Nota4)
                .HasColumnType("text")
                .HasColumnName("NOTA_4");
            entity.Property(e => e.Nota5)
                .HasColumnType("text")
                .HasColumnName("NOTA_5");
            entity.Property(e => e.Nota6)
                .HasColumnType("text")
                .HasColumnName("NOTA_6");
            entity.Property(e => e.Nota7)
                .HasColumnType("text")
                .HasColumnName("NOTA_7");
            entity.Property(e => e.Nota8)
                .HasColumnType("text")
                .HasColumnName("NOTA_8");
            entity.Property(e => e.Respuesta1)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_1");
            entity.Property(e => e.Respuesta2)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_2");
            entity.Property(e => e.Respuesta3)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_3");
            entity.Property(e => e.Respuesta4)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_4");
            entity.Property(e => e.Respuesta5)
                .HasMaxLength(22)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_5");
            entity.Property(e => e.Respuesta6)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_6");
            entity.Property(e => e.Respuesta7)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_7");
            entity.Property(e => e.Respuesta8)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_8");
            entity.Property(e => e.TelefonoAtenderaServicio)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("TELEFONO_ATENDERA_SERVICIO");
        });

        modelBuilder.Entity<BdCallcenterRQ12>(entity =>
        {
            entity.HasKey(e => e.IdRespuestaQ12);

            entity.ToTable("BD_CALLCENTER_R_Q12");

            entity.Property(e => e.IdRespuestaQ12).HasColumnName("ID_RESPUESTA_Q12");
            entity.Property(e => e.AtiendeLlamada)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("ATIENDE_LLAMADA");
            entity.Property(e => e.CodRechazo1).HasColumnName("COD_RECHAZO_1");
            entity.Property(e => e.CodRechazo3).HasColumnName("COD_RECHAZO_3");
            entity.Property(e => e.CodRechazo4).HasColumnName("COD_RECHAZO_4");
            entity.Property(e => e.CodRechazo5).HasColumnName("COD_RECHAZO_5");
            entity.Property(e => e.CodRechazo7).HasColumnName("COD_RECHAZO_7");
            entity.Property(e => e.FecCreacion)
                .HasColumnType("datetime")
                .HasColumnName("FEC_CREACION");
            entity.Property(e => e.HorarioCita)
                .HasColumnType("datetime")
                .HasColumnName("HORARIO_CITA");
            entity.Property(e => e.IdCallCenterSeguimiento).HasColumnName("ID_CALL_CENTER_SEGUIMIENTO");
            entity.Property(e => e.IdLlamadaContacto)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("ID_LLAMADA_CONTACTO");
            entity.Property(e => e.IdLlamadaElavon)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("ID_LLAMADA_ELAVON");
            entity.Property(e => e.NombreAtenderaServicio)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("NOMBRE_ATENDERA_SERVICIO");
            entity.Property(e => e.Nota1)
                .HasColumnType("text")
                .HasColumnName("NOTA_1");
            entity.Property(e => e.Nota2)
                .HasColumnType("text")
                .HasColumnName("NOTA_2");
            entity.Property(e => e.Nota3)
                .HasColumnType("text")
                .HasColumnName("NOTA_3");
            entity.Property(e => e.Nota4)
                .HasColumnType("text")
                .HasColumnName("NOTA_4");
            entity.Property(e => e.Nota5)
                .HasColumnType("text")
                .HasColumnName("NOTA_5");
            entity.Property(e => e.Nota6)
                .HasColumnType("text")
                .HasColumnName("NOTA_6");
            entity.Property(e => e.Nota7)
                .HasColumnType("text")
                .HasColumnName("NOTA_7");
            entity.Property(e => e.Nota8)
                .HasColumnType("text")
                .HasColumnName("NOTA_8");
            entity.Property(e => e.Respuesta1)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_1");
            entity.Property(e => e.Respuesta2)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_2");
            entity.Property(e => e.Respuesta3)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_3");
            entity.Property(e => e.Respuesta4)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_4");
            entity.Property(e => e.Respuesta5)
                .HasMaxLength(22)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_5");
            entity.Property(e => e.Respuesta6)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_6");
            entity.Property(e => e.Respuesta7)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_7");
            entity.Property(e => e.Respuesta8)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_8");
            entity.Property(e => e.TelefonoAtenderaServicio)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("TELEFONO_ATENDERA_SERVICIO");
        });

        modelBuilder.Entity<BdCallcenterRQ13>(entity =>
        {
            entity.HasKey(e => e.IdRespuestaQ13);

            entity.ToTable("BD_CALLCENTER_R_Q13");

            entity.Property(e => e.IdRespuestaQ13).HasColumnName("ID_RESPUESTA_Q13");
            entity.Property(e => e.AtiendeLlamada)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("ATIENDE_LLAMADA");
            entity.Property(e => e.CodRechazo1).HasColumnName("COD_RECHAZO_1");
            entity.Property(e => e.CodRechazo10).HasColumnName("COD_RECHAZO_10");
            entity.Property(e => e.CodRechazo11).HasColumnName("COD_RECHAZO_11");
            entity.Property(e => e.CodRechazo13).HasColumnName("COD_RECHAZO_13");
            entity.Property(e => e.CodRechazo14).HasColumnName("COD_RECHAZO_14");
            entity.Property(e => e.CodRechazo15).HasColumnName("COD_RECHAZO_15");
            entity.Property(e => e.CodRechazo16).HasColumnName("COD_RECHAZO_16");
            entity.Property(e => e.CodRechazo17).HasColumnName("COD_RECHAZO_17");
            entity.Property(e => e.CodRechazo18).HasColumnName("COD_RECHAZO_18");
            entity.Property(e => e.CodRechazo19).HasColumnName("COD_RECHAZO_19");
            entity.Property(e => e.CodRechazo2).HasColumnName("COD_RECHAZO_2");
            entity.Property(e => e.CodRechazo20).HasColumnName("COD_RECHAZO_20");
            entity.Property(e => e.CodRechazo21).HasColumnName("COD_RECHAZO_21");
            entity.Property(e => e.CodRechazo22).HasColumnName("COD_RECHAZO_22");
            entity.Property(e => e.CodRechazo23).HasColumnName("COD_RECHAZO_23");
            entity.Property(e => e.CodRechazo3).HasColumnName("COD_RECHAZO_3");
            entity.Property(e => e.CodRechazo4).HasColumnName("COD_RECHAZO_4");
            entity.Property(e => e.CodRechazo5).HasColumnName("COD_RECHAZO_5");
            entity.Property(e => e.CodRechazo7).HasColumnName("COD_RECHAZO_7");
            entity.Property(e => e.CodRechazo9).HasColumnName("COD_RECHAZO_9");
            entity.Property(e => e.FecCreacion)
                .HasColumnType("datetime")
                .HasColumnName("FEC_CREACION");
            entity.Property(e => e.HorarioCita)
                .HasColumnType("datetime")
                .HasColumnName("HORARIO_CITA");
            entity.Property(e => e.IdCallCenterSeguimiento).HasColumnName("ID_CALL_CENTER_SEGUIMIENTO");
            entity.Property(e => e.IdLlamadaContacto)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("ID_LLAMADA_CONTACTO");
            entity.Property(e => e.IdLlamadaElavon)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("ID_LLAMADA_ELAVON");
            entity.Property(e => e.NombreAtenderaServicio)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("NOMBRE_ATENDERA_SERVICIO");
            entity.Property(e => e.Nota1)
                .HasColumnType("text")
                .HasColumnName("NOTA_1");
            entity.Property(e => e.Nota10)
                .HasColumnType("text")
                .HasColumnName("NOTA_10");
            entity.Property(e => e.Nota11)
                .HasColumnType("text")
                .HasColumnName("NOTA_11");
            entity.Property(e => e.Nota12)
                .HasColumnType("text")
                .HasColumnName("NOTA_12");
            entity.Property(e => e.Nota13)
                .HasColumnType("text")
                .HasColumnName("NOTA_13");
            entity.Property(e => e.Nota14)
                .HasColumnType("text")
                .HasColumnName("NOTA_14");
            entity.Property(e => e.Nota15)
                .HasColumnType("text")
                .HasColumnName("NOTA_15");
            entity.Property(e => e.Nota16)
                .HasColumnType("text")
                .HasColumnName("NOTA_16");
            entity.Property(e => e.Nota17)
                .HasColumnType("text")
                .HasColumnName("NOTA_17");
            entity.Property(e => e.Nota18)
                .HasColumnType("text")
                .HasColumnName("NOTA_18");
            entity.Property(e => e.Nota19)
                .HasColumnType("text")
                .HasColumnName("NOTA_19");
            entity.Property(e => e.Nota2)
                .HasColumnType("text")
                .HasColumnName("NOTA_2");
            entity.Property(e => e.Nota20)
                .HasColumnType("text")
                .HasColumnName("NOTA_20");
            entity.Property(e => e.Nota21)
                .HasColumnType("text")
                .HasColumnName("NOTA_21");
            entity.Property(e => e.Nota22)
                .HasColumnType("text")
                .HasColumnName("NOTA_22");
            entity.Property(e => e.Nota23)
                .HasColumnType("text")
                .HasColumnName("NOTA_23");
            entity.Property(e => e.Nota3)
                .HasColumnType("text")
                .HasColumnName("NOTA_3");
            entity.Property(e => e.Nota4)
                .HasColumnType("text")
                .HasColumnName("NOTA_4");
            entity.Property(e => e.Nota5)
                .HasColumnType("text")
                .HasColumnName("NOTA_5");
            entity.Property(e => e.Nota6)
                .HasColumnType("text")
                .HasColumnName("NOTA_6");
            entity.Property(e => e.Nota7)
                .HasColumnType("text")
                .HasColumnName("NOTA_7");
            entity.Property(e => e.Nota8)
                .HasColumnType("text")
                .HasColumnName("NOTA_8");
            entity.Property(e => e.Nota9)
                .HasColumnType("text")
                .HasColumnName("NOTA_9");
            entity.Property(e => e.Respuesta1)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_1");
            entity.Property(e => e.Respuesta10)
                .HasMaxLength(22)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_10");
            entity.Property(e => e.Respuesta11)
                .HasMaxLength(22)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_11");
            entity.Property(e => e.Respuesta12)
                .HasMaxLength(22)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_12");
            entity.Property(e => e.Respuesta13)
                .HasMaxLength(22)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_13");
            entity.Property(e => e.Respuesta14)
                .HasMaxLength(22)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_14");
            entity.Property(e => e.Respuesta15)
                .HasMaxLength(22)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_15");
            entity.Property(e => e.Respuesta16)
                .HasMaxLength(22)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_16");
            entity.Property(e => e.Respuesta17)
                .HasMaxLength(22)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_17");
            entity.Property(e => e.Respuesta18)
                .HasMaxLength(22)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_18");
            entity.Property(e => e.Respuesta19)
                .HasMaxLength(22)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_19");
            entity.Property(e => e.Respuesta2)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_2");
            entity.Property(e => e.Respuesta20)
                .HasMaxLength(22)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_20");
            entity.Property(e => e.Respuesta21)
                .HasMaxLength(22)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_21");
            entity.Property(e => e.Respuesta22)
                .HasMaxLength(22)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_22");
            entity.Property(e => e.Respuesta23)
                .HasMaxLength(22)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_23");
            entity.Property(e => e.Respuesta3)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_3");
            entity.Property(e => e.Respuesta4)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_4");
            entity.Property(e => e.Respuesta5)
                .HasMaxLength(22)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_5");
            entity.Property(e => e.Respuesta6)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_6");
            entity.Property(e => e.Respuesta7)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_7");
            entity.Property(e => e.Respuesta8)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_8");
            entity.Property(e => e.Respuesta9)
                .HasMaxLength(22)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_9");
            entity.Property(e => e.TelefonoAtenderaServicio)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("TELEFONO_ATENDERA_SERVICIO");
        });

        modelBuilder.Entity<BdCallcenterRQ14>(entity =>
        {
            entity.HasKey(e => e.IdRespuestaQ14);

            entity.ToTable("BD_CALLCENTER_R_Q14");

            entity.Property(e => e.IdRespuestaQ14).HasColumnName("ID_RESPUESTA_Q14");
            entity.Property(e => e.AtiendeLlamada)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("ATIENDE_LLAMADA");
            entity.Property(e => e.CodRechazo1).HasColumnName("COD_RECHAZO_1");
            entity.Property(e => e.CodRechazo2).HasColumnName("COD_RECHAZO_2");
            entity.Property(e => e.CodRechazo3).HasColumnName("COD_RECHAZO_3");
            entity.Property(e => e.CodRechazo4).HasColumnName("COD_RECHAZO_4");
            entity.Property(e => e.CodRechazo5).HasColumnName("COD_RECHAZO_5");
            entity.Property(e => e.CodRechazo7).HasColumnName("COD_RECHAZO_7");
            entity.Property(e => e.FecCreacion)
                .HasColumnType("datetime")
                .HasColumnName("FEC_CREACION");
            entity.Property(e => e.HorarioCita)
                .HasColumnType("datetime")
                .HasColumnName("HORARIO_CITA");
            entity.Property(e => e.IdCallCenterSeguimiento).HasColumnName("ID_CALL_CENTER_SEGUIMIENTO");
            entity.Property(e => e.IdLlamadaContacto)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("ID_LLAMADA_CONTACTO");
            entity.Property(e => e.IdLlamadaElavon)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("ID_LLAMADA_ELAVON");
            entity.Property(e => e.NombreAtenderaServicio)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("NOMBRE_ATENDERA_SERVICIO");
            entity.Property(e => e.Nota1)
                .HasColumnType("text")
                .HasColumnName("NOTA_1");
            entity.Property(e => e.Nota2)
                .HasColumnType("text")
                .HasColumnName("NOTA_2");
            entity.Property(e => e.Nota3)
                .HasColumnType("text")
                .HasColumnName("NOTA_3");
            entity.Property(e => e.Nota4)
                .HasColumnType("text")
                .HasColumnName("NOTA_4");
            entity.Property(e => e.Nota5)
                .HasColumnType("text")
                .HasColumnName("NOTA_5");
            entity.Property(e => e.Nota6)
                .HasColumnType("text")
                .HasColumnName("NOTA_6");
            entity.Property(e => e.Nota7)
                .HasColumnType("text")
                .HasColumnName("NOTA_7");
            entity.Property(e => e.Nota8)
                .HasColumnType("text")
                .HasColumnName("NOTA_8");
            entity.Property(e => e.Respuesta1)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_1");
            entity.Property(e => e.Respuesta2)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_2");
            entity.Property(e => e.Respuesta3)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_3");
            entity.Property(e => e.Respuesta4)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_4");
            entity.Property(e => e.Respuesta5)
                .HasMaxLength(22)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_5");
            entity.Property(e => e.Respuesta6)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_6");
            entity.Property(e => e.Respuesta7)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_7");
            entity.Property(e => e.Respuesta8)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_8");
            entity.Property(e => e.TelefonoAtenderaServicio)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("TELEFONO_ATENDERA_SERVICIO");
        });

        modelBuilder.Entity<BdCallcenterRQ2>(entity =>
        {
            entity.HasKey(e => e.IdRespuestaQ2);

            entity.ToTable("BD_CALLCENTER_R_Q2");

            entity.Property(e => e.IdRespuestaQ2).HasColumnName("ID_RESPUESTA_Q2");
            entity.Property(e => e.AtiendeLlamada)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("ATIENDE_LLAMADA");
            entity.Property(e => e.CodRechazo1).HasColumnName("COD_RECHAZO_1");
            entity.Property(e => e.CodRechazo2).HasColumnName("COD_RECHAZO_2");
            entity.Property(e => e.CodRechazo3).HasColumnName("COD_RECHAZO_3");
            entity.Property(e => e.CodRechazo5).HasColumnName("COD_RECHAZO_5");
            entity.Property(e => e.FecCreacion)
                .HasColumnType("datetime")
                .HasColumnName("FEC_CREACION");
            entity.Property(e => e.HorarioCita)
                .HasColumnType("datetime")
                .HasColumnName("HORARIO_CITA");
            entity.Property(e => e.IdCallCenterSerguimiento).HasColumnName("ID_CALL_CENTER_SERGUIMIENTO");
            entity.Property(e => e.IdLlamadaContacto)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("ID_LLAMADA_CONTACTO");
            entity.Property(e => e.IdLlamadaElavon)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("ID_LLAMADA_ELAVON");
            entity.Property(e => e.NombreAtenderaServicio)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("NOMBRE_ATENDERA_SERVICIO");
            entity.Property(e => e.NombreRechazaElavon)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("NOMBRE_RECHAZA_ELAVON");
            entity.Property(e => e.Nota1)
                .HasColumnType("text")
                .HasColumnName("NOTA_1");
            entity.Property(e => e.Nota2)
                .HasColumnType("text")
                .HasColumnName("NOTA_2");
            entity.Property(e => e.Nota3)
                .HasColumnType("text")
                .HasColumnName("NOTA_3");
            entity.Property(e => e.Nota4)
                .HasColumnType("text")
                .HasColumnName("NOTA_4");
            entity.Property(e => e.Nota5)
                .HasColumnType("text")
                .HasColumnName("NOTA_5");
            entity.Property(e => e.Nota6)
                .HasColumnType("text")
                .HasColumnName("NOTA_6");
            entity.Property(e => e.Respuesta1)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_1");
            entity.Property(e => e.Respuesta2)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_2");
            entity.Property(e => e.Respuesta3)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_3");
            entity.Property(e => e.Respuesta4)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_4");
            entity.Property(e => e.Respuesta5)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_5");
            entity.Property(e => e.Respuesta6)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_6");
            entity.Property(e => e.TelefonoAtenderaServicio)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("TELEFONO_ATENDERA_SERVICIO");
        });

        modelBuilder.Entity<BdCallcenterRQ3>(entity =>
        {
            entity.HasKey(e => e.IdRespuestaQ3);

            entity.ToTable("BD_CALLCENTER_R_Q3");

            entity.Property(e => e.IdRespuestaQ3).HasColumnName("ID_RESPUESTA_Q3");
            entity.Property(e => e.AtiendeLlamada)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("ATIENDE_LLAMADA");
            entity.Property(e => e.CodRechazo1).HasColumnName("COD_RECHAZO_1");
            entity.Property(e => e.CodRechazo2).HasColumnName("COD_RECHAZO_2");
            entity.Property(e => e.CodRechazo3).HasColumnName("COD_RECHAZO_3");
            entity.Property(e => e.CodRechazo5).HasColumnName("COD_RECHAZO_5");
            entity.Property(e => e.FecCreacion)
                .HasColumnType("datetime")
                .HasColumnName("FEC_CREACION");
            entity.Property(e => e.HorarioCita)
                .HasColumnType("datetime")
                .HasColumnName("HORARIO_CITA");
            entity.Property(e => e.IdCallCenterSerguimiento).HasColumnName("ID_CALL_CENTER_SERGUIMIENTO");
            entity.Property(e => e.IdLlamadaContacto)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("ID_LLAMADA_CONTACTO");
            entity.Property(e => e.IdLlamadaElavon)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("ID_LLAMADA_ELAVON");
            entity.Property(e => e.NombreAtenderaServicio)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("NOMBRE_ATENDERA_SERVICIO");
            entity.Property(e => e.NombreRechazaElavon)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("NOMBRE_RECHAZA_ELAVON");
            entity.Property(e => e.Nota1)
                .HasColumnType("text")
                .HasColumnName("NOTA_1");
            entity.Property(e => e.Nota2)
                .HasColumnType("text")
                .HasColumnName("NOTA_2");
            entity.Property(e => e.Nota3)
                .HasColumnType("text")
                .HasColumnName("NOTA_3");
            entity.Property(e => e.Nota4)
                .HasColumnType("text")
                .HasColumnName("NOTA_4");
            entity.Property(e => e.Nota5)
                .HasColumnType("text")
                .HasColumnName("NOTA_5");
            entity.Property(e => e.Nota6)
                .HasColumnType("text")
                .HasColumnName("NOTA_6");
            entity.Property(e => e.Respuesta1)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_1");
            entity.Property(e => e.Respuesta2)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_2");
            entity.Property(e => e.Respuesta3)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_3");
            entity.Property(e => e.Respuesta4)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_4");
            entity.Property(e => e.Respuesta5)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_5");
            entity.Property(e => e.Respuesta6)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_6");
            entity.Property(e => e.TelefonoAtenderaServicio)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("TELEFONO_ATENDERA_SERVICIO");
        });

        modelBuilder.Entity<BdCallcenterRQ4>(entity =>
        {
            entity.HasKey(e => e.IdRespuestaQ4);

            entity.ToTable("BD_CALLCENTER_R_Q4");

            entity.Property(e => e.IdRespuestaQ4).HasColumnName("ID_RESPUESTA_Q4");
            entity.Property(e => e.AtiendeLlamada)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("ATIENDE_LLAMADA");
            entity.Property(e => e.CodRechazo1).HasColumnName("COD_RECHAZO_1");
            entity.Property(e => e.CodRechazo2).HasColumnName("COD_RECHAZO_2");
            entity.Property(e => e.CodRechazo3).HasColumnName("COD_RECHAZO_3");
            entity.Property(e => e.CodRechazo5).HasColumnName("COD_RECHAZO_5");
            entity.Property(e => e.FecCreacion)
                .HasColumnType("datetime")
                .HasColumnName("FEC_CREACION");
            entity.Property(e => e.HorarioCita)
                .HasColumnType("datetime")
                .HasColumnName("HORARIO_CITA");
            entity.Property(e => e.IdCallCenterSerguimiento).HasColumnName("ID_CALL_CENTER_SERGUIMIENTO");
            entity.Property(e => e.IdLlamadaContacto)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("ID_LLAMADA_CONTACTO");
            entity.Property(e => e.IdLlamadaElavon)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("ID_LLAMADA_ELAVON");
            entity.Property(e => e.NombreAtenderaServicio)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("NOMBRE_ATENDERA_SERVICIO");
            entity.Property(e => e.NombreRechazaElavon)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("NOMBRE_RECHAZA_ELAVON");
            entity.Property(e => e.Nota1)
                .HasColumnType("text")
                .HasColumnName("NOTA_1");
            entity.Property(e => e.Nota2)
                .HasColumnType("text")
                .HasColumnName("NOTA_2");
            entity.Property(e => e.Nota3)
                .HasColumnType("text")
                .HasColumnName("NOTA_3");
            entity.Property(e => e.Nota4)
                .HasColumnType("text")
                .HasColumnName("NOTA_4");
            entity.Property(e => e.Nota5)
                .HasColumnType("text")
                .HasColumnName("NOTA_5");
            entity.Property(e => e.Nota6)
                .HasColumnType("text")
                .HasColumnName("NOTA_6");
            entity.Property(e => e.Respuesta1)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_1");
            entity.Property(e => e.Respuesta2)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_2");
            entity.Property(e => e.Respuesta3)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_3");
            entity.Property(e => e.Respuesta4)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_4");
            entity.Property(e => e.Respuesta5)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_5");
            entity.Property(e => e.Respuesta6)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_6");
            entity.Property(e => e.TelefonoAtenderaServicio)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("TELEFONO_ATENDERA_SERVICIO");
        });

        modelBuilder.Entity<BdCallcenterRQ5>(entity =>
        {
            entity.HasKey(e => e.IdRespuestaQ5);

            entity.ToTable("BD_CALLCENTER_R_Q5");

            entity.Property(e => e.IdRespuestaQ5).HasColumnName("ID_RESPUESTA_Q5");
            entity.Property(e => e.AtiendeLlamada)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("ATIENDE_LLAMADA");
            entity.Property(e => e.CodRechazo1).HasColumnName("COD_RECHAZO_1");
            entity.Property(e => e.CodRechazo2).HasColumnName("COD_RECHAZO_2");
            entity.Property(e => e.CodRechazo3).HasColumnName("COD_RECHAZO_3");
            entity.Property(e => e.CodRechazo5).HasColumnName("COD_RECHAZO_5");
            entity.Property(e => e.FecCreacion)
                .HasColumnType("datetime")
                .HasColumnName("FEC_CREACION");
            entity.Property(e => e.HorarioCita)
                .HasColumnType("datetime")
                .HasColumnName("HORARIO_CITA");
            entity.Property(e => e.IdCallCenterSerguimiento).HasColumnName("ID_CALL_CENTER_SERGUIMIENTO");
            entity.Property(e => e.IdLlamadaContacto)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("ID_LLAMADA_CONTACTO");
            entity.Property(e => e.IdLlamadaElavon)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("ID_LLAMADA_ELAVON");
            entity.Property(e => e.NombreAtenderaServicio)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("NOMBRE_ATENDERA_SERVICIO");
            entity.Property(e => e.NombreRechazaElavon)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("NOMBRE_RECHAZA_ELAVON");
            entity.Property(e => e.Nota1)
                .HasColumnType("text")
                .HasColumnName("NOTA_1");
            entity.Property(e => e.Nota2)
                .HasColumnType("text")
                .HasColumnName("NOTA_2");
            entity.Property(e => e.Nota3)
                .HasColumnType("text")
                .HasColumnName("NOTA_3");
            entity.Property(e => e.Nota4)
                .HasColumnType("text")
                .HasColumnName("NOTA_4");
            entity.Property(e => e.Nota5)
                .HasColumnType("text")
                .HasColumnName("NOTA_5");
            entity.Property(e => e.Nota6)
                .HasColumnType("text")
                .HasColumnName("NOTA_6");
            entity.Property(e => e.Respuesta1)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_1");
            entity.Property(e => e.Respuesta2)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_2");
            entity.Property(e => e.Respuesta3)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_3");
            entity.Property(e => e.Respuesta4)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_4");
            entity.Property(e => e.Respuesta5)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_5");
            entity.Property(e => e.Respuesta6)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_6");
            entity.Property(e => e.TelefonoAtenderaServicio)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("TELEFONO_ATENDERA_SERVICIO");
        });

        modelBuilder.Entity<BdCallcenterRQ6>(entity =>
        {
            entity.HasKey(e => e.IdRespuestaQ6);

            entity.ToTable("BD_CALLCENTER_R_Q6");

            entity.Property(e => e.IdRespuestaQ6).HasColumnName("ID_RESPUESTA_Q6");
            entity.Property(e => e.AtiendeLlamada)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("ATIENDE_LLAMADA");
            entity.Property(e => e.CodRechazo1).HasColumnName("COD_RECHAZO_1");
            entity.Property(e => e.CodRechazo10).HasColumnName("COD_RECHAZO_10");
            entity.Property(e => e.CodRechazo2).HasColumnName("COD_RECHAZO_2");
            entity.Property(e => e.CodRechazo3).HasColumnName("COD_RECHAZO_3");
            entity.Property(e => e.CodRechazo5).HasColumnName("COD_RECHAZO_5");
            entity.Property(e => e.CodRechazo7).HasColumnName("COD_RECHAZO_7");
            entity.Property(e => e.CodRechazo8).HasColumnName("COD_RECHAZO_8");
            entity.Property(e => e.CodRechazo9).HasColumnName("COD_RECHAZO_9");
            entity.Property(e => e.FecCreacion)
                .HasColumnType("datetime")
                .HasColumnName("FEC_CREACION");
            entity.Property(e => e.HorarioCita)
                .HasColumnType("datetime")
                .HasColumnName("HORARIO_CITA");
            entity.Property(e => e.IdCallCenterSerguimiento).HasColumnName("ID_CALL_CENTER_SERGUIMIENTO");
            entity.Property(e => e.IdLlamadaContacto)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("ID_LLAMADA_CONTACTO");
            entity.Property(e => e.IdLlamadaElavon)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("ID_LLAMADA_ELAVON");
            entity.Property(e => e.NombreAtenderaServicio)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("NOMBRE_ATENDERA_SERVICIO");
            entity.Property(e => e.NombreRechazaElavon)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("NOMBRE_RECHAZA_ELAVON");
            entity.Property(e => e.Nota1)
                .HasColumnType("text")
                .HasColumnName("NOTA_1");
            entity.Property(e => e.Nota10)
                .HasColumnType("text")
                .HasColumnName("NOTA_10");
            entity.Property(e => e.Nota2)
                .HasColumnType("text")
                .HasColumnName("NOTA_2");
            entity.Property(e => e.Nota3)
                .HasColumnType("text")
                .HasColumnName("NOTA_3");
            entity.Property(e => e.Nota4)
                .HasColumnType("text")
                .HasColumnName("NOTA_4");
            entity.Property(e => e.Nota5)
                .HasColumnType("text")
                .HasColumnName("NOTA_5");
            entity.Property(e => e.Nota6)
                .HasColumnType("text")
                .HasColumnName("NOTA_6");
            entity.Property(e => e.Nota7)
                .HasColumnType("text")
                .HasColumnName("NOTA_7");
            entity.Property(e => e.Nota8)
                .HasColumnType("text")
                .HasColumnName("NOTA_8");
            entity.Property(e => e.Nota9)
                .HasColumnType("text")
                .HasColumnName("NOTA_9");
            entity.Property(e => e.Respuesta1)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_1");
            entity.Property(e => e.Respuesta10).HasColumnName("RESPUESTA_10");
            entity.Property(e => e.Respuesta2)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_2");
            entity.Property(e => e.Respuesta3)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_3");
            entity.Property(e => e.Respuesta4)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_4");
            entity.Property(e => e.Respuesta5)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_5");
            entity.Property(e => e.Respuesta6)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_6");
            entity.Property(e => e.Respuesta7).HasColumnName("RESPUESTA_7");
            entity.Property(e => e.Respuesta8).HasColumnName("RESPUESTA_8");
            entity.Property(e => e.Respuesta9).HasColumnName("RESPUESTA_9");
            entity.Property(e => e.TelefonoAtenderaServicio)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("TELEFONO_ATENDERA_SERVICIO");
        });

        modelBuilder.Entity<BdCallcenterRQ7>(entity =>
        {
            entity.HasKey(e => e.IdRespuestaQ7);

            entity.ToTable("BD_CALLCENTER_R_Q7");

            entity.Property(e => e.IdRespuestaQ7).HasColumnName("ID_RESPUESTA_Q7");
            entity.Property(e => e.AtiendeLlamada)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("ATIENDE_LLAMADA");
            entity.Property(e => e.CodRechazo1).HasColumnName("COD_RECHAZO_1");
            entity.Property(e => e.CodRechazo10).HasColumnName("COD_RECHAZO_10");
            entity.Property(e => e.CodRechazo2).HasColumnName("COD_RECHAZO_2");
            entity.Property(e => e.CodRechazo3).HasColumnName("COD_RECHAZO_3");
            entity.Property(e => e.CodRechazo5).HasColumnName("COD_RECHAZO_5");
            entity.Property(e => e.CodRechazo7).HasColumnName("COD_RECHAZO_7");
            entity.Property(e => e.CodRechazo8).HasColumnName("COD_RECHAZO_8");
            entity.Property(e => e.CodRechazo9).HasColumnName("COD_RECHAZO_9");
            entity.Property(e => e.FecCreacion)
                .HasColumnType("datetime")
                .HasColumnName("FEC_CREACION");
            entity.Property(e => e.HorarioCita)
                .HasColumnType("datetime")
                .HasColumnName("HORARIO_CITA");
            entity.Property(e => e.IdCallCenterSerguimiento).HasColumnName("ID_CALL_CENTER_SERGUIMIENTO");
            entity.Property(e => e.IdLlamadaContacto)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("ID_LLAMADA_CONTACTO");
            entity.Property(e => e.IdLlamadaElavon)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("ID_LLAMADA_ELAVON");
            entity.Property(e => e.NombreAtenderaServicio)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("NOMBRE_ATENDERA_SERVICIO");
            entity.Property(e => e.NombreRechazaElavon)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("NOMBRE_RECHAZA_ELAVON");
            entity.Property(e => e.Nota1)
                .HasColumnType("text")
                .HasColumnName("NOTA_1");
            entity.Property(e => e.Nota10)
                .HasColumnType("text")
                .HasColumnName("NOTA_10");
            entity.Property(e => e.Nota2)
                .HasColumnType("text")
                .HasColumnName("NOTA_2");
            entity.Property(e => e.Nota3)
                .HasColumnType("text")
                .HasColumnName("NOTA_3");
            entity.Property(e => e.Nota4)
                .HasColumnType("text")
                .HasColumnName("NOTA_4");
            entity.Property(e => e.Nota5)
                .HasColumnType("text")
                .HasColumnName("NOTA_5");
            entity.Property(e => e.Nota6)
                .HasColumnType("text")
                .HasColumnName("NOTA_6");
            entity.Property(e => e.Nota7)
                .HasColumnType("text")
                .HasColumnName("NOTA_7");
            entity.Property(e => e.Nota8)
                .HasColumnType("text")
                .HasColumnName("NOTA_8");
            entity.Property(e => e.Nota9)
                .HasColumnType("text")
                .HasColumnName("NOTA_9");
            entity.Property(e => e.Respuesta1)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_1");
            entity.Property(e => e.Respuesta10).HasColumnName("RESPUESTA_10");
            entity.Property(e => e.Respuesta2)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_2");
            entity.Property(e => e.Respuesta3)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_3");
            entity.Property(e => e.Respuesta4)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_4");
            entity.Property(e => e.Respuesta5)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_5");
            entity.Property(e => e.Respuesta6)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_6");
            entity.Property(e => e.Respuesta7).HasColumnName("RESPUESTA_7");
            entity.Property(e => e.Respuesta8).HasColumnName("RESPUESTA_8");
            entity.Property(e => e.Respuesta9).HasColumnName("RESPUESTA_9");
            entity.Property(e => e.TelefonoAtenderaServicio)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("TELEFONO_ATENDERA_SERVICIO");
        });

        modelBuilder.Entity<BdCallcenterRQ8>(entity =>
        {
            entity.HasKey(e => e.IdRespuestaQ8);

            entity.ToTable("BD_CALLCENTER_R_Q8");

            entity.Property(e => e.IdRespuestaQ8).HasColumnName("ID_RESPUESTA_Q8");
            entity.Property(e => e.AtiendeLlamada)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("ATIENDE_LLAMADA");
            entity.Property(e => e.CodRechazo1).HasColumnName("COD_RECHAZO_1");
            entity.Property(e => e.CodRechazo10).HasColumnName("COD_RECHAZO_10");
            entity.Property(e => e.CodRechazo11).HasColumnName("COD_RECHAZO_11");
            entity.Property(e => e.CodRechazo13).HasColumnName("COD_RECHAZO_13");
            entity.Property(e => e.CodRechazo14).HasColumnName("COD_RECHAZO_14");
            entity.Property(e => e.CodRechazo15).HasColumnName("COD_RECHAZO_15");
            entity.Property(e => e.CodRechazo16).HasColumnName("COD_RECHAZO_16");
            entity.Property(e => e.CodRechazo17).HasColumnName("COD_RECHAZO_17");
            entity.Property(e => e.CodRechazo18).HasColumnName("COD_RECHAZO_18");
            entity.Property(e => e.CodRechazo19).HasColumnName("COD_RECHAZO_19");
            entity.Property(e => e.CodRechazo2).HasColumnName("COD_RECHAZO_2");
            entity.Property(e => e.CodRechazo20).HasColumnName("COD_RECHAZO_20");
            entity.Property(e => e.CodRechazo21).HasColumnName("COD_RECHAZO_21");
            entity.Property(e => e.CodRechazo22).HasColumnName("COD_RECHAZO_22");
            entity.Property(e => e.CodRechazo23).HasColumnName("COD_RECHAZO_23");
            entity.Property(e => e.CodRechazo24).HasColumnName("COD_RECHAZO_24");
            entity.Property(e => e.CodRechazo25).HasColumnName("COD_RECHAZO_25");
            entity.Property(e => e.CodRechazo26).HasColumnName("COD_RECHAZO_26");
            entity.Property(e => e.CodRechazo27).HasColumnName("COD_RECHAZO_27");
            entity.Property(e => e.CodRechazo28).HasColumnName("COD_RECHAZO_28");
            entity.Property(e => e.CodRechazo29).HasColumnName("COD_RECHAZO_29");
            entity.Property(e => e.CodRechazo3).HasColumnName("COD_RECHAZO_3");
            entity.Property(e => e.CodRechazo30).HasColumnName("COD_RECHAZO_30");
            entity.Property(e => e.CodRechazo31).HasColumnName("COD_RECHAZO_31");
            entity.Property(e => e.CodRechazo32).HasColumnName("COD_RECHAZO_32");
            entity.Property(e => e.CodRechazo33).HasColumnName("COD_RECHAZO_33");
            entity.Property(e => e.CodRechazo34).HasColumnName("COD_RECHAZO_34");
            entity.Property(e => e.CodRechazo35).HasColumnName("COD_RECHAZO_35");
            entity.Property(e => e.CodRechazo36).HasColumnName("COD_RECHAZO_36");
            entity.Property(e => e.CodRechazo37).HasColumnName("COD_RECHAZO_37");
            entity.Property(e => e.CodRechazo38).HasColumnName("COD_RECHAZO_38");
            entity.Property(e => e.CodRechazo39).HasColumnName("COD_RECHAZO_39");
            entity.Property(e => e.CodRechazo4).HasColumnName("COD_RECHAZO_4");
            entity.Property(e => e.CodRechazo40).HasColumnName("COD_RECHAZO_40");
            entity.Property(e => e.CodRechazo5).HasColumnName("COD_RECHAZO_5");
            entity.Property(e => e.CodRechazo7).HasColumnName("COD_RECHAZO_7");
            entity.Property(e => e.CodRechazo9).HasColumnName("COD_RECHAZO_9");
            entity.Property(e => e.FecCreacion)
                .HasColumnType("datetime")
                .HasColumnName("FEC_CREACION");
            entity.Property(e => e.HorarioCita)
                .HasColumnType("datetime")
                .HasColumnName("HORARIO_CITA");
            entity.Property(e => e.IdCallCenterSeguimiento).HasColumnName("ID_CALL_CENTER_SEGUIMIENTO");
            entity.Property(e => e.IdLlamadaContacto)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("ID_LLAMADA_CONTACTO");
            entity.Property(e => e.IdLlamadaElavon)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("ID_LLAMADA_ELAVON");
            entity.Property(e => e.NombreAtenderaServicio)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("NOMBRE_ATENDERA_SERVICIO");
            entity.Property(e => e.Nota1)
                .HasColumnType("text")
                .HasColumnName("NOTA_1");
            entity.Property(e => e.Nota10)
                .HasColumnType("text")
                .HasColumnName("NOTA_10");
            entity.Property(e => e.Nota11)
                .HasColumnType("text")
                .HasColumnName("NOTA_11");
            entity.Property(e => e.Nota12)
                .HasColumnType("text")
                .HasColumnName("NOTA_12");
            entity.Property(e => e.Nota13)
                .HasColumnType("text")
                .HasColumnName("NOTA_13");
            entity.Property(e => e.Nota14)
                .HasColumnType("text")
                .HasColumnName("NOTA_14");
            entity.Property(e => e.Nota15)
                .HasColumnType("text")
                .HasColumnName("NOTA_15");
            entity.Property(e => e.Nota16)
                .HasColumnType("text")
                .HasColumnName("NOTA_16");
            entity.Property(e => e.Nota17)
                .HasColumnType("text")
                .HasColumnName("NOTA_17");
            entity.Property(e => e.Nota18)
                .HasColumnType("text")
                .HasColumnName("NOTA_18");
            entity.Property(e => e.Nota19)
                .HasColumnType("text")
                .HasColumnName("NOTA_19");
            entity.Property(e => e.Nota2)
                .HasColumnType("text")
                .HasColumnName("NOTA_2");
            entity.Property(e => e.Nota20)
                .HasColumnType("text")
                .HasColumnName("NOTA_20");
            entity.Property(e => e.Nota21)
                .HasColumnType("text")
                .HasColumnName("NOTA_21");
            entity.Property(e => e.Nota22)
                .HasColumnType("text")
                .HasColumnName("NOTA_22");
            entity.Property(e => e.Nota23)
                .HasColumnType("text")
                .HasColumnName("NOTA_23");
            entity.Property(e => e.Nota24)
                .HasColumnType("text")
                .HasColumnName("NOTA_24");
            entity.Property(e => e.Nota25)
                .HasColumnType("text")
                .HasColumnName("NOTA_25");
            entity.Property(e => e.Nota26)
                .HasColumnType("text")
                .HasColumnName("NOTA_26");
            entity.Property(e => e.Nota27)
                .HasColumnType("text")
                .HasColumnName("NOTA_27");
            entity.Property(e => e.Nota28)
                .HasColumnType("text")
                .HasColumnName("NOTA_28");
            entity.Property(e => e.Nota29)
                .HasColumnType("text")
                .HasColumnName("NOTA_29");
            entity.Property(e => e.Nota3)
                .HasColumnType("text")
                .HasColumnName("NOTA_3");
            entity.Property(e => e.Nota30)
                .HasColumnType("text")
                .HasColumnName("NOTA_30");
            entity.Property(e => e.Nota31)
                .HasColumnType("text")
                .HasColumnName("NOTA_31");
            entity.Property(e => e.Nota32)
                .HasColumnType("text")
                .HasColumnName("NOTA_32");
            entity.Property(e => e.Nota33)
                .HasColumnType("text")
                .HasColumnName("NOTA_33");
            entity.Property(e => e.Nota34)
                .HasColumnType("text")
                .HasColumnName("NOTA_34");
            entity.Property(e => e.Nota35)
                .HasColumnType("text")
                .HasColumnName("NOTA_35");
            entity.Property(e => e.Nota36)
                .HasColumnType("text")
                .HasColumnName("NOTA_36");
            entity.Property(e => e.Nota37)
                .HasColumnType("text")
                .HasColumnName("NOTA_37");
            entity.Property(e => e.Nota38)
                .HasColumnType("text")
                .HasColumnName("NOTA_38");
            entity.Property(e => e.Nota39)
                .HasColumnType("text")
                .HasColumnName("NOTA_39");
            entity.Property(e => e.Nota4)
                .HasColumnType("text")
                .HasColumnName("NOTA_4");
            entity.Property(e => e.Nota40)
                .HasColumnType("text")
                .HasColumnName("NOTA_40");
            entity.Property(e => e.Nota41)
                .HasColumnType("text")
                .HasColumnName("NOTA_41");
            entity.Property(e => e.Nota42)
                .HasColumnType("text")
                .HasColumnName("NOTA_42");
            entity.Property(e => e.Nota43)
                .HasColumnType("text")
                .HasColumnName("NOTA_43");
            entity.Property(e => e.Nota44)
                .HasColumnType("text")
                .HasColumnName("NOTA_44");
            entity.Property(e => e.Nota45)
                .HasColumnType("text")
                .HasColumnName("NOTA_45");
            entity.Property(e => e.Nota5)
                .HasColumnType("text")
                .HasColumnName("NOTA_5");
            entity.Property(e => e.Nota6)
                .HasColumnType("text")
                .HasColumnName("NOTA_6");
            entity.Property(e => e.Nota7)
                .HasColumnType("text")
                .HasColumnName("NOTA_7");
            entity.Property(e => e.Nota8)
                .HasColumnType("text")
                .HasColumnName("NOTA_8");
            entity.Property(e => e.Nota9)
                .HasColumnType("text")
                .HasColumnName("NOTA_9");
            entity.Property(e => e.Respuesta1)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_1");
            entity.Property(e => e.Respuesta10)
                .HasMaxLength(22)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_10");
            entity.Property(e => e.Respuesta11)
                .HasMaxLength(22)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_11");
            entity.Property(e => e.Respuesta12)
                .HasMaxLength(22)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_12");
            entity.Property(e => e.Respuesta13)
                .HasMaxLength(22)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_13");
            entity.Property(e => e.Respuesta14)
                .HasMaxLength(22)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_14");
            entity.Property(e => e.Respuesta15)
                .HasMaxLength(22)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_15");
            entity.Property(e => e.Respuesta16)
                .HasMaxLength(22)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_16");
            entity.Property(e => e.Respuesta17)
                .HasMaxLength(22)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_17");
            entity.Property(e => e.Respuesta18)
                .HasMaxLength(22)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_18");
            entity.Property(e => e.Respuesta19)
                .HasMaxLength(22)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_19");
            entity.Property(e => e.Respuesta2)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_2");
            entity.Property(e => e.Respuesta20)
                .HasMaxLength(22)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_20");
            entity.Property(e => e.Respuesta21)
                .HasMaxLength(22)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_21");
            entity.Property(e => e.Respuesta22)
                .HasMaxLength(22)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_22");
            entity.Property(e => e.Respuesta23)
                .HasMaxLength(22)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_23");
            entity.Property(e => e.Respuesta24)
                .HasMaxLength(22)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_24");
            entity.Property(e => e.Respuesta25)
                .HasMaxLength(22)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_25");
            entity.Property(e => e.Respuesta26)
                .HasMaxLength(22)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_26");
            entity.Property(e => e.Respuesta27)
                .HasMaxLength(22)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_27");
            entity.Property(e => e.Respuesta28)
                .HasMaxLength(22)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_28");
            entity.Property(e => e.Respuesta29)
                .HasMaxLength(22)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_29");
            entity.Property(e => e.Respuesta3)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_3");
            entity.Property(e => e.Respuesta30)
                .HasMaxLength(22)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_30");
            entity.Property(e => e.Respuesta31)
                .HasMaxLength(22)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_31");
            entity.Property(e => e.Respuesta32)
                .HasMaxLength(22)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_32");
            entity.Property(e => e.Respuesta33)
                .HasMaxLength(22)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_33");
            entity.Property(e => e.Respuesta34)
                .HasMaxLength(22)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_34");
            entity.Property(e => e.Respuesta35)
                .HasMaxLength(22)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_35");
            entity.Property(e => e.Respuesta36)
                .HasMaxLength(22)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_36");
            entity.Property(e => e.Respuesta37)
                .HasMaxLength(22)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_37");
            entity.Property(e => e.Respuesta38)
                .HasMaxLength(22)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_38");
            entity.Property(e => e.Respuesta39)
                .HasMaxLength(22)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_39");
            entity.Property(e => e.Respuesta4)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_4");
            entity.Property(e => e.Respuesta40)
                .HasMaxLength(22)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_40");
            entity.Property(e => e.Respuesta41)
                .HasMaxLength(22)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_41");
            entity.Property(e => e.Respuesta42)
                .HasMaxLength(22)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_42");
            entity.Property(e => e.Respuesta43)
                .HasMaxLength(22)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_43");
            entity.Property(e => e.Respuesta44)
                .HasMaxLength(22)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_44");
            entity.Property(e => e.Respuesta45)
                .HasMaxLength(22)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_45");
            entity.Property(e => e.Respuesta5)
                .HasMaxLength(22)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_5");
            entity.Property(e => e.Respuesta6)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_6");
            entity.Property(e => e.Respuesta7)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_7");
            entity.Property(e => e.Respuesta8)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_8");
            entity.Property(e => e.Respuesta9)
                .HasMaxLength(22)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_9");
            entity.Property(e => e.TelefonoAtenderaServicio)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("TELEFONO_ATENDERA_SERVICIO");
        });

        modelBuilder.Entity<BdCallcenterRQ9>(entity =>
        {
            entity.HasKey(e => e.IdRespuestaQ9);

            entity.ToTable("BD_CALLCENTER_R_Q9");

            entity.Property(e => e.IdRespuestaQ9).HasColumnName("ID_RESPUESTA_Q9");
            entity.Property(e => e.AtiendeLlamada)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("ATIENDE_LLAMADA");
            entity.Property(e => e.CodRechazo1).HasColumnName("COD_RECHAZO_1");
            entity.Property(e => e.CodRechazo2).HasColumnName("COD_RECHAZO_2");
            entity.Property(e => e.CodRechazo3).HasColumnName("COD_RECHAZO_3");
            entity.Property(e => e.CodRechazo4).HasColumnName("COD_RECHAZO_4");
            entity.Property(e => e.CodRechazo5).HasColumnName("COD_RECHAZO_5");
            entity.Property(e => e.CodRechazo7).HasColumnName("COD_RECHAZO_7");
            entity.Property(e => e.FecCreacion)
                .HasColumnType("datetime")
                .HasColumnName("FEC_CREACION");
            entity.Property(e => e.HorarioCita)
                .HasColumnType("datetime")
                .HasColumnName("HORARIO_CITA");
            entity.Property(e => e.IdCallCenterSeguimiento).HasColumnName("ID_CALL_CENTER_SEGUIMIENTO");
            entity.Property(e => e.IdLlamadaContacto)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("ID_LLAMADA_CONTACTO");
            entity.Property(e => e.IdLlamadaElavon)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("ID_LLAMADA_ELAVON");
            entity.Property(e => e.NombreAtenderaServicio)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("NOMBRE_ATENDERA_SERVICIO");
            entity.Property(e => e.Nota1)
                .HasColumnType("text")
                .HasColumnName("NOTA_1");
            entity.Property(e => e.Nota2)
                .HasColumnType("text")
                .HasColumnName("NOTA_2");
            entity.Property(e => e.Nota3)
                .HasColumnType("text")
                .HasColumnName("NOTA_3");
            entity.Property(e => e.Nota4)
                .HasColumnType("text")
                .HasColumnName("NOTA_4");
            entity.Property(e => e.Nota5)
                .HasColumnType("text")
                .HasColumnName("NOTA_5");
            entity.Property(e => e.Nota6)
                .HasColumnType("text")
                .HasColumnName("NOTA_6");
            entity.Property(e => e.Nota7)
                .HasColumnType("text")
                .HasColumnName("NOTA_7");
            entity.Property(e => e.Nota8)
                .HasColumnType("text")
                .HasColumnName("NOTA_8");
            entity.Property(e => e.Respuesta1)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_1");
            entity.Property(e => e.Respuesta2)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_2");
            entity.Property(e => e.Respuesta3)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_3");
            entity.Property(e => e.Respuesta4)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_4");
            entity.Property(e => e.Respuesta5)
                .HasMaxLength(22)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_5");
            entity.Property(e => e.Respuesta6)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_6");
            entity.Property(e => e.Respuesta7)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_7");
            entity.Property(e => e.Respuesta8)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("RESPUESTA_8");
            entity.Property(e => e.TelefonoAtenderaServicio)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("TELEFONO_ATENDERA_SERVICIO");
        });

        modelBuilder.Entity<BdCambioStatusAr>(entity =>
        {
            entity.HasKey(e => e.IdCambioStatusAr);

            entity.ToTable("BD_CAMBIO_STATUS_AR");

            entity.Property(e => e.IdCambioStatusAr).HasColumnName("ID_CAMBIO_STATUS_AR");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdStatusArFin).HasColumnName("ID_STATUS_AR_FIN");
            entity.Property(e => e.IdStatusArIni).HasColumnName("ID_STATUS_AR_INI");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");

            entity.HasOne(d => d.IdStatusArFinNavigation).WithMany(p => p.BdCambioStatusArIdStatusArFinNavigations)
                .HasForeignKey(d => d.IdStatusArFin)
                .HasConstraintName("FK_BD_CAMBIO_STATUS_AR_C_STATUS_AR1");

            entity.HasOne(d => d.IdStatusArIniNavigation).WithMany(p => p.BdCambioStatusArIdStatusArIniNavigations)
                .HasForeignKey(d => d.IdStatusArIni)
                .HasConstraintName("FK_BD_CAMBIO_STATUS_AR_C_STATUS_AR");
        });

        modelBuilder.Entity<BdCambiosEstatusPermititdosUnidade>(entity =>
        {
            entity.HasKey(e => e.IdCambioEstatusPermitido).HasName("PK__BD_CAMBI__1400EDE2B204FB6C");

            entity.ToTable("BD_CAMBIOS_ESTATUS_PERMITITDOS_UNIDADES");

            entity.Property(e => e.IdCambioEstatusPermitido).HasColumnName("ID_CAMBIO_ESTATUS_PERMITIDO");
            entity.Property(e => e.ArchivoObligatorio).HasColumnName("ARCHIVO_OBLIGATORIO");
            entity.Property(e => e.IdResponsable).HasColumnName("ID_RESPONSABLE");
            entity.Property(e => e.IdStatusFin).HasColumnName("ID_STATUS_FIN");
            entity.Property(e => e.IdStatusIni).HasColumnName("ID_STATUS_INI");
            entity.Property(e => e.IdTipoResponsable).HasColumnName("ID_TIPO_RESPONSABLE");
            entity.Property(e => e.IsValidacionEnvio).HasColumnName("IS_VALIDACION_ENVIO");
            entity.Property(e => e.LiberarEnvio).HasColumnName("LIBERAR_ENVIO");
            entity.Property(e => e.Status).HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdCampanaDeployment>(entity =>
        {
            entity.HasKey(e => e.IdCampanaDeployment).HasName("PK__BD_CAMPA__1E58D95EC1BEFE66");

            entity.ToTable("BD_CAMPANA_DEPLOYMENT");

            entity.Property(e => e.IdCampanaDeployment).HasColumnName("ID_CAMPANA_DEPLOYMENT");
            entity.Property(e => e.EmailPrueba)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("EMAIL_PRUEBA");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.FecEnvio)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ENVIO");
            entity.Property(e => e.IdEmisor).HasColumnName("ID_EMISOR");
            entity.Property(e => e.IdListaContacto).HasColumnName("ID_LISTA_CONTACTO");
            entity.Property(e => e.IdMailjetCampaign).HasColumnName("ID_MAILJET_CAMPAIGN");
            entity.Property(e => e.IdPlantilla).HasColumnName("ID_PLANTILLA");
            entity.Property(e => e.IdTipoCampanaDeployment).HasColumnName("ID_TIPO_CAMPANA_DEPLOYMENT");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Nombre)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NOMBRE");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdCampanaMarketing>(entity =>
        {
            entity.HasKey(e => e.IdCampanaMarketing).HasName("PK__BD_CAMPA__67C879FE652D42E3");

            entity.ToTable("BD_CAMPANA_MARKETING");

            entity.Property(e => e.IdCampanaMarketing).HasColumnName("ID_CAMPANA_MARKETING");
            entity.Property(e => e.EmailPrueba)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("EMAIL_PRUEBA");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.FecEnvio)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ENVIO");
            entity.Property(e => e.IdEmisor).HasColumnName("ID_EMISOR");
            entity.Property(e => e.IdListaContacto).HasColumnName("ID_LISTA_CONTACTO");
            entity.Property(e => e.IdMailjetCampaign).HasColumnName("ID_MAILJET_CAMPAIGN");
            entity.Property(e => e.IdPlantilla).HasColumnName("ID_PLANTILLA");
            entity.Property(e => e.IdTipoCampanaMarketing).HasColumnName("ID_TIPO_CAMPANA_MARKETING");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Nombre)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NOMBRE");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdCarga>(entity =>
        {
            entity.HasKey(e => e.IdCarga);

            entity.ToTable("BD_CARGAS");

            entity.HasIndex(e => new { e.IdCliente, e.IdUsuarioAlta, e.Status }, "IX_BD_CARGAS_ID_CLIENTE, ID_USUARIO_ALTA, STATUS");

            entity.HasIndex(e => new { e.IdCliente, e.Status, e.IdStatusCarga }, "IX_BD_CARGAS_ID_CLIENTE_STATUS_ID_STATUS_CARGA");

            entity.HasIndex(e => new { e.IdUsuarioAlta, e.Status }, "IX_BD_CARGAS_ID_USUARIO_ALTA, STATUS");

            entity.HasIndex(e => new { e.Status, e.IdStatusCarga }, "IX_BD_CARGAS_STATUS_ID_STATUS_CARGA");

            entity.HasIndex(e => new { e.Status, e.IdStatusCarga }, "IX_MI_BD_CARGAS_10_9");

            entity.HasIndex(e => new { e.IdCliente, e.Status, e.IdStatusCarga }, "IX_MI_BD_CARGAS_2_1");

            entity.HasIndex(e => new { e.IdCliente, e.Status, e.IdStatusCarga }, "IX_MI_BD_CARGAS_3330_3329");

            entity.HasIndex(e => new { e.Status, e.IdStatusCarga }, "IX_MI_BD_CARGAS_3332_3331");

            entity.HasIndex(e => new { e.IdUsuarioAlta, e.Status, e.IdStatusCarga }, "IX_MI_BD_CARGAS_4850_4849");

            entity.HasIndex(e => new { e.Status, e.IdStatusCarga }, "IX_MI_BD_CARGAS_4_3");

            entity.HasIndex(e => new { e.IdCliente, e.Status, e.IdStatusCarga }, "IX_MI_BD_CARGAS_8_7");

            entity.Property(e => e.IdCarga).HasColumnName("ID_CARGA");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.Fecha)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA");
            entity.Property(e => e.IdAttachArchivo1).HasColumnName("ID_ATTACH_ARCHIVO1");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdStatusCarga).HasColumnName("ID_STATUS_CARGA");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdCargaChangeComentario>(entity =>
        {
            entity.HasKey(e => e.IdCarga).HasName("PK__BD_CARGA__6F4DBE3D4BF698DC");

            entity.ToTable("BD_CARGA_CHANGE_COMENTARIOS");

            entity.Property(e => e.IdCarga).HasColumnName("ID_CARGA");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
        });

        modelBuilder.Entity<BdCargaChangeDiagnosticadum>(entity =>
        {
            entity.HasKey(e => e.IdCarga).HasName("PK__BD_CARGA__6F4DBE3DD1AC1A30");

            entity.ToTable("BD_CARGA_CHANGE_DIAGNOSTICADA");

            entity.Property(e => e.IdCarga).HasColumnName("ID_CARGA");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
        });

        modelBuilder.Entity<BdCargaChangeStatus>(entity =>
        {
            entity.HasKey(e => e.IdCarga).HasName("PK__BD_CARGA__6F4DBE3DE5A8AF5D");

            entity.ToTable("BD_CARGA_CHANGE_STATUS");

            entity.Property(e => e.IdCarga).HasColumnName("ID_CARGA");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
        });

        modelBuilder.Entity<BdCargaCierresMasivosTexto>(entity =>
        {
            entity.HasKey(e => e.IdCierreMasivo);

            entity.ToTable("BD_CARGA_CIERRES_MASIVOS_TEXTO");

            entity.Property(e => e.IdCierreMasivo).HasColumnName("ID_CIERRE_MASIVO");
            entity.Property(e => e.AfiliacionAmex)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("AFILIACION_AMEX");
            entity.Property(e => e.Atiende)
                .IsRequired()
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("ATIENDE");
            entity.Property(e => e.BaseInstalacion)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("BASE_INSTALACION");
            entity.Property(e => e.BaseRetiro)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("BASE_RETIRO");
            entity.Property(e => e.BateriaInstalacion)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("BATERIA_INSTALACION");
            entity.Property(e => e.BateriaRetiro)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("BATERIA_RETIRO");
            entity.Property(e => e.CableAcInstalacion)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("CABLE_AC_INSTALACION");
            entity.Property(e => e.CableAcRetiro)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("CABLE_AC_RETIRO");
            entity.Property(e => e.Caja)
                .IsRequired()
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("CAJA");
            entity.Property(e => e.Comentarios)
                .IsRequired()
                .IsUnicode(false)
                .HasColumnName("COMENTARIOS");
            entity.Property(e => e.ComercioNotificado)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("COMERCIO_NOTIFICADO");
            entity.Property(e => e.ConclusionesAmex)
                .HasMaxLength(300)
                .IsFixedLength()
                .HasColumnName("CONCLUSIONES_AMEX");
            entity.Property(e => e.DayCierre)
                .IsRequired()
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("DAY_CIERRE");
            entity.Property(e => e.Discover)
                .IsRequired()
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("DISCOVER");
            entity.Property(e => e.EliminadorInstalacion)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("ELIMINADOR_INSTALACION");
            entity.Property(e => e.EliminadorRetiro)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("ELIMINADOR_RETIRO");
            entity.Property(e => e.EsAmex)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("ES_AMEX");
            entity.Property(e => e.EstatusOdt).HasColumnName("ESTATUS_ODT");
            entity.Property(e => e.EstatusProceso)
                .HasMaxLength(15)
                .IsFixedLength()
                .HasColumnName("ESTATUS_PROCESO");
            entity.Property(e => e.FechaCarga)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_CARGA");
            entity.Property(e => e.FileName)
                .IsRequired()
                .HasMaxLength(255)
                .IsFixedLength()
                .HasColumnName("FILE_NAME");
            entity.Property(e => e.Getnet)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("GETNET");
            entity.Property(e => e.HourCierre)
                .IsRequired()
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("HOUR_CIERRE");
            entity.Property(e => e.IdAmex)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ID_AMEX");
            entity.Property(e => e.IdAplicativoInstalacion)
                .HasMaxLength(200)
                .IsFixedLength()
                .HasColumnName("ID_APLICATIVO_INSTALACION");
            entity.Property(e => e.IdAplicativoRetiro)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("ID_APLICATIVO_RETIRO");
            entity.Property(e => e.IdCancelacion)
                .HasMaxLength(200)
                .IsFixedLength()
                .HasColumnName("ID_CANCELACION");
            entity.Property(e => e.IdConectiidadRetiro)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("ID_CONECTIIDAD_RETIRO");
            entity.Property(e => e.IdConectividadInstalacion)
                .HasMaxLength(200)
                .IsFixedLength()
                .HasColumnName("ID_CONECTIVIDAD_INSTALACION");
            entity.Property(e => e.IdCriterioCambio)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("ID_CRITERIO_CAMBIO");
            entity.Property(e => e.IdMarcaRetiro)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("ID_MARCA_RETIRO");
            entity.Property(e => e.IdModeloRetiro)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("ID_MODELO_RETIRO");
            entity.Property(e => e.IdProceso)
                .IsRequired()
                .HasMaxLength(50)
                .IsFixedLength()
                .HasColumnName("ID_PROCESO");
            entity.Property(e => e.IdRechazo)
                .HasMaxLength(200)
                .IsFixedLength()
                .HasColumnName("ID_RECHAZO");
            entity.Property(e => e.IdSubRechazo)
                .HasMaxLength(200)
                .IsFixedLength()
                .HasColumnName("ID_SUB_RECHAZO");
            entity.Property(e => e.IdUsuarioCarga).HasColumnName("ID_USUARIO_CARGA");
            entity.Property(e => e.MensajeError)
                .IsUnicode(false)
                .HasColumnName("MENSAJE_ERROR");
            entity.Property(e => e.MinuteCierre)
                .IsRequired()
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("MINUTE_CIERRE");
            entity.Property(e => e.MonthCierre)
                .IsRequired()
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("MONTH_CIERRE");
            entity.Property(e => e.NoSeRetiraSim)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("NO_SE_RETIRA_SIM");
            entity.Property(e => e.NoSerieInstalacion)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("NO_SERIE_INSTALACION");
            entity.Property(e => e.NoSerieRetiro)
                .HasMaxLength(50)
                .IsFixedLength()
                .HasColumnName("NO_SERIE_RETIRO");
            entity.Property(e => e.Odt)
                .IsRequired()
                .HasMaxLength(50)
                .IsFixedLength()
                .HasColumnName("ODT");
            entity.Property(e => e.OtorgaVobo)
                .IsRequired()
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("OTORGA_VOBO");
            entity.Property(e => e.RollosInstalados)
                .IsRequired()
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("ROLLOS_INSTALADOS");
            entity.Property(e => e.Ruta)
                .IsRequired()
                .HasMaxLength(255)
                .IsFixedLength()
                .HasColumnName("RUTA");
            entity.Property(e => e.SeBajoApp)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("SE_BAJO_APP");
            entity.Property(e => e.SeDejaMismoSim)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("SE_DEJA_MISMO_SIM");
            entity.Property(e => e.SiReqPromo)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("SI_REQ_PROMO");
            entity.Property(e => e.SimInstalacion)
                .HasMaxLength(21)
                .IsFixedLength()
                .HasColumnName("SIM_INSTALACION");
            entity.Property(e => e.SimRetiro)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("SIM_RETIRO");
            entity.Property(e => e.TapaInstalacion)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("TAPA_INSTALACION");
            entity.Property(e => e.TapaRetiro)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("TAPA_RETIRO");
            entity.Property(e => e.Tecnico)
                .IsRequired()
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("TECNICO");
            entity.Property(e => e.Telefono1)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("TELEFONO_1");
            entity.Property(e => e.Telefono2)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("TELEFONO_2");
            entity.Property(e => e.Tipo)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("TIPO");
            entity.Property(e => e.TipoAtencion)
                .IsRequired()
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("TIPO_ATENCION");
            entity.Property(e => e.VersionInstalacion)
                .HasMaxLength(50)
                .IsFixedLength()
                .HasColumnName("VERSION_INSTALACION");
            entity.Property(e => e.VersionRetiro)
                .HasMaxLength(50)
                .IsFixedLength()
                .HasColumnName("VERSION_RETIRO");
            entity.Property(e => e.YearCierre)
                .IsRequired()
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("YEAR_CIERRE");
        });

        modelBuilder.Entity<BdCargaCierresMasivosTextoMit>(entity =>
        {
            entity.HasKey(e => e.IdCierreMasivo);

            entity.ToTable("BD_CARGA_CIERRES_MASIVOS_TEXTO_MIT");

            entity.Property(e => e.IdCierreMasivo).HasColumnName("ID_CIERRE_MASIVO");
            entity.Property(e => e.AfiliacionAmex)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("AFILIACION_AMEX");
            entity.Property(e => e.Atiende)
                .IsRequired()
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("ATIENDE");
            entity.Property(e => e.BaseInstalacion)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("BASE_INSTALACION");
            entity.Property(e => e.BaseRetiro)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("BASE_RETIRO");
            entity.Property(e => e.BateriaInstalacion)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("BATERIA_INSTALACION");
            entity.Property(e => e.BateriaRetiro)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("BATERIA_RETIRO");
            entity.Property(e => e.CableAcInstalacion)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("CABLE_AC_INSTALACION");
            entity.Property(e => e.CableAcRetiro)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("CABLE_AC_RETIRO");
            entity.Property(e => e.Caja)
                .IsRequired()
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("CAJA");
            entity.Property(e => e.Comentarios)
                .IsRequired()
                .IsUnicode(false)
                .HasColumnName("COMENTARIOS");
            entity.Property(e => e.ComercioNotificado)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("COMERCIO_NOTIFICADO");
            entity.Property(e => e.ConclusionesAmex)
                .HasMaxLength(300)
                .IsFixedLength()
                .HasColumnName("CONCLUSIONES_AMEX");
            entity.Property(e => e.DayCierre)
                .IsRequired()
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("DAY_CIERRE");
            entity.Property(e => e.Discover)
                .IsRequired()
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("DISCOVER");
            entity.Property(e => e.EliminadorInstalacion)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("ELIMINADOR_INSTALACION");
            entity.Property(e => e.EliminadorRetiro)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("ELIMINADOR_RETIRO");
            entity.Property(e => e.EsAmex)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("ES_AMEX");
            entity.Property(e => e.EstatusOdt).HasColumnName("ESTATUS_ODT");
            entity.Property(e => e.EstatusProceso)
                .HasMaxLength(15)
                .IsFixedLength()
                .HasColumnName("ESTATUS_PROCESO");
            entity.Property(e => e.FechaCarga)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_CARGA");
            entity.Property(e => e.FileName)
                .IsRequired()
                .HasMaxLength(255)
                .IsFixedLength()
                .HasColumnName("FILE_NAME");
            entity.Property(e => e.Getnet)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("GETNET");
            entity.Property(e => e.HourCierre)
                .IsRequired()
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("HOUR_CIERRE");
            entity.Property(e => e.IdAmex)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ID_AMEX");
            entity.Property(e => e.IdAplicativoInstalacion)
                .HasMaxLength(200)
                .IsFixedLength()
                .HasColumnName("ID_APLICATIVO_INSTALACION");
            entity.Property(e => e.IdAplicativoRetiro)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("ID_APLICATIVO_RETIRO");
            entity.Property(e => e.IdCancelacion)
                .HasMaxLength(200)
                .IsFixedLength()
                .HasColumnName("ID_CANCELACION");
            entity.Property(e => e.IdConectiidadRetiro)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("ID_CONECTIIDAD_RETIRO");
            entity.Property(e => e.IdConectividadInstalacion)
                .HasMaxLength(200)
                .IsFixedLength()
                .HasColumnName("ID_CONECTIVIDAD_INSTALACION");
            entity.Property(e => e.IdCriterioCambio)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("ID_CRITERIO_CAMBIO");
            entity.Property(e => e.IdMarcaRetiro)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("ID_MARCA_RETIRO");
            entity.Property(e => e.IdModeloRetiro)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("ID_MODELO_RETIRO");
            entity.Property(e => e.IdProceso)
                .IsRequired()
                .HasMaxLength(50)
                .IsFixedLength()
                .HasColumnName("ID_PROCESO");
            entity.Property(e => e.IdRechazo)
                .HasMaxLength(200)
                .IsFixedLength()
                .HasColumnName("ID_RECHAZO");
            entity.Property(e => e.IdSubRechazo)
                .HasMaxLength(200)
                .IsFixedLength()
                .HasColumnName("ID_SUB_RECHAZO");
            entity.Property(e => e.IdUsuarioCarga).HasColumnName("ID_USUARIO_CARGA");
            entity.Property(e => e.MensajeError)
                .IsUnicode(false)
                .HasColumnName("MENSAJE_ERROR");
            entity.Property(e => e.MinuteCierre)
                .IsRequired()
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("MINUTE_CIERRE");
            entity.Property(e => e.MonthCierre)
                .IsRequired()
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("MONTH_CIERRE");
            entity.Property(e => e.NoSeRetiraSim)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("NO_SE_RETIRA_SIM");
            entity.Property(e => e.NoSerieInstalacion)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("NO_SERIE_INSTALACION");
            entity.Property(e => e.NoSerieRetiro)
                .HasMaxLength(50)
                .IsFixedLength()
                .HasColumnName("NO_SERIE_RETIRO");
            entity.Property(e => e.Odt)
                .IsRequired()
                .HasMaxLength(50)
                .IsFixedLength()
                .HasColumnName("ODT");
            entity.Property(e => e.OtorgaVobo)
                .IsRequired()
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("OTORGA_VOBO");
            entity.Property(e => e.RollosInstalados)
                .IsRequired()
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("ROLLOS_INSTALADOS");
            entity.Property(e => e.Ruta)
                .IsRequired()
                .HasMaxLength(255)
                .IsFixedLength()
                .HasColumnName("RUTA");
            entity.Property(e => e.SeBajoApp)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("SE_BAJO_APP");
            entity.Property(e => e.SeDejaMismoSim)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("SE_DEJA_MISMO_SIM");
            entity.Property(e => e.SiReqPromo)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("SI_REQ_PROMO");
            entity.Property(e => e.SimInstalacion)
                .HasMaxLength(21)
                .IsFixedLength()
                .HasColumnName("SIM_INSTALACION");
            entity.Property(e => e.SimRetiro)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("SIM_RETIRO");
            entity.Property(e => e.TapaInstalacion)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("TAPA_INSTALACION");
            entity.Property(e => e.TapaRetiro)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("TAPA_RETIRO");
            entity.Property(e => e.Tecnico)
                .IsRequired()
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("TECNICO");
            entity.Property(e => e.Telefono1)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("TELEFONO_1");
            entity.Property(e => e.Telefono2)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("TELEFONO_2");
            entity.Property(e => e.Tipo)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("TIPO");
            entity.Property(e => e.TipoAtencion)
                .IsRequired()
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("TIPO_ATENCION");
            entity.Property(e => e.VersionInstalacion)
                .HasMaxLength(15)
                .IsFixedLength()
                .HasColumnName("VERSION_INSTALACION");
            entity.Property(e => e.VersionRetiro)
                .HasMaxLength(15)
                .IsFixedLength()
                .HasColumnName("VERSION_RETIRO");
            entity.Property(e => e.YearCierre)
                .IsRequired()
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("YEAR_CIERRE");
        });

        modelBuilder.Entity<BdCargaCodigoRechazo>(entity =>
        {
            entity.HasKey(e => e.IdCargaCodigoRechazo).HasName("PK__BD_CARGA__9461935AF3B0596E");

            entity.ToTable("BD_CARGA_CODIGO_RECHAZO");

            entity.Property(e => e.IdCargaCodigoRechazo).HasColumnName("ID_CARGA_CODIGO_RECHAZO");
            entity.Property(e => e.DescError)
                .IsUnicode(false)
                .HasColumnName("DESC_ERROR");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdCarga).HasColumnName("ID_CARGA");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.NoAr)
                .IsUnicode(false)
                .HasColumnName("NO_AR");
            entity.Property(e => e.Status)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdCargaEnviosDhlErrore>(entity =>
        {
            entity.HasKey(e => e.IdCargaEnvioDhlError).HasName("PK__BD_CARGA__62D6306DF418DE4F");

            entity.ToTable("BD_CARGA_ENVIOS_DHL_ERRORES");

            entity.Property(e => e.IdCargaEnvioDhlError).HasColumnName("ID_CARGA_ENVIO_DHL_ERROR");
            entity.Property(e => e.Error)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ERROR");
            entity.Property(e => e.IdCargaEnvioDhl).HasColumnName("ID_CARGA_ENVIO_DHL");
            entity.Property(e => e.NoGuia)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_GUIA");
        });

        modelBuilder.Entity<BdCargaEnviosDhlPaso>(entity =>
        {
            entity.HasKey(e => e.IdCargaEnvioDhl).HasName("PK__BD_CARGA__BC7F1400F3F8A6F1");

            entity.ToTable("BD_CARGA_ENVIOS_DHL_PASO", tb => tb.HasTrigger("TR_VALIDAR_DUPLICADOS"));

            entity.Property(e => e.IdCargaEnvioDhl).HasColumnName("ID_CARGA_ENVIO_DHL");
            entity.Property(e => e.Des)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DES");
            entity.Property(e => e.Descuento)
                .HasColumnType("decimal(8, 2)")
                .HasColumnName("DESCUENTO");
            entity.Property(e => e.Destinatario)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESTINATARIO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.FecEnvio)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ENVIO");
            entity.Property(e => e.Ff)
                .HasColumnType("decimal(8, 2)")
                .HasColumnName("FF");
            entity.Property(e => e.Fletes)
                .HasColumnType("decimal(8, 2)")
                .HasColumnName("FLETES");
            entity.Property(e => e.IdCarga).HasColumnName("ID_CARGA");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.ImpIva)
                .HasColumnType("decimal(8, 2)")
                .HasColumnName("IMP_IVA");
            entity.Property(e => e.ImporteNeto)
                .HasColumnType("decimal(8, 2)")
                .HasColumnName("IMPORTE_NETO");
            entity.Property(e => e.IsProcesado).HasColumnName("IS_PROCESADO");
            entity.Property(e => e.Iva)
                .HasColumnType("decimal(8, 2)")
                .HasColumnName("IVA");
            entity.Property(e => e.Kilos)
                .HasColumnType("decimal(8, 2)")
                .HasColumnName("KILOS");
            entity.Property(e => e.Moneda)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MONEDA");
            entity.Property(e => e.NoFactura)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NO_FACTURA");
            entity.Property(e => e.NoGuia)
                .IsUnicode(false)
                .HasColumnName("NO_GUIA");
            entity.Property(e => e.NoReferencia)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NO_REFERENCIA");
            entity.Property(e => e.Oo)
                .HasColumnType("decimal(8, 2)")
                .HasColumnName("OO");
            entity.Property(e => e.Org)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ORG");
            entity.Property(e => e.Producto)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PRODUCTO");
            entity.Property(e => e.Proyecto)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("PROYECTO");
            entity.Property(e => e.Pza).HasColumnName("PZA");
            entity.Property(e => e.Region)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("REGION");
            entity.Property(e => e.Remitente)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("REMITENTE");
            entity.Property(e => e.Seguro)
                .HasColumnType("decimal(8, 2)")
                .HasColumnName("SEGURO");
            entity.Property(e => e.Ye).HasColumnName("YE");
            entity.Property(e => e.ZonaProd)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZONA_PROD");
        });

        modelBuilder.Entity<BdCargaEnviosEstafetaPaso>(entity =>
        {
            entity.HasKey(e => e.IdCargaEnvioEstafetaPaso).HasName("PK__BD_CARGA__020B7B5CABCED9CF");

            entity.ToTable("BD_CARGA_ENVIOS_ESTAFETA_PASO");

            entity.Property(e => e.IdCargaEnvioEstafetaPaso).HasColumnName("ID_CARGA_ENVIO_ESTAFETA_PASO");
            entity.Property(e => e.AltoCm).HasColumnName("ALTO_CM");
            entity.Property(e => e.AnchoCm).HasColumnName("ANCHO_CM");
            entity.Property(e => e.Dest)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DEST");
            entity.Property(e => e.DifKilos)
                .HasColumnType("decimal(8, 2)")
                .HasColumnName("DIF_KILOS");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.FecEntrega)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ENTREGA");
            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");
            entity.Property(e => e.Guia)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("GUIA");
            entity.Property(e => e.IdCarga).HasColumnName("ID_CARGA");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.IsProcesado).HasColumnName("IS_PROCESADO");
            entity.Property(e => e.LargoCm).HasColumnName("LARGO_CM");
            entity.Property(e => e.MontoSp)
                .HasColumnType("decimal(8, 2)")
                .HasColumnName("MONTO_SP");
            entity.Property(e => e.MtoCbServ)
                .HasColumnType("decimal(8, 2)")
                .HasColumnName("MTO_CB_SERV");
            entity.Property(e => e.MtoServ)
                .HasColumnType("decimal(8, 2)")
                .HasColumnName("MTO_SERV");
            entity.Property(e => e.Orig)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ORIG");
            entity.Property(e => e.Peso)
                .HasColumnType("decimal(8, 2)")
                .HasColumnName("PESO");
            entity.Property(e => e.PesoFactura)
                .HasColumnType("decimal(8, 2)")
                .HasColumnName("PESO_FACTURA");
            entity.Property(e => e.Recibe)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("RECIBE");
            entity.Property(e => e.Referencia)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("REFERENCIA");
            entity.Property(e => e.Sobrepeso)
                .HasColumnType("decimal(8, 2)")
                .HasColumnName("SOBREPESO");
            entity.Property(e => e.TiempoEntrega).HasColumnName("TIEMPO_ENTREGA");
            entity.Property(e => e.TipoEmpaque)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("TIPO_EMPAQUE");
            entity.Property(e => e.VolReal)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("VOL_REAL");
            entity.Property(e => e.Zona).HasColumnName("ZONA");
        });

        modelBuilder.Entity<BdCargaLayoudMasivo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_CARGA_LAYOUD_MASIVO");

            entity.HasIndex(e => e.IdAr, "missing_index_120_119");

            entity.HasIndex(e => new { e.IdAr, e.IdCarga }, "missing_index_195_194");

            entity.Property(e => e.Afiliacion)
                .IsUnicode(false)
                .HasColumnName("AFILIACION");
            entity.Property(e => e.AfiliacionAmex)
                .IsUnicode(false)
                .HasColumnName("AFILIACION_AMEX");
            entity.Property(e => e.Ar)
                .IsUnicode(false)
                .HasColumnName("AR");
            entity.Property(e => e.Bitacora)
                .IsUnicode(false)
                .HasColumnName("BITACORA");
            entity.Property(e => e.Caja)
                .IsUnicode(false)
                .HasColumnName("CAJA");
            entity.Property(e => e.Colonia)
                .IsUnicode(false)
                .HasColumnName("COLONIA");
            entity.Property(e => e.Concepto)
                .IsUnicode(false)
                .HasColumnName("CONCEPTO");
            entity.Property(e => e.Contacto1)
                .IsUnicode(false)
                .HasColumnName("CONTACTO1");
            entity.Property(e => e.Contacto2)
                .IsUnicode(false)
                .HasColumnName("CONTACTO2");
            entity.Property(e => e.Cp)
                .IsUnicode(false)
                .HasColumnName("CP");
            entity.Property(e => e.DescCorta)
                .IsUnicode(false)
                .HasColumnName("DESC_CORTA");
            entity.Property(e => e.DescEquipo)
                .IsUnicode(false)
                .HasColumnName("DESC_EQUIPO");
            entity.Property(e => e.Direccion)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");
            entity.Property(e => e.DomicilioAlt)
                .IsUnicode(false)
                .HasColumnName("DOMICILIO_ALT");
            entity.Property(e => e.Ejecutivo)
                .IsUnicode(false)
                .HasColumnName("EJECUTIVO");
            entity.Property(e => e.Email)
                .IsUnicode(false)
                .HasColumnName("EMAIL");
            entity.Property(e => e.Email2)
                .IsUnicode(false)
                .HasColumnName("EMAIL2");
            entity.Property(e => e.Emailchgb)
                .IsUnicode(false)
                .HasColumnName("EMAILCHGB");
            entity.Property(e => e.Estado)
                .IsUnicode(false)
                .HasColumnName("ESTADO");
            entity.Property(e => e.FechaInicio)
                .IsUnicode(false)
                .HasColumnName("FECHA_INICIO");
            entity.Property(e => e.FolioDeTelecargaAmex)
                .IsUnicode(false)
                .HasColumnName("FOLIO_DE_TELECARGA_AMEX");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IdCarga).HasColumnName("ID_CARGA");
            entity.Property(e => e.IdCargaLayoudMasivo)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_CARGA_LAYOUD_MASIVO");
            entity.Property(e => e.IdEquipo)
                .IsUnicode(false)
                .HasColumnName("ID_EQUIPO");
            entity.Property(e => e.IdSegmento)
                .IsUnicode(false)
                .HasColumnName("ID_SEGMENTO");
            entity.Property(e => e.Negocio)
                .IsUnicode(false)
                .HasColumnName("NEGOCIO");
            entity.Property(e => e.NotasRemedy)
                .IsUnicode(false)
                .HasColumnName("NOTAS_REMEDY");
            entity.Property(e => e.Poblacion)
                .IsUnicode(false)
                .HasColumnName("POBLACION");
            entity.Property(e => e.Producto)
                .IsUnicode(false)
                .HasColumnName("PRODUCTO");
            entity.Property(e => e.Proyecto)
                .IsUnicode(false)
                .HasColumnName("PROYECTO");
            entity.Property(e => e.Rfc)
                .IsUnicode(false)
                .HasColumnName("RFC");
            entity.Property(e => e.Rollos)
                .IsUnicode(false)
                .HasColumnName("ROLLOS");
            entity.Property(e => e.Sintoma)
                .IsUnicode(false)
                .HasColumnName("SINTOMA");
            entity.Property(e => e.Sucursal)
                .IsUnicode(false)
                .HasColumnName("SUCURSAL");
            entity.Property(e => e.Sucursal2)
                .IsUnicode(false)
                .HasColumnName("SUCURSAL2");
            entity.Property(e => e.TAfiliacion)
                .IsUnicode(false)
                .HasColumnName("T_AFILIACION");
            entity.Property(e => e.Telefono)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");
            entity.Property(e => e.TipoAb)
                .IsUnicode(false)
                .HasColumnName("TIPO_AB");
            entity.Property(e => e.Vip)
                .IsUnicode(false)
                .HasColumnName("VIP");
        });

        modelBuilder.Entity<BdCargaUnidadNoInventario>(entity =>
        {
            entity.HasKey(e => e.IdCargaUnidadNoInventario).HasName("PK__BD_CARGA__E3B81BA20B8F49BE");

            entity.ToTable("BD_CARGA_UNIDAD_NO_INVENTARIO");

            entity.Property(e => e.IdCargaUnidadNoInventario).HasColumnName("ID_CARGA_UNIDAD_NO_INVENTARIO");
            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");
            entity.Property(e => e.NoInventarion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NO_INVENTARION");
        });

        modelBuilder.Entity<BdCargasConfirmacione>(entity =>
        {
            entity.HasKey(e => e.IdCargaConfirmaciones).HasName("PK_BD_CARGAS_CONFIRMACION");

            entity.ToTable("BD_CARGAS_CONFIRMACIONES");

            entity.HasIndex(e => new { e.Status, e.IdStatusCargaConfirmaciones }, "IX_MI_BD_CARGAS_CONFIRMACIONES_5628_5627");

            entity.Property(e => e.IdCargaConfirmaciones).HasColumnName("ID_CARGA_CONFIRMACIONES");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdStatusCargaConfirmaciones).HasColumnName("ID_STATUS_CARGA_CONFIRMACIONES");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.NombreCargaConfirmaciones)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NOMBRE_CARGA_CONFIRMACIONES");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdCargasDiagnosticadum>(entity =>
        {
            entity.HasKey(e => e.IdCargasDiagnosticada).HasName("PK__BD_CARGA__F073D695931195A4");

            entity.ToTable("BD_CARGAS_DIAGNOSTICADA");

            entity.Property(e => e.IdCargasDiagnosticada).HasColumnName("ID_CARGAS_DIAGNOSTICADA");
            entity.Property(e => e.FechaAlta)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ALTA");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.IsReparacion).HasColumnName("IS_REPARACION");
        });

        modelBuilder.Entity<BdCargasEquipo>(entity =>
        {
            entity.HasKey(e => e.IdCargaEquipo).HasName("PK__BD_CARGA__CD35B7D4765C8BF8");

            entity.ToTable("BD_CARGAS_EQUIPO");

            entity.Property(e => e.IdCargaEquipo).HasColumnName("ID_CARGA_EQUIPO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
        });

        modelBuilder.Entity<BdCargasInstalacionRetiro>(entity =>
        {
            entity.HasKey(e => e.IdCargasInstalacionRetiros).HasName("PK__BD_CARGA__E4F02AC079405B0F");

            entity.ToTable("BD_CARGAS_INSTALACION_RETIROS");

            entity.Property(e => e.IdCargasInstalacionRetiros).HasColumnName("ID_CARGAS_INSTALACION_RETIROS");
            entity.Property(e => e.FechaAlta)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ALTA");
            entity.Property(e => e.IdUsuarioCarga).HasColumnName("ID_USUARIO_CARGA");
            entity.Property(e => e.Status)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdCargasMasiva>(entity =>
        {
            entity.HasKey(e => e.IdCargaMasiva);

            entity.ToTable("BD_CARGAS_MASIVAS");

            entity.Property(e => e.IdCargaMasiva).HasColumnName("ID_CARGA_MASIVA");
            entity.Property(e => e.DescAttach)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_ATTACH");
            entity.Property(e => e.FechaCarga)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_CARGA");
            entity.Property(e => e.IdArchivoAttach).HasColumnName("ID_ARCHIVO_ATTACH");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdCargasMovRengenierium>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_CARGAS_MOV_RENGENIERIA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");
            entity.Property(e => e.IdCargasMovRengenieria)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_CARGAS_MOV_RENGENIERIA");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
        });

        modelBuilder.Entity<BdCargasNegociosOtrosCliente>(entity =>
        {
            entity.HasKey(e => e.IdCargasNegociosOtrosClientes).HasName("PK__BD_CARGA__43028EFC37B5894F");

            entity.ToTable("BD_CARGAS_NEGOCIOS_OTROS_CLIENTES");

            entity.Property(e => e.IdCargasNegociosOtrosClientes).HasColumnName("ID_CARGAS_NEGOCIOS_OTROS_CLIENTES");
            entity.Property(e => e.FechaAlta)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ALTA");
            entity.Property(e => e.IdAttach).HasColumnName("ID_ATTACH");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
        });

        modelBuilder.Entity<BdCargasOdtElavon>(entity =>
        {
            entity.HasKey(e => e.IdCarga);

            entity.ToTable("BD_CARGAS_ODT_ELAVON", tb => tb.HasTrigger("PROCESA_ODT_CARGADAS"));

            entity.HasIndex(e => new { e.IdProceso, e.Afiliacion }, "missing_index_21_20");

            entity.HasIndex(e => e.IdProceso, "missing_index_24_23");

            entity.HasIndex(e => e.Estatus, "missing_index_3628_3627");

            entity.HasIndex(e => e.Ar, "missing_index_3630_3629");

            entity.HasIndex(e => e.Estatus, "missing_index_3632_3631");

            entity.HasIndex(e => e.IdProceso, "missing_index_3658_3657");

            entity.HasIndex(e => new { e.IdProceso, e.Estatus }, "missing_index_3660_3659");

            entity.HasIndex(e => e.IdProceso, "missing_index_3663_3662");

            entity.HasIndex(e => e.Estatus, "missing_index_3669_3668");

            entity.HasIndex(e => new { e.Ar, e.Estatus }, "missing_index_3722_3721");

            entity.HasIndex(e => e.DescCorta, "missing_index_3829_3828");

            entity.HasIndex(e => e.Concepto, "missing_index_3831_3830");

            entity.HasIndex(e => e.IdSegmento, "missing_index_3899_3898");

            entity.HasIndex(e => e.Estatus, "missing_index_3986_3985");

            entity.HasIndex(e => e.IdProceso, "missing_index_4082_4081");

            entity.HasIndex(e => e.Afiliacion, "missing_index_4092_4091");

            entity.HasIndex(e => new { e.Afiliacion, e.Idproyecto }, "missing_index_4104_4103");

            entity.HasIndex(e => new { e.IdProceso, e.Ar }, "missing_index_4_3");

            entity.Property(e => e.IdCarga).HasColumnName("ID_CARGA");
            entity.Property(e => e.Afiliacion)
                .HasMaxLength(20)
                .IsFixedLength();
            entity.Property(e => e.AfiliacionAmex)
                .HasMaxLength(50)
                .IsFixedLength()
                .HasColumnName("AFILIACION_AMEX");
            entity.Property(e => e.Ar)
                .HasMaxLength(50)
                .IsFixedLength()
                .HasColumnName("AR");
            entity.Property(e => e.Caja)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("CAJA");
            entity.Property(e => e.CodigoAfiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CODIGO_AFILIACION");
            entity.Property(e => e.Colonia)
                .HasMaxLength(200)
                .IsFixedLength();
            entity.Property(e => e.Concepto)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("CONCEPTO");
            entity.Property(e => e.Contacto1)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("CONTACTO1");
            entity.Property(e => e.Contacto2)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("CONTACTO2");
            entity.Property(e => e.Correo)
                .HasMaxLength(200)
                .IsFixedLength()
                .HasColumnName("CORREO");
            entity.Property(e => e.Cp)
                .HasMaxLength(6)
                .IsFixedLength()
                .HasColumnName("CP");
            entity.Property(e => e.DescCorta)
                .HasMaxLength(255)
                .IsFixedLength();
            entity.Property(e => e.DescEquipo)
                .HasMaxLength(255)
                .IsFixedLength();
            entity.Property(e => e.Direccion)
                .HasMaxLength(200)
                .IsFixedLength();
            entity.Property(e => e.Ejecutivo)
                .HasMaxLength(80)
                .IsFixedLength()
                .HasColumnName("EJECUTIVO");
            entity.Property(e => e.EmailChgb)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("EmailCHGB");
            entity.Property(e => e.Estado)
                .HasMaxLength(50)
                .IsFixedLength();
            entity.Property(e => e.Estatus)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("ESTATUS");
            entity.Property(e => e.Extra)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("EXTRA");
            entity.Property(e => e.FechaInicio)
                .HasMaxLength(30)
                .IsFixedLength();
            entity.Property(e => e.FileName)
                .HasMaxLength(255)
                .IsFixedLength()
                .HasColumnName("FILE_NAME");
            entity.Property(e => e.FolioTelecargaAmex)
                .HasMaxLength(50)
                .IsFixedLength()
                .HasColumnName("FOLIO_TELECARGA_AMEX");
            entity.Property(e => e.IdEquipo)
                .HasMaxLength(50)
                .IsFixedLength();
            entity.Property(e => e.IdProceso)
                .IsRequired()
                .HasMaxLength(50)
                .IsFixedLength()
                .HasColumnName("ID_PROCESO");
            entity.Property(e => e.IdSegmento)
                .HasMaxLength(50)
                .IsFixedLength();
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.Idproyecto)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("IDProyecto");
            entity.Property(e => e.Mensaje).HasColumnName("MENSAJE");
            entity.Property(e => e.Negocio)
                .HasMaxLength(200)
                .IsFixedLength();
            entity.Property(e => e.NotasRemedy)
                .HasMaxLength(255)
                .IsFixedLength();
            entity.Property(e => e.Poblacion)
                .HasMaxLength(200)
                .IsFixedLength();
            entity.Property(e => e.Producto)
                .HasMaxLength(50)
                .IsFixedLength()
                .HasColumnName("producto");
            entity.Property(e => e.Rfc)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("RFC");
            entity.Property(e => e.Rollos)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("ROLLOS");
            entity.Property(e => e.Ruta)
                .HasMaxLength(200)
                .IsFixedLength()
                .HasColumnName("RUTA");
            entity.Property(e => e.SegmentoElavon)
                .HasMaxLength(70)
                .IsFixedLength()
                .HasColumnName("SEGMENTO_ELAVON");
            entity.Property(e => e.Sucursal)
                .HasMaxLength(80)
                .IsFixedLength()
                .HasColumnName("SUCURSAL");
            entity.Property(e => e.TAfiliacion)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("T_AFILIACION");
            entity.Property(e => e.Telefono)
                .HasMaxLength(15)
                .IsFixedLength();
            entity.Property(e => e.Vip)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("VIP");
        });

        modelBuilder.Entity<BdCargasOdtElavon25ago2022>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_CARGAS_ODT_ELAVON_25ago2022");

            entity.Property(e => e.Afiliacion)
                .HasMaxLength(20)
                .IsFixedLength();
            entity.Property(e => e.AfiliacionAmex)
                .HasMaxLength(50)
                .IsFixedLength()
                .HasColumnName("AFILIACION_AMEX");
            entity.Property(e => e.Ar)
                .HasMaxLength(50)
                .IsFixedLength()
                .HasColumnName("AR");
            entity.Property(e => e.Caja)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("CAJA");
            entity.Property(e => e.Colonia)
                .HasMaxLength(200)
                .IsFixedLength();
            entity.Property(e => e.Concepto)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("CONCEPTO");
            entity.Property(e => e.Contacto1)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("CONTACTO1");
            entity.Property(e => e.Contacto2)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("CONTACTO2");
            entity.Property(e => e.Correo)
                .HasMaxLength(200)
                .IsFixedLength()
                .HasColumnName("CORREO");
            entity.Property(e => e.Cp)
                .HasMaxLength(6)
                .IsFixedLength()
                .HasColumnName("CP");
            entity.Property(e => e.DescCorta)
                .HasMaxLength(255)
                .IsFixedLength();
            entity.Property(e => e.DescEquipo)
                .HasMaxLength(255)
                .IsFixedLength();
            entity.Property(e => e.Direccion)
                .HasMaxLength(200)
                .IsFixedLength();
            entity.Property(e => e.Ejecutivo)
                .HasMaxLength(80)
                .IsFixedLength()
                .HasColumnName("EJECUTIVO");
            entity.Property(e => e.EmailChgb)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("EmailCHGB");
            entity.Property(e => e.Estado)
                .HasMaxLength(50)
                .IsFixedLength();
            entity.Property(e => e.Estatus)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("ESTATUS");
            entity.Property(e => e.Extra)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("EXTRA");
            entity.Property(e => e.FechaInicio)
                .HasMaxLength(30)
                .IsFixedLength();
            entity.Property(e => e.FileName)
                .HasMaxLength(255)
                .IsFixedLength()
                .HasColumnName("FILE_NAME");
            entity.Property(e => e.FolioTelecargaAmex)
                .HasMaxLength(50)
                .IsFixedLength()
                .HasColumnName("FOLIO_TELECARGA_AMEX");
            entity.Property(e => e.IdCarga)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_CARGA");
            entity.Property(e => e.IdEquipo)
                .HasMaxLength(50)
                .IsFixedLength();
            entity.Property(e => e.IdProceso)
                .IsRequired()
                .HasMaxLength(50)
                .IsFixedLength()
                .HasColumnName("ID_PROCESO");
            entity.Property(e => e.IdSegmento)
                .HasMaxLength(50)
                .IsFixedLength();
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.Idproyecto)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("IDProyecto");
            entity.Property(e => e.Mensaje).HasColumnName("MENSAJE");
            entity.Property(e => e.Negocio)
                .HasMaxLength(200)
                .IsFixedLength();
            entity.Property(e => e.NotasRemedy)
                .HasMaxLength(255)
                .IsFixedLength();
            entity.Property(e => e.Poblacion)
                .HasMaxLength(200)
                .IsFixedLength();
            entity.Property(e => e.Producto)
                .HasMaxLength(50)
                .IsFixedLength()
                .HasColumnName("producto");
            entity.Property(e => e.Rfc)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("RFC");
            entity.Property(e => e.Rollos)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("ROLLOS");
            entity.Property(e => e.Ruta)
                .HasMaxLength(200)
                .IsFixedLength()
                .HasColumnName("RUTA");
            entity.Property(e => e.Sucursal)
                .HasMaxLength(80)
                .IsFixedLength()
                .HasColumnName("SUCURSAL");
            entity.Property(e => e.TAfiliacion)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("T_AFILIACION");
            entity.Property(e => e.Telefono)
                .HasMaxLength(15)
                .IsFixedLength();
            entity.Property(e => e.Vip)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("VIP");
        });

        modelBuilder.Entity<BdChangeMassiveStatus>(entity =>
        {
            entity.HasKey(e => e.IdChangeMassiveStatus).HasName("PK__BD_CHANG__46371A5FC374BDB2");

            entity.ToTable("BD_CHANGE_MASSIVE_STATUS");

            entity.HasIndex(e => new { e.IdCarga, e.NoSerie }, "missing_index_2242516_2242515");

            entity.Property(e => e.IdChangeMassiveStatus).HasColumnName("ID_CHANGE_MASSIVE_STATUS");
            entity.Property(e => e.Errores)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ERRORES");
            entity.Property(e => e.IdCarga).HasColumnName("ID_CARGA");
            entity.Property(e => e.IdStatus).HasColumnName("ID_STATUS");
            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");
            entity.Property(e => e.IsProcesado).HasColumnName("IS_PROCESADO");
            entity.Property(e => e.NoSerie)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");
        });

        modelBuilder.Entity<BdChangeStatusArPaso>(entity =>
        {
            entity.HasKey(e => e.IdChangeStatusAr).HasName("PK__BD_CHANG__08C1AF99A16E8898");

            entity.ToTable("BD_CHANGE_STATUS_AR_PASO");

            entity.Property(e => e.IdChangeStatusAr).HasColumnName("ID_CHANGE_STATUS_AR");
            entity.Property(e => e.Error)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ERROR");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IdCarga).HasColumnName("ID_CARGA");
            entity.Property(e => e.IdStatusAr).HasColumnName("ID_STATUS_AR");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
        });

        modelBuilder.Entity<BdClaveEstado>(entity =>
        {
            entity.HasKey(e => e.IdClaveEstado).HasName("PK_BD_ESTADO_CLAVE");

            entity.ToTable("BD_CLAVE_ESTADO");

            entity.Property(e => e.IdClaveEstado).HasColumnName("ID_CLAVE_ESTADO");
            entity.Property(e => e.Clave)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CLAVE");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdEstado).HasColumnName("ID_ESTADO");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");

            entity.HasOne(d => d.IdEstadoNavigation).WithMany(p => p.BdClaveEstados)
                .HasForeignKey(d => d.IdEstado)
                .HasConstraintName("FK_BD_CLAVE_ESTADO_SEPOMEX_ESTADOS");
        });

        modelBuilder.Entity<BdClienteModelo>(entity =>
        {
            entity.HasKey(e => e.IdClienteModelo);

            entity.ToTable("BD_CLIENTE_MODELO");

            entity.Property(e => e.IdClienteModelo).HasColumnName("ID_CLIENTE_MODELO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdModelo).HasColumnName("ID_MODELO");
            entity.Property(e => e.IdOrden).HasColumnName("ID_ORDEN");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.IsF11).HasColumnName("IS_F11");
        });

        modelBuilder.Entity<BdClienteModeloCambioStatusUnidad>(entity =>
        {
            entity.HasKey(e => e.IdClienteModeloCambioStatusUnidad);

            entity.ToTable("BD_CLIENTE_MODELO_CAMBIO_STATUS_UNIDAD");

            entity.Property(e => e.IdClienteModeloCambioStatusUnidad).HasColumnName("ID_CLIENTE_MODELO_CAMBIO_STATUS_UNIDAD");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdModelo).HasColumnName("ID_MODELO");
            entity.Property(e => e.IdStatusUnidadFrom).HasColumnName("ID_STATUS_UNIDAD_FROM");
            entity.Property(e => e.IdStatusUnidadTo).HasColumnName("ID_STATUS_UNIDAD_TO");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
        });

        modelBuilder.Entity<BdClienteProductoStatusAr>(entity =>
        {
            entity.HasKey(e => e.IdClienteProductoStatusAr);

            entity.ToTable("BD_CLIENTE_PRODUCTO_STATUS_AR");

            entity.Property(e => e.IdClienteProductoStatusAr).HasColumnName("ID_CLIENTE_PRODUCTO_STATUS_AR");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdProductoStatusAr).HasColumnName("ID_PRODUCTO_STATUS_AR");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");

            entity.HasOne(d => d.IdProductoStatusArNavigation).WithMany(p => p.BdClienteProductoStatusArs)
                .HasForeignKey(d => d.IdProductoStatusAr)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BD_CLIENTE_PRODUCTO_STATUS_AR_BD_PRODUCTO_STATUS_AR");
        });

        modelBuilder.Entity<BdClienteWeekhour>(entity =>
        {
            entity.HasKey(e => e.IdClienteWeekhour);

            entity.ToTable("BD_CLIENTE_WEEKHOUR");

            entity.Property(e => e.IdClienteWeekhour).HasColumnName("ID_CLIENTE_WEEKHOUR");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.IdWeekhour).HasColumnName("ID_WEEKHOUR");
        });

        modelBuilder.Entity<BdClosedServicesSendSf>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__BdClosed__3214EC07C97D2DA4");

            entity.ToTable("BdClosedServicesSendSf");

            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.Error)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.SentDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<BdColumnsLayout>(entity =>
        {
            entity.HasKey(e => e.IdColumnLayout).HasName("PK__BD_COLUM__15908F6A731EB31E");

            entity.ToTable("BD_COLUMNS_LAYOUTS");

            entity.Property(e => e.IdColumnLayout).HasColumnName("ID_COLUMN_LAYOUT");
            entity.Property(e => e.DescColumnLayout)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_COLUMN_LAYOUT");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdLayout).HasColumnName("ID_LAYOUT");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Orden).HasColumnName("ORDEN");
            entity.Property(e => e.Status)
                .HasDefaultValueSql("((1))")
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdComentarioAr>(entity =>
        {
            entity.HasKey(e => e.IdComentarioAr);

            entity.ToTable("BD_COMENTARIO_AR", tb => tb.HasTrigger("TR_COMENTARIO_NO_0"));

            entity.HasIndex(e => e.IdAr, "IX_BD_COMENTARIO_AR_ID_AR").HasFillFactor(80);

            entity.Property(e => e.IdComentarioAr).HasColumnName("ID_COMENTARIO_AR");
            entity.Property(e => e.DescComentarioAr)
                .HasMaxLength(3000)
                .IsUnicode(false)
                .HasColumnName("DESC_COMENTARIO_AR");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IdTarea).HasColumnName("ID_TAREA");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.IdUsuarioOki).HasColumnName("ID_USUARIO_OKI");
            entity.Property(e => e.NotifyBancomer)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("NOTIFY_BANCOMER");
        });

        modelBuilder.Entity<BdComentariosReparacion>(entity =>
        {
            entity.HasKey(e => e.IdComentariosReparacion).HasName("PK__BD_COMEN__6731F34E5B68FA00");

            entity.ToTable("BD_COMENTARIOS_REPARACION");

            entity.Property(e => e.IdComentariosReparacion).HasColumnName("ID_COMENTARIOS_REPARACION");
            entity.Property(e => e.Comentario)
                .IsUnicode(false)
                .HasColumnName("COMENTARIO");
            entity.Property(e => e.FechaAlta)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ALTA");
            entity.Property(e => e.IdReparacionUnidad).HasColumnName("ID_REPARACION_UNIDAD");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Status)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdComparativoWincorPaso>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_COMPARATIVO_WINCOR_PASO");

            entity.Property(e => e.Asignacion)
                .IsUnicode(false)
                .HasColumnName("ASIGNACION");
            entity.Property(e => e.CP)
                .IsUnicode(false)
                .HasColumnName("C_P");
            entity.Property(e => e.CausaCancelacion)
                .IsUnicode(false)
                .HasColumnName("CAUSA_CANCELACION");
            entity.Property(e => e.CentroDeServicio)
                .IsUnicode(false)
                .HasColumnName("CENTRO_DE_SERVICIO");
            entity.Property(e => e.CerradoCorrectamente)
                .IsUnicode(false)
                .HasColumnName("CERRADO_CORRECTAMENTE");
            entity.Property(e => e.Ciudad)
                .IsUnicode(false)
                .HasColumnName("CIUDAD");
            entity.Property(e => e.Cliente)
                .IsUnicode(false)
                .HasColumnName("CLIENTE");
            entity.Property(e => e.CodigoIntervencion)
                .IsUnicode(false)
                .HasColumnName("CODIGO_INTERVENCION");
            entity.Property(e => e.CumplioSlaTiempoDeAtencion)
                .IsUnicode(false)
                .HasColumnName("CUMPLIO_SLA_TIEMPO_DE_ATENCION");
            entity.Property(e => e.CumplioSlaTiempoDeSolucion)
                .IsUnicode(false)
                .HasColumnName("CUMPLIO_SLA_TIEMPO_DE_SOLUCION");
            entity.Property(e => e.DescEquipo)
                .IsUnicode(false)
                .HasColumnName("DESC_EQUIPO");
            entity.Property(e => e.DescripcionDeLaFalla)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_DE_LA_FALLA");
            entity.Property(e => e.Direccion)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");
            entity.Property(e => e.Estado)
                .IsUnicode(false)
                .HasColumnName("ESTADO");
            entity.Property(e => e.Estatus)
                .IsUnicode(false)
                .HasColumnName("ESTATUS");
            entity.Property(e => e.FallaReportada)
                .IsUnicode(false)
                .HasColumnName("FALLA_REPORTADA");
            entity.Property(e => e.FechaCancelacion)
                .IsUnicode(false)
                .HasColumnName("FECHA_CANCELACION");
            entity.Property(e => e.FechaDeCierre)
                .IsUnicode(false)
                .HasColumnName("FECHA_DE_CIERRE");
            entity.Property(e => e.FechaDeReporte)
                .IsUnicode(false)
                .HasColumnName("FECHA_DE_REPORTE");
            entity.Property(e => e.FechaFinTrabajoIngeniero)
                .IsUnicode(false)
                .HasColumnName("FECHA_FIN_TRABAJO_INGENIERO");
            entity.Property(e => e.Grupo)
                .IsUnicode(false)
                .HasColumnName("GRUPO");
            entity.Property(e => e.Helpdesk)
                .IsUnicode(false)
                .HasColumnName("HELPDESK");
            entity.Property(e => e.Localidad)
                .IsUnicode(false)
                .HasColumnName("LOCALIDAD");
            entity.Property(e => e.NoDeReasignaciones)
                .IsUnicode(false)
                .HasColumnName("NO_DE_REASIGNACIONES");
            entity.Property(e => e.NoDeRechazos)
                .IsUnicode(false)
                .HasColumnName("NO_DE_RECHAZOS");
            entity.Property(e => e.NoDeVisitas)
                .IsUnicode(false)
                .HasColumnName("NO_DE_VISITAS");
            entity.Property(e => e.NoEi)
                .IsUnicode(false)
                .HasColumnName("No_EI");
            entity.Property(e => e.NoTicket)
                .IsUnicode(false)
                .HasColumnName("NO_TICKET");
            entity.Property(e => e.NotasDeLaResolucionDelProblema)
                .IsUnicode(false)
                .HasColumnName("NOTAS_DE_LA_RESOLUCION_DEL_PROBLEMA");
            entity.Property(e => e.NotasInformativas)
                .IsUnicode(false)
                .HasColumnName("NOTAS_INFORMATIVAS");
            entity.Property(e => e.NotasInternas)
                .IsUnicode(false)
                .HasColumnName("NOTAS_INTERNAS");
            entity.Property(e => e.PrimerAsignadoPorConfirmar)
                .IsUnicode(false)
                .HasColumnName("PRIMER_ASIGNADO_POR_CONFIRMAR");
            entity.Property(e => e.PrimerPorAsignacion)
                .IsUnicode(false)
                .HasColumnName("PRIMER_POR_ASIGNACION");
            entity.Property(e => e.PrimerTiempoDeLlegada)
                .IsUnicode(false)
                .HasColumnName("PRIMER_TIEMPO_DE_LLEGADA");
            entity.Property(e => e.PrimerTravel)
                .IsUnicode(false)
                .HasColumnName("PRIMER_TRAVEL");
            entity.Property(e => e.PrimerWorking)
                .IsUnicode(false)
                .HasColumnName("PRIMER_WORKING");
            entity.Property(e => e.Serial)
                .IsUnicode(false)
                .HasColumnName("SERIAL");
            entity.Property(e => e.Severidad)
                .IsUnicode(false)
                .HasColumnName("SEVERIDAD");
            entity.Property(e => e.TagId)
                .IsUnicode(false)
                .HasColumnName("TAG_ID");
            entity.Property(e => e.Tarea)
                .IsUnicode(false)
                .HasColumnName("TAREA");
            entity.Property(e => e.Tecnico)
                .IsUnicode(false)
                .HasColumnName("TECNICO");
            entity.Property(e => e.TerritorioRegion)
                .IsUnicode(false)
                .HasColumnName("TERRITORIO_REGION");
            entity.Property(e => e.TiempoBajoSla)
                .IsUnicode(false)
                .HasColumnName("Tiempo_Bajo_SLA");
            entity.Property(e => e.TiempoMaximoDeRespuesta)
                .IsUnicode(false)
                .HasColumnName("TIEMPO_MAXIMO_DE_RESPUESTA");
            entity.Property(e => e.TiempoMaximoDeRespuestaCrm)
                .IsUnicode(false)
                .HasColumnName("TIEMPO_MAXIMO_DE_RESPUESTA_CRM");
            entity.Property(e => e.TiempoMaximoDeSolucion)
                .IsUnicode(false)
                .HasColumnName("TIEMPO_MAXIMO_DE_SOLUCION");
            entity.Property(e => e.TiempoMaximoDeSolucionCrm)
                .IsUnicode(false)
                .HasColumnName("TIEMPO_MAXIMO_DE_SOLUCION_CRM");
            entity.Property(e => e.TipoDeIncidenteUrgencia)
                .IsUnicode(false)
                .HasColumnName("TIPO_DE_INCIDENTE_URGENCIA");
        });

        modelBuilder.Entity<BdComprobacionSolicitudesViatico>(entity =>
        {
            entity.HasKey(e => e.IdComprobacionSolicitudesViaticos);

            entity.ToTable("BD_COMPROBACION_SOLICITUDES_VIATICOS");

            entity.HasIndex(e => new { e.IdUsuarioSolicitado, e.Status, e.FecCorteSolicitudesViaticos }, "IX_MI_BD_COMPROBACION_SOLICITUDES_VIATICOS_1826_1825");

            entity.Property(e => e.IdComprobacionSolicitudesViaticos).HasColumnName("ID_COMPROBACION_SOLICITUDES_VIATICOS");
            entity.Property(e => e.FecCorteSolicitudesViaticos)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_CORTE_SOLICITUDES_VIATICOS");
            entity.Property(e => e.IdUsuarioSolicitado).HasColumnName("ID_USUARIO_SOLICITADO");
            entity.Property(e => e.MontoComprobado)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("MONTO_COMPROBADO");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdComprobacionViatico>(entity =>
        {
            entity.HasKey(e => e.IdComprobacionViaticos);

            entity.ToTable("BD_COMPROBACION_VIATICOS");

            entity.HasIndex(e => new { e.IdComprobacionViaticos, e.ArchivoPdf, e.Estatus, e.IdRazon, e.IdSolicitudViaticos, e.Status }, "IX_BD_COMPROBACION_VIATICOS");

            entity.Property(e => e.IdComprobacionViaticos).HasColumnName("ID_COMPROBACION_VIATICOS");
            entity.Property(e => e.ArchivoPdf)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ARCHIVO_PDF");
            entity.Property(e => e.ArchivoXml)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ARCHIVO_XML");
            entity.Property(e => e.Estatus)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("ESTATUS");
            entity.Property(e => e.IdRazon).HasColumnName("ID_RAZON");
            entity.Property(e => e.IdSolicitudViaticos).HasColumnName("ID_SOLICITUD_VIATICOS");
            entity.Property(e => e.IdTipoViatico).HasColumnName("ID_TIPO_VIATICO");
            entity.Property(e => e.MontoAprobado)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("MONTO_APROBADO");
            entity.Property(e => e.MontoComprobado)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("MONTO_COMPROBADO");
            entity.Property(e => e.Status).HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdComprobacionViaticos2>(entity =>
        {
            entity.HasKey(e => e.IdComprobacionViaticos);

            entity.ToTable("BD_COMPROBACION_VIATICOS_2");

            entity.Property(e => e.IdComprobacionViaticos).HasColumnName("ID_COMPROBACION_VIATICOS");
            entity.Property(e => e.ArchivoPdf)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ARCHIVO_PDF");
            entity.Property(e => e.ArchivoXml)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ARCHIVO_XML");
            entity.Property(e => e.Estatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ESTATUS");
            entity.Property(e => e.IdRazon).HasColumnName("ID_RAZON");
            entity.Property(e => e.IdSolicitudViaticos).HasColumnName("ID_SOLICITUD_VIATICOS");
            entity.Property(e => e.IdTipoViatico).HasColumnName("ID_TIPO_VIATICO");
            entity.Property(e => e.IdViatico).HasColumnName("ID_VIATICO");
            entity.Property(e => e.IsAprobado).HasColumnName("IS_APROBADO");
            entity.Property(e => e.IsValidadorXml).HasColumnName("IS_VALIDADOR_XML");
            entity.Property(e => e.MontoAprobado)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("MONTO_APROBADO");
            entity.Property(e => e.MontoComprobado)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("MONTO_COMPROBADO");
            entity.Property(e => e.Status).HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdCompromiso>(entity =>
        {
            entity.HasKey(e => e.IdCompromiso);

            entity.ToTable("BD_COMPROMISOS");

            entity.Property(e => e.IdCompromiso).HasColumnName("ID_COMPROMISO");
            entity.Property(e => e.Calif).HasColumnName("CALIF");
            entity.Property(e => e.CodigoControl)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CODIGO_CONTROL");
            entity.Property(e => e.DescCompromiso)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_COMPROMISO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.FecFin)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_FIN");
            entity.Property(e => e.FecIni)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_INI");
            entity.Property(e => e.FecRealTermino)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_REAL_TERMINO");
            entity.Property(e => e.IdArea).HasColumnName("ID_AREA");
            entity.Property(e => e.IdPrioridades).HasColumnName("ID_PRIORIDADES");
            entity.Property(e => e.IdUsuarioResponsable).HasColumnName("ID_USUARIO_RESPONSABLE");
            entity.Property(e => e.IdUsuarioResponsableCompromiso).HasColumnName("ID_USUARIO_RESPONSABLE_COMPROMISO");
            entity.Property(e => e.NombreJunta).HasColumnName("NOMBRE_JUNTA");
            entity.Property(e => e.Observaciones)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("OBSERVACIONES");
            entity.Property(e => e.Status).HasColumnName("STATUS");
            entity.Property(e => e.StatusCompromiso)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS_COMPROMISO");
        });

        modelBuilder.Entity<BdCompromisoBlog>(entity =>
        {
            entity.HasKey(e => e.IdCompromisosBlog);

            entity.ToTable("BD_COMPROMISO_BLOG");

            entity.Property(e => e.IdCompromisosBlog).HasColumnName("ID_COMPROMISOS_BLOG");
            entity.Property(e => e.Comentario)
                .IsUnicode(false)
                .HasColumnName("COMENTARIO");
            entity.Property(e => e.FechaAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_ALTA");
            entity.Property(e => e.IdCompromiso).HasColumnName("ID_COMPROMISO");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
        });

        modelBuilder.Entity<BdCompromisoResponsable>(entity =>
        {
            entity.HasKey(e => e.IdCompromisoResponsable);

            entity.ToTable("BD_COMPROMISO_RESPONSABLE");

            entity.Property(e => e.IdCompromisoResponsable).HasColumnName("ID_COMPROMISO_RESPONSABLE");
            entity.Property(e => e.IdArea).HasColumnName("ID_AREA");
            entity.Property(e => e.IdCompromiso).HasColumnName("ID_COMPROMISO");
            entity.Property(e => e.IdResponsable).HasColumnName("ID_RESPONSABLE");
        });

        modelBuilder.Entity<BdCompromisosAccione>(entity =>
        {
            entity.HasKey(e => e.IdCompromisosAcciones);

            entity.ToTable("BD_COMPROMISOS_ACCIONES");

            entity.Property(e => e.IdCompromisosAcciones).HasColumnName("ID_COMPROMISOS_ACCIONES");
            entity.Property(e => e.AccionConcluida).HasColumnName("ACCION_CONCLUIDA");
            entity.Property(e => e.DescAccion)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("DESC_ACCION");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdCompromiso).HasColumnName("ID_COMPROMISO");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Porcentaje).HasColumnName("PORCENTAJE");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdCompromisosCompromiso>(entity =>
        {
            entity.HasKey(e => e.IdCompromisosCompromiso);

            entity.ToTable("BD_COMPROMISOS_COMPROMISO");

            entity.Property(e => e.IdCompromisosCompromiso).HasColumnName("ID_COMPROMISOS_COMPROMISO");
            entity.Property(e => e.Compromiso)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("COMPROMISO");
            entity.Property(e => e.FechaAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_ALTA");
            entity.Property(e => e.IdCompromiso).HasColumnName("ID_COMPROMISO");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdConfigHorasCorte>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_CONFIG_HORAS_CORTE");

            entity.Property(e => e.Estatus)
                .IsUnicode(false)
                .HasColumnName("ESTATUS");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.HoraCorteEnviado)
                .IsUnicode(false)
                .HasColumnName("HORA_CORTE_ENVIADO");
            entity.Property(e => e.HoraCorteRecibido)
                .IsUnicode(false)
                .HasColumnName("HORA_CORTE_RECIBIDO");
            entity.Property(e => e.IdConfigHorasCorte)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_CONFIG_HORAS_CORTE");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
        });

        modelBuilder.Entity<BdConfigServiciosFallasPrimeraOdt>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_CONFIG_SERVICIOS_FALLAS_PRIMERA_ODT");

            entity.Property(e => e.FechaAlta)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ALTA");
            entity.Property(e => e.IdConfigServiciosFallasPrimeraOdt)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_CONFIG_SERVICIOS_FALLAS_PRIMERA_ODT");
            entity.Property(e => e.IdFalla).HasColumnName("ID_FALLA");
            entity.Property(e => e.IdServicio).HasColumnName("ID_SERVICIO");
            entity.Property(e => e.Status)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.UsuarioAlta).HasColumnName("USUARIO_ALTA");
        });

        modelBuilder.Entity<BdConfiguracionMensajerium>(entity =>
        {
            entity.HasKey(e => e.IdConfiguracion).HasName("PK__BD_CONFI__093CFA5F7A96450F");

            entity.ToTable("BD_CONFIGURACION_MENSAJERIA");

            entity.Property(e => e.IdConfiguracion).HasColumnName("ID_CONFIGURACION");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.Fiull)
                .HasColumnType("decimal(8, 4)")
                .HasColumnName("FIULL");
            entity.Property(e => e.IdServicioMensajeria).HasColumnName("ID_SERVICIO_MENSAJERIA");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Longitud).HasColumnName("LONGITUD");
            entity.Property(e => e.Status)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdConfigureUsuario>(entity =>
        {
            entity.HasKey(e => e.IdConfigureUsuario).HasName("PK__BD_CONFI__8DF75EC6C710DEFB");

            entity.ToTable("BD_CONFIGURE_USUARIO");

            entity.Property(e => e.IdConfigureUsuario).HasColumnName("ID_CONFIGURE_USUARIO");
            entity.Property(e => e.Config)
                .IsUnicode(false)
                .HasColumnName("CONFIG");
            entity.Property(e => e.Descripcion)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.Value).HasColumnName("VALUE");
        });

        modelBuilder.Entity<BdConfirmacione>(entity =>
        {
            entity.HasKey(e => e.IdConfirmacion);

            entity.ToTable("BD_CONFIRMACIONES");

            entity.HasIndex(e => new { e.IdCargaConfirmaciones, e.Status }, "IX_BD_CONFIRMACIONES_ID_CARGA_CONFIRMACIONES, STATUS").HasFillFactor(80);

            entity.Property(e => e.IdConfirmacion).HasColumnName("ID_CONFIRMACION");
            entity.Property(e => e.IdCargaConfirmaciones).HasColumnName("ID_CARGA_CONFIRMACIONES");
            entity.Property(e => e.IdSolicitudViaticos).HasColumnName("ID_SOLICITUD_VIATICOS");
            entity.Property(e => e.NumConfirmacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NUM_CONFIRMACION");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");

            entity.HasOne(d => d.IdCargaConfirmacionesNavigation).WithMany(p => p.BdConfirmaciones)
                .HasForeignKey(d => d.IdCargaConfirmaciones)
                .HasConstraintName("FK_BD_CONFIRMACIONES_BD_CARGAS_CONFIRMACIONES");

            entity.HasOne(d => d.IdSolicitudViaticosNavigation).WithMany(p => p.BdConfirmaciones)
                .HasForeignKey(d => d.IdSolicitudViaticos)
                .HasConstraintName("FK_BD_CONFIRMACIONES_BD_SOLICITUDES_VIATICOS");
        });

        modelBuilder.Entity<BdConfirmacionesIntermedium>(entity =>
        {
            entity.HasKey(e => e.IdConfirmacionIntermedia);

            entity.ToTable("BD_CONFIRMACIONES_INTERMEDIA");

            entity.HasIndex(e => e.IdCargaConfirmaciones, "IX_BD_CONFIRMACIONES_INTERMEDIA_ID_CARGA_CONFIRMACIONES").HasFillFactor(80);

            entity.Property(e => e.IdConfirmacionIntermedia).HasColumnName("ID_CONFIRMACION_INTERMEDIA");
            entity.Property(e => e.IdCargaConfirmaciones).HasColumnName("ID_CARGA_CONFIRMACIONES");
            entity.Property(e => e.IdSolicitudViaticos).HasColumnName("ID_SOLICITUD_VIATICOS");
            entity.Property(e => e.NumConfirmacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NUM_CONFIRMACION");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");

            entity.HasOne(d => d.IdCargaConfirmacionesNavigation).WithMany(p => p.BdConfirmacionesIntermedia)
                .HasForeignKey(d => d.IdCargaConfirmaciones)
                .HasConstraintName("FK_BD_CONFIRMACIONES_INTERMEDIA_BD_CARGAS_CONFIRMACIONES");

            entity.HasOne(d => d.IdSolicitudViaticosNavigation).WithMany(p => p.BdConfirmacionesIntermedia)
                .HasForeignKey(d => d.IdSolicitudViaticos)
                .HasConstraintName("FK_BD_CONFIRMACIONES_INTERMEDIA_BD_SOLICITUDES_VIATICOS");
        });

        modelBuilder.Entity<BdConjuntoModeloConectividad>(entity =>
        {
            entity.HasKey(e => e.IdConjunto).HasName("PK__BD_CONJU__AFAEAB5FC394C4FA");

            entity.ToTable("BD_CONJUNTO_MODELO_CONECTIVIDAD");

            entity.Property(e => e.IdConjunto).HasColumnName("ID_CONJUNTO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdConectividad).HasColumnName("ID_CONECTIVIDAD");
            entity.Property(e => e.IdConectividadParent).HasColumnName("ID_CONECTIVIDAD_PARENT");
            entity.Property(e => e.IdModeloParent).HasColumnName("ID_MODELO_PARENT");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
        });

        modelBuilder.Entity<BdConsumiblesUnidad>(entity =>
        {
            entity.HasKey(e => e.IdConsumibleUnidad);

            entity.ToTable("BD_CONSUMIBLES_UNIDAD");

            entity.HasIndex(e => new { e.IdUnidad, e.Autorizado }, "IX_BD_CONSUMIBLES_UNIDAD_ID_UNIDAD, AUTORIZADO");

            entity.Property(e => e.IdConsumibleUnidad).HasColumnName("ID_CONSUMIBLE_UNIDAD");
            entity.Property(e => e.Autorizado).HasColumnName("AUTORIZADO");
            entity.Property(e => e.FechaAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_ALTA");
            entity.Property(e => e.IdConsumible).HasColumnName("ID_CONSUMIBLE");
            entity.Property(e => e.IdTecnico).HasColumnName("ID_TECNICO");
            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.NoConsumiblesUtilizados).HasColumnName("NO_CONSUMIBLES_UTILIZADOS");
            entity.Property(e => e.Status)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.TotalConsumibles).HasColumnName("TOTAL_CONSUMIBLES");
        });

        modelBuilder.Entity<BdContactosMailjet>(entity =>
        {
            entity.HasKey(e => e.IdContactoMailjet).HasName("PK__BD_CONTA__2683FF9466E6209D");

            entity.ToTable("BD_CONTACTOS_MAILJET");

            entity.Property(e => e.IdContactoMailjet).HasColumnName("ID_CONTACTO_MAILJET");
            entity.Property(e => e.Email)
                .IsUnicode(false)
                .HasColumnName("EMAIL");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdDatoListaMailjet).HasColumnName("ID_DATO_LISTA_MAILJET");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.NombreContacto)
                .IsUnicode(false)
                .HasColumnName("NOMBRE_CONTACTO");
        });

        modelBuilder.Entity<BdContactsOnBase>(entity =>
        {
            entity.HasKey(e => e.ContactId).HasName("PK__BdContac__5C66259B86614C43");

            entity.ToTable("BdContactsOnBase");

            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.Email)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Surname)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<BdControlAlertasAr>(entity =>
        {
            entity.HasKey(e => e.IdControlAr).HasName("PK__BD_CONTR__AC29B6595032ECA8");

            entity.ToTable("BD_CONTROL_ALERTAS_AR");

            entity.Property(e => e.IdControlAr).HasColumnName("ID_CONTROL_AR");
            entity.Property(e => e.Avisado).HasColumnName("AVISADO");
            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.NoAr)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("NO_AR");
        });

        modelBuilder.Entity<BdControlAlmacenAccesorio>(entity =>
        {
            entity.HasKey(e => e.IdControlAlmacenInsumos).HasName("PK__BD_CONTR__50C587730A1744A9");

            entity.ToTable("BD_CONTROL_ALMACEN_ACCESORIOS");

            entity.Property(e => e.IdControlAlmacenInsumos).HasColumnName("ID_CONTROL_ALMACEN_INSUMOS");
            entity.Property(e => e.Entrada).HasColumnName("ENTRADA");
            entity.Property(e => e.IdAccesorio).HasColumnName("ID_ACCESORIO");
            entity.Property(e => e.IdResponsable).HasColumnName("ID_RESPONSABLE");
            entity.Property(e => e.IdTipoResponsable).HasColumnName("ID_TIPO_RESPONSABLE");
            entity.Property(e => e.Salida).HasColumnName("SALIDA");
            entity.Property(e => e.Total)
                .HasComputedColumnSql("([ENTRADA]-isnull([SALIDA],(0)))", false)
                .HasColumnName("TOTAL");
        });

        modelBuilder.Entity<BdControlAlmacenInsumo>(entity =>
        {
            entity.HasKey(e => e.IdControlAlmacenInsumos).HasName("PK__BD_CONTR__50C58773E648699A");

            entity.ToTable("BD_CONTROL_ALMACEN_INSUMOS");

            entity.Property(e => e.IdControlAlmacenInsumos).HasColumnName("ID_CONTROL_ALMACEN_INSUMOS");
            entity.Property(e => e.Entrada).HasColumnName("ENTRADA");
            entity.Property(e => e.IdInsumo).HasColumnName("ID_INSUMO");
            entity.Property(e => e.IdResponsable).HasColumnName("ID_RESPONSABLE");
            entity.Property(e => e.IdTipoResponsable).HasColumnName("ID_TIPO_RESPONSABLE");
            entity.Property(e => e.Salida).HasColumnName("SALIDA");
            entity.Property(e => e.Total)
                .HasComputedColumnSql("([ENTRADA]-isnull([SALIDA],(0)))", false)
                .HasColumnName("TOTAL");
        });

        modelBuilder.Entity<BdControlInsumo>(entity =>
        {
            entity.HasKey(e => e.IdBdControlInsumos).HasName("PK__BD_CONTR__A1BE29351BE96354");

            entity.ToTable("BD_CONTROL_INSUMOS");

            entity.Property(e => e.IdBdControlInsumos).HasColumnName("ID_BD_CONTROL_INSUMOS");
            entity.Property(e => e.Entrada).HasColumnName("ENTRADA");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdInsumo).HasColumnName("ID_INSUMO");
            entity.Property(e => e.IdResponsable).HasColumnName("ID_RESPONSABLE");
            entity.Property(e => e.IdStatusInsumo).HasColumnName("ID_STATUS_INSUMO");
            entity.Property(e => e.IdTipoResponsable).HasColumnName("ID_TIPO_RESPONSABLE");
            entity.Property(e => e.NoTarima)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NO_TARIMA");
            entity.Property(e => e.PosicionInventario)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("POSICION_INVENTARIO");
            entity.Property(e => e.Salida).HasColumnName("SALIDA");
            entity.Property(e => e.Total)
                .HasComputedColumnSql("([ENTRADA]-[SALIDA])", false)
                .HasColumnName("TOTAL");
        });

        modelBuilder.Entity<BdControlInsumosDetalle>(entity =>
        {
            entity.HasKey(e => e.IdControlInsumosDetalle);

            entity.ToTable("BD_CONTROL_INSUMOS_DETALLE");

            entity.Property(e => e.IdControlInsumosDetalle).HasColumnName("ID_CONTROL_INSUMOS_DETALLE");
            entity.Property(e => e.Cantidad).HasColumnName("CANTIDAD");
            entity.Property(e => e.IdAlmacen).HasColumnName("ID_ALMACEN");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdInsumo).HasColumnName("ID_INSUMO");
            entity.Property(e => e.IdResponsable).HasColumnName("ID_RESPONSABLE");
            entity.Property(e => e.IdSolicitudAlmacen).HasColumnName("ID_SOLICITUD_ALMACEN");
            entity.Property(e => e.IdTipoReponsable).HasColumnName("ID_TIPO_REPONSABLE");
            entity.Property(e => e.Status).HasColumnName("STATUS");

            entity.HasOne(d => d.IdTipoReponsableNavigation).WithMany(p => p.BdControlInsumosDetalles)
                .HasForeignKey(d => d.IdTipoReponsable)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BD_CONTROL_INSUMOS_DETALLE_C_TIPO_RESPONSABLE");
        });

        modelBuilder.Entity<BdControlInsumosEnvio>(entity =>
        {
            entity.HasKey(e => e.IdControlInsumoEnvio).HasName("PK__BD_CONTR__85880945AA658A7F");

            entity.ToTable("BD_CONTROL_INSUMOS_ENVIOS");

            entity.Property(e => e.IdControlInsumoEnvio).HasColumnName("ID_CONTROL_INSUMO_ENVIO");
            entity.Property(e => e.Cantidad).HasColumnName("CANTIDAD");
            entity.Property(e => e.CantidadRetorno).HasColumnName("CANTIDAD_RETORNO");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdEnvio).HasColumnName("ID_ENVIO");
            entity.Property(e => e.IdInsumo).HasColumnName("ID_INSUMO");
            entity.Property(e => e.IdResponsableDestino).HasColumnName("ID_RESPONSABLE_DESTINO");
            entity.Property(e => e.IdResponsableOrigen).HasColumnName("ID_RESPONSABLE_ORIGEN");
            entity.Property(e => e.IdStatusInsumo).HasColumnName("ID_STATUS_INSUMO");
            entity.Property(e => e.IdTipoResponsableDestino).HasColumnName("ID_TIPO_RESPONSABLE_DESTINO");
            entity.Property(e => e.IdTipoResponsableOrigen).HasColumnName("ID_TIPO_RESPONSABLE_ORIGEN");
            entity.Property(e => e.IsReception).HasColumnName("IS_RECEPTION");
        });

        modelBuilder.Entity<BdControlInsumosPaso>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_CONTROL_INSUMOS_PASO");

            entity.Property(e => e.Check).HasColumnName("CHECK");
            entity.Property(e => e.Entrada).HasColumnName("ENTRADA");
            entity.Property(e => e.FechaAlta)
                .HasColumnType("date")
                .HasColumnName("FECHA_ALTA");
            entity.Property(e => e.IdBdControlInsumosPaso)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_BD_CONTROL_INSUMOS_PASO");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdInsumo).HasColumnName("ID_INSUMO");
            entity.Property(e => e.IdResponsable).HasColumnName("ID_RESPONSABLE");
            entity.Property(e => e.IdStatusInsumo).HasColumnName("ID_STATUS_INSUMO");
            entity.Property(e => e.IdTipoResponsable).HasColumnName("ID_TIPO_RESPONSABLE");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.NoTarima)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NO_TARIMA");
            entity.Property(e => e.PosicionInventario)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("POSICION_INVENTARIO");
            entity.Property(e => e.Salida).HasColumnName("SALIDA");
            entity.Property(e => e.Total)
                .HasComputedColumnSql("([ENTRADA]-[SALIDA])", false)
                .HasColumnName("TOTAL");
        });

        modelBuilder.Entity<BdControlKitTecnico>(entity =>
        {
            entity.HasKey(e => e.IdKitTecnico).HasName("PK__BD_CONTR__2C41134BD9207889");

            entity.ToTable("BD_CONTROL_KIT_TECNICO");

            entity.Property(e => e.IdKitTecnico).HasColumnName("ID_KIT_TECNICO");
            entity.Property(e => e.AproboCantidad).HasColumnName("APROBO_CANTIDAD");
            entity.Property(e => e.Cantidad).HasColumnName("CANTIDAD");
            entity.Property(e => e.ControlInsumo).HasColumnName("CONTROL_INSUMO");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IdInsumo).HasColumnName("ID_INSUMO");
        });

        modelBuilder.Entity<BdControlMasivoDevolucione>(entity =>
        {
            entity.HasKey(e => e.IdControlMasivoDevolucion).HasName("PK__BD_CONTR__B4CFAE3C725FCD24");

            entity.ToTable("BD_CONTROL_MASIVO_DEVOLUCIONES");

            entity.Property(e => e.IdControlMasivoDevolucion).HasColumnName("ID_CONTROL_MASIVO_DEVOLUCION");
            entity.Property(e => e.Error)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("ERROR");
            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");
            entity.Property(e => e.NoSerie)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");
            entity.Property(e => e.Status)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdControlRestriccionProsa>(entity =>
        {
            entity.HasKey(e => e.IdControlRestriccionProsa).HasName("PK__BD_CONTR__C0F5B15989D7F56C");

            entity.ToTable("BD_CONTROL_RESTRICCION_PROSA");

            entity.Property(e => e.IdControlRestriccionProsa).HasColumnName("ID__CONTROL_RESTRICCION_PROSA");
            entity.Property(e => e.FecRestriccion)
                .HasColumnType("datetime")
                .HasColumnName("FEC_RESTRICCION");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.Status)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdCostoRefaccione>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_COSTO_REFACCIONES");

            entity.HasIndex(e => new { e.Year, e.Month, e.Secuencia }, "IX_BD_COSTO_REFACCIONES").IsUnique();

            entity.HasIndex(e => e.Year, "IX_BD_COSTO_REFACCIONES_1");

            entity.Property(e => e.CostoMs)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COSTO_MS");
            entity.Property(e => e.CostoSgs)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COSTO_SGS");
            entity.Property(e => e.Curp)
                .HasMaxLength(18)
                .HasColumnName("CURP");
            entity.Property(e => e.DescCliente)
                .HasMaxLength(80)
                .HasColumnName("DESC_CLIENTE");
            entity.Property(e => e.DescMarca)
                .HasMaxLength(50)
                .HasColumnName("DESC_MARCA");
            entity.Property(e => e.DescModelo)
                .HasMaxLength(60)
                .HasColumnName("DESC_MODELO");
            entity.Property(e => e.DescProducto)
                .HasMaxLength(50)
                .HasColumnName("DESC_PRODUCTO");
            entity.Property(e => e.DescRegion)
                .HasMaxLength(50)
                .HasColumnName("DESC_REGION");
            entity.Property(e => e.DescZona)
                .HasMaxLength(50)
                .HasColumnName("DESC_ZONA");
            entity.Property(e => e.Estado)
                .HasMaxLength(10)
                .HasColumnName("ESTADO");
            entity.Property(e => e.FecAlta)
                .HasMaxLength(20)
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.FecAltaUnidad)
                .HasMaxLength(20)
                .HasColumnName("FEC_ALTA_UNIDAD");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IdInstalacion).HasColumnName("ID_INSTALACION");
            entity.Property(e => e.MonedaSgs)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("MONEDA_SGS");
            entity.Property(e => e.Month).HasColumnName("MONTH");
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(50)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.NoSerie)
                .HasMaxLength(30)
                .HasColumnName("NO_SERIE");
            entity.Property(e => e.Nombre)
                .HasMaxLength(80)
                .HasColumnName("NOMBRE");
            entity.Property(e => e.Producto)
                .HasMaxLength(20)
                .HasColumnName("PRODUCTO");
            entity.Property(e => e.Propiedad)
                .HasMaxLength(10)
                .HasColumnName("PROPIEDAD");
            entity.Property(e => e.Secuencia).HasColumnName("SECUENCIA");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.UCompraMs)
                .HasMaxLength(10)
                .HasColumnName("U_COMPRA_MS");
            entity.Property(e => e.Year).HasColumnName("YEAR");
        });

        modelBuilder.Entity<BdCostoViatico>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_COSTO_VIATICOS");

            entity.HasIndex(e => new { e.Year, e.Month, e.Secuencia }, "IX_BD_COSTO_VIATICOS").IsUnique();

            entity.HasIndex(e => new { e.Year, e.Month, e.DescCliente }, "IX_BD_COSTO_VIATICOS_1");

            entity.Property(e => e.Costo)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COSTO");
            entity.Property(e => e.DescCliente)
                .HasMaxLength(80)
                .HasColumnName("DESC_CLIENTE");
            entity.Property(e => e.DescViatico)
                .HasMaxLength(50)
                .HasColumnName("DESC_VIATICO");
            entity.Property(e => e.FecConfirmación)
                .HasMaxLength(20)
                .HasColumnName("FEC_CONFIRMACIÓN");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IdSolicitud).HasColumnName("ID_SOLICITUD");
            entity.Property(e => e.Month).HasColumnName("MONTH");
            entity.Property(e => e.Motivo)
                .HasMaxLength(50)
                .HasColumnName("MOTIVO");
            entity.Property(e => e.Region)
                .HasMaxLength(50)
                .HasColumnName("REGION");
            entity.Property(e => e.Secuencia).HasColumnName("SECUENCIA");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .HasColumnName("STATUS");
            entity.Property(e => e.Usuario)
                .HasMaxLength(80)
                .HasColumnName("USUARIO");
            entity.Property(e => e.Year).HasColumnName("YEAR");
            entity.Property(e => e.Zona)
                .HasMaxLength(50)
                .HasColumnName("ZONA");
        });

        modelBuilder.Entity<BdCostoViaticosVistum>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("bd_costo_viaticos_vista");

            entity.Property(e => e.Costo)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("costo");
            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.IdConcepto).HasColumnName("id_concepto");
            entity.Property(e => e.IdRegion).HasColumnName("id_region");
            entity.Property(e => e.Month).HasColumnName("MONTH");
            entity.Property(e => e.Tipo)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("tipo");
            entity.Property(e => e.Year).HasColumnName("YEAR");
        });

        modelBuilder.Entity<BdCotizaciones3m>(entity =>
        {
            entity.HasKey(e => e.IdCotizacion);

            entity.ToTable("BD_COTIZACIONES_3M");

            entity.Property(e => e.IdCotizacion).HasColumnName("id_cotizacion");
            entity.Property(e => e.Atencion)
                .HasMaxLength(60)
                .IsFixedLength();
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("email");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("fec_alta");
            entity.Property(e => e.IdAr).HasColumnName("id_ar");
            entity.Property(e => e.IdAutoriza).HasColumnName("id_autoriza");
            entity.Property(e => e.IdCondiciones).HasColumnName("id_condiciones");
            entity.Property(e => e.IdDiagnostica).HasColumnName("id_diagnostica");
            entity.Property(e => e.IdGenera).HasColumnName("id_genera");
            entity.Property(e => e.IdImpuesto).HasColumnName("id_impuesto");
            entity.Property(e => e.IdNegocio).HasColumnName("id_negocio");
            entity.Property(e => e.IdReparacion).HasColumnName("id_reparacion");
            entity.Property(e => e.IdStatus).HasColumnName("id_status");
            entity.Property(e => e.IdUnidad).HasColumnName("id_unidad");
            entity.Property(e => e.IsAutorizada).HasColumnName("is_autorizada");
            entity.Property(e => e.NoReporte)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("no_reporte");
            entity.Property(e => e.RazonSocial)
                .HasMaxLength(250)
                .HasColumnName("razon_social");
            entity.Property(e => e.Tc).HasColumnName("tc");
            entity.Property(e => e.Telefono).HasColumnType("numeric(12, 0)");
            entity.Property(e => e.Total).HasColumnName("total");
        });

        modelBuilder.Entity<BdCotizaciones3mDet>(entity =>
        {
            entity.HasKey(e => e.IdDetCotizacion);

            entity.ToTable("BD_COTIZACIONES_3M_DET");

            entity.Property(e => e.IdDetCotizacion).HasColumnName("id_det_cotizacion");
            entity.Property(e => e.Cantidad).HasColumnName("cantidad");
            entity.Property(e => e.Descuento).HasColumnName("descuento");
            entity.Property(e => e.IdCotizacion).HasColumnName("id_cotizacion");
            entity.Property(e => e.IdInsumo).HasColumnName("id_insumo");
            entity.Property(e => e.IdUm).HasColumnName("id_um");
            entity.Property(e => e.Precio).HasColumnName("precio");
            entity.Property(e => e.Total).HasColumnName("total");
        });

        modelBuilder.Entity<BdCpAsignacionAutomatica>(entity =>
        {
            entity.HasKey(e => e.IdCpAsignacionAutomatica).HasName("PK__BD_CP_AS__0E6D66520FB31B61");

            entity.ToTable("BD_CP_ASIGNACION_AUTOMATICA");

            entity.Property(e => e.IdCpAsignacionAutomatica).HasColumnName("ID_CP_ASIGNACION_AUTOMATICA");
            entity.Property(e => e.Cp)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CP");
            entity.Property(e => e.IdReglaAsignacionAutomatica).HasColumnName("ID_REGLA_ASIGNACION_AUTOMATICA");
        });

        modelBuilder.Entity<BdCuentasBancaria>(entity =>
        {
            entity.HasKey(e => e.IdCuentaBancaria);

            entity.ToTable("BD_CUENTAS_BANCARIAS");

            entity.Property(e => e.IdCuentaBancaria).HasColumnName("ID_CUENTA_BANCARIA");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdBanco).HasColumnName("ID_BANCO");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.NombreBanco)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NOMBRE_BANCO");
            entity.Property(e => e.NumeroCuenta)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NUMERO_CUENTA");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdCurso>(entity =>
        {
            entity.HasKey(e => e.IdCursos);

            entity.ToTable("BD_CURSOS");

            entity.Property(e => e.IdCursos).HasColumnName("ID_CURSOS");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.FecFin)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_FIN");
            entity.Property(e => e.FecInicio)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_INICIO");
            entity.Property(e => e.IdCapacitador).HasColumnName("ID_CAPACITADOR");
            entity.Property(e => e.IdNombreCurso).HasColumnName("ID_NOMBRE_CURSO");
            entity.Property(e => e.IdSedeCurso).HasColumnName("ID_SEDE_CURSO");
            entity.Property(e => e.IdStatusCurso).HasColumnName("ID_STATUS_CURSO");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Status)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdCursosAsignado>(entity =>
        {
            entity.HasKey(e => e.IdCursoAsignado);

            entity.ToTable("BD_CURSOS_ASIGNADOS");

            entity.Property(e => e.IdCursoAsignado).HasColumnName("ID_CURSO_ASIGNADO");
            entity.Property(e => e.Calificacion)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CALIFICACION");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdCursos).HasColumnName("ID_CURSOS");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Status)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdDatosCierresAplicacion>(entity =>
        {
            entity.HasKey(e => e.IdDatoCierreAplicacion).HasName("PK__BD_DATOS__2E0887BFD68A2F6A");

            entity.ToTable("BD_DATOS_CIERRES_APLICACION");

            entity.HasIndex(e => e.IdAr, "ID_AR");

            entity.Property(e => e.IdDatoCierreAplicacion).HasColumnName("ID_DATO_CIERRE_APLICACION");
            entity.Property(e => e.Datos)
                .IsUnicode(false)
                .HasColumnName("DATOS");
            entity.Property(e => e.FechaCarga)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_CARGA");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.TipoCierre)
                .IsUnicode(false)
                .HasColumnName("TIPO_CIERRE");
        });

        modelBuilder.Entity<BdDatosEnvioSalesforce>(entity =>
        {
            entity.HasKey(e => e.IdDatoEnvioSalesforce).HasName("PK__BD_DATOS__8D6DF39FC39623D5");

            entity.ToTable("BD_DATOS_ENVIO_SALESFORCE");

            entity.HasIndex(e => e.IdAr, "INDEX_DATOSENVIOSALESFORCE_IDAR");

            entity.Property(e => e.IdDatoEnvioSalesforce).HasColumnName("ID_DATO_ENVIO_SALESFORCE");
            entity.Property(e => e.Datos)
                .IsUnicode(false)
                .HasColumnName("DATOS");
            entity.Property(e => e.Error)
                .IsUnicode(false)
                .HasColumnName("ERROR");
            entity.Property(e => e.FechaEnvio)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ENVIO");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IdProcesoMasivo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ID_PROCESO_MASIVO");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.Ruta)
                .HasMaxLength(3000)
                .IsUnicode(false)
                .HasColumnName("RUTA");
            entity.Property(e => e.TipoCierre)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("TIPO_CIERRE");
        });

        modelBuilder.Entity<BdDatosListaMailjet>(entity =>
        {
            entity.HasKey(e => e.IdDatoListaMailjet).HasName("PK__BD_DATOS__42D5C95C69D899AD");

            entity.ToTable("BD_DATOS_LISTA_MAILJET");

            entity.Property(e => e.IdDatoListaMailjet).HasColumnName("ID_DATO_LISTA_MAILJET");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdArchivoContacto).HasColumnName("ID_ARCHIVO_CONTACTO");
            entity.Property(e => e.IdListaMailjet).HasColumnName("ID_LISTA_MAILJET");
            entity.Property(e => e.IdTipoLista).HasColumnName("ID_TIPO_LISTA");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.NombreLista)
                .IsUnicode(false)
                .HasColumnName("NOMBRE_LISTA");
        });

        modelBuilder.Entity<BdDatosPreodtSalesforce>(entity =>
        {
            entity.HasKey(e => e.IdDatoPreodtSalesforce).HasName("PK__BD_DATOS__BA655B43EAAA83A2");

            entity.ToTable("BD_DATOS_PREODT_SALESFORCE");

            entity.Property(e => e.IdDatoPreodtSalesforce).HasColumnName("ID_DATO_PREODT_SALESFORCE");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.Jsont)
                .IsUnicode(false)
                .HasColumnName("JSONT");
            entity.Property(e => e.NoAr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AR");
        });

        modelBuilder.Entity<BdDbBackup>(entity =>
        {
            entity.HasKey(e => e.IdDbBackup);

            entity.ToTable("BD_DB_BACKUP");

            entity.Property(e => e.IdDbBackup).HasColumnName("ID_DB_BACKUP");
            entity.Property(e => e.FecAlta)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.FecStatus)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_STATUS");
            entity.Property(e => e.FilePath)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("FILE_PATH");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdDevolucione>(entity =>
        {
            entity.HasKey(e => e.IdDevolucion);

            entity.ToTable("BD_DEVOLUCIONES");

            entity.Property(e => e.IdDevolucion).HasColumnName("ID_DEVOLUCION");
            entity.Property(e => e.DescEncargadoRecepcion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_ENCARGADO_RECEPCION");
            entity.Property(e => e.DescLugarRecepcion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_LUGAR_RECEPCION");
            entity.Property(e => e.FecDevolucion)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_DEVOLUCION");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdRazonDevolucion).HasColumnName("ID_RAZON_DEVOLUCION");
            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.NoSerie)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");

            entity.HasOne(d => d.IdClienteNavigation).WithMany(p => p.BdDevoluciones)
                .HasForeignKey(d => d.IdCliente)
                .HasConstraintName("FK_BD_DEVOLUCIONES_C_CLIENTES");

            entity.HasOne(d => d.IdRazonDevolucionNavigation).WithMany(p => p.BdDevoluciones)
                .HasForeignKey(d => d.IdRazonDevolucion)
                .HasConstraintName("FK_BD_DEVOLUCIONES_C_RAZON_DEVOLUCION");

            entity.HasOne(d => d.IdUnidadNavigation).WithMany(p => p.BdDevoluciones)
                .HasForeignKey(d => d.IdUnidad)
                .HasConstraintName("FK_BD_DEVOLUCIONES_BD_UNIDADES");
        });

        modelBuilder.Entity<BdDireccione>(entity =>
        {
            entity.HasKey(e => e.IdDireccion);

            entity.ToTable("BD_DIRECCIONES");

            entity.Property(e => e.IdDireccion).HasColumnName("ID_DIRECCION");
            entity.Property(e => e.Colonia)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("COLONIA");
            entity.Property(e => e.Cp)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("CP");
            entity.Property(e => e.Direccion)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");
            entity.Property(e => e.DireccionAbreviada)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DIRECCION_ABREVIADA");
            entity.Property(e => e.Estado)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("ESTADO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdResponsable).HasColumnName("ID_RESPONSABLE");
            entity.Property(e => e.IdTipoResponsable).HasColumnName("ID_TIPO_RESPONSABLE");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.IsDefault).HasColumnName("IS_DEFAULT");
            entity.Property(e => e.Latitud)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("LATITUD");
            entity.Property(e => e.Longitud)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("LONGITUD");
            entity.Property(e => e.Poblacion)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("POBLACION");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.Telefono)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");
        });

        modelBuilder.Entity<BdDireccionesRelacione>(entity =>
        {
            entity.HasKey(e => e.IdDireccionRelacion);

            entity.ToTable("BD_DIRECCIONES_RELACIONES");

            entity.Property(e => e.IdDireccionRelacion).HasColumnName("ID_DIRECCION_RELACION");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdDireccion).HasColumnName("ID_DIRECCION");
            entity.Property(e => e.IdResponsable).HasColumnName("ID_RESPONSABLE");
            entity.Property(e => e.IdTipoResponsable).HasColumnName("ID_TIPO_RESPONSABLE");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.IsDefault).HasColumnName("IS_DEFAULT");
        });

        modelBuilder.Entity<BdDirectorioTelefonicoAr>(entity =>
        {
            entity.HasKey(e => e.IdDirectorioTelefonicoAr).HasName("PK__BD_DIREC__44453E8A203664EC");

            entity.ToTable("BD_DIRECTORIO_TELEFONICO_AR");

            entity.Property(e => e.IdDirectorioTelefonicoAr).HasColumnName("ID_DIRECTORIO_TELEFONICO_AR");
            entity.Property(e => e.FechaAlta)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ALTA");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.Telefono)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");
            entity.Property(e => e.UsuarioAlta).HasColumnName("USUARIO_ALTA");
        });

        modelBuilder.Entity<BdDomiPrueba>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("bd_domi_prueba");

            entity.Property(e => e.FecAtencion)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ATENCION");
        });

        modelBuilder.Entity<BdDownloadControl>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__BdDownlo__3214EC07BC9DB353");

            entity.ToTable("BdDownloadControl");

            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.DownloadDesc)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ParametersJson).IsUnicode(false);
            entity.Property(e => e.SendDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<BdElavonDispatch>(entity =>
        {
            entity.HasKey(e => e.IdElavonDispatches);

            entity.ToTable("BD_ELAVON_DISPATCHES");

            entity.Property(e => e.IdElavonDispatches).HasColumnName("ID_ELAVON_DISPATCHES");
            entity.Property(e => e.AccessoryAmt)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("accessory_amt");
            entity.Property(e => e.AccessoryType)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("accessory_type");
            entity.Property(e => e.ConsumableAmt)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("consumable_amt");
            entity.Property(e => e.ConsumableType)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("consumable_type");
            entity.Property(e => e.DeviceType)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("device_type");
            entity.Property(e => e.DeviceTypeCategory)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("device_type_category");
            entity.Property(e => e.IdElavonInbox).HasColumnName("ID_ELAVON_INBOX");
            entity.Property(e => e.RequestId)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("request_id");
            entity.Property(e => e.SoftwareName)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("software_name");
            entity.Property(e => e.SoftwareVendor)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("software_vendor");
            entity.Property(e => e.SoftwareVersion)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("software_version");
        });

        modelBuilder.Entity<BdElavonRecovery>(entity =>
        {
            entity.HasKey(e => e.IdElavonRecoveries);

            entity.ToTable("BD_ELAVON_RECOVERIES");

            entity.Property(e => e.IdElavonRecoveries).HasColumnName("ID_ELAVON_RECOVERIES");
            entity.Property(e => e.AccessoryType)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("accessory_type");
            entity.Property(e => e.DeviceType)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("device_type");
            entity.Property(e => e.DeviceTypeCategory)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("device_type_category");
            entity.Property(e => e.IdElavonInbox).HasColumnName("ID_ELAVON_INBOX");
            entity.Property(e => e.Reason)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("reason");
            entity.Property(e => e.RequestId)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("request_id");
            entity.Property(e => e.Serial)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("serial");
        });

        modelBuilder.Entity<BdEmail>(entity =>
        {
            entity.HasKey(e => e.IdEmail);

            entity.ToTable("BD_EMAILS");

            entity.HasIndex(e => e.Status, "IX_BD_EMAILS_STATUS").HasFillFactor(80);

            entity.Property(e => e.IdEmail).HasColumnName("ID_EMAIL");
            entity.Property(e => e.Attachment)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("ATTACHMENT");
            entity.Property(e => e.DescEmail)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_EMAIL");
            entity.Property(e => e.DescError)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_ERROR");
            entity.Property(e => e.EmailBody)
                .IsUnicode(false)
                .HasColumnName("EMAIL_BODY");
            entity.Property(e => e.EmailBodytype)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("EMAIL_BODYTYPE");
            entity.Property(e => e.EmailFrom)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("EMAIL_FROM");
            entity.Property(e => e.EmailSubject)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("EMAIL_SUBJECT");
            entity.Property(e => e.EmailTo)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("EMAIL_TO");
            entity.Property(e => e.EmailToUser).HasColumnName("EMAIL_TO_USER");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.FecEnvio)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ENVIO");
            entity.Property(e => e.IdUsuarioAlta)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdEmails2>(entity =>
        {
            entity.HasKey(e => e.IdEmail);

            entity.ToTable("BD_EMAILS_2");

            entity.Property(e => e.IdEmail).HasColumnName("ID_EMAIL");
            entity.Property(e => e.Attachment)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("ATTACHMENT");
            entity.Property(e => e.DescEmail)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_EMAIL");
            entity.Property(e => e.DescError)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_ERROR");
            entity.Property(e => e.EmailBody)
                .IsUnicode(false)
                .HasColumnName("EMAIL_BODY");
            entity.Property(e => e.EmailBodytype)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("EMAIL_BODYTYPE");
            entity.Property(e => e.EmailFrom)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("EMAIL_FROM");
            entity.Property(e => e.EmailSubject)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("EMAIL_SUBJECT");
            entity.Property(e => e.EmailTo)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("EMAIL_TO");
            entity.Property(e => e.EmailToUser).HasColumnName("EMAIL_TO_USER");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.FecEnvio)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ENVIO");
            entity.Property(e => e.IdCarga).HasColumnName("ID_CARGA");
            entity.Property(e => e.IdUsuarioAlta)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.NoAr)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NO_AR");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdEnvio>(entity =>
        {
            entity.HasKey(e => e.IdEnvio);

            entity.ToTable("BD_ENVIOS", tb => tb.HasTrigger("TRIGGER_BD_ENVIOS_UPDATE_ID_STATUS_ENVIO"));

            entity.HasIndex(e => new { e.IdTipoResponsableOrigen, e.IdResponsableOrigen, e.IdTipoResponsableDestino, e.FecEnvio, e.IdStatusEnvio }, "INDX1");

            entity.HasIndex(e => new { e.IdTipoResponsableDestino, e.IdResponsableDestino, e.IdStatusEnvio }, "IX_BD_ENVIOS_ID_TIPO_RESPONSABLE_DESTINO, ID_RESPONSABLE_DESTINO, ID_STATUS_ENVIO").HasFillFactor(80);

            entity.HasIndex(e => new { e.IdTipoResponsableDestino, e.IdStatusEnvio }, "IX_BD_ENVIOS_ID_TIPO_RESPONSABLE_DESTINO, ID_STATUS_ENVIO");

            entity.HasIndex(e => new { e.IdTipoResponsableOrigen, e.IdResponsableOrigen, e.IdStatusEnvio }, "IX_BD_ENVIOS_ID_TIPO_RESPONSABLE_ORIGEN, ID_RESPONSABLE_ORIGEN, ID_STATUS_ENVIO").HasFillFactor(80);

            entity.HasIndex(e => new { e.IdTipoResponsableOrigen, e.IdResponsableOrigen, e.IdStatusEnvio, e.Status }, "IX_BD_ENVIOS_ID_TIPO_RESPONSABLE_ORIGEN, ID_RESPONSABLE_ORIGEN, ID_STATUS_ENVIO, STATUS");

            entity.HasIndex(e => new { e.IdTipoResponsableDestino, e.IdStatusEnvio, e.Status }, "IX_MI_BD_ENVIOS_13806_13805");

            entity.HasIndex(e => new { e.IdTipoResponsableDestino, e.IdStatusEnvio, e.Status }, "IX_MI_BD_ENVIOS_155_154");

            entity.HasIndex(e => new { e.IdStatusEnvio, e.Status }, "IX_MI_BD_ENVIOS_1947_1946");

            entity.HasIndex(e => new { e.IdTipoResponsableOrigen, e.IdStatusEnvio, e.Status, e.FecEnvio }, "IX_MI_BD_ENVIOS_30334_30333");

            entity.HasIndex(e => new { e.IdTipoResponsableOrigen, e.IdResponsableOrigen, e.IdStatusEnvio, e.Status, e.FecEnvio }, "IX_MI_BD_ENVIOS_30381_30380");

            entity.HasIndex(e => new { e.IdTipoResponsableDestino, e.IdStatusEnvio, e.Status }, "IX_MI_BD_ENVIOS_5596_5595");

            entity.HasIndex(e => new { e.IdTipoResponsableDestino, e.IdStatusEnvio, e.Status }, "IX_MI_BD_ENVIOS_6182_6181");

            entity.HasIndex(e => e.NoGuia, "NO_GUIA");

            entity.Property(e => e.IdEnvio).HasColumnName("ID_ENVIO");
            entity.Property(e => e.Costo)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("COSTO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.FecEnvio)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ENVIO");
            entity.Property(e => e.FecRecepcion)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_RECEPCION");
            entity.Property(e => e.HoraEntrega)
                .HasColumnType("smalldatetime")
                .HasColumnName("HORA_ENTREGA");
            entity.Property(e => e.IdChofer).HasColumnName("ID_CHOFER");
            entity.Property(e => e.IdClienteNuevo).HasColumnName("ID_CLIENTE_NUEVO");
            entity.Property(e => e.IdDireccionDestino).HasColumnName("ID_DIRECCION_DESTINO");
            entity.Property(e => e.IdProductoDhl).HasColumnName("ID_PRODUCTO_DHL");
            entity.Property(e => e.IdResponsableDestino).HasColumnName("ID_RESPONSABLE_DESTINO");
            entity.Property(e => e.IdResponsableOrigen).HasColumnName("ID_RESPONSABLE_ORIGEN");
            entity.Property(e => e.IdServicioMensajeria).HasColumnName("ID_SERVICIO_MENSAJERIA");
            entity.Property(e => e.IdServicioMensajeriasPrecio).HasColumnName("ID_SERVICIO_MENSAJERIAS_PRECIO");
            entity.Property(e => e.IdStatusEnvio).HasColumnName("ID_STATUS_ENVIO");
            entity.Property(e => e.IdTipoResponsableDestino).HasColumnName("ID_TIPO_RESPONSABLE_DESTINO");
            entity.Property(e => e.IdTipoResponsableOrigen).HasColumnName("ID_TIPO_RESPONSABLE_ORIGEN");
            entity.Property(e => e.IdUrgenciaEnvio).HasColumnName("ID_URGENCIA_ENVIO");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.IsAltaMasivaSimEspecial).HasColumnName("IS_ALTA_MASIVA_SIM_ESPECIAL");
            entity.Property(e => e.IsStock).HasColumnName("IS_STOCK");
            entity.Property(e => e.NoGuia)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_GUIA");
            entity.Property(e => e.OtraDireccionDestino)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("OTRA_DIRECCION_DESTINO");
            entity.Property(e => e.Paquetes).HasColumnName("PAQUETES");
            entity.Property(e => e.Peso)
                .HasColumnType("numeric(18, 4)")
                .HasColumnName("PESO");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");

            entity.HasOne(d => d.IdChoferNavigation).WithMany(p => p.BdEnvios)
                .HasForeignKey(d => d.IdChofer)
                .HasConstraintName("FK_BD_ENVIOS_C_USUARIOS");

            entity.HasOne(d => d.IdDireccionDestinoNavigation).WithMany(p => p.BdEnvios)
                .HasForeignKey(d => d.IdDireccionDestino)
                .HasConstraintName("FK_BD_ENVIOS_BD_DIRECCIONES");

            entity.HasOne(d => d.IdServicioMensajeriaNavigation).WithMany(p => p.BdEnvios)
                .HasForeignKey(d => d.IdServicioMensajeria)
                .HasConstraintName("FK_BD_ENVIOS_C_SERVICIO_MENSAJERIA");

            entity.HasOne(d => d.IdStatusEnvioNavigation).WithMany(p => p.BdEnvios)
                .HasForeignKey(d => d.IdStatusEnvio)
                .HasConstraintName("FK_BD_ENVIOS_C_STATUS_ENVIO");

            entity.HasOne(d => d.IdTipoResponsableDestinoNavigation).WithMany(p => p.BdEnvioIdTipoResponsableDestinoNavigations)
                .HasForeignKey(d => d.IdTipoResponsableDestino)
                .HasConstraintName("FK_BD_ENVIOS_C_TIPO_RESPONSABLE1");

            entity.HasOne(d => d.IdTipoResponsableOrigenNavigation).WithMany(p => p.BdEnvioIdTipoResponsableOrigenNavigations)
                .HasForeignKey(d => d.IdTipoResponsableOrigen)
                .HasConstraintName("FK_BD_ENVIOS_C_TIPO_RESPONSABLE");

            entity.HasOne(d => d.IdUrgenciaEnvioNavigation).WithMany(p => p.BdEnvios)
                .HasForeignKey(d => d.IdUrgenciaEnvio)
                .HasConstraintName("FK_BD_ENVIOS_C_URGENCIA_ENVIO");
        });

        modelBuilder.Entity<BdEnvioDoctosDocto>(entity =>
        {
            entity.HasKey(e => e.IdEnvioDoctosDocto);

            entity.ToTable("BD_ENVIO_DOCTOS_DOCTO");

            entity.HasIndex(e => e.IdArPrefacturacion, "IX_BD_ENVIO_DOCTOS_DOCTO_ID_AR_PREFACTURACION").HasFillFactor(80);

            entity.HasIndex(e => e.IdEnvioDoctos, "IX_BD_ENVIO_DOCTOS_DOCTO_ID_ENVIO_DOCTOS").HasFillFactor(80);

            entity.HasIndex(e => e.IsRecibido, "IX_BD_ENVIO_DOCTOS_DOCTO_IS_RECIBIDO");

            entity.Property(e => e.IdEnvioDoctosDocto).HasColumnName("ID_ENVIO_DOCTOS_DOCTO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.FecRecepcion)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_RECEPCION");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IdArPrefacturacion).HasColumnName("ID_AR_PREFACTURACION");
            entity.Property(e => e.IdEnvioDoctos).HasColumnName("ID_ENVIO_DOCTOS");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.IdUsuarioRecepcion).HasColumnName("ID_USUARIO_RECEPCION");
            entity.Property(e => e.IsRecibido).HasColumnName("IS_RECIBIDO");
        });

        modelBuilder.Entity<BdEnvioElavon>(entity =>
        {
            entity.HasKey(e => e.IdEnvioElavon);

            entity.ToTable("BD_ENVIO_ELAVON");

            entity.Property(e => e.IdEnvioElavon).HasColumnName("ID_ENVIO_ELAVON");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IsProcesado).HasColumnName("IS_PROCESADO");
            entity.Property(e => e.NombreArchivo)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("NOMBRE_ARCHIVO");
            entity.Property(e => e.XmlData)
                .HasColumnType("xml")
                .HasColumnName("XML_DATA");
        });

        modelBuilder.Entity<BdEnvioInsumo>(entity =>
        {
            entity.HasKey(e => e.IdEnvioInsumo);

            entity.ToTable("BD_ENVIO_INSUMOS");

            entity.HasIndex(e => e.IdEnvio, "IDX1");

            entity.Property(e => e.IdEnvioInsumo).HasColumnName("ID_ENVIO_INSUMO");
            entity.Property(e => e.Cantidad).HasColumnName("CANTIDAD");
            entity.Property(e => e.FecRecibida)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_RECIBIDA");
            entity.Property(e => e.FechaAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_ALTA");
            entity.Property(e => e.IdEnvio).HasColumnName("ID_ENVIO");
            entity.Property(e => e.IdInsumo).HasColumnName("ID_INSUMO");
            entity.Property(e => e.IdResponsable).HasColumnName("ID_RESPONSABLE");
            entity.Property(e => e.IdStatusUnidad2).HasColumnName("ID_STATUS_UNIDAD2");
            entity.Property(e => e.IdTipoResponsable).HasColumnName("ID_TIPO_RESPONSABLE");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.IdUsuarioRecepcion).HasColumnName("ID_USUARIO_RECEPCION");
            entity.Property(e => e.IsRecibida).HasColumnName("IS_RECIBIDA");

            entity.HasOne(d => d.IdEnvioNavigation).WithMany(p => p.BdEnvioInsumos)
                .HasForeignKey(d => d.IdEnvio)
                .HasConstraintName("FK_BD_ENVIO_INSUMOS_BD_ENVIOS");
        });

        modelBuilder.Entity<BdEnvioSim>(entity =>
        {
            entity.HasKey(e => e.IdEnvioSim);

            entity.ToTable("BD_ENVIO_SIMS");

            entity.Property(e => e.IdEnvioSim).HasColumnName("ID_ENVIO_SIM");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.FecRecibida)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_RECIBIDA");
            entity.Property(e => e.IdEnvio).HasColumnName("ID_ENVIO");
            entity.Property(e => e.IdSim).HasColumnName("ID_SIM");
            entity.Property(e => e.IdStatusUnidad2).HasColumnName("ID_STATUS_UNIDAD2");
            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.IdUsuarioRecepcion).HasColumnName("ID_USUARIO_RECEPCION");
            entity.Property(e => e.IsRecibida).HasColumnName("IS_RECIBIDA");

            entity.HasOne(d => d.IdSimNavigation).WithMany(p => p.BdEnvioSims)
                .HasForeignKey(d => d.IdSim)
                .HasConstraintName("FK_BD_ENVIO_SIMS_BD_MC_SIMS");

            entity.HasOne(d => d.IdUsuarioRecepcionNavigation).WithMany(p => p.BdEnvioSims)
                .HasForeignKey(d => d.IdUsuarioRecepcion)
                .HasConstraintName("FK_BD_ENVIO_SIMS_C_USUARIOS");
        });

        modelBuilder.Entity<BdEnvioUnidad>(entity =>
        {
            entity.HasKey(e => e.IdEnvioUnidad);

            entity.ToTable("BD_ENVIO_UNIDAD");

            entity.HasIndex(e => e.IdEnvio, "IX_BD_ENVIO_UNIDAD_ID_ENVIO").HasFillFactor(80);

            entity.HasIndex(e => e.IdUnidad, "IX_BD_ENVIO_UNIDAD_ID_UNIDAD").HasFillFactor(80);

            entity.HasIndex(e => e.IsRecibida, "IX_BD_ENVIO_UNIDAD_IS_RECIBIDA").HasFillFactor(80);

            entity.Property(e => e.IdEnvioUnidad).HasColumnName("ID_ENVIO_UNIDAD");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.FecRecibida)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_RECIBIDA");
            entity.Property(e => e.IdEnvio).HasColumnName("ID_ENVIO");
            entity.Property(e => e.IdStatusUnidad2).HasColumnName("ID_STATUS_UNIDAD2");
            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.IdUsuarioRecepcion).HasColumnName("ID_USUARIO_RECEPCION");
            entity.Property(e => e.IsRecibida)
                .HasDefaultValueSql("((0))")
                .HasColumnName("IS_RECIBIDA");

            entity.HasOne(d => d.IdEnvioNavigation).WithMany(p => p.BdEnvioUnidads)
                .HasForeignKey(d => d.IdEnvio)
                .HasConstraintName("FK_BD_ENVIO_UNIDAD_BD_ENVIOS");

            entity.HasOne(d => d.IdUnidadNavigation).WithMany(p => p.BdEnvioUnidads)
                .HasForeignKey(d => d.IdUnidad)
                .HasConstraintName("FK_BD_ENVIO_UNIDAD_BD_UNIDADES");

            entity.HasOne(d => d.IdUsuarioRecepcionNavigation).WithMany(p => p.BdEnvioUnidads)
                .HasForeignKey(d => d.IdUsuarioRecepcion)
                .HasConstraintName("FK_BD_ENVIO_UNIDAD_C_USUARIOS");
        });

        modelBuilder.Entity<BdEnvioUnidadPaso>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_ENVIO_UNIDAD_PASO");

            entity.Property(e => e.FechaAlta)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ALTA");
            entity.Property(e => e.IdEnvio).HasColumnName("ID_ENVIO");
            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");
            entity.Property(e => e.IsRecibida).HasColumnName("IS_RECIBIDA");
        });

        modelBuilder.Entity<BdEnviosConsolidado>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_ENVIOS_CONSOLIDADOS");

            entity.Property(e => e.Consolidado).HasColumnName("CONSOLIDADO");
            entity.Property(e => e.IdConsolidado)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_CONSOLIDADO");
            entity.Property(e => e.IdSolicitud).HasColumnName("ID_SOLICITUD");
        });

        modelBuilder.Entity<BdEnviosDocto>(entity =>
        {
            entity.HasKey(e => e.IdEnvioDoctos);

            entity.ToTable("BD_ENVIOS_DOCTOS");

            entity.HasIndex(e => new { e.IdStatusEnvio, e.Status }, "IX_MI_BD_ENVIOS_DOCTOS_11883_11882");

            entity.HasIndex(e => new { e.IdTipoResponsableOrigen, e.IdResponsableOrigen, e.IdStatusEnvio, e.Status }, "IX_MI_BD_ENVIOS_DOCTOS_5459_5458");

            entity.Property(e => e.IdEnvioDoctos).HasColumnName("ID_ENVIO_DOCTOS");
            entity.Property(e => e.Costo)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("COSTO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.FecEnvio)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ENVIO");
            entity.Property(e => e.FecRecepcion)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_RECEPCION");
            entity.Property(e => e.IdResponsableDestino).HasColumnName("ID_RESPONSABLE_DESTINO");
            entity.Property(e => e.IdResponsableOrigen).HasColumnName("ID_RESPONSABLE_ORIGEN");
            entity.Property(e => e.IdServicioMensajeria).HasColumnName("ID_SERVICIO_MENSAJERIA");
            entity.Property(e => e.IdStatusEnvio).HasColumnName("ID_STATUS_ENVIO");
            entity.Property(e => e.IdTipoResponsableDestino).HasColumnName("ID_TIPO_RESPONSABLE_DESTINO");
            entity.Property(e => e.IdTipoResponsableOrigen).HasColumnName("ID_TIPO_RESPONSABLE_ORIGEN");
            entity.Property(e => e.IdUrgenciaEnvio).HasColumnName("ID_URGENCIA_ENVIO");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.NoGuia)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_GUIA");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdEnviosEmail>(entity =>
        {
            entity.HasKey(e => e.IdEnvioEmail).HasName("PK__BD_ENVIO__2C24FF04F2CF26C8");

            entity.ToTable("BD_ENVIOS_EMAILS");

            entity.Property(e => e.IdEnvioEmail).HasColumnName("ID_ENVIO_EMAIL");
            entity.Property(e => e.Asunto)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ASUNTO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.FecFin)
                .HasColumnType("datetime")
                .HasColumnName("FEC_FIN");
            entity.Property(e => e.FecIni)
                .HasColumnType("datetime")
                .HasColumnName("FEC_INI");
            entity.Property(e => e.IdFalla).HasColumnName("ID_FALLA");
            entity.Property(e => e.IdModelo).HasColumnName("ID_MODELO");
            entity.Property(e => e.IdPlantillaEmail).HasColumnName("ID_PLANTILLA_EMAIL");
            entity.Property(e => e.IdServicio).HasColumnName("ID_SERVICIO");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.Nombre)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NOMBRE");
            entity.Property(e => e.NombreEnvio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NOMBRE_ENVIO");
            entity.Property(e => e.Toemail)
                .IsUnicode(false)
                .HasColumnName("TOEMAIL");
        });

        modelBuilder.Entity<BdEnviosEmailsDeployment>(entity =>
        {
            entity.HasKey(e => e.IdEnvioEmailDeployment).HasName("PK__BD_ENVIO__F939886173232AF9");

            entity.ToTable("BD_ENVIOS_EMAILS_DEPLOYMENT");

            entity.Property(e => e.IdEnvioEmailDeployment).HasColumnName("ID_ENVIO_EMAIL_DEPLOYMENT");
            entity.Property(e => e.AsuntoEmail)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ASUNTO_EMAIL");
            entity.Property(e => e.CuerpoEmail)
                .IsUnicode(false)
                .HasColumnName("CUERPO_EMAIL");
            entity.Property(e => e.EmailDestino)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("EMAIL_DESTINO");
            entity.Property(e => e.FecFin)
                .HasColumnType("datetime")
                .HasColumnName("FEC_FIN");
            entity.Property(e => e.FecInicio)
                .HasColumnType("datetime")
                .HasColumnName("FEC_INICIO");
            entity.Property(e => e.IdFalla).HasColumnName("ID_FALLA");
            entity.Property(e => e.IdModelo).HasColumnName("ID_MODELO");
            entity.Property(e => e.IdPlantillaDeployment).HasColumnName("ID_PLANTILLA_DEPLOYMENT");
            entity.Property(e => e.IdServicio).HasColumnName("ID_SERVICIO");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.NombreNotificacion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NOMBRE_NOTIFICACION");
            entity.Property(e => e.TituloEmail)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("TITULO_EMAIL");
        });

        modelBuilder.Entity<BdEnviosProsaAbc>(entity =>
        {
            entity.HasKey(e => e.IdEnviosProsaAbc).HasName("PK__BD_ENVIO__CF4A45D08270F497");

            entity.ToTable("BD_ENVIOS_PROSA_ABC");

            entity.Property(e => e.IdEnviosProsaAbc).HasColumnName("ID_ENVIOS_PROSA_ABC");
            entity.Property(e => e.CadenaEnviada)
                .IsUnicode(false)
                .HasColumnName("CADENA_ENVIADA");
            entity.Property(e => e.CadenaRecibida)
                .IsUnicode(false)
                .HasColumnName("CADENA_RECIBIDA");
            entity.Property(e => e.Comentario)
                .IsUnicode(false)
                .HasColumnName("COMENTARIO");
            entity.Property(e => e.CorteRecibido).HasColumnName("CORTE_RECIBIDO");
            entity.Property(e => e.Estatus)
                .IsUnicode(false)
                .HasColumnName("ESTATUS");
            entity.Property(e => e.EstatusProsa)
                .IsUnicode(false)
                .HasColumnName("ESTATUS_PROSA");
            entity.Property(e => e.FecEnvio)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ENVIO");
            entity.Property(e => e.FecRecibido)
                .HasColumnType("datetime")
                .HasColumnName("FEC_RECIBIDO");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IdBitacoraMovimientosAbc).HasColumnName("ID_BITACORA_MOVIMIENTOS_ABC");
            entity.Property(e => e.IdNegocio).HasColumnName("ID_NEGOCIO");
            entity.Property(e => e.NoAfiliacionAr)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION_AR");
            entity.Property(e => e.NoAfiliacionCadena)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION_CADENA");
            entity.Property(e => e.NombreArchivoEntrada)
                .IsUnicode(false)
                .HasColumnName("NOMBRE_ARCHIVO_ENTRADA");
            entity.Property(e => e.NombreArchivoSalida)
                .IsUnicode(false)
                .HasColumnName("NOMBRE_ARCHIVO_SALIDA");
        });

        modelBuilder.Entity<BdEnviosProsaAbcLog>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_ENVIOS_PROSA_ABC_LOG");

            entity.Property(e => e.CadenaEnviada)
                .IsUnicode(false)
                .HasColumnName("CADENA_ENVIADA");
            entity.Property(e => e.CadenaRecibida)
                .IsUnicode(false)
                .HasColumnName("CADENA_RECIBIDA");
            entity.Property(e => e.Comentario)
                .IsUnicode(false)
                .HasColumnName("COMENTARIO");
            entity.Property(e => e.CorteRecibido).HasColumnName("CORTE_RECIBIDO");
            entity.Property(e => e.Estatus)
                .IsUnicode(false)
                .HasColumnName("ESTATUS");
            entity.Property(e => e.EstatusProsa)
                .IsUnicode(false)
                .HasColumnName("ESTATUS_PROSA");
            entity.Property(e => e.FecEnvio)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ENVIO");
            entity.Property(e => e.FecRecibido)
                .HasColumnType("datetime")
                .HasColumnName("FEC_RECIBIDO");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IdBitacoraMovimientosAbc).HasColumnName("ID_BITACORA_MOVIMIENTOS_ABC");
            entity.Property(e => e.IdEnviosProsaAbc)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_ENVIOS_PROSA_ABC");
            entity.Property(e => e.IdNegocio).HasColumnName("ID_NEGOCIO");
            entity.Property(e => e.NoAfiliacionAr)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION_AR");
            entity.Property(e => e.NoAfiliacionCadena)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION_CADENA");
            entity.Property(e => e.NombreArchivoEntrada)
                .IsUnicode(false)
                .HasColumnName("NOMBRE_ARCHIVO_ENTRADA");
            entity.Property(e => e.NombreArchivoSalida)
                .IsUnicode(false)
                .HasColumnName("NOMBRE_ARCHIVO_SALIDA");
        });

        modelBuilder.Entity<BdEnviosSalesforceBusquedum>(entity =>
        {
            entity.HasKey(e => e.IdEnviosSalesforceBusqueda).HasName("PK__BD_ENVIO__170A663678A14C3B");

            entity.ToTable("BD_ENVIOS_SALESFORCE_BUSQUEDA");

            entity.Property(e => e.IdEnviosSalesforceBusqueda).HasColumnName("ID_ENVIOS_SALESFORCE_BUSQUEDA");
            entity.Property(e => e.Comentario)
                .IsUnicode(false)
                .HasColumnName("COMENTARIO");
            entity.Property(e => e.FechaAlta)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ALTA");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IdCausa).HasColumnName("ID_CAUSA");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.IsSalesforce).HasColumnName("IS_SALESFORCE");
        });

        modelBuilder.Entity<BdEnviosServicioMensajeriasPrecio>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_ENVIOS_SERVICIO_MENSAJERIAS_PRECIO");

            entity.Property(e => e.Costo)
                .HasColumnType("decimal(8, 2)")
                .HasColumnName("COSTO");
            entity.Property(e => e.FechaAlta)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ALTA");
            entity.Property(e => e.IdEnvio).HasColumnName("ID_ENVIO");
            entity.Property(e => e.IdMensajeriaFinal).HasColumnName("ID_MENSAJERIA_FINAL");
            entity.Property(e => e.IdServicioMensajeria).HasColumnName("ID_SERVICIO_MENSAJERIA");
            entity.Property(e => e.IdServicioMensajeriasPrecio)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_SERVICIO_MENSAJERIAS_PRECIO");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.KgFinal).HasColumnName("KG_FINAL");
            entity.Property(e => e.KgSolicitados).HasColumnName("KG_SOLICITADOS");
            entity.Property(e => e.Mensajeria)
                .IsUnicode(false)
                .HasColumnName("MENSAJERIA");
            entity.Property(e => e.NoGuia)
                .IsUnicode(false)
                .HasColumnName("NO_GUIA");
            entity.Property(e => e.PrecioAddicionalPorKg)
                .HasColumnType("decimal(8, 2)")
                .HasColumnName("PRECIO_ADDICIONAL_POR_KG");
            entity.Property(e => e.PrecioFinal)
                .HasColumnType("decimal(8, 2)")
                .HasColumnName("PRECIO_FINAL");
            entity.Property(e => e.PrecioTotal)
                .HasColumnType("decimal(8, 2)")
                .HasColumnName("PRECIO_TOTAL");
            entity.Property(e => e.Servicio)
                .IsUnicode(false)
                .HasColumnName("SERVICIO");
            entity.Property(e => e.Solicitud).HasColumnName("SOLICITUD");
            entity.Property(e => e.Urgencia)
                .IsUnicode(false)
                .HasColumnName("URGENCIA");
            entity.Property(e => e.Zona).HasColumnName("ZONA");
        });

        modelBuilder.Entity<BdEquivaleciasModelo>(entity =>
        {
            entity.HasKey(e => e.IdEquivaliencia).HasName("PK__BD_EQUIV__4C1C0899B71CD290");

            entity.ToTable("BD_EQUIVALECIAS_MODELO");

            entity.Property(e => e.IdEquivaliencia).HasColumnName("ID_EQUIVALIENCIA");
            entity.Property(e => e.DescNuevoModelo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DESC_NUEVO_MODELO");
            entity.Property(e => e.IdModelo).HasColumnName("ID_MODELO");
        });

        modelBuilder.Entity<BdEquivalenciaEstado>(entity =>
        {
            entity.HasKey(e => e.IdEquivalenciaEstado).HasName("PK__BD_EQUIV__F01D840CE759F49E");

            entity.ToTable("BD_EQUIVALENCIA_ESTADO");

            entity.Property(e => e.IdEquivalenciaEstado).HasColumnName("ID_EQUIVALENCIA_ESTADO");
            entity.Property(e => e.DescEstado)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_ESTADO");
            entity.Property(e => e.DescEstadoEquivalencia)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_ESTADO_EQUIVALENCIA");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
        });

        modelBuilder.Entity<BdErrorAsiganacionAutomaticaCp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_ERROR_ASIGANACION_AUTOMATICA_CP");

            entity.Property(e => e.Cp)
                .IsUnicode(false)
                .HasColumnName("CP");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
        });

        modelBuilder.Entity<BdErrorMasivoConectividadAplicativo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_ERROR_MASIVO_CONECTIVIDAD_APLICATIVO");

            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdErrorMasivo)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_ERROR_MASIVO");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Mensaje)
                .IsUnicode(false)
                .HasColumnName("MENSAJE");
            entity.Property(e => e.NoSerie)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");
            entity.Property(e => e.Status)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdErrorUnidadesDaniada>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_ERROR_UNIDADES_DANIADAS");

            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdErrorUnidadesDaniadas)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_ERROR_UNIDADES_DANIADAS");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Mensaje)
                .IsUnicode(false)
                .HasColumnName("MENSAJE");
            entity.Property(e => e.NoSerie)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");
            entity.Property(e => e.Status).HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdErroresCambioModelosMasivo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_ERRORES_CAMBIO_MODELOS_MASIVOS");

            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Mensaje)
                .IsUnicode(false)
                .HasColumnName("MENSAJE");
            entity.Property(e => e.NoSerie)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");
            entity.Property(e => e.Status)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdErroresCambioNoSerieActualNuevo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_ERRORES_CAMBIO_NO_SERIE_ACTUAL_NUEVO");

            entity.Property(e => e.Error)
                .IsUnicode(false)
                .HasColumnName("ERROR");
            entity.Property(e => e.FechaAlta)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ALTA");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.NoSerieActua)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE_ACTUA");
            entity.Property(e => e.NoSerieNuevo)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE_NUEVO");
            entity.Property(e => e.Status).HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdErroresMasivo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_ERRORES_MASIVOS");

            entity.HasIndex(e => e.IdCarga, "missing_index_182_181");

            entity.HasIndex(e => e.IdAr, "missing_index_3626_3625");

            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IdCarga).HasColumnName("ID_CARGA");
            entity.Property(e => e.IdErroresMasivos)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_ERRORES_MASIVOS");
            entity.Property(e => e.IsDuplicadoCarga).HasColumnName("IS_DUPLICADO_CARGA");
            entity.Property(e => e.IsHoraGarantiaProyecto).HasColumnName("IS_HORA_GARANTIA_PROYECTO");
            entity.Property(e => e.IsProductoCarga).HasColumnName("IS_PRODUCTO_CARGA");
            entity.Property(e => e.IsProyectoServicio).HasColumnName("IS_PROYECTO_SERVICIO");
            entity.Property(e => e.IsTecnicoCarga).HasColumnName("IS_TECNICO_CARGA");
            entity.Property(e => e.IsTipoEquipo).HasColumnName("IS_TIPO_EQUIPO");
            entity.Property(e => e.IsValDireccion1).HasColumnName("IS_VAL_DIRECCION_1");
            entity.Property(e => e.IsValDireccion2).HasColumnName("IS_VAL_DIRECCION_2");
            entity.Property(e => e.IsValDireccion3).HasColumnName("IS_VAL_DIRECCION_3");
            entity.Property(e => e.IsValDireccion4).HasColumnName("IS_VAL_DIRECCION_4");
            entity.Property(e => e.IsValDireccion5).HasColumnName("IS_VAL_DIRECCION_5");
            entity.Property(e => e.IsValidandoCp).HasColumnName("IS_VALIDANDO_CP");
            entity.Property(e => e.IsValidarServicioFalla).HasColumnName("IS_VALIDAR_SERVICIO_FALLA");
        });

        modelBuilder.Entity<BdEspecificacionCausaRechazo>(entity =>
        {
            entity.HasKey(e => e.IdEspecificacionCausaRechazo);

            entity.ToTable("BD_ESPECIFICACION_CAUSA_RECHAZO");

            entity.Property(e => e.IdEspecificacionCausaRechazo).HasColumnName("ID_ESPECIFICACION_CAUSA_RECHAZO");
            entity.Property(e => e.DescEspecificacionCausaRechazo)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("DESC_ESPECIFICACION_CAUSA_RECHAZO");
            entity.Property(e => e.IdCausaRechazoParent).HasColumnName("ID_CAUSA_RECHAZO_PARENT");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IsTirNeeded).HasColumnName("IS_TIR_NEEDED");
            entity.Property(e => e.NoValidacionNeeded).HasColumnName("NO_VALIDACION_NEEDED");
            entity.Property(e => e.Status)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdEspecificacionTipoFalla>(entity =>
        {
            entity.HasKey(e => e.IdEspecifTipoFalla);

            entity.ToTable("BD_ESPECIFICACION_TIPO_FALLA");

            entity.Property(e => e.IdEspecifTipoFalla).HasColumnName("ID_ESPECIF_TIPO_FALLA");
            entity.Property(e => e.DescEspecificacionFalla)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("DESC_ESPECIFICACION_FALLA");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdFallaParent).HasColumnName("ID_FALLA_PARENT");
            entity.Property(e => e.IsCobrable).HasColumnName("IS_COBRABLE");
            entity.Property(e => e.IsTirNeeded).HasColumnName("IS_TIR_NEEDED");
            entity.Property(e => e.NoValidacionNeeded).HasColumnName("NO_VALIDACION_NEEDED");
            entity.Property(e => e.Status)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdEtiquetaInformacionUnidadCliente>(entity =>
        {
            entity.HasKey(e => e.IdEtiquetaInformacionUnidadCliente);

            entity.ToTable("BD_ETIQUETA_INFORMACION_UNIDAD_CLIENTE");

            entity.Property(e => e.IdEtiquetaInformacionUnidadCliente).HasColumnName("ID_ETIQUETA_INFORMACION_UNIDAD_CLIENTE");
            entity.Property(e => e.DescEtiquetaInformacionUnidadCliente)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("DESC_ETIQUETA_INFORMACION_UNIDAD_CLIENTE");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdEtiquetaInformacionUnidad).HasColumnName("ID_ETIQUETA_INFORMACION_UNIDAD");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdExecutiveOnBase>(entity =>
        {
            entity.HasKey(e => e.ExecutiveOnBaseId).HasName("PK__BdExecut__4F10A99B85F72DD0");

            entity.ToTable("BdExecutiveOnBase");

            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.Email)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<BdExistenciasConsumiblesTecnico>(entity =>
        {
            entity.HasKey(e => e.IdExistenciaConsumibleTecnico);

            entity.ToTable("BD_EXISTENCIAS_CONSUMIBLES_TECNICOS");

            entity.Property(e => e.IdExistenciaConsumibleTecnico).HasColumnName("ID_EXISTENCIA_CONSUMIBLE_TECNICO");
            entity.Property(e => e.ConsumiblesRecibidos).HasColumnName("CONSUMIBLES_RECIBIDOS");
            entity.Property(e => e.ConsumiblesReportados).HasColumnName("CONSUMIBLES_REPORTADOS");
            entity.Property(e => e.IdConsumible).HasColumnName("ID_CONSUMIBLE");
            entity.Property(e => e.IdTecnico).HasColumnName("ID_TECNICO");
        });

        modelBuilder.Entity<BdExitoLayoutLog>(entity =>
        {
            entity.HasKey(e => e.IdExitoLayoutLog).HasName("PK__BD_EXITO__BA06730E8AA88E5C");

            entity.ToTable("BD_EXITO_LAYOUT_LOG");

            entity.HasIndex(e => e.IdArchivoMasivo, "missing_index_3810_3809");

            entity.HasIndex(e => e.IdArchivo, "missing_index_4902_4901");

            entity.HasIndex(e => e.IdArchivo, "missing_index_62319_62318");

            entity.HasIndex(e => e.IdArchivo, "missing_index_62830_62829");

            entity.HasIndex(e => e.IdArchivo, "missing_index_62986_62985");

            entity.HasIndex(e => e.IdArchivo, "missing_index_62988_62987");

            entity.Property(e => e.IdExitoLayoutLog).HasColumnName("ID_EXITO_LAYOUT_LOG");
            entity.Property(e => e.ActReferencias)
                .IsUnicode(false)
                .HasColumnName("ACT_REFERENCIAS");
            entity.Property(e => e.Afilamx)
                .IsUnicode(false)
                .HasColumnName("AFILAMX");
            entity.Property(e => e.AmexSiNo)
                .IsUnicode(false)
                .HasColumnName("AMEX_SI_NO");
            entity.Property(e => e.Aplicacion)
                .IsUnicode(false)
                .HasColumnName("APLICACION");
            entity.Property(e => e.Atiende)
                .IsUnicode(false)
                .HasColumnName("ATIENDE");
            entity.Property(e => e.Base)
                .IsUnicode(false)
                .HasColumnName("BASE");
            entity.Property(e => e.Bateria)
                .IsUnicode(false)
                .HasColumnName("BATERIA");
            entity.Property(e => e.CableAc)
                .IsUnicode(false)
                .HasColumnName("CABLE_AC");
            entity.Property(e => e.Caja)
                .IsUnicode(false)
                .HasColumnName("CAJA");
            entity.Property(e => e.CierreServicio)
                .IsUnicode(false)
                .HasColumnName("CIERRE_SERVICIO");
            entity.Property(e => e.ConclusionesAmex)
                .IsUnicode(false)
                .HasColumnName("CONCLUSIONES_AMEX");
            entity.Property(e => e.Correo)
                .IsUnicode(false)
                .HasColumnName("CORREO");
            entity.Property(e => e.CorreoEnviado)
                .IsUnicode(false)
                .HasColumnName("CORREO_ENVIADO");
            entity.Property(e => e.Discover)
                .IsUnicode(false)
                .HasColumnName("DISCOVER");
            entity.Property(e => e.Eliminador)
                .IsUnicode(false)
                .HasColumnName("ELIMINADOR");
            entity.Property(e => e.Estatus)
                .IsUnicode(false)
                .HasColumnName("ESTATUS");
            entity.Property(e => e.FechaCierre)
                .IsUnicode(false)
                .HasColumnName("FECHA_CIERRE");
            entity.Property(e => e.HorasCierre).HasColumnName("HORAS_CIERRE");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IdArchivo).HasColumnName("ID_ARCHIVO");
            entity.Property(e => e.IdArchivoMasivo).HasColumnName("ID_ARCHIVO_MASIVO");
            entity.Property(e => e.IdCausaCancelacion)
                .IsUnicode(false)
                .HasColumnName("ID_CAUSA_CANCELACION");
            entity.Property(e => e.Idamx)
                .IsUnicode(false)
                .HasColumnName("IDAMX");
            entity.Property(e => e.Idcriteriocambio)
                .IsUnicode(false)
                .HasColumnName("IDCRITERIOCAMBIO");
            entity.Property(e => e.Idrechazo)
                .IsUnicode(false)
                .HasColumnName("IDRECHAZO");
            entity.Property(e => e.InstalacionesElavonDescMarca)
                .IsUnicode(false)
                .HasColumnName("INSTALACIONES_ELAVON_DESC_MARCA");
            entity.Property(e => e.InstalacionesElavonDescModelo)
                .IsUnicode(false)
                .HasColumnName("INSTALACIONES_ELAVON_DESC_MODELO");
            entity.Property(e => e.InstalacionesElavonNoSerie)
                .IsUnicode(false)
                .HasColumnName("INSTALACIONES_ELAVON_NO_SERIE");
            entity.Property(e => e.IsApp)
                .IsUnicode(false)
                .HasColumnName("IS_APP");
            entity.Property(e => e.IsComercioNotifado)
                .IsUnicode(false)
                .HasColumnName("IS_COMERCIO_NOTIFADO");
            entity.Property(e => e.IsPromociones)
                .IsUnicode(false)
                .HasColumnName("IS_PROMOCIONES");
            entity.Property(e => e.IsSmc).HasColumnName("IS_SMC");
            entity.Property(e => e.MarcaMantto)
                .IsUnicode(false)
                .HasColumnName("MARCA_MANTTO");
            entity.Property(e => e.Marcasime)
                .IsUnicode(false)
                .HasColumnName("MARCASIME");
            entity.Property(e => e.Marcasims)
                .IsUnicode(false)
                .HasColumnName("MARCASIMS");
            entity.Property(e => e.MinutoCierre).HasColumnName("MINUTO_CIERRE");
            entity.Property(e => e.ModeloMantto)
                .IsUnicode(false)
                .HasColumnName("MODELO_MANTTO");
            entity.Property(e => e.NoSerieMantto)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE_MANTTO");
            entity.Property(e => e.Odtexterna)
                .IsUnicode(false)
                .HasColumnName("ODTEXTERNA");
            entity.Property(e => e.OtorganteVobo)
                .IsUnicode(false)
                .HasColumnName("OTORGANTE_VOBO");
            entity.Property(e => e.OtorganteVoboRechazo)
                .IsUnicode(false)
                .HasColumnName("OTORGANTE_VOBO_RECHAZO");
            entity.Property(e => e.RetirosElavonDescMarca)
                .IsUnicode(false)
                .HasColumnName("RETIROS_ELAVON_DESC_MARCA");
            entity.Property(e => e.RetirosElavonDescModelo)
                .IsUnicode(false)
                .HasColumnName("RETIROS_ELAVON_DESC_MODELO");
            entity.Property(e => e.RetirosElavonNoSerie)
                .IsUnicode(false)
                .HasColumnName("RETIROS_ELAVON_NO_SERIE");
            entity.Property(e => e.Rollosinst)
                .IsUnicode(false)
                .HasColumnName("ROLLOSINST");
            entity.Property(e => e.Simentra)
                .IsUnicode(false)
                .HasColumnName("SIMENTRA");
            entity.Property(e => e.Simsale)
                .IsUnicode(false)
                .HasColumnName("SIMSALE");
            entity.Property(e => e.Subrechazo)
                .IsUnicode(false)
                .HasColumnName("SUBRECHAZO");
            entity.Property(e => e.Tapa)
                .IsUnicode(false)
                .HasColumnName("TAPA");
            entity.Property(e => e.TecnologiaEntrada)
                .IsUnicode(false)
                .HasColumnName("TECNOLOGIA_ENTRADA");
            entity.Property(e => e.TecnologiaMantto)
                .IsUnicode(false)
                .HasColumnName("TECNOLOGIA_MANTTO");
            entity.Property(e => e.TecnologiaSalida)
                .IsUnicode(false)
                .HasColumnName("TECNOLOGIA_SALIDA");
            entity.Property(e => e.TelefonoCampo)
                .IsUnicode(false)
                .HasColumnName("TELEFONO_CAMPO");
            entity.Property(e => e.TelefonoComercio1)
                .IsUnicode(false)
                .HasColumnName("TELEFONO_COMERCIO_1");
            entity.Property(e => e.TelefonoComercio2)
                .IsUnicode(false)
                .HasColumnName("TELEFONO_COMERCIO_2");
            entity.Property(e => e.Ticket)
                .IsUnicode(false)
                .HasColumnName("TICKET");
            entity.Property(e => e.TipoAtencion)
                .IsUnicode(false)
                .HasColumnName("TIPO_ATENCION");
            entity.Property(e => e.Version)
                .IsUnicode(false)
                .HasColumnName("VERSION");
            entity.Property(e => e.Version2)
                .IsUnicode(false)
                .HasColumnName("VERSION2");
        });

        modelBuilder.Entity<BdExtravioPorMensajeriaCargaMasivaPdf>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_EXTRAVIO_POR_MENSAJERIA_CARGA_MASIVA_PDF");

            entity.Property(e => e.ArchivoSistema)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ARCHIVO_SISTEMA");
            entity.Property(e => e.ArchivoUsuario)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ARCHIVO_USUARIO");
            entity.Property(e => e.Cadena)
                .IsUnicode(false)
                .HasColumnName("CADENA");
            entity.Property(e => e.Comentario)
                .HasMaxLength(5000)
                .IsUnicode(false)
                .HasColumnName("COMENTARIO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdReparacionCargaPdf)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_REPARACION_CARGA_PDF");
            entity.Property(e => e.IdStatusUnidad).HasColumnName("ID_STATUS_UNIDAD");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Motivo)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("MOTIVO");
        });

        modelBuilder.Entity<BdExtravioPorMensajeriaCargaPdf>(entity =>
        {
            entity.HasKey(e => e.IdReparacionCargaPdf).HasName("PK__BD_EXTRA__CEE12DE554AC5FAC");

            entity.ToTable("BD_EXTRAVIO_POR_MENSAJERIA_CARGA_PDF");

            entity.Property(e => e.IdReparacionCargaPdf).HasColumnName("ID_REPARACION_CARGA_PDF");
            entity.Property(e => e.ArchivoSistema)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ARCHIVO_SISTEMA");
            entity.Property(e => e.ArchivoUsuario)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ARCHIVO_USUARIO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
        });

        modelBuilder.Entity<BdFallaConFallaEncontradum>(entity =>
        {
            entity.HasKey(e => e.IdFallaFallaEncontrada);

            entity.ToTable("BD_FALLA_CON_FALLA_ENCONTRADA");

            entity.Property(e => e.IdFallaFallaEncontrada).HasColumnName("ID_FALLA_FALLA_ENCONTRADA");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdFallaHijo).HasColumnName("ID_FALLA_HIJO");
            entity.Property(e => e.IdFallaPadre).HasColumnName("ID_FALLA_PADRE");
            entity.Property(e => e.Status)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdFallaEspecificaTipoFalla>(entity =>
        {
            entity.HasKey(e => e.IdFallaEspecificaTipoFalla);

            entity.ToTable("BD_FALLA_ESPECIFICA_TIPO_FALLA");

            entity.HasIndex(e => new { e.IdFalla, e.IdCliente }, "IX_MI_BD_FALLA_ESPECIFICA_TIPO_FALLA_11848_11847");

            entity.HasIndex(e => new { e.IdFalla, e.IdCliente, e.IdTipoFalla }, "IX_MI_BD_FALLA_ESPECIFICA_TIPO_FALLA_11850_11849");

            entity.HasIndex(e => new { e.IdFalla, e.IdCliente }, "IX_MI_BD_FALLA_ESPECIFICA_TIPO_FALLA_11852_11851");

            entity.HasIndex(e => e.IdFalla, "IX_MI_BD_FALLA_ESPECIFICA_TIPO_FALLA_4679_4678");

            entity.HasIndex(e => new { e.IdFalla, e.IdEspecifTipoFalla }, "IX_MI_BD_FALLA_ESPECIFICA_TIPO_FALLA_6167_6166");

            entity.Property(e => e.IdFallaEspecificaTipoFalla).HasColumnName("ID_FALLA_ESPECIFICA_TIPO_FALLA");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdEspecifTipoFalla).HasColumnName("ID_ESPECIF_TIPO_FALLA");
            entity.Property(e => e.IdFalla).HasColumnName("ID_FALLA");
            entity.Property(e => e.IdTipoFalla).HasColumnName("ID_TIPO_FALLA");
            entity.Property(e => e.Status)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdFallasSantander>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_FALLAS_SANTANDER");

            entity.Property(e => e.ClaveSantander)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CLAVE_SANTANDER");
            entity.Property(e => e.IdFalla).HasColumnName("ID_FALLA");
            entity.Property(e => e.IdFallasSantander)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_FALLAS_SANTANDER");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdFallasTecnicosReingenierium>(entity =>
        {
            entity.HasKey(e => e.IdServiciosTecnicosReingenieria).HasName("PK__BD_FALLA__1F8B0BBCBC81DE48");

            entity.ToTable("BD_FALLAS_TECNICOS_REINGENIERIA");

            entity.Property(e => e.IdServiciosTecnicosReingenieria).HasColumnName("ID_SERVICIOS_TECNICOS_REINGENIERIA");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdFalla).HasColumnName("ID_FALLA");
            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Status)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdFestivo>(entity =>
        {
            entity.HasKey(e => e.IdFestivos);

            entity.ToTable("BD_FESTIVOS");

            entity.HasIndex(e => e.IdFestivos, "IX_BD_FESTIVOS").IsUnique();

            entity.Property(e => e.IdFestivos).HasColumnName("ID_FESTIVOS");
            entity.Property(e => e.Dia)
                .HasColumnType("date")
                .HasColumnName("DIA");
        });

        modelBuilder.Entity<BdFotoAr>(entity =>
        {
            entity.HasKey(e => e.IdFotoAr);

            entity.ToTable("BD_FOTO_AR");

            entity.Property(e => e.IdFotoAr).HasColumnName("ID_FOTO_AR");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IdAttach).HasColumnName("ID_ATTACH");

            entity.HasOne(d => d.IdAttachNavigation).WithMany(p => p.BdFotoArs)
                .HasForeignKey(d => d.IdAttach)
                .HasConstraintName("FK_BD_FOTO_AR_BD_ATTACH");
        });

        modelBuilder.Entity<BdGarantiaAlmacen>(entity =>
        {
            entity.HasKey(e => e.IdGarantiaAlmacen);

            entity.ToTable("BD_GARANTIA_ALMACEN");

            entity.Property(e => e.IdGarantiaAlmacen).HasColumnName("ID_GARANTIA_ALMACEN");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.Horas).HasColumnName("HORAS");
            entity.Property(e => e.HorasGarantia).HasColumnName("HORAS_GARANTIA");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.IdWeekDays).HasColumnName("ID_WEEK_DAYS");
            entity.Property(e => e.Minutos).HasColumnName("MINUTOS");
            entity.Property(e => e.Status)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdGastosOperacion>(entity =>
        {
            entity.HasKey(e => e.IdGastosOp);

            entity.ToTable("BD_GASTOS_OPERACION");

            entity.Property(e => e.IdGastosOp).HasColumnName("ID_GASTOS_OP");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.Importe)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IMPORTE");
            entity.Property(e => e.Month).HasColumnName("MONTH");
            entity.Property(e => e.Year).HasColumnName("YEAR");
        });

        modelBuilder.Entity<BdGruposCliente>(entity =>
        {
            entity.HasKey(e => e.IdGrupoCliente);

            entity.ToTable("BD_GRUPOS_CLIENTES");

            entity.Property(e => e.IdGrupoCliente).HasColumnName("ID_GRUPO_CLIENTE");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdGrupo).HasColumnName("ID_GRUPO");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");

            entity.HasOne(d => d.IdClienteNavigation).WithMany(p => p.BdGruposClientes)
                .HasForeignKey(d => d.IdCliente)
                .HasConstraintName("FK_BD_GRUPOS_CLIENTES_C_CLIENTES");

            entity.HasOne(d => d.IdGrupoNavigation).WithMany(p => p.BdGruposClientes)
                .HasForeignKey(d => d.IdGrupo)
                .HasConstraintName("FK_BD_GRUPOS_CLIENTES_C_GRUPOS");
        });

        modelBuilder.Entity<BdHistoricoPassword>(entity =>
        {
            entity.HasKey(e => e.IdHistoricoPassword);

            entity.ToTable("BD_HISTORICO_PASSWORD");

            entity.Property(e => e.IdHistoricoPassword).HasColumnName("ID_HISTORICO_PASSWORD");
            entity.Property(e => e.FecAlta)
                .HasColumnType("date")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("PASSWORD");
        });

        modelBuilder.Entity<BdHorarioHorasMe>(entity =>
        {
            entity.HasKey(e => e.IdHorarioHorasMes);

            entity.ToTable("BD_HORARIO_HORAS_MES");

            entity.HasIndex(e => new { e.IdHorario, e.Mes, e.Anio }, "IX_MI_BD_HORARIO_HORAS_MES_6690_6689");

            entity.HasIndex(e => new { e.Mes, e.Anio }, "IX_MI_BD_HORARIO_HORAS_MES_6692_6691");

            entity.Property(e => e.IdHorarioHorasMes).HasColumnName("ID_HORARIO_HORAS_MES");
            entity.Property(e => e.Anio).HasColumnName("ANIO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.HorasMes).HasColumnName("HORAS_MES");
            entity.Property(e => e.IdHorario).HasColumnName("ID_HORARIO");
            entity.Property(e => e.Mes).HasColumnName("MES");

            entity.HasOne(d => d.IdHorarioNavigation).WithMany(p => p.BdHorarioHorasMes)
                .HasForeignKey(d => d.IdHorario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BD_HORARIO_HORAS_MES_C_HORARIOS");
        });

        modelBuilder.Entity<BdHorarioWeekhour>(entity =>
        {
            entity.HasKey(e => e.IdHorarioWeekhour).HasName("PK_BD_UPTIME_WEEKHOUR");

            entity.ToTable("BD_HORARIO_WEEKHOUR");

            entity.HasIndex(e => e.IdHorario, "IX_BD_HORARIO_WEEKHOUR_ID_HORARIO").HasFillFactor(80);

            entity.Property(e => e.IdHorarioWeekhour).HasColumnName("ID_HORARIO_WEEKHOUR");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdHorario).HasColumnName("ID_HORARIO");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.IdWeekhour).HasColumnName("ID_WEEKHOUR");

            entity.HasOne(d => d.IdHorarioNavigation).WithMany(p => p.BdHorarioWeekhours)
                .HasForeignKey(d => d.IdHorario)
                .HasConstraintName("FK_BD_HORARIO_WEEKHOUR_C_HORARIOS");

            entity.HasOne(d => d.IdWeekhourNavigation).WithMany(p => p.BdHorarioWeekhours)
                .HasForeignKey(d => d.IdWeekhour)
                .HasConstraintName("FK_BD_UPTIME_WEEKHOUR_C_WEEKHOURS");
        });

        modelBuilder.Entity<BdIatum>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("bd_iata");

            entity.Property(e => e.Cargo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("cargo");
            entity.Property(e => e.Ciudad)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ciudad");
            entity.Property(e => e.Frec)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("frec");
            entity.Property(e => e.Iata)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("iata");
            entity.Property(e => e.IdIata).HasColumnName("id_iata");
            entity.Property(e => e.Lowzip)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("lowzip");
            entity.Property(e => e.Rotulo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("rotulo");
            entity.Property(e => e.Serv)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("serv");
            entity.Property(e => e.Upzip)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("upzip");
        });

        modelBuilder.Entity<BdIguala>(entity =>
        {
            entity.HasKey(e => e.IdIgualas);

            entity.ToTable("BD_IGUALAS");

            entity.HasIndex(e => new { e.Year, e.Month, e.NoAfiliacion }, "IX_BD_IGUALAS");

            entity.Property(e => e.IdIgualas).HasColumnName("ID_IGUALAS");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IsDolar).HasColumnName("IS_DOLAR");
            entity.Property(e => e.Month).HasColumnName("MONTH");
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.Precio)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("PRECIO");
            entity.Property(e => e.PrecioDolar)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("PRECIO_DOLAR");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.TipoDeCambio)
                .HasColumnType("decimal(8, 4)")
                .HasColumnName("TIPO_DE_CAMBIO");
            entity.Property(e => e.Year).HasColumnName("YEAR");
        });

        modelBuilder.Entity<BdIgualasAltum>(entity =>
        {
            entity.HasKey(e => e.IdIgualaAlta);

            entity.ToTable("BD_IGUALAS_ALTA");

            entity.Property(e => e.IdIgualaAlta).HasColumnName("ID_IGUALA_ALTA");
            entity.Property(e => e.HavePriceProblem).HasColumnName("HAVE_PRICE_PROBLEM");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.IsAfiliacionNoValido).HasColumnName("IS_AFILIACION_NO_VALIDO");
            entity.Property(e => e.IsClienteNoConfigurado).HasColumnName("IS_CLIENTE_NO_CONFIGURADO");
            entity.Property(e => e.IsDolar).HasColumnName("IS_DOLAR");
            entity.Property(e => e.IsDuplicadoExcel).HasColumnName("IS_DUPLICADO_EXCEL");
            entity.Property(e => e.IsIgualaRepetida).HasColumnName("IS_IGUALA_REPETIDA");
            entity.Property(e => e.IsProcesado).HasColumnName("IS_PROCESADO");
            entity.Property(e => e.Month).HasColumnName("MONTH");
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.Precio)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("PRECIO");
            entity.Property(e => e.PrecioDolar)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("PRECIO_DOLAR");
            entity.Property(e => e.TipoDeCambio)
                .HasColumnType("decimal(8, 4)")
                .HasColumnName("TIPO_DE_CAMBIO");
            entity.Property(e => e.Year).HasColumnName("YEAR");
        });

        modelBuilder.Entity<BdInfoErroresCargaMasiva>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_INFO_ERRORES_CARGA_MASIVA");

            entity.Property(e => e.Causa)
                .IsUnicode(false)
                .HasColumnName("CAUSA");
            entity.Property(e => e.IdInfoErroresCargaMasiva)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_INFO_ERRORES_CARGA_MASIVA");
            entity.Property(e => e.Mensaje)
                .IsUnicode(false)
                .HasColumnName("MENSAJE");
            entity.Property(e => e.Status)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdInformacionUnidadAr>(entity =>
        {
            entity.HasKey(e => e.IdInformacionUnidadAr);

            entity.ToTable("BD_INFORMACION_UNIDAD_AR");

            entity.HasIndex(e => e.IdAr, "IX_BD_INFORMACION_UNIDAD_AR_ID_AR").HasFillFactor(80);

            entity.Property(e => e.IdInformacionUnidadAr).HasColumnName("ID_INFORMACION_UNIDAD_AR");
            entity.Property(e => e.Aplicacion)
                .IsUnicode(false)
                .HasColumnName("APLICACION");
            entity.Property(e => e.CapacidadDiscoDuro)
                .IsUnicode(false)
                .HasColumnName("CAPACIDAD_DISCO_DURO");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.InstalacionLlaves)
                .IsUnicode(false)
                .HasColumnName("INSTALACION_LLAVES");
            entity.Property(e => e.LectorTarjeta)
                .IsUnicode(false)
                .HasColumnName("LECTOR_TARJETA");
            entity.Property(e => e.Memoria)
                .IsUnicode(false)
                .HasColumnName("MEMORIA");
            entity.Property(e => e.Monitor)
                .IsUnicode(false)
                .HasColumnName("MONITOR");
            entity.Property(e => e.NombrePersonaLlavesA)
                .IsUnicode(false)
                .HasColumnName("NOMBRE_PERSONA_LLAVES_A");
            entity.Property(e => e.NombrePersonaLlavesB)
                .IsUnicode(false)
                .HasColumnName("NOMBRE_PERSONA_LLAVES_B");
            entity.Property(e => e.Procesador)
                .IsUnicode(false)
                .HasColumnName("PROCESADOR");
            entity.Property(e => e.StatusInstalacionLlaves)
                .IsUnicode(false)
                .HasColumnName("STATUS_INSTALACION_LLAVES");
            entity.Property(e => e.TipoLlave)
                .IsUnicode(false)
                .HasColumnName("TIPO_LLAVE");
            entity.Property(e => e.TipoPw)
                .IsUnicode(false)
                .HasColumnName("TIPO_PW");
            entity.Property(e => e.TipoTeclado)
                .IsUnicode(false)
                .HasColumnName("TIPO_TECLADO");
            entity.Property(e => e.VelocidadProcesador)
                .IsUnicode(false)
                .HasColumnName("VELOCIDAD_PROCESADOR");
            entity.Property(e => e.Version)
                .IsUnicode(false)
                .HasColumnName("VERSION");
            entity.Property(e => e.VersionTecladoEpp)
                .IsUnicode(false)
                .HasColumnName("VERSION_TECLADO_EPP");
        });

        modelBuilder.Entity<BdIngenieroAsignacion>(entity =>
        {
            entity.HasKey(e => e.IdIngenieroAsignacion).HasName("PK__BD_INGEN__621CE09AE23C5E22");

            entity.ToTable("BD_INGENIERO_ASIGNACION");

            entity.Property(e => e.IdIngenieroAsignacion).HasColumnName("ID_INGENIERO_ASIGNACION");
            entity.Property(e => e.IdFalla).HasColumnName("ID_FALLA");
            entity.Property(e => e.IdRegion).HasColumnName("ID_REGION");
            entity.Property(e => e.IdServicio).HasColumnName("ID_SERVICIO");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.Status)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdIngenieroAsignacion2>(entity =>
        {
            entity.HasKey(e => e.IdIngenieroAsignacion).HasName("PK__BD_INGEN__621CE09A1469D2B0");

            entity.ToTable("BD_INGENIERO_ASIGNACION_2");

            entity.Property(e => e.IdIngenieroAsignacion).HasColumnName("ID_INGENIERO_ASIGNACION");
            entity.Property(e => e.IdFalla).HasColumnName("ID_FALLA");
            entity.Property(e => e.IdRegion).HasColumnName("ID_REGION");
            entity.Property(e => e.IdServicio).HasColumnName("ID_SERVICIO");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.Status)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdIngreso>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_INGRESOS");

            entity.HasIndex(e => new { e.Year, e.Month, e.Secuencia }, "IX_BD_INGRESOS").IsUnique();

            entity.Property(e => e.Afiliacion)
                .HasMaxLength(50)
                .HasColumnName("AFILIACION");
            entity.Property(e => e.Cliente)
                .HasMaxLength(50)
                .HasColumnName("CLIENTE");
            entity.Property(e => e.IdRegion).HasColumnName("ID_REGION");
            entity.Property(e => e.Moneda)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("MONEDA");
            entity.Property(e => e.Month).HasColumnName("MONTH");
            entity.Property(e => e.Plaza)
                .HasMaxLength(50)
                .HasColumnName("PLAZA");
            entity.Property(e => e.Precio)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PRECIO");
            entity.Property(e => e.Producto)
                .HasMaxLength(15)
                .IsFixedLength()
                .HasColumnName("PRODUCTO");
            entity.Property(e => e.Proyecto)
                .HasMaxLength(80)
                .IsFixedLength()
                .HasColumnName("PROYECTO");
            entity.Property(e => e.Secuencia).HasColumnName("SECUENCIA");
            entity.Property(e => e.Tc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TC");
            entity.Property(e => e.TipoIngreso)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("TIPO_INGRESO");
            entity.Property(e => e.TotalPesos)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TOTAL_PESOS");
            entity.Property(e => e.Year).HasColumnName("YEAR");
        });

        modelBuilder.Entity<BdIngresoArchivoInsumo>(entity =>
        {
            entity.HasKey(e => e.IdIngresoArchivoInsumo).HasName("PK__BD_INGRE__A2E7631D1449BC23");

            entity.ToTable("BD_INGRESO_ARCHIVO_INSUMOS");

            entity.Property(e => e.IdIngresoArchivoInsumo).HasColumnName("ID_INGRESO_ARCHIVO_INSUMO");
            entity.Property(e => e.Cantidad).HasColumnName("CANTIDAD");
            entity.Property(e => e.DescError)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_ERROR");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdArchivo).HasColumnName("ID_ARCHIVO");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdInsumo).HasColumnName("ID_INSUMO");
            entity.Property(e => e.IdResponsable).HasColumnName("ID_RESPONSABLE");
            entity.Property(e => e.IdStatusInsumo).HasColumnName("ID_STATUS_INSUMO");
            entity.Property(e => e.IdTipoResponsable).HasColumnName("ID_TIPO_RESPONSABLE");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.StatusArchivo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS_ARCHIVO");
        });

        modelBuilder.Entity<BdIngresoArchivosAlmacen>(entity =>
        {
            entity.HasKey(e => e.IdArchivoAlmacen);

            entity.ToTable("BD_INGRESO_ARCHIVOS_ALMACEN");

            entity.Property(e => e.IdArchivoAlmacen).HasColumnName("ID_ARCHIVO_ALMACEN");
            entity.Property(e => e.Categoria).HasColumnName("CATEGORIA");
            entity.Property(e => e.DescError)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("DESC_ERROR");
            entity.Property(e => e.FechaAltaArchivo)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_ALTA_ARCHIVO");
            entity.Property(e => e.FechaCompra)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_COMPRA");
            entity.Property(e => e.FechaVencimientoKernel)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_VENCIMIENTO_KERNEL");
            entity.Property(e => e.IdAplicativo).HasColumnName("ID_APLICATIVO");
            entity.Property(e => e.IdArchivo).HasColumnName("ID_ARCHIVO");
            entity.Property(e => e.IdCarrier).HasColumnName("ID_CARRIER");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdConectividad).HasColumnName("ID_CONECTIVIDAD");
            entity.Property(e => e.IdFabricante).HasColumnName("ID_FABRICANTE");
            entity.Property(e => e.IdMarca).HasColumnName("ID_MARCA");
            entity.Property(e => e.IdModelo).HasColumnName("ID_MODELO");
            entity.Property(e => e.IdResponsable).HasColumnName("ID_RESPONSABLE");
            entity.Property(e => e.IdResponsableDestino).HasColumnName("ID_RESPONSABLE_DESTINO");
            entity.Property(e => e.IdTipoConexion).HasColumnName("ID_TIPO_CONEXION");
            entity.Property(e => e.IdTipoResponsableDestino).HasColumnName("ID_TIPO_RESPONSABLE_DESTINO");
            entity.Property(e => e.IdTipoTerminal).HasColumnName("ID_TIPO_TERMINAL");
            entity.Property(e => e.IdUsuarioAltaArchivo).HasColumnName("ID_USUARIO_ALTA_ARCHIVO");
            entity.Property(e => e.IsSim).HasColumnName("IS_SIM");
            entity.Property(e => e.NoImei)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_IMEI");
            entity.Property(e => e.NoSim)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SIM");
            entity.Property(e => e.Serie)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SERIE");
            entity.Property(e => e.StatusArchivo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS_ARCHIVO");
            entity.Property(e => e.VersionAplicativo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("VERSION_APLICATIVO");
            entity.Property(e => e.VersionKernel)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("VERSION_KERNEL");
        });

        modelBuilder.Entity<BdIngresoArchivosAsignacion>(entity =>
        {
            entity.HasKey(e => e.IdArchivoMasivo);

            entity.ToTable("BD_INGRESO_ARCHIVOS_ASIGNACION");

            entity.HasIndex(e => new { e.IdArchivo, e.StatusArchivo }, "IX_MI_BD_INGRESO_ARCHIVOS_ASIGNACION_8589_8588");

            entity.Property(e => e.IdArchivoMasivo).HasColumnName("ID_ARCHIVO_MASIVO");
            entity.Property(e => e.DescError)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("DESC_ERROR");
            entity.Property(e => e.FecAtencion)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ATENCION");
            entity.Property(e => e.FechaAltaArchivo)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_ALTA_ARCHIVO");
            entity.Property(e => e.HoraAtencion)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("HORA_ATENCION");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IdArchivo).HasColumnName("ID_ARCHIVO");
            entity.Property(e => e.IdDispatcher).HasColumnName("ID_DISPATCHER");
            entity.Property(e => e.IdTecnico).HasColumnName("ID_TECNICO");
            entity.Property(e => e.IdUsuarioAltaArchivo).HasColumnName("ID_USUARIO_ALTA_ARCHIVO");
            entity.Property(e => e.StatusArchivo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS_ARCHIVO");
        });

        modelBuilder.Entity<BdIngresoArchivosExito>(entity =>
        {
            entity.HasKey(e => e.IdArchivoMasivo).HasName("PK_BD_INGRESO_ARCHIVOS");

            entity.ToTable("BD_INGRESO_ARCHIVOS_EXITO");

            entity.HasIndex(e => e.IdArchivo, "IX_BD_INGRESO_ARCHIVOS_EXITO_ID_ARCHIVO");

            entity.Property(e => e.IdArchivoMasivo).HasColumnName("ID_ARCHIVO_MASIVO");
            entity.Property(e => e.Aplicacion)
                .IsUnicode(false)
                .HasColumnName("APLICACION");
            entity.Property(e => e.Atiende)
                .IsUnicode(false)
                .HasColumnName("ATIENDE");
            entity.Property(e => e.CadenaCierreEscrita)
                .IsUnicode(false)
                .HasColumnName("CADENA_CIERRE_ESCRITA");
            entity.Property(e => e.Caja)
                .IsUnicode(false)
                .HasColumnName("CAJA");
            entity.Property(e => e.CapacidadDiscoDuro)
                .IsUnicode(false)
                .HasColumnName("CAPACIDAD_DISCO_DURO");
            entity.Property(e => e.CodigoIntervencion)
                .IsUnicode(false)
                .HasColumnName("CODIGO_INTERVENCION");
            entity.Property(e => e.DescError)
                .IsUnicode(false)
                .HasColumnName("DESC_ERROR");
            entity.Property(e => e.DescErrorMov)
                .IsUnicode(false)
                .HasColumnName("DESC_ERROR_MOV");
            entity.Property(e => e.DescripcionTrabajo)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_TRABAJO");
            entity.Property(e => e.DigitoVerificador)
                .IsUnicode(false)
                .HasColumnName("DIGITO_VERIFICADOR");
            entity.Property(e => e.FallaEncontrada)
                .IsUnicode(false)
                .HasColumnName("FALLA_ENCONTRADA");
            entity.Property(e => e.FecCierre)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_CIERRE");
            entity.Property(e => e.FecFinIngeniero)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_FIN_INGENIERO");
            entity.Property(e => e.FecIniIngeniero)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_INI_INGENIERO");
            entity.Property(e => e.FecLlegada)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_LLEGADA");
            entity.Property(e => e.FecLlegadaTerceros)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_LLEGADA_TERCEROS");
            entity.Property(e => e.FechaAltaArchivo)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_ALTA_ARCHIVO");
            entity.Property(e => e.FolioServicio)
                .IsUnicode(false)
                .HasColumnName("FOLIO_SERVICIO");
            entity.Property(e => e.FolioTas)
                .IsUnicode(false)
                .HasColumnName("FOLIO_TAS");
            entity.Property(e => e.FolioTir)
                .IsUnicode(false)
                .HasColumnName("FOLIO_TIR");
            entity.Property(e => e.FolioValidacion)
                .IsUnicode(false)
                .HasColumnName("FOLIO_VALIDACION");
            entity.Property(e => e.HoraCierre)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("HORA_CIERRE");
            entity.Property(e => e.HoraFinIngeniero)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("HORA_FIN_INGENIERO");
            entity.Property(e => e.HoraIniIngeniero)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("HORA_INI_INGENIERO");
            entity.Property(e => e.HoraLlegada)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("HORA_LLEGADA");
            entity.Property(e => e.HoraLlegadaTerceros)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("HORA_LLEGADA_TERCEROS");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IdArchivo).HasColumnName("ID_ARCHIVO");
            entity.Property(e => e.IdCausa).HasColumnName("ID_CAUSA");
            entity.Property(e => e.IdEspecifTipoFalla).HasColumnName("ID_ESPECIF_TIPO_FALLA");
            entity.Property(e => e.IdModeloFalla).HasColumnName("ID_MODELO_FALLA");
            entity.Property(e => e.IdSolucion).HasColumnName("ID_SOLUCION");
            entity.Property(e => e.IdTipoFallaEncontrada).HasColumnName("ID_TIPO_FALLA_ENCONTRADA");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.IdUsuarioAltaArchivo).HasColumnName("ID_USUARIO_ALTA_ARCHIVO");
            entity.Property(e => e.InstalacionLlaves)
                .IsUnicode(false)
                .HasColumnName("INSTALACION_LLAVES");
            entity.Property(e => e.IntensidadSenial)
                .IsUnicode(false)
                .HasColumnName("INTENSIDAD_SENIAL");
            entity.Property(e => e.IsBoletin).HasColumnName("IS_BOLETIN");
            entity.Property(e => e.IsCobrable).HasColumnName("IS_COBRABLE");
            entity.Property(e => e.IsDaniada).HasColumnName("IS_DANIADA");
            entity.Property(e => e.IsMov).HasColumnName("IS_MOV");
            entity.Property(e => e.IsSimRemplazada).HasColumnName("IS_SIM_REMPLAZADA");
            entity.Property(e => e.IsSoporteCliente).HasColumnName("IS_SOPORTE_CLIENTE");
            entity.Property(e => e.LectorTarjeta)
                .IsUnicode(false)
                .HasColumnName("LECTOR_TARJETA");
            entity.Property(e => e.Memoria)
                .IsUnicode(false)
                .HasColumnName("MEMORIA");
            entity.Property(e => e.MinutoCierre)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MINUTO_CIERRE");
            entity.Property(e => e.MinutoFinIngeniero)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MINUTO_FIN_INGENIERO");
            entity.Property(e => e.MinutoIniIngeniero)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MINUTO_INI_INGENIERO");
            entity.Property(e => e.MinutoLlegada)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MINUTO_LLEGADA");
            entity.Property(e => e.MinutoLlegadaTercero)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MINUTO_LLEGADA_TERCERO");
            entity.Property(e => e.Monitor)
                .IsUnicode(false)
                .HasColumnName("MONITOR");
            entity.Property(e => e.MotivoCobro)
                .IsUnicode(false)
                .HasColumnName("MOTIVO_COBRO");
            entity.Property(e => e.NoEquipo)
                .IsUnicode(false)
                .HasColumnName("NO_EQUIPO");
            entity.Property(e => e.NoEquipoMov)
                .IsUnicode(false)
                .HasColumnName("NO_EQUIPO_MOV");
            entity.Property(e => e.NoInventarioFalla)
                .IsUnicode(false)
                .HasColumnName("NO_INVENTARIO_FALLA");
            entity.Property(e => e.NoSerieEntrada)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE_ENTRADA");
            entity.Property(e => e.NoSerieFalla)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE_FALLA");
            entity.Property(e => e.NoSerieSalida)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE_SALIDA");
            entity.Property(e => e.NombrePersonaLlavesA)
                .IsUnicode(false)
                .HasColumnName("NOMBRE_PERSONA_LLAVES_A");
            entity.Property(e => e.NombrePersonaLlavesB)
                .IsUnicode(false)
                .HasColumnName("NOMBRE_PERSONA_LLAVES_B");
            entity.Property(e => e.OtorganteSoporteCliente)
                .IsUnicode(false)
                .HasColumnName("OTORGANTE_SOPORTE_CLIENTE");
            entity.Property(e => e.OtorganteTas)
                .IsUnicode(false)
                .HasColumnName("OTORGANTE_TAS");
            entity.Property(e => e.OtorganteVobo)
                .IsUnicode(false)
                .HasColumnName("OTORGANTE_VOBO");
            entity.Property(e => e.OtorganteVoboCliente)
                .IsUnicode(false)
                .HasColumnName("OTORGANTE_VOBO_CLIENTE");
            entity.Property(e => e.OtorganteVoboTerceros)
                .IsUnicode(false)
                .HasColumnName("OTORGANTE_VOBO_TERCEROS");
            entity.Property(e => e.Precio)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("PRECIO");
            entity.Property(e => e.Procesador)
                .IsUnicode(false)
                .HasColumnName("PROCESADOR");
            entity.Property(e => e.StatusArchivo)
                .IsUnicode(false)
                .HasColumnName("STATUS_ARCHIVO");
            entity.Property(e => e.StatusInstalacionLlaves)
                .IsUnicode(false)
                .HasColumnName("STATUS_INSTALACION_LLAVES");
            entity.Property(e => e.StatusMov)
                .IsUnicode(false)
                .HasColumnName("STATUS_MOV");
            entity.Property(e => e.TipoLlave)
                .IsUnicode(false)
                .HasColumnName("TIPO_LLAVE");
            entity.Property(e => e.TipoPw)
                .IsUnicode(false)
                .HasColumnName("TIPO_PW");
            entity.Property(e => e.TipoTeclado)
                .IsUnicode(false)
                .HasColumnName("TIPO_TECLADO");
            entity.Property(e => e.VelocidadProcesador)
                .IsUnicode(false)
                .HasColumnName("VELOCIDAD_PROCESADOR");
            entity.Property(e => e.Version)
                .IsUnicode(false)
                .HasColumnName("VERSION");
            entity.Property(e => e.VersionTecladoEpp)
                .IsUnicode(false)
                .HasColumnName("VERSION_TECLADO_EPP");
            entity.Property(e => e.VoltajeNeutro)
                .IsUnicode(false)
                .HasColumnName("VOLTAJE_NEUTRO");
            entity.Property(e => e.VoltajeTierra)
                .IsUnicode(false)
                .HasColumnName("VOLTAJE_TIERRA");
            entity.Property(e => e.VoltajeTierraNeutro)
                .IsUnicode(false)
                .HasColumnName("VOLTAJE_TIERRA_NEUTRO");
        });

        modelBuilder.Entity<BdIngresoArchivosRechazo>(entity =>
        {
            entity.HasKey(e => e.IdArchivoMasivo);

            entity.ToTable("BD_INGRESO_ARCHIVOS_RECHAZO");

            entity.Property(e => e.IdArchivoMasivo).HasColumnName("ID_ARCHIVO_MASIVO");
            entity.Property(e => e.AutorizacionRechazo)
                .IsUnicode(false)
                .HasColumnName("AUTORIZACION_RECHAZO");
            entity.Property(e => e.DescError)
                .IsUnicode(false)
                .HasColumnName("DESC_ERROR");
            entity.Property(e => e.DescErrorMov)
                .IsUnicode(false)
                .HasColumnName("DESC_ERROR_MOV");
            entity.Property(e => e.DescripcionTrabajo)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_TRABAJO");
            entity.Property(e => e.FecCierre)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_CIERRE");
            entity.Property(e => e.FechaAltaArchivo)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_ALTA_ARCHIVO");
            entity.Property(e => e.FolioServicio)
                .IsUnicode(false)
                .HasColumnName("FOLIO_SERVICIO");
            entity.Property(e => e.HoraCierre)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("HORA_CIERRE");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IdArchivo).HasColumnName("ID_ARCHIVO");
            entity.Property(e => e.IdCausa).HasColumnName("ID_CAUSA");
            entity.Property(e => e.IdCausaRechazo).HasColumnName("ID_CAUSA_RECHAZO");
            entity.Property(e => e.IdEspecificaCausaRechazo).HasColumnName("ID_ESPECIFICA_CAUSA_RECHAZO");
            entity.Property(e => e.IdSolucion).HasColumnName("ID_SOLUCION");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.IdUsuarioAltaArchivo).HasColumnName("ID_USUARIO_ALTA_ARCHIVO");
            entity.Property(e => e.IsCobrable).HasColumnName("IS_COBRABLE");
            entity.Property(e => e.IsDaniada).HasColumnName("IS_DANIADA");
            entity.Property(e => e.IsMov).HasColumnName("IS_MOV");
            entity.Property(e => e.MinutoCierre)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MINUTO_CIERRE");
            entity.Property(e => e.NoEquipoMov)
                .IsUnicode(false)
                .HasColumnName("NO_EQUIPO_MOV");
            entity.Property(e => e.NoSerieEntrada)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE_ENTRADA");
            entity.Property(e => e.NoSerieSalida)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE_SALIDA");
            entity.Property(e => e.OtorganteVobo)
                .IsUnicode(false)
                .HasColumnName("OTORGANTE_VOBO");
            entity.Property(e => e.Precio)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("PRECIO");
            entity.Property(e => e.StatusArchivo)
                .IsUnicode(false)
                .HasColumnName("STATUS_ARCHIVO");
            entity.Property(e => e.StatusMov)
                .IsUnicode(false)
                .HasColumnName("STATUS_MOV");
        });

        modelBuilder.Entity<BdIngresoMovInventario>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_INGRESO_MOV_INVENTARIOS");

            entity.Property(e => e.IdAplicativoEntrada).HasColumnName("ID_APLICATIVO_ENTRADA");
            entity.Property(e => e.IdAplicativoSalida).HasColumnName("ID_APLICATIVO_SALIDA");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IdArchivoMovimiento).HasColumnName("ID_ARCHIVO_MOVIMIENTO");
            entity.Property(e => e.IdBdMovInventarios)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_BD_MOV_INVENTARIOS");
            entity.Property(e => e.IdConectividadEntrada).HasColumnName("ID_CONECTIVIDAD_ENTRADA");
            entity.Property(e => e.IdConectividadSalida).HasColumnName("ID_CONECTIVIDAD_SALIDA");
            entity.Property(e => e.InstalacionesElavonDescModelo)
                .IsUnicode(false)
                .HasColumnName("INSTALACIONES_ELAVON_DESC_MODELO");
            entity.Property(e => e.InstalacionesElavonNoSerie)
                .IsUnicode(false)
                .HasColumnName("INSTALACIONES_ELAVON_NO_SERIE");
            entity.Property(e => e.InstalacionesIdUnidad).HasColumnName("INSTALACIONES_ID_UNIDAD");
            entity.Property(e => e.NoAr)
                .IsUnicode(false)
                .HasColumnName("NO_AR");
            entity.Property(e => e.Observaciones)
                .IsUnicode(false)
                .HasColumnName("OBSERVACIONES");
            entity.Property(e => e.RetirosElavonDescModelo)
                .IsUnicode(false)
                .HasColumnName("RETIROS_ELAVON_DESC_MODELO");
            entity.Property(e => e.RetirosElavonNoSerie)
                .IsUnicode(false)
                .HasColumnName("RETIROS_ELAVON_NO_SERIE");
            entity.Property(e => e.RetirosIdUnidad).HasColumnName("RETIROS_ID_UNIDAD");
        });

        modelBuilder.Entity<BdIngresoMovInventariosLog>(entity =>
        {
            entity.HasKey(e => e.IdIngresoMovInventariosLog).HasName("PK__BD_INGRE__4482CC37D468DA0E");

            entity.ToTable("BD_INGRESO_MOV_INVENTARIOS_LOG");

            entity.Property(e => e.IdIngresoMovInventariosLog).HasColumnName("ID_INGRESO_MOV_INVENTARIOS_LOG");
            entity.Property(e => e.AplicativoEntrada)
                .IsUnicode(false)
                .HasColumnName("APLICATIVO_ENTRADA");
            entity.Property(e => e.AplicativoSalida)
                .IsUnicode(false)
                .HasColumnName("APLICATIVO_SALIDA");
            entity.Property(e => e.Base)
                .IsUnicode(false)
                .HasColumnName("BASE");
            entity.Property(e => e.Bateria)
                .IsUnicode(false)
                .HasColumnName("BATERIA");
            entity.Property(e => e.CableAc)
                .IsUnicode(false)
                .HasColumnName("CABLE_AC");
            entity.Property(e => e.ConectividadEntrada)
                .IsUnicode(false)
                .HasColumnName("CONECTIVIDAD_ENTRADA");
            entity.Property(e => e.ConectividadSalida)
                .IsUnicode(false)
                .HasColumnName("CONECTIVIDAD_SALIDA");
            entity.Property(e => e.Eliminador)
                .IsUnicode(false)
                .HasColumnName("ELIMINADOR");
            entity.Property(e => e.IdAplicativoEntrada)
                .IsUnicode(false)
                .HasColumnName("ID_APLICATIVO_ENTRADA");
            entity.Property(e => e.IdAplicativoSalida)
                .IsUnicode(false)
                .HasColumnName("ID_APLICATIVO_SALIDA");
            entity.Property(e => e.IdAr)
                .IsUnicode(false)
                .HasColumnName("ID_AR");
            entity.Property(e => e.IdArchivo).HasColumnName("idArchivo");
            entity.Property(e => e.IdBdIngresoMovInventarios).HasColumnName("ID_BD_INGRESO_MOV_INVENTARIOS");
            entity.Property(e => e.IdConectividadEntrada)
                .IsUnicode(false)
                .HasColumnName("ID_CONECTIVIDAD_ENTRADA");
            entity.Property(e => e.IdConectividadSalida)
                .IsUnicode(false)
                .HasColumnName("ID_CONECTIVIDAD_SALIDA");
            entity.Property(e => e.IdInstalacionModelo)
                .IsUnicode(false)
                .HasColumnName("ID_INSTALACION_MODELO");
            entity.Property(e => e.IdRetiroModelo)
                .IsUnicode(false)
                .HasColumnName("ID_RETIRO_MODELO");
            entity.Property(e => e.InstalacionIdUnidad)
                .IsUnicode(false)
                .HasColumnName("INSTALACION_ID_UNIDAD");
            entity.Property(e => e.InstalacionModelo)
                .IsUnicode(false)
                .HasColumnName("INSTALACION_MODELO");
            entity.Property(e => e.InstalacionNoSerie)
                .IsUnicode(false)
                .HasColumnName("INSTALACION_NO_SERIE");
            entity.Property(e => e.MarcaMantto)
                .IsUnicode(false)
                .HasColumnName("MARCA_MANTTO");
            entity.Property(e => e.ModeloMantto)
                .IsUnicode(false)
                .HasColumnName("MODELO_MANTTO");
            entity.Property(e => e.NoSerieMantto)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE_MANTTO");
            entity.Property(e => e.Odt)
                .IsUnicode(false)
                .HasColumnName("ODT");
            entity.Property(e => e.RetiroIdUnidad)
                .IsUnicode(false)
                .HasColumnName("RETIRO_ID_UNIDAD");
            entity.Property(e => e.RetiroModelo)
                .IsUnicode(false)
                .HasColumnName("RETIRO_MODELO");
            entity.Property(e => e.RetiroNoSerie)
                .IsUnicode(false)
                .HasColumnName("RETIRO_NO_SERIE");
            entity.Property(e => e.Tapa)
                .IsUnicode(false)
                .HasColumnName("TAPA");
            entity.Property(e => e.TecnologiaMantto)
                .IsUnicode(false)
                .HasColumnName("TECNOLOGIA_MANTTO");
        });

        modelBuilder.Entity<BdIngresosVistum>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("bd_ingresos_vista");

            entity.Property(e => e.IdConcepto).HasColumnName("id_concepto");
            entity.Property(e => e.IdProyecto).HasColumnName("id_proyecto");
            entity.Property(e => e.IdRegion).HasColumnName("id_region");
            entity.Property(e => e.Month).HasColumnName("month");
            entity.Property(e => e.Tipo)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("tipo");
            entity.Property(e => e.TipoIngreso)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("tipo_ingreso");
            entity.Property(e => e.TotalPesos)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("total_pesos");
            entity.Property(e => e.Year).HasColumnName("year");
        });

        modelBuilder.Entity<BdInstalacionRetirosMasivo>(entity =>
        {
            entity.HasKey(e => e.IdInstalacionRetirosMasivos).HasName("PK__BD_INSTA__393E759F3AC99438");

            entity.ToTable("BD_INSTALACION_RETIROS_MASIVOS");

            entity.Property(e => e.IdInstalacionRetirosMasivos).HasColumnName("ID_INSTALACION_RETIROS_MASIVOS");
            entity.Property(e => e.AplicativoInstalado)
                .IsUnicode(false)
                .HasColumnName("APLICATIVO_INSTALADO");
            entity.Property(e => e.AplicativoRetirado)
                .IsUnicode(false)
                .HasColumnName("APLICATIVO_RETIRADO");
            entity.Property(e => e.ConectividadInstalada)
                .IsUnicode(false)
                .HasColumnName("CONECTIVIDAD_INSTALADA");
            entity.Property(e => e.ConectividadRetirada)
                .IsUnicode(false)
                .HasColumnName("CONECTIVIDAD_RETIRADA");
            entity.Property(e => e.IdCargasInstalacionRetiros).HasColumnName("ID_CARGAS_INSTALACION_RETIROS");
            entity.Property(e => e.ModeloInstalado)
                .IsUnicode(false)
                .HasColumnName("MODELO_INSTALADO");
            entity.Property(e => e.ModeloTerminalSale)
                .IsUnicode(false)
                .HasColumnName("MODELO_TERMINAL_SALE");
            entity.Property(e => e.NoAfiliacion)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.NumSerieSimEntra)
                .IsUnicode(false)
                .HasColumnName("NUM_SERIE_SIM_ENTRA");
            entity.Property(e => e.NumSerieSimSale)
                .IsUnicode(false)
                .HasColumnName("NUM_SERIE_SIM_SALE");
            entity.Property(e => e.NumSerieTerminalEntra)
                .IsUnicode(false)
                .HasColumnName("NUM_SERIE_TERMINAL_ENTRA");
            entity.Property(e => e.NumeroSerieTerminalSale)
                .IsUnicode(false)
                .HasColumnName("NUMERO_SERIE_TERMINAL_SALE");
            entity.Property(e => e.Observaciones)
                .IsUnicode(false)
                .HasColumnName("OBSERVACIONES");
            entity.Property(e => e.Odt)
                .IsUnicode(false)
                .HasColumnName("ODT");
            entity.Property(e => e.Status)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdInstalacione>(entity =>
        {
            entity.HasKey(e => e.IdInstalacion);

            entity.ToTable("BD_INSTALACIONES");

            entity.HasIndex(e => e.IdAr, "IX_BD_INSTALACIONES");

            entity.HasIndex(e => e.IdUnidad, "IX_BD_INSTALACIONES_1");

            entity.Property(e => e.IdInstalacion).HasColumnName("ID_INSTALACION");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdAplicativo).HasColumnName("ID_APLICATIVO");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IdClienteIni).HasColumnName("ID_CLIENTE_INI");
            entity.Property(e => e.IdConectividad).HasColumnName("ID_CONECTIVIDAD");
            entity.Property(e => e.IdNegocio).HasColumnName("ID_NEGOCIO");
            entity.Property(e => e.IdParent).HasColumnName("ID_PARENT");
            entity.Property(e => e.IdTecnico).HasColumnName("ID_TECNICO");
            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.IsNueva).HasColumnName("IS_NUEVA");
            entity.Property(e => e.Tipo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("TIPO");

            entity.HasOne(d => d.IdClienteIniNavigation).WithMany(p => p.BdInstalaciones)
                .HasForeignKey(d => d.IdClienteIni)
                .HasConstraintName("FK_BD_INSTALACIONES_C_CLIENTES");

            entity.HasOne(d => d.IdNegocioNavigation).WithMany(p => p.BdInstalaciones)
                .HasForeignKey(d => d.IdNegocio)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BD_INSTALACIONES_BD_NEGOCIOS");

            entity.HasOne(d => d.IdParentNavigation).WithMany(p => p.BdInstalacioneIdParentNavigations)
                .HasForeignKey(d => d.IdParent)
                .HasConstraintName("FK_BD_INSTALACIONES_BD_UNIDADES1");

            entity.HasOne(d => d.IdTecnicoNavigation).WithMany(p => p.BdInstalaciones)
                .HasForeignKey(d => d.IdTecnico)
                .HasConstraintName("FK_BD_INSTALACIONES_C_USUARIOS");

            entity.HasOne(d => d.IdUnidadNavigation).WithMany(p => p.BdInstalacioneIdUnidadNavigations)
                .HasForeignKey(d => d.IdUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BD_INSTALACIONES_BD_UNIDADES");
        });

        modelBuilder.Entity<BdInsumo>(entity =>
        {
            entity.HasKey(e => e.IdBdInsumo).HasName("PK__BD_INSUM__F768FC8BF5E6F90A");

            entity.ToTable("BD_INSUMOS", tb =>
                {
                    tb.HasTrigger("TR_CONTROL_INSUMO_DELETE");
                    tb.HasTrigger("TR_CONTROL_INSUMO_INSERT");
                });

            entity.Property(e => e.IdBdInsumo).HasColumnName("ID_BD_INSUMO");
            entity.Property(e => e.Cantidad).HasColumnName("CANTIDAD");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdInsumo).HasColumnName("ID_INSUMO");
            entity.Property(e => e.IdItemsSolicitudAlmacen).HasColumnName("ID_ITEMS_SOLICITUD_ALMACEN");
            entity.Property(e => e.IdOrdenCompra).HasColumnName("ID_ORDEN_COMPRA");
            entity.Property(e => e.IdResponsable).HasColumnName("ID_RESPONSABLE");
            entity.Property(e => e.IdSolicitudRecoleccion).HasColumnName("ID_SOLICITUD_RECOLECCION");
            entity.Property(e => e.IdStatusInsumo).HasColumnName("ID_STATUS_INSUMO");
            entity.Property(e => e.IdTipoResponsable).HasColumnName("ID_TIPO_RESPONSABLE");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.NoTarima)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NO_TARIMA");
            entity.Property(e => e.PosicionInventario)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("POSICION_INVENTARIO");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdInsumosAltum>(entity =>
        {
            entity.HasKey(e => e.IdInsumosAlta).HasName("PK__BD_INSUM__FF7E81862DE23FD8");

            entity.ToTable("BD_INSUMOS_ALTA");

            entity.Property(e => e.IdInsumosAlta).HasColumnName("ID_INSUMOS_ALTA");
            entity.Property(e => e.Cantidades).HasColumnName("CANTIDADES");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdInsumo).HasColumnName("ID_INSUMO");
            entity.Property(e => e.IdResponsable).HasColumnName("ID_RESPONSABLE");
            entity.Property(e => e.IdSolicitudRecoleccion).HasColumnName("ID_SOLICITUD_RECOLECCION");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.IsNullCliente).HasColumnName("IS_NULL_CLIENTE");
            entity.Property(e => e.IsProcesada).HasColumnName("IS_PROCESADA");
            entity.Property(e => e.NoTarima)
                .HasMaxLength(50)
                .HasColumnName("NO_TARIMA");
            entity.Property(e => e.PosicionInventario)
                .HasMaxLength(50)
                .HasColumnName("POSICION_INVENTARIO");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdIntegrationRequestsOnBase>(entity =>
        {
            entity.HasKey(e => e.IntegrationRequestOnBaseId).HasName("PK__BdIntegr__B655518E35D7FCFD");

            entity.ToTable("BdIntegrationRequestsOnBase");

            entity.Property(e => e.IntegrationRequestOnBaseId).HasDefaultValueSql("(newid())");
            entity.Property(e => e.Channel)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.NumFolio)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SignType)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<BdInvInsumosPaso>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_inv_insumos_paso");

            entity.Property(e => e.Comentario)
                .IsUnicode(false)
                .HasColumnName("COMENTARIO");
            entity.Property(e => e.IdAuditoria).HasColumnName("ID_AUDITORIA");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdInsumo).HasColumnName("ID_INSUMO");
            entity.Property(e => e.IdInsumoPaso)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_INSUMO_PASO");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.Status).HasColumnName("STATUS");
            entity.Property(e => e.TotalIng).HasColumnName("TOTAL_ING");
            entity.Property(e => e.TotalSistema).HasColumnName("TOTAL_SISTEMA");
        });

        modelBuilder.Entity<BdInvUnidadesPaso>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_inv_unidades_paso");

            entity.Property(e => e.Aplicativo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APLICATIVO");
            entity.Property(e => e.Cliente)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("CLIENTE");
            entity.Property(e => e.Comentario)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("COMENTARIO");
            entity.Property(e => e.Conectividad)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CONECTIVIDAD");
            entity.Property(e => e.Daniada).HasColumnName("DANIADA");
            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");
            entity.Property(e => e.IdAuditoria).HasColumnName("ID_AUDITORIA");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdFisico).HasColumnName("ID_FISICO");
            entity.Property(e => e.IdModelo).HasColumnName("ID_MODELO");
            entity.Property(e => e.IdRazon).HasColumnName("ID_RAZON");
            entity.Property(e => e.IdStatusUnidad).HasColumnName("ID_STATUS_UNIDAD");
            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");
            entity.Property(e => e.IdUnidadPaso)
                .ValueGeneratedOnAdd()
                .HasColumnName("id_unidad_paso");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.IsConfirmacion).HasColumnName("IS_CONFIRMACION");
            entity.Property(e => e.IsNoConfirmacion).HasColumnName("IS_NO_CONFIRMACION");
            entity.Property(e => e.Marca)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MARCA");
            entity.Property(e => e.Modelo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MODELO");
            entity.Property(e => e.NoSerie)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");
            entity.Property(e => e.Producto)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PRODUCTO");
        });

        modelBuilder.Entity<BdItemsSolicitudAlmacen>(entity =>
        {
            entity.HasKey(e => e.IdItemsSolicitudAlmacen);

            entity.ToTable("BD_ITEMS_SOLICITUD_ALMACEN");

            entity.HasIndex(e => e.IdSolicitudAlmacen, "IX_BD_ITEMS_SOLICITUD_ALMACEN_ID_SOLICITUD_ALMACEN").HasFillFactor(80);

            entity.HasIndex(e => e.IdStatusItemsSolicitudAlmacen, "IX_BD_ITEMS_SOLICITUD_ALMACEN_ID_STATUS_ITEMS_SOLICITUD_ALMACEN");

            entity.HasIndex(e => e.IdUnidad, "IX_BD_ITEMS_SOLICITUD_ALMACEN_ID_UNIDAD").HasFillFactor(80);

            entity.HasIndex(e => e.IdCliente, "IX_MI_BD_ITEMS_SOLICITUD_ALMACEN_254_253");

            entity.Property(e => e.IdItemsSolicitudAlmacen).HasColumnName("ID_ITEMS_SOLICITUD_ALMACEN");
            entity.Property(e => e.CantidadItems).HasColumnName("CANTIDAD_ITEMS");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdConectividad).HasColumnName("ID_CONECTIVIDAD");
            entity.Property(e => e.IdInsumo).HasColumnName("ID_INSUMO");
            entity.Property(e => e.IdKitInsumo).HasColumnName("ID_KIT_INSUMO");
            entity.Property(e => e.IdMarca).HasColumnName("ID_MARCA");
            entity.Property(e => e.IdModelo).HasColumnName("ID_MODELO");
            entity.Property(e => e.IdParentInsumo).HasColumnName("ID_PARENT_INSUMO");
            entity.Property(e => e.IdSoftware).HasColumnName("ID_SOFTWARE");
            entity.Property(e => e.IdSolicitudAlmacen).HasColumnName("ID_SOLICITUD_ALMACEN");
            entity.Property(e => e.IdSparePart).HasColumnName("ID_SPARE_PART");
            entity.Property(e => e.IdStatusItemsSolicitudAlmacen).HasColumnName("ID_STATUS_ITEMS_SOLICITUD_ALMACEN");
            entity.Property(e => e.IdTipoItemSolicitudAlmacen).HasColumnName("ID_TIPO_ITEM_SOLICITUD_ALMACEN");
            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.IsEmbarque).HasColumnName("IS_EMBARQUE");
            entity.Property(e => e.IsSurtido)
                .HasDefaultValueSql("((0))")
                .HasColumnName("IS_SURTIDO");
            entity.Property(e => e.Notas)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasColumnName("NOTAS");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdKitInsumo>(entity =>
        {
            entity.HasKey(e => e.IdKitInsumo).HasName("PK__BD_KIT_I__E3DEE2B0FF55C6D9");

            entity.ToTable("BD_KIT_INSUMOS");

            entity.Property(e => e.IdKitInsumo).HasColumnName("ID_KIT_INSUMO");
            entity.Property(e => e.Cantidad).HasColumnName("CANTIDAD");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdInsumo).HasColumnName("ID_INSUMO");
            entity.Property(e => e.IdInsumoParent).HasColumnName("ID_INSUMO_PARENT");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdLegalRepresentativeOnBase>(entity =>
        {
            entity.HasKey(e => e.LegalRepresentativeOnBaseId).HasName("PK__BdLegalR__DCFDEBA026D21366");

            entity.ToTable("BdLegalRepresentativeOnBase");

            entity.Property(e => e.Buc)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BUC");
            entity.Property(e => e.City)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.Country)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.District)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.Email)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.IdentifierDocumentNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Number)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.PostalCode)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.RefPoint1)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.RefPoint2)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.Rfc)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RFC");
            entity.Property(e => e.State)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.Street)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Surname)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<BdLicenciasReporteElavonSantander>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_LICENCIAS_REPORTE_ELAVON_SANTANDER");

            entity.Property(e => e.Licencia)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("LICENCIA");
            entity.Property(e => e.Serie)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("SERIE");
        });

        modelBuilder.Entity<BdLoadFilterDhl>(entity =>
        {
            entity.HasKey(e => e.IdLoadFilterDhl).HasName("PK__BD_LOAD___34823661904E8C4E");

            entity.ToTable("BD_LOAD_FILTER_DHL");

            entity.Property(e => e.IdLoadFilterDhl).HasColumnName("ID_LOAD_FILTER_DHL");
            entity.Property(e => e.Cliente)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CLIENTE");
            entity.Property(e => e.CostoSgs)
                .HasColumnType("decimal(8, 2)")
                .HasColumnName("COSTO_SGS");
            entity.Property(e => e.IdCarga).HasColumnName("ID_CARGA");
            entity.Property(e => e.IdCargaEnvioDhl).HasColumnName("ID_CARGA_ENVIO_DHL");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdEnvio).HasColumnName("ID_ENVIO");
            entity.Property(e => e.IdRegion).HasColumnName("ID_REGION");
            entity.Property(e => e.IdServicioMensajeriaPrecio).HasColumnName("ID_SERVICIO_MENSAJERIA_PRECIO");
            entity.Property(e => e.NoGuia)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NO_GUIA");
            entity.Property(e => e.Region)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("REGION");
        });

        modelBuilder.Entity<BdLoadFilterEstafetum>(entity =>
        {
            entity.HasKey(e => e.IdLoadFilterEstafeta).HasName("PK__BD_LOAD___BFBA0BB9A829BB6E");

            entity.ToTable("BD_LOAD_FILTER_ESTAFETA");

            entity.Property(e => e.IdLoadFilterEstafeta).HasColumnName("ID_LOAD_FILTER_ESTAFETA");
            entity.Property(e => e.Cliente)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CLIENTE");
            entity.Property(e => e.CostoSgs)
                .HasColumnType("decimal(8, 2)")
                .HasColumnName("COSTO_SGS");
            entity.Property(e => e.IdCarga).HasColumnName("ID_CARGA");
            entity.Property(e => e.IdCargaEnvioEstafeta).HasColumnName("ID_CARGA_ENVIO_ESTAFETA");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdEnvio).HasColumnName("ID_ENVIO");
            entity.Property(e => e.IdRegion).HasColumnName("ID_REGION");
            entity.Property(e => e.IdServicioMensajeriaPrecio).HasColumnName("ID_SERVICIO_MENSAJERIA_PRECIO");
            entity.Property(e => e.NoGuia)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NO_GUIA");
            entity.Property(e => e.Region)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("REGION");
        });

        modelBuilder.Entity<BdLogCargaMasivaTablaTotalProcesado>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_LOG_CARGA_MASIVA_TABLA_TOTAL_PROCESADOS");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");
            entity.Property(e => e.IdCarga).HasColumnName("ID_CARGA");
            entity.Property(e => e.IdLogCargaMasivaTablaTotalProcesados)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_LOG_CARGA_MASIVA_TABLA_TOTAL_PROCESADOS");
            entity.Property(e => e.Nombre)
                .IsUnicode(false)
                .HasColumnName("NOMBRE");
            entity.Property(e => e.Totalerrores).HasColumnName("TOTALERRORES");
            entity.Property(e => e.Totalprocesado).HasColumnName("TOTALPROCESADO");
            entity.Property(e => e.Totalregistros).HasColumnName("TOTALREGISTROS");
        });

        modelBuilder.Entity<BdLogCp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_LOG_CP");

            entity.HasIndex(e => e.IdCarga, "missing_index_3624_3623");

            entity.HasIndex(e => e.IdAr, "missing_index_905_904");

            entity.Property(e => e.Cp)
                .IsUnicode(false)
                .HasColumnName("CP");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IdCarga).HasColumnName("ID_CARGA");
            entity.Property(e => e.IdLogCp)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_LOG_CP");
            entity.Property(e => e.Longitud).HasColumnName("LONGITUD");
            entity.Property(e => e.ValStatus)
                .IsUnicode(false)
                .HasColumnName("VAL_STATUS");
        });

        modelBuilder.Entity<BdLogErroresEmailSolicitude>(entity =>
        {
            entity.HasKey(e => e.IdLogErrorEmail).HasName("PK_BD_LOG_ERROR_EMAIL_SOLICITUDES");

            entity.ToTable("BD_LOG_ERRORES_EMAIL_SOLICITUDES");

            entity.Property(e => e.IdLogErrorEmail).HasColumnName("ID_LOG_ERROR_EMAIL");
            entity.Property(e => e.DescripcionError)
                .HasMaxLength(1500)
                .HasColumnName("DESCRIPCION_ERROR");
            entity.Property(e => e.FechaAlta)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ALTA");
            entity.Property(e => e.Modulo)
                .HasMaxLength(200)
                .HasColumnName("MODULO");
        });

        modelBuilder.Entity<BdLogInboxSalesforce>(entity =>
        {
            entity.HasKey(e => e.IdLogInboxSalesforce).HasName("PK__BD_LOG_I__AB1378F3AED140E0");

            entity.ToTable("BD_LOG_INBOX_SALESFORCE");

            entity.Property(e => e.IdLogInboxSalesforce).HasColumnName("ID_LOG_INBOX_SALESFORCE");
            entity.Property(e => e.IdArLogWsSalesforce).HasColumnName("ID_AR_LOG_WS_SALESFORCE");
            entity.Property(e => e.IdSalesforceInbox).HasColumnName("ID_SALESFORCE_INBOX");
        });

        modelBuilder.Entity<BdLogUsuariosAsignacion>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("bd_log_usuarios_asignacion");

            entity.Property(e => e.IdFalla).HasColumnName("id_falla");
            entity.Property(e => e.IdLogUsuariosAsignacion)
                .ValueGeneratedOnAdd()
                .HasColumnName("id_log_usuarios_asignacion");
            entity.Property(e => e.IdServicio).HasColumnName("id_servicio");
        });

        modelBuilder.Entity<BdLoginUser>(entity =>
        {
            entity.ToTable("BD_LOGIN_USERS");

            entity.Property(e => e.Date).HasColumnType("datetime");
            entity.Property(e => e.IpAddress)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IpMachine)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Password)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.UserAgent)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Username)
                .HasMaxLength(250)
                .IsUnicode(false);
        });

        modelBuilder.Entity<BdLogro>(entity =>
        {
            entity.HasKey(e => e.IdLogro);

            entity.ToTable("BD_LOGROS");

            entity.Property(e => e.IdLogro).HasColumnName("ID_LOGRO");
            entity.Property(e => e.Comentario)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("COMENTARIO");
            entity.Property(e => e.Cuantificacion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CUANTIFICACION");
            entity.Property(e => e.DescLogro)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_LOGRO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.FecAuditable)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_AUDITABLE");
            entity.Property(e => e.FecRealCierre)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_REAL_CIERRE");
            entity.Property(e => e.IdArea).HasColumnName("ID_AREA");
            entity.Property(e => e.IdGerente).HasColumnName("ID_GERENTE");
            entity.Property(e => e.IdResponsable).HasColumnName("ID_RESPONSABLE");
            entity.Property(e => e.IdTipoLogro).HasColumnName("ID_TIPO_LOGRO");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Status)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdLogroBlog>(entity =>
        {
            entity.HasKey(e => e.IdLogroBlog);

            entity.ToTable("BD_LOGRO_BLOG");

            entity.Property(e => e.IdLogroBlog).HasColumnName("ID_LOGRO_BLOG");
            entity.Property(e => e.Comentario)
                .IsUnicode(false)
                .HasColumnName("COMENTARIO");
            entity.Property(e => e.FechaAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_ALTA");
            entity.Property(e => e.IdLogro).HasColumnName("ID_LOGRO");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
        });

        modelBuilder.Entity<BdLogrosResponsable>(entity =>
        {
            entity.HasKey(e => e.IdLogrosResponsables);

            entity.ToTable("BD_LOGROS_RESPONSABLES");

            entity.Property(e => e.IdLogrosResponsables).HasColumnName("ID_LOGROS_RESPONSABLES");
            entity.Property(e => e.IdArea).HasColumnName("ID_AREA");
            entity.Property(e => e.IdLogro).HasColumnName("ID_LOGRO");
            entity.Property(e => e.IdResponsable).HasColumnName("ID_RESPONSABLE");
        });

        modelBuilder.Entity<BdLogsCargaMasivaTablaErrore>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_LOGS_CARGA_MASIVA_TABLA_ERRORES");

            entity.HasIndex(e => e.IdCarga, "missing_index_202_201");

            entity.Property(e => e.Cp)
                .IsUnicode(false)
                .HasColumnName("CP");
            entity.Property(e => e.DescFalla)
                .IsUnicode(false)
                .HasColumnName("DESC_FALLA");
            entity.Property(e => e.DescServicio)
                .IsUnicode(false)
                .HasColumnName("DESC_SERVICIO");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IdCarga).HasColumnName("ID_CARGA");
            entity.Property(e => e.IdLogsCargaMasivaTablaErrores)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_LOGS_CARGA_MASIVA_TABLA_ERRORES");
            entity.Property(e => e.NoAfiliacion)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.Observaciones)
                .IsUnicode(false)
                .HasColumnName("OBSERVACIONES");
            entity.Property(e => e.Odt)
                .IsUnicode(false)
                .HasColumnName("ODT");
            entity.Property(e => e.Producto)
                .IsUnicode(false)
                .HasColumnName("PRODUCTO");
            entity.Property(e => e.Segmento).HasColumnName("SEGMENTO");
            entity.Property(e => e.Status)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.TipoFalla).HasColumnName("TIPO_FALLA");
            entity.Property(e => e.TipoServicio).HasColumnName("TIPO_SERVICIO");
        });

        modelBuilder.Entity<BdLogsCargaMasivaTablaErroresCorreo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_LOGS_CARGA_MASIVA_TABLA_ERRORES_CORREO");

            entity.Property(e => e.Errores)
                .IsUnicode(false)
                .HasColumnName("ERRORES");
            entity.Property(e => e.IdCarga).HasColumnName("ID_CARGA");
            entity.Property(e => e.IdLogsCargaMasivaTablaErroresCorreo)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_LOGS_CARGA_MASIVA_TABLA_ERRORES_CORREO");
            entity.Property(e => e.Odt)
                .IsUnicode(false)
                .HasColumnName("ODT");
        });

        modelBuilder.Entity<BdLogsCargaMasivaTablaErroresCorreo2>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_LOGS_CARGA_MASIVA_TABLA_ERRORES_CORREO2");

            entity.HasIndex(e => e.IdCarga, "missing_index_206_205");

            entity.Property(e => e.DescFalla)
                .IsUnicode(false)
                .HasColumnName("DESC_FALLA");
            entity.Property(e => e.DescNegocio)
                .IsUnicode(false)
                .HasColumnName("DESC_NEGOCIO");
            entity.Property(e => e.DescServicio)
                .IsUnicode(false)
                .HasColumnName("DESC_SERVICIO");
            entity.Property(e => e.Errores)
                .IsUnicode(false)
                .HasColumnName("ERRORES");
            entity.Property(e => e.Estado)
                .IsUnicode(false)
                .HasColumnName("ESTADO");
            entity.Property(e => e.IdCarga).HasColumnName("ID_CARGA");
            entity.Property(e => e.IdLogsCargaMasivaTablaErroresCorreo2)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_LOGS_CARGA_MASIVA_TABLA_ERRORES_CORREO2");
            entity.Property(e => e.NoAfiliacion)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.Odt)
                .IsUnicode(false)
                .HasColumnName("ODT");
            entity.Property(e => e.Poblacion)
                .IsUnicode(false)
                .HasColumnName("POBLACION");
        });

        modelBuilder.Entity<BdLogsCargaMasivaTablaProcesadosCorreo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_LOGS_CARGA_MASIVA_TABLA_PROCESADOS_CORREO");

            entity.HasIndex(e => e.IdCarga, "missing_index_204_203");

            entity.Property(e => e.CountNoAr).HasColumnName("COUNT_NO_AR");
            entity.Property(e => e.Cp)
                .IsUnicode(false)
                .HasColumnName("CP");
            entity.Property(e => e.HorasGarantia).HasColumnName("HORAS_GARANTIA");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IdCarga).HasColumnName("ID_CARGA");
            entity.Property(e => e.IdEstado).HasColumnName("ID_ESTADO");
            entity.Property(e => e.IdFalla).HasColumnName("ID_FALLA");
            entity.Property(e => e.IdLogsCargaMasivaTablaProcesadosCorreo)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_LOGS_CARGA_MASIVA_TABLA_PROCESADOS_CORREO");
            entity.Property(e => e.IdProyecto).HasColumnName("ID_PROYECTO");
            entity.Property(e => e.IdRegion).HasColumnName("ID_REGION");
            entity.Property(e => e.IdSegmento).HasColumnName("ID_SEGMENTO");
            entity.Property(e => e.IdServicio).HasColumnName("ID_SERVICIO");
            entity.Property(e => e.IdTecnico).HasColumnName("ID_TECNICO");
            entity.Property(e => e.IdZona).HasColumnName("ID_ZONA");
            entity.Property(e => e.IsArUnico).HasColumnName("IS_AR_UNICO");
            entity.Property(e => e.NoAfiliacion)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.Odt)
                .IsUnicode(false)
                .HasColumnName("ODT");
            entity.Property(e => e.PrecioExito)
                .IsUnicode(false)
                .HasColumnName("PRECIO_EXITO");
            entity.Property(e => e.Producto)
                .IsUnicode(false)
                .HasColumnName("PRODUCTO");
            entity.Property(e => e.Segmento).HasColumnName("SEGMENTO");
            entity.Property(e => e.TipoFalla).HasColumnName("TIPO_FALLA");
            entity.Property(e => e.TipoServicio).HasColumnName("TIPO_SERVICIO");
        });

        modelBuilder.Entity<BdMailControlW>(entity =>
        {
            entity.HasKey(e => e.IdMailControlWs).HasName("PK__BdMailCo__52644A555830F546");

            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.DestinationEmail)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.Error).IsUnicode(false);
            entity.Property(e => e.MailControlDesc)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<BdMailEmissionControl>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__BdMailEm__3214EC0722BD377A");

            entity.ToTable("BdMailEmissionControl");

            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.ShipmentDate).HasColumnType("datetime");
            entity.Property(e => e.Subject)
                .HasMaxLength(300)
                .IsUnicode(false);
        });

        modelBuilder.Entity<BdMailjetMessage>(entity =>
        {
            entity.HasKey(e => e.IdMailjetMessage).HasName("PK__BD_MAILJ__3D79A278ED55AEA6");

            entity.ToTable("BD_MAILJET_MESSAGES");

            entity.Property(e => e.IdMailjetMessage).HasColumnName("ID_MAILJET_MESSAGE");
            entity.Property(e => e.Emailto)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("EMAILTO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdCarga).HasColumnName("ID_CARGA");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.IsEnviado).HasColumnName("IS_ENVIADO");
            entity.Property(e => e.Messageid)
                .IsUnicode(false)
                .HasColumnName("MESSAGEID");
            entity.Property(e => e.Messageuuid)
                .IsUnicode(false)
                .HasColumnName("MESSAGEUUID");
        });

        modelBuilder.Entity<BdMasivoReparacion>(entity =>
        {
            entity.HasKey(e => e.IdMasivoReparacion).HasName("PK__BD_MASIV__3034BC215610B871");

            entity.ToTable("BD_MASIVO_REPARACION");

            entity.Property(e => e.IdMasivoReparacion).HasColumnName("ID_MASIVO_REPARACION");
            entity.Property(e => e.Comentario)
                .IsUnicode(false)
                .HasColumnName("COMENTARIO");
            entity.Property(e => e.IdCarga).HasColumnName("ID_CARGA");
            entity.Property(e => e.NoSerie)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");
        });

        modelBuilder.Entity<BdMcSim>(entity =>
        {
            entity.HasKey(e => e.IdSim);

            entity.ToTable("BD_MC_SIMS");

            entity.Property(e => e.IdSim).HasColumnName("ID_SIM");
            entity.Property(e => e.Costo)
                .HasColumnType("numeric(18, 0)")
                .HasColumnName("COSTO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.FecStatus)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_STATUS");
            entity.Property(e => e.IdCarrier).HasColumnName("ID_CARRIER");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdItemsSolicitudAlmacen).HasColumnName("ID_ITEMS_SOLICITUD_ALMACEN");
            entity.Property(e => e.IdMoneda).HasColumnName("ID_MONEDA");
            entity.Property(e => e.IdResponsable).HasColumnName("ID_RESPONSABLE");
            entity.Property(e => e.IdSolicitudRecoleccion).HasColumnName("ID_SOLICITUD_RECOLECCION");
            entity.Property(e => e.IdStatusSim).HasColumnName("ID_STATUS_SIM");
            entity.Property(e => e.IdTipoResponsable).HasColumnName("ID_TIPO_RESPONSABLE");
            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.IdUsuarioStatus).HasColumnName("ID_USUARIO_STATUS");
            entity.Property(e => e.IsDaniada).HasColumnName("IS_DANIADA");
            entity.Property(e => e.IsDisponible).HasColumnName("IS_DISPONIBLE");
            entity.Property(e => e.IsNuevo).HasColumnName("IS_NUEVO");
            entity.Property(e => e.IsRetiro).HasColumnName("IS_RETIRO");
            entity.Property(e => e.NoSim)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SIM");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");

            entity.HasOne(d => d.IdUnidadNavigation).WithMany(p => p.BdMcSims)
                .HasForeignKey(d => d.IdUnidad)
                .HasConstraintName("FK_BD_MC_SIMS_BD_UNIDADES");
        });

        modelBuilder.Entity<BdMcViaGeozonaCoordenada>(entity =>
        {
            entity.HasKey(e => e.IdGeozonaCoordenadas);

            entity.ToTable("BD_MC_VIA_GEOZONA_COORDENADAS");

            entity.Property(e => e.IdGeozonaCoordenadas).HasColumnName("ID_GEOZONA_COORDENADAS");
            entity.Property(e => e.IdTecnico).HasColumnName("ID_TECNICO");
            entity.Property(e => e.Latitud)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("LATITUD");
            entity.Property(e => e.Longitud)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("LONGITUD");
            entity.Property(e => e.Orden).HasColumnName("ORDEN");
        });

        modelBuilder.Entity<BdMcViaGeozonaCoordenadasZona>(entity =>
        {
            entity.HasKey(e => e.IdGeozonaCoordenadasPlaza).HasName("PK_BD_MC_VIA_GEOZONA_COORDENADAS_PLAZA");

            entity.ToTable("BD_MC_VIA_GEOZONA_COORDENADAS_ZONA");

            entity.Property(e => e.IdGeozonaCoordenadasPlaza).HasColumnName("ID_GEOZONA_COORDENADAS_PLAZA");
            entity.Property(e => e.IdZona).HasColumnName("ID_ZONA");
            entity.Property(e => e.Latitud)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("LATITUD");
            entity.Property(e => e.Longitud)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("LONGITUD");
            entity.Property(e => e.Orden).HasColumnName("ORDEN");
        });

        modelBuilder.Entity<BdMcViaGeozonaTecnico>(entity =>
        {
            entity.HasKey(e => e.IdGeozona);

            entity.ToTable("BD_MC_VIA_GEOZONA_TECNICO");

            entity.Property(e => e.IdGeozona).HasColumnName("ID_GEOZONA");
            entity.Property(e => e.IdTecnico).HasColumnName("ID_TECNICO");
        });

        modelBuilder.Entity<BdMensajeriaCosto>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_MENSAJERIA_COSTOS");

            entity.Property(e => e.Costo)
                .HasColumnType("decimal(8, 2)")
                .HasColumnName("COSTO");
            entity.Property(e => e.IdMensajeriasPrecio).HasColumnName("ID_MENSAJERIAS_PRECIO");
            entity.Property(e => e.IdPrecioMensajeria)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_PRECIO_MENSAJERIA");
            entity.Property(e => e.IdTipoServicioCosto).HasColumnName("ID_TIPO_SERVICIO_COSTO");
            entity.Property(e => e.Kilos)
                .HasColumnType("decimal(8, 3)")
                .HasColumnName("KILOS");
            entity.Property(e => e.Zona).HasColumnName("ZONA");
        });

        modelBuilder.Entity<BdMensajeriaCpZona>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_MENSAJERIA_CP_ZONAS");

            entity.Property(e => e.AbreviaturaDestino)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("ABREVIATURA_DESTINO");
            entity.Property(e => e.AbreviaturaOrigen)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("ABREVIATURA_ORIGEN");
            entity.Property(e => e.CpDestino)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CP_DESTINO");
            entity.Property(e => e.CpOrigen)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CP_ORIGEN");
            entity.Property(e => e.IdMensajeriaCpZona)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_MENSAJERIA_CP_ZONA");
            entity.Property(e => e.IdMensajeriaPrecio).HasColumnName("ID_MENSAJERIA_PRECIO");
            entity.Property(e => e.ZonaDestino).HasColumnName("ZONA_DESTINO");
            entity.Property(e => e.ZonaOrigen).HasColumnName("ZONA_ORIGEN");
        });

        modelBuilder.Entity<BdMenu>(entity =>
        {
            entity.ToTable("BD_MENU");

            entity.HasIndex(e => new { e.IdMenu0, e.IdUsuario }, "IX_BD_MENU_ID_MENU0, ID_USUARIO").HasFillFactor(80);

            entity.HasIndex(e => new { e.IdMenu1, e.IdUsuario }, "IX_BD_MENU_ID_MENU1, ID_USUARIO").HasFillFactor(80);

            entity.HasIndex(e => e.IdUsuario, "missing_index_4077_4076");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdMenu0).HasColumnName("ID_MENU0");
            entity.Property(e => e.IdMenu1).HasColumnName("ID_MENU1");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
        });

        modelBuilder.Entity<BdMenuTipoUsuario>(entity =>
        {
            entity.HasKey(e => e.IdMenuTipoUsuario);

            entity.ToTable("BD_MENU_TIPO_USUARIO");

            entity.Property(e => e.IdMenuTipoUsuario).HasColumnName("ID_MENU_TIPO_USUARIO");
            entity.Property(e => e.IdPestanasBitacoraAr).HasColumnName("ID_PESTANAS_BITACORA_AR");
            entity.Property(e => e.IdTipoUsuario).HasColumnName("ID_TIPO_USUARIO");
        });

        modelBuilder.Entity<BdMerchantOnBase>(entity =>
        {
            entity.HasKey(e => e.MerchantOnBaseId).HasName("PK__BdMercha__4817F3F7D5C26904");

            entity.ToTable("BdMerchantOnBase");

            entity.Property(e => e.Buc)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BUC");
            entity.Property(e => e.City)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.Country)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.District)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.FisicalStreet)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Number)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.PostalCode)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.RefPoint1)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.RefPoint2)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.Rfc)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RFC");
            entity.Property(e => e.State)
                .HasMaxLength(80)
                .IsUnicode(false);
        });

        modelBuilder.Entity<BdModeloAccesorio>(entity =>
        {
            entity.HasKey(e => e.IdModeloAccesorio);

            entity.ToTable("BD_MODELO_ACCESORIO");

            entity.Property(e => e.IdModeloAccesorio).HasColumnName("ID_MODELO_ACCESORIO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdAccesorio).HasColumnName("ID_ACCESORIO");
            entity.Property(e => e.IdModelo).HasColumnName("ID_MODELO");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");

            entity.HasOne(d => d.IdAccesorioNavigation).WithMany(p => p.BdModeloAccesorios)
                .HasForeignKey(d => d.IdAccesorio)
                .HasConstraintName("FK_BD_MODELO_ACCESORIO_C_ACCESORIOS");

            entity.HasOne(d => d.IdModeloNavigation).WithMany(p => p.BdModeloAccesorios)
                .HasForeignKey(d => d.IdModelo)
                .HasConstraintName("FK_BD_MODELO_ACCESORIO_C_MODELOS");
        });

        modelBuilder.Entity<BdModeloCategorium>(entity =>
        {
            entity.HasKey(e => e.IdModeloCategoria).HasName("PK__BD_MODEL__E265EAC3F621A77B");

            entity.ToTable("BD_MODELO_CATEGORIA");

            entity.Property(e => e.IdModeloCategoria).HasColumnName("ID_MODELO_CATEGORIA");
            entity.Property(e => e.IdCategoria).HasColumnName("ID_CATEGORIA");
            entity.Property(e => e.IdModelo).HasColumnName("ID_MODELO");
        });

        modelBuilder.Entity<BdModeloCelular>(entity =>
        {
            entity.HasKey(e => e.IdModeloCelular);

            entity.ToTable("BD_MODELO_CELULAR");

            entity.Property(e => e.IdModeloCelular).HasColumnName("ID_MODELO_CELULAR");
            entity.Property(e => e.DescModeloCelular)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("DESC_MODELO_CELULAR");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdModeloConectividad>(entity =>
        {
            entity.HasKey(e => e.IdModeloConectividad).HasName("PK__BD_MODEL__5B7BD33529C43DAE");

            entity.ToTable("BD_MODELO_CONECTIVIDAD");

            entity.Property(e => e.IdModeloConectividad).HasColumnName("ID_MODELO_CONECTIVIDAD");
            entity.Property(e => e.FechaAlta)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ALTA");
            entity.Property(e => e.IdConectividad).HasColumnName("ID_CONECTIVIDAD");
            entity.Property(e => e.IdModelo).HasColumnName("ID_MODELO");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdModeloInsumo>(entity =>
        {
            entity.HasKey(e => e.IdModeloInsumo);

            entity.ToTable("BD_MODELO_INSUMO");

            entity.Property(e => e.IdModeloInsumo).HasColumnName("ID_MODELO_INSUMO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdInsumo).HasColumnName("ID_INSUMO");
            entity.Property(e => e.IdModelo).HasColumnName("ID_MODELO");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");

            entity.HasOne(d => d.IdInsumoNavigation).WithMany(p => p.BdModeloInsumos)
                .HasForeignKey(d => d.IdInsumo)
                .HasConstraintName("FK_BD_MODELO_INSUMO_C_INSUMOS");

            entity.HasOne(d => d.IdModeloNavigation).WithMany(p => p.BdModeloInsumos)
                .HasForeignKey(d => d.IdModelo)
                .HasConstraintName("FK_BD_MODELO_INSUMO_C_MODELOS");
        });

        modelBuilder.Entity<BdModeloLlave>(entity =>
        {
            entity.HasKey(e => e.IdModeloLlave);

            entity.ToTable("BD_MODELO_LLAVE");

            entity.Property(e => e.IdModeloLlave).HasColumnName("ID_MODELO_LLAVE");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdLlave).HasColumnName("ID_LLAVE");
            entity.Property(e => e.IdModelo).HasColumnName("ID_MODELO");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");

            entity.HasOne(d => d.IdLlaveNavigation).WithMany(p => p.BdModeloLlaves)
                .HasForeignKey(d => d.IdLlave)
                .HasConstraintName("FK_BD_MODELO_LLAVE_C_LLAVES");

            entity.HasOne(d => d.IdModeloNavigation).WithMany(p => p.BdModeloLlaves)
                .HasForeignKey(d => d.IdModelo)
                .HasConstraintName("FK_BD_MODELO_LLAVE_C_MODELOS");
        });

        modelBuilder.Entity<BdModeloModulo>(entity =>
        {
            entity.ToTable("BD_MODELO_MODULO");

            entity.HasIndex(e => e.IdModelo, "IX_MI_BD_MODELO_MODULO_169_168");

            entity.HasIndex(e => e.IdModelo, "IX_MI_BD_MODELO_MODULO_269_268");

            entity.HasIndex(e => e.IdModelo, "IX_MI_BD_MODELO_MODULO_273_272");

            entity.HasIndex(e => new { e.IdModelo, e.IdProductoModulo }, "IX_MI_BD_MODELO_MODULO_275_274");

            entity.HasIndex(e => e.IdModeloModulo, "IX_MI_BD_MODELO_MODULO_353_352");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdMarcaModulo).HasColumnName("ID_MARCA_MODULO");
            entity.Property(e => e.IdModelo).HasColumnName("ID_MODELO");
            entity.Property(e => e.IdModeloModulo).HasColumnName("ID_MODELO_MODULO");
            entity.Property(e => e.IdProductoModulo).HasColumnName("ID_PRODUCTO_MODULO");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");

            entity.HasOne(d => d.IdMarcaModuloNavigation).WithMany(p => p.BdModeloModulos)
                .HasForeignKey(d => d.IdMarcaModulo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BD_MODELO_MODULO_C_MARCAS");

            entity.HasOne(d => d.IdModeloNavigation).WithMany(p => p.BdModeloModuloIdModeloNavigations)
                .HasForeignKey(d => d.IdModelo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BD_MODELO_MODULO_C_MODELOS");

            entity.HasOne(d => d.IdModeloModuloNavigation).WithMany(p => p.BdModeloModuloIdModeloModuloNavigations)
                .HasForeignKey(d => d.IdModeloModulo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BD_MODELO_MODULO_C_MODELOS1");

            entity.HasOne(d => d.IdProductoModuloNavigation).WithMany(p => p.BdModeloModulos)
                .HasForeignKey(d => d.IdProductoModulo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BD_MODELO_MODULO_C_PRODUCTOS");
        });

        modelBuilder.Entity<BdModeloPrecio>(entity =>
        {
            entity.HasKey(e => e.IdModeloPrecio);

            entity.ToTable("BD_MODELO_PRECIO");

            entity.Property(e => e.IdModeloPrecio).HasColumnName("ID_MODELO_PRECIO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdModelo).HasColumnName("ID_MODELO");
            entity.Property(e => e.IdMoneda).HasColumnName("ID_MONEDA");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Precio)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("PRECIO");

            entity.HasOne(d => d.IdClienteNavigation).WithMany(p => p.BdModeloPrecios)
                .HasForeignKey(d => d.IdCliente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BD_MODELO_PRECIO_C_CLIENTES");

            entity.HasOne(d => d.IdModeloNavigation).WithMany(p => p.BdModeloPrecios)
                .HasForeignKey(d => d.IdModelo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BD_MODELO_PRECIO_C_MODELOS");

            entity.HasOne(d => d.IdMonedaNavigation).WithMany(p => p.BdModeloPrecios)
                .HasForeignKey(d => d.IdMoneda)
                .HasConstraintName("FK_BD_MODELO_PRECIO_C_MONEDAS");
        });

        modelBuilder.Entity<BdModeloServicio>(entity =>
        {
            entity.HasKey(e => e.IdModeloServicio).HasName("PK__BD_MODEL__AFB1861684E18BC2");

            entity.ToTable("BD_MODELO_SERVICIO");

            entity.Property(e => e.IdModeloServicio).HasColumnName("ID_MODELO_SERVICIO");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdModelo).HasColumnName("ID_MODELO");
            entity.Property(e => e.IdServicio).HasColumnName("ID_SERVICIO");
            entity.Property(e => e.IsChecked)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IS_CHECKED");
            entity.Property(e => e.IsInstalacion).HasColumnName("IS_INSTALACION");
            entity.Property(e => e.IsRetiro).HasColumnName("IS_RETIRO");
            entity.Property(e => e.IsSustitucion).HasColumnName("IS_SUSTITUCION");
        });

        modelBuilder.Entity<BdModeloSku>(entity =>
        {
            entity.HasKey(e => e.IdModeloSku);

            entity.ToTable("BD_MODELO_SKU");

            entity.Property(e => e.IdModeloSku).HasColumnName("ID_MODELO_SKU");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdModelo).HasColumnName("ID_MODELO");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Precio)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PRECIO");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SKU");

            entity.HasOne(d => d.IdClienteNavigation).WithMany(p => p.BdModeloSkus)
                .HasForeignKey(d => d.IdCliente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BD_MODELO_SKU_C_CLIENTES");

            entity.HasOne(d => d.IdModeloNavigation).WithMany(p => p.BdModeloSkus)
                .HasForeignKey(d => d.IdModelo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BD_MODELO_SKU_C_MODELOS");
        });

        modelBuilder.Entity<BdModeloSoftware>(entity =>
        {
            entity.HasKey(e => e.IdModeloSoftware);

            entity.ToTable("BD_MODELO_SOFTWARE");

            entity.Property(e => e.IdModeloSoftware).HasColumnName("ID_MODELO_SOFTWARE");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdModelo).HasColumnName("ID_MODELO");
            entity.Property(e => e.IdSoftware).HasColumnName("ID_SOFTWARE");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
        });

        modelBuilder.Entity<BdModeloSparePart>(entity =>
        {
            entity.ToTable("BD_MODELO_SPARE_PART");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdMarcaSparePart).HasColumnName("ID_MARCA_SPARE_PART");
            entity.Property(e => e.IdModelo).HasColumnName("ID_MODELO");
            entity.Property(e => e.IdProductoSparePart).HasColumnName("ID_PRODUCTO_SPARE_PART");
            entity.Property(e => e.IdSparePart).HasColumnName("ID_SPARE_PART");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
        });

        modelBuilder.Entity<BdModeloSustituto>(entity =>
        {
            entity.ToTable("BD_MODELO_SUSTITUTO");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdModelo).HasColumnName("ID_MODELO");
            entity.Property(e => e.IdModeloSustituto).HasColumnName("ID_MODELO_SUSTITUTO");
            entity.Property(e => e.IdSoftware).HasColumnName("ID_SOFTWARE");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");

            entity.HasOne(d => d.IdModeloNavigation).WithMany(p => p.BdModeloSustitutoIdModeloNavigations)
                .HasForeignKey(d => d.IdModelo)
                .HasConstraintName("FK_BD_MODELO_SUSTITUTO_C_MODELOS");

            entity.HasOne(d => d.IdModeloSustitutoNavigation).WithMany(p => p.BdModeloSustitutoIdModeloSustitutoNavigations)
                .HasForeignKey(d => d.IdModeloSustituto)
                .HasConstraintName("FK_BD_MODELO_SUSTITUTO_C_MODELOS1");

            entity.HasOne(d => d.IdSoftwareNavigation).WithMany(p => p.BdModeloSustitutos)
                .HasForeignKey(d => d.IdSoftware)
                .HasConstraintName("FK_BD_MODELO_SUSTITUTO_C_SOFTWARE");
        });

        modelBuilder.Entity<BdModelosGetnet>(entity =>
        {
            entity.HasKey(e => e.IdModeloGetnet).HasName("PK__BD_MODEL__FAD75946728CBD23");

            entity.ToTable("BD_MODELOS_GETNET");

            entity.Property(e => e.IdModeloGetnet).HasColumnName("ID_MODELO_GETNET");
            entity.Property(e => e.DescModelo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_MODELO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdModelo).HasColumnName("ID_MODELO");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdModelosHomologadosSantander>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_MODELOS_HOMOLOGADOS_SANTANDER");

            entity.Property(e => e.Aplicativo)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("APLICATIVO");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdModelo).HasColumnName("ID_MODELO");
            entity.Property(e => e.ModeloNuevo)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("MODELO_NUEVO");
        });

        modelBuilder.Entity<BdModelosModificado>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_MODELOS_MODIFICADOS");

            entity.Property(e => e.IdClienteNuevo).HasColumnName("ID_CLIENTE_NUEVO");
            entity.Property(e => e.IdClienteViejo).HasColumnName("ID_CLIENTE_VIEJO");
            entity.Property(e => e.IdModeloNuevo).HasColumnName("ID_MODELO_NUEVO");
            entity.Property(e => e.IdModeloViejo).HasColumnName("ID_MODELO_VIEJO");
        });

        modelBuilder.Entity<BdMovInventarioValGetnet>(entity =>
        {
            entity.HasKey(e => e.IdMovInventarioValGetnet).HasName("PK__BD_MOV_I__4D489A604447DBAB");

            entity.ToTable("BD_MOV_INVENTARIO_VAL_GETNET");

            entity.Property(e => e.IdMovInventarioValGetnet).HasColumnName("ID_MOV_INVENTARIO_VAL_GETNET");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdMovInv).HasColumnName("ID_MOV_INV");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Status)
                .HasDefaultValueSql("((1))")
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdMultivaDiarioTmp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_MULTIVA_DIARIO_TMP");

            entity.Property(e => e.Asignacion)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ASIGNACION");
            entity.Property(e => e.Comercio)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("COMERCIO");
            entity.Property(e => e.DescConectividad)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_CONECTIVIDAD");
            entity.Property(e => e.DescMarca)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_MARCA");
            entity.Property(e => e.DescModelo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_MODELO");
            entity.Property(e => e.DescSoftware)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_SOFTWARE");
            entity.Property(e => e.FechaEntrada)
                .HasMaxLength(61)
                .IsUnicode(false)
                .HasColumnName("FECHA_ENTRADA");
            entity.Property(e => e.FechaModificacion)
                .HasMaxLength(61)
                .IsUnicode(false)
                .HasColumnName("FECHA_MODIFICACION");
            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");
            entity.Property(e => e.IsDaniada).HasColumnName("IS_DANIADA");
            entity.Property(e => e.ModeloConectividad)
                .HasMaxLength(103)
                .IsUnicode(false)
                .HasColumnName("MODELO_CONECTIVIDAD");
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.NoSerie)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");
            entity.Property(e => e.Observaciones)
                .IsRequired()
                .HasMaxLength(22)
                .IsUnicode(false)
                .HasColumnName("OBSERVACIONES");
            entity.Property(e => e.Proveedor)
                .IsRequired()
                .HasMaxLength(22)
                .IsUnicode(false)
                .HasColumnName("PROVEEDOR");
            entity.Property(e => e.Responsable)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RESPONSABLE");
            entity.Property(e => e.Situacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SITUACION");
            entity.Property(e => e.Situacion2)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("SITUACION_2");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(22)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.TipoResponsable)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TIPO_RESPONSABLE");
            entity.Property(e => e.Ubicacion)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("UBICACION");
        });

        modelBuilder.Entity<BdNegocio>(entity =>
        {
            entity.HasKey(e => e.IdNegocio);

            entity.ToTable("BD_NEGOCIOS");

            entity.HasIndex(e => new { e.IdCliente, e.NoAfiliacion, e.Status }, "IX_BD_NEGOCIOS")
                .IsUnique()
                .HasFillFactor(80);

            entity.HasIndex(e => e.NoAfiliacion, "IX_BD_NEGOCIOS_1");

            entity.HasIndex(e => new { e.IdNegocio, e.RfcFiscal, e.NoAfiliacion }, "IX_BD_NEGOCIOS_2");

            entity.HasIndex(e => e.RazonSocial, "IX_BD_NEGOCIOS_3");

            entity.HasIndex(e => e.IdCargaAlta, "IX_BD_NEGOCIOS_ID_CARGA_ALTA").HasFillFactor(80);

            entity.HasIndex(e => e.IdEstado, "IX_BD_NEGOCIOS_ID_ESTADO").HasFillFactor(80);

            entity.HasIndex(e => e.IdRegion, "IX_BD_NEGOCIOS_ID_REGION").HasFillFactor(80);

            entity.HasIndex(e => e.IdSegmento, "IX_BD_NEGOCIOS_ID_SEGMENTO").HasFillFactor(80);

            entity.HasIndex(e => e.IdZona, "IX_BD_NEGOCIOS_ID_ZONA").HasFillFactor(80);

            entity.HasIndex(e => e.NoAfiliacion, "IX_BD_NEGOCIOS_NO_AFILIACION").HasFillFactor(80);

            entity.HasIndex(e => new { e.NoAfiliacion, e.Status }, "IX_BD_NEGOCIOS_NO_AFILIACION_STATUS");

            entity.HasIndex(e => new { e.IdCliente, e.Status }, "missing_index_1226_1225");

            entity.HasIndex(e => new { e.IdCliente, e.Status }, "missing_index_1231_1230");

            entity.HasIndex(e => new { e.IdCliente, e.Status }, "missing_index_139607_139606");

            entity.HasIndex(e => new { e.IdZona, e.Status }, "missing_index_145271_145270");

            entity.HasIndex(e => new { e.IdCliente, e.Status }, "missing_index_205725_205724");

            entity.HasIndex(e => new { e.IdRegion, e.Status }, "missing_index_236340_236339");

            entity.HasIndex(e => e.Status, "missing_index_236342_236341");

            entity.HasIndex(e => new { e.IdCliente, e.Status }, "missing_index_244572_244571");

            entity.HasIndex(e => e.Status, "missing_index_244574_244573");

            entity.HasIndex(e => e.Estado, "missing_index_256214_256213");

            entity.HasIndex(e => e.IdCliente, "missing_index_2737_2736");

            entity.HasIndex(e => new { e.IdCliente, e.Status }, "missing_index_2739_2738");

            entity.HasIndex(e => new { e.IdCliente, e.Status }, "missing_index_283275_283274");

            entity.HasIndex(e => new { e.IdCliente, e.Status }, "missing_index_2851_2850");

            entity.HasIndex(e => e.DescNegocio, "missing_index_2853_2852");

            entity.HasIndex(e => e.Cp, "missing_index_3671_3670");

            entity.HasIndex(e => new { e.IdCliente, e.Status }, "missing_index_3872_3871");

            entity.Property(e => e.IdNegocio).HasColumnName("ID_NEGOCIO");
            entity.Property(e => e.Aproximado).HasColumnName("APROXIMADO");
            entity.Property(e => e.CalleNumFiscal)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("CALLE_NUM_FISCAL");
            entity.Property(e => e.Colonia)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("COLONIA");
            entity.Property(e => e.ColoniaFiscal)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("COLONIA_FISCAL");
            entity.Property(e => e.CorreoEjecutivo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CORREO_EJECUTIVO");
            entity.Property(e => e.Cp)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("CP");
            entity.Property(e => e.CpFiscal)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("CP_FISCAL");
            entity.Property(e => e.DescNegocio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_NEGOCIO");
            entity.Property(e => e.Direccion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");
            entity.Property(e => e.Estado)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ESTADO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.FecAltaIguala)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA_IGUALA");
            entity.Property(e => e.FecBajaIguala)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_BAJA_IGUALA");
            entity.Property(e => e.FecUpdate)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_UPDATE");
            entity.Property(e => e.GradoError)
                .HasColumnType("numeric(20, 10)")
                .HasColumnName("GRADO_ERROR");
            entity.Property(e => e.IdCargaAlta).HasColumnName("ID_CARGA_ALTA");
            entity.Property(e => e.IdCargaStatus).HasColumnName("ID_CARGA_STATUS");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdEstado).HasColumnName("ID_ESTADO");
            entity.Property(e => e.IdEstadoFiscal)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("ID_ESTADO_FISCAL");
            entity.Property(e => e.IdHorarioAcceso).HasColumnName("ID_HORARIO_ACCESO");
            entity.Property(e => e.IdHorarioUptime).HasColumnName("ID_HORARIO_UPTIME");
            entity.Property(e => e.IdMoneda).HasColumnName("ID_MONEDA");
            entity.Property(e => e.IdOtrosClientes).HasColumnName("ID_OTROS_CLIENTES");
            entity.Property(e => e.IdRegion).HasColumnName("ID_REGION");
            entity.Property(e => e.IdSegmento).HasColumnName("ID_SEGMENTO");
            entity.Property(e => e.IdTipoCobroNegocio).HasColumnName("ID_TIPO_COBRO_NEGOCIO");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.IdUsuarioUpdate).HasColumnName("ID_USUARIO_UPDATE");
            entity.Property(e => e.IdZona).HasColumnName("ID_ZONA");
            entity.Property(e => e.Latitud)
                .HasColumnType("numeric(20, 15)")
                .HasColumnName("LATITUD");
            entity.Property(e => e.Longitud)
                .HasColumnType("numeric(20, 15)")
                .HasColumnName("LONGITUD");
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.NombreFiscal)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("NOMBRE_FISCAL");
            entity.Property(e => e.Poblacion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("POBLACION");
            entity.Property(e => e.PoblacionFiscal)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("POBLACION_FISCAL");
            entity.Property(e => e.Precio)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("PRECIO");
            entity.Property(e => e.RazonSocial)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RAZON_SOCIAL");
            entity.Property(e => e.RfcFiscal)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RFC_FISCAL");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.Telefono)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");

            entity.HasOne(d => d.IdCargaAltaNavigation).WithMany(p => p.BdNegocioIdCargaAltaNavigations)
                .HasForeignKey(d => d.IdCargaAlta)
                .HasConstraintName("FK_BD_NEGOCIOS_BD_CARGAS");

            entity.HasOne(d => d.IdCargaStatusNavigation).WithMany(p => p.BdNegocioIdCargaStatusNavigations)
                .HasForeignKey(d => d.IdCargaStatus)
                .HasConstraintName("FK_BD_NEGOCIOS_BD_CARGAS1");

            entity.HasOne(d => d.IdEstadoNavigation).WithMany(p => p.BdNegocios)
                .HasForeignKey(d => d.IdEstado)
                .HasConstraintName("FK_BD_NEGOCIOS_SEPOMEX_ESTADOS");

            entity.HasOne(d => d.IdHorarioAccesoNavigation).WithMany(p => p.BdNegocioIdHorarioAccesoNavigations)
                .HasForeignKey(d => d.IdHorarioAcceso)
                .HasConstraintName("FK_BD_NEGOCIOS_C_HORARIOS1");

            entity.HasOne(d => d.IdHorarioUptimeNavigation).WithMany(p => p.BdNegocioIdHorarioUptimeNavigations)
                .HasForeignKey(d => d.IdHorarioUptime)
                .HasConstraintName("FK_BD_NEGOCIOS_C_HORARIOS");
        });

        modelBuilder.Entity<BdNegocioHorasMe>(entity =>
        {
            entity.HasKey(e => e.IdNegocioHorasMes).HasName("PK_BD_UNIDAD_HORAS_MES");

            entity.ToTable("BD_NEGOCIO_HORAS_MES");

            entity.HasIndex(e => new { e.IdNegocio, e.Mes, e.Anio }, "IX_BD_NEGOCIO_HORAS_MES_ID_NEGOCIO, MES, ANIO").HasFillFactor(80);

            entity.HasIndex(e => new { e.Mes, e.Anio }, "IX_BD_NEGOCIO_HORAS_MES_MES, ANIO").HasFillFactor(80);

            entity.Property(e => e.IdNegocioHorasMes).HasColumnName("ID_NEGOCIO_HORAS_MES");
            entity.Property(e => e.Anio).HasColumnName("ANIO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.HorasMes).HasColumnName("HORAS_MES");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdHorario).HasColumnName("ID_HORARIO");
            entity.Property(e => e.IdNegocio).HasColumnName("ID_NEGOCIO");
            entity.Property(e => e.IsContract)
                .HasDefaultValueSql("((0))")
                .HasColumnName("IS_CONTRACT");
            entity.Property(e => e.Mes).HasColumnName("MES");

            entity.HasOne(d => d.IdClienteNavigation).WithMany(p => p.BdNegocioHorasMes)
                .HasForeignKey(d => d.IdCliente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BD_UNIDAD_HORAS_MES_C_CLIENTES");

            entity.HasOne(d => d.IdNegocioNavigation).WithMany(p => p.BdNegocioHorasMes)
                .HasForeignKey(d => d.IdNegocio)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BD_UNIDAD_HORAS_MES_BD_NEGOCIOS");
        });

        modelBuilder.Entity<BdNegocios2>(entity =>
        {
            entity.HasKey(e => e.IdNegocio);

            entity.ToTable("BD_NEGOCIOS_2");

            entity.Property(e => e.IdNegocio).HasColumnName("ID_NEGOCIO");
            entity.Property(e => e.Aproximado).HasColumnName("APROXIMADO");
            entity.Property(e => e.CalleNumFiscal)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("CALLE_NUM_FISCAL");
            entity.Property(e => e.Colonia)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("COLONIA");
            entity.Property(e => e.ColoniaFiscal)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("COLONIA_FISCAL");
            entity.Property(e => e.CorreoEjecutivo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CORREO_EJECUTIVO");
            entity.Property(e => e.Cp)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("CP");
            entity.Property(e => e.CpFiscal)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("CP_FISCAL");
            entity.Property(e => e.DescNegocio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_NEGOCIO");
            entity.Property(e => e.Direccion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");
            entity.Property(e => e.Estado)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ESTADO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.FecAltaIguala)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA_IGUALA");
            entity.Property(e => e.FecBajaIguala)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_BAJA_IGUALA");
            entity.Property(e => e.FecUpdate)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_UPDATE");
            entity.Property(e => e.GradoError)
                .HasColumnType("numeric(20, 10)")
                .HasColumnName("GRADO_ERROR");
            entity.Property(e => e.IdCargaAlta).HasColumnName("ID_CARGA_ALTA");
            entity.Property(e => e.IdCargaStatus).HasColumnName("ID_CARGA_STATUS");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdEstado).HasColumnName("ID_ESTADO");
            entity.Property(e => e.IdEstadoFiscal)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("ID_ESTADO_FISCAL");
            entity.Property(e => e.IdHorarioAcceso).HasColumnName("ID_HORARIO_ACCESO");
            entity.Property(e => e.IdHorarioUptime).HasColumnName("ID_HORARIO_UPTIME");
            entity.Property(e => e.IdMoneda).HasColumnName("ID_MONEDA");
            entity.Property(e => e.IdRegion).HasColumnName("ID_REGION");
            entity.Property(e => e.IdSegmento).HasColumnName("ID_SEGMENTO");
            entity.Property(e => e.IdTipoCobroNegocio).HasColumnName("ID_TIPO_COBRO_NEGOCIO");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.IdUsuarioUpdate).HasColumnName("ID_USUARIO_UPDATE");
            entity.Property(e => e.IdZona).HasColumnName("ID_ZONA");
            entity.Property(e => e.Latitud)
                .HasColumnType("numeric(20, 15)")
                .HasColumnName("LATITUD");
            entity.Property(e => e.Longitud)
                .HasColumnType("numeric(20, 15)")
                .HasColumnName("LONGITUD");
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.NombreFiscal)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("NOMBRE_FISCAL");
            entity.Property(e => e.Poblacion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("POBLACION");
            entity.Property(e => e.PoblacionFiscal)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("POBLACION_FISCAL");
            entity.Property(e => e.Precio)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("PRECIO");
            entity.Property(e => e.RazonSocial)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RAZON_SOCIAL");
            entity.Property(e => e.RfcFiscal)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RFC_FISCAL");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.Telefono)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");
        });

        modelBuilder.Entity<BdNegociosAltum>(entity =>
        {
            entity.HasKey(e => e.IdNegocioAlta);

            entity.ToTable("BD_NEGOCIOS_ALTA");

            entity.Property(e => e.IdNegocioAlta).HasColumnName("ID_NEGOCIO_ALTA");
            entity.Property(e => e.Colonia)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("COLONIA");
            entity.Property(e => e.Cp)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("CP");
            entity.Property(e => e.DescNegocio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_NEGOCIO");
            entity.Property(e => e.Direccion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");
            entity.Property(e => e.Estado)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ESTADO");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdEstado).HasColumnName("ID_ESTADO");
            entity.Property(e => e.IdHorarioAcceso).HasColumnName("ID_HORARIO_ACCESO");
            entity.Property(e => e.IdHorarioUptime).HasColumnName("ID_HORARIO_UPTIME");
            entity.Property(e => e.IdRegion).HasColumnName("ID_REGION");
            entity.Property(e => e.IdSegmento).HasColumnName("ID_SEGMENTO");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.IdZona).HasColumnName("ID_ZONA");
            entity.Property(e => e.IsCpIncorrecto).HasColumnName("IS_CP_INCORRECTO");
            entity.Property(e => e.IsIdEstadoIncorrecto).HasColumnName("IS_ID_ESTADO_INCORRECTO");
            entity.Property(e => e.IsNoAfiliacionDuplicado).HasColumnName("IS_NO_AFILIACION_DUPLICADO");
            entity.Property(e => e.IsProcesado).HasColumnName("IS_PROCESADO");
            entity.Property(e => e.IsRegionIncorrecto).HasColumnName("IS_REGION_INCORRECTO");
            entity.Property(e => e.IsZonaIncorrecto).HasColumnName("IS_ZONA_INCORRECTO");
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.Poblacion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("POBLACION");
            entity.Property(e => e.Telefono)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");

            entity.HasOne(d => d.IdClienteNavigation).WithMany(p => p.BdNegociosAlta)
                .HasForeignKey(d => d.IdCliente)
                .HasConstraintName("FK_BD_NEGOCIOS_ALTA_C_CLIENTES");
        });

        modelBuilder.Entity<BdNegociosMigradosLog>(entity =>
        {
            entity.HasKey(e => e.IdNegociosMigradosLog).HasName("PK__BD_NEGOC__2D2EF4915AB333DB");

            entity.ToTable("BD_NEGOCIOS_MIGRADOS_LOG");

            entity.Property(e => e.IdNegociosMigradosLog).HasColumnName("ID_NEGOCIOS_MIGRADOS_LOG");
            entity.Property(e => e.Comentario)
                .IsUnicode(false)
                .HasColumnName("COMENTARIO");
            entity.Property(e => e.IdBitacoraNegocioMigracion).HasColumnName("ID_BITACORA_NEGOCIO_MIGRACION");
            entity.Property(e => e.NoAfiliacion)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.Status)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdNegociosNuevosNotificacion>(entity =>
        {
            entity.HasKey(e => e.IdNegocioNuevoNotificacion).HasName("PK__BD_NEGOC__E1021C1454C7CAC7");

            entity.ToTable("BD_NEGOCIOS_NUEVOS_NOTIFICACION");

            entity.Property(e => e.IdNegocioNuevoNotificacion).HasColumnName("ID_NEGOCIO_NUEVO_NOTIFICACION");
            entity.Property(e => e.FecEnviado)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ENVIADO");
            entity.Property(e => e.IsEnviado).HasColumnName("IS_ENVIADO");
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
        });

        modelBuilder.Entity<BdNegociosOtrosClientesPaso>(entity =>
        {
            entity.HasKey(e => e.IdNegociosOtrosClientesPaso).HasName("PK__BD_NEGOC__4D95AB712A372957");

            entity.ToTable("BD_NEGOCIOS_OTROS_CLIENTES_PASO");

            entity.Property(e => e.IdNegociosOtrosClientesPaso).HasColumnName("ID_NEGOCIOS_OTROS_CLIENTES_PASO");
            entity.Property(e => e.Cliente)
                .IsUnicode(false)
                .HasColumnName("CLIENTE");
            entity.Property(e => e.Colonia)
                .IsUnicode(false)
                .HasColumnName("COLONIA");
            entity.Property(e => e.Cp)
                .IsUnicode(false)
                .HasColumnName("CP");
            entity.Property(e => e.DescNegocio)
                .IsUnicode(false)
                .HasColumnName("DESC_NEGOCIO");
            entity.Property(e => e.Direccion)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");
            entity.Property(e => e.Estado)
                .IsUnicode(false)
                .HasColumnName("ESTADO");
            entity.Property(e => e.IdCargasNegociosOtrosClientes).HasColumnName("ID_CARGAS_NEGOCIOS_OTROS_CLIENTES");
            entity.Property(e => e.NoAfiliacion)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.Observaciones)
                .IsUnicode(false)
                .HasColumnName("OBSERVACIONES");
            entity.Property(e => e.Poblacion)
                .IsUnicode(false)
                .HasColumnName("POBLACION");
            entity.Property(e => e.Rfc)
                .IsUnicode(false)
                .HasColumnName("RFC");
            entity.Property(e => e.Status)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.Telefono)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");
        });

        modelBuilder.Entity<BdNegociosPaso>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_NEGOCIOS_PASO");

            entity.Property(e => e.Aproximado).HasColumnName("APROXIMADO");
            entity.Property(e => e.CalleNumFiscal)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("CALLE_NUM_FISCAL");
            entity.Property(e => e.Colonia)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("COLONIA");
            entity.Property(e => e.ColoniaFiscal)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("COLONIA_FISCAL");
            entity.Property(e => e.Cp)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("CP");
            entity.Property(e => e.CpFiscal)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("CP_FISCAL");
            entity.Property(e => e.DescNegocio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_NEGOCIO");
            entity.Property(e => e.Direccion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");
            entity.Property(e => e.Estado)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ESTADO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.FecAltaIguala)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA_IGUALA");
            entity.Property(e => e.FecBajaIguala)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_BAJA_IGUALA");
            entity.Property(e => e.FecUpdate)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_UPDATE");
            entity.Property(e => e.GradoError)
                .HasColumnType("numeric(20, 10)")
                .HasColumnName("GRADO_ERROR");
            entity.Property(e => e.IdCargaAlta).HasColumnName("ID_CARGA_ALTA");
            entity.Property(e => e.IdCargaStatus).HasColumnName("ID_CARGA_STATUS");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdEstado).HasColumnName("ID_ESTADO");
            entity.Property(e => e.IdEstadoFiscal)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("ID_ESTADO_FISCAL");
            entity.Property(e => e.IdHorarioAcceso).HasColumnName("ID_HORARIO_ACCESO");
            entity.Property(e => e.IdHorarioUptime).HasColumnName("ID_HORARIO_UPTIME");
            entity.Property(e => e.IdMoneda).HasColumnName("ID_MONEDA");
            entity.Property(e => e.IdRegion).HasColumnName("ID_REGION");
            entity.Property(e => e.IdSegmento).HasColumnName("ID_SEGMENTO");
            entity.Property(e => e.IdTipoCobroNegocio).HasColumnName("ID_TIPO_COBRO_NEGOCIO");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.IdUsuarioUpdate).HasColumnName("ID_USUARIO_UPDATE");
            entity.Property(e => e.IdZona).HasColumnName("ID_ZONA");
            entity.Property(e => e.Latitud)
                .HasColumnType("numeric(20, 15)")
                .HasColumnName("LATITUD");
            entity.Property(e => e.Longitud)
                .HasColumnType("numeric(20, 15)")
                .HasColumnName("LONGITUD");
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.NombreFiscal)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("NOMBRE_FISCAL");
            entity.Property(e => e.Poblacion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("POBLACION");
            entity.Property(e => e.PoblacionFiscal)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("POBLACION_FISCAL");
            entity.Property(e => e.Precio)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("PRECIO");
            entity.Property(e => e.RazonSocial)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RAZON_SOCIAL");
            entity.Property(e => e.RfcFiscal)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RFC_FISCAL");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.Telefono)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");
        });

        modelBuilder.Entity<BdNegociosPaso2>(entity =>
        {
            entity.HasKey(e => e.IdBdNegocio).HasName("PK__BD_NEGOC__EFC6A90CA0497576");

            entity.ToTable("BD_NEGOCIOS_PASO_2");

            entity.Property(e => e.IdBdNegocio).HasColumnName("ID_BD_NEGOCIO");
            entity.Property(e => e.Aproximado).HasColumnName("APROXIMADO");
            entity.Property(e => e.CalleNumFiscal)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("CALLE_NUM_FISCAL");
            entity.Property(e => e.Colonia)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("COLONIA");
            entity.Property(e => e.ColoniaFiscal)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("COLONIA_FISCAL");
            entity.Property(e => e.Cp)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("CP");
            entity.Property(e => e.CpFiscal)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("CP_FISCAL");
            entity.Property(e => e.DescNegocio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_NEGOCIO");
            entity.Property(e => e.Direccion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");
            entity.Property(e => e.Estado)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ESTADO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.FecAltaIguala)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA_IGUALA");
            entity.Property(e => e.FecBajaIguala)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_BAJA_IGUALA");
            entity.Property(e => e.FecUpdate)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_UPDATE");
            entity.Property(e => e.GradoError)
                .HasColumnType("numeric(20, 10)")
                .HasColumnName("GRADO_ERROR");
            entity.Property(e => e.IdCargaAlta).HasColumnName("ID_CARGA_ALTA");
            entity.Property(e => e.IdCargaStatus).HasColumnName("ID_CARGA_STATUS");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdEstado).HasColumnName("ID_ESTADO");
            entity.Property(e => e.IdEstadoFiscal)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("ID_ESTADO_FISCAL");
            entity.Property(e => e.IdHorarioAcceso).HasColumnName("ID_HORARIO_ACCESO");
            entity.Property(e => e.IdHorarioUptime).HasColumnName("ID_HORARIO_UPTIME");
            entity.Property(e => e.IdMoneda).HasColumnName("ID_MONEDA");
            entity.Property(e => e.IdRegion).HasColumnName("ID_REGION");
            entity.Property(e => e.IdSegmento).HasColumnName("ID_SEGMENTO");
            entity.Property(e => e.IdTipoCobroNegocio).HasColumnName("ID_TIPO_COBRO_NEGOCIO");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.IdUsuarioUpdate).HasColumnName("ID_USUARIO_UPDATE");
            entity.Property(e => e.IdZona).HasColumnName("ID_ZONA");
            entity.Property(e => e.Latitud)
                .HasColumnType("numeric(20, 15)")
                .HasColumnName("LATITUD");
            entity.Property(e => e.Longitud)
                .HasColumnType("numeric(20, 15)")
                .HasColumnName("LONGITUD");
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.NombreFiscal)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("NOMBRE_FISCAL");
            entity.Property(e => e.Poblacion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("POBLACION");
            entity.Property(e => e.PoblacionFiscal)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("POBLACION_FISCAL");
            entity.Property(e => e.Precio)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("PRECIO");
            entity.Property(e => e.RazonSocial)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RAZON_SOCIAL");
            entity.Property(e => e.RfcFiscal)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RFC_FISCAL");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.Telefono)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");
        });

        modelBuilder.Entity<BdNegociosServiciosDoble>(entity =>
        {
            entity.HasKey(e => e.IdNegocioServicioDoble).HasName("PK__BD_NEGOC__DD8FA290BCCE31A1");

            entity.ToTable("BD_NEGOCIOS_SERVICIOS_DOBLES");

            entity.Property(e => e.IdNegocioServicioDoble).HasColumnName("ID_NEGOCIO_SERVICIO_DOBLE");
            entity.Property(e => e.DescripcionServicioDoble)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_SERVICIO_DOBLE");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdServicioDoble).HasColumnName("ID_SERVICIO_DOBLE");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.IsExito).HasColumnName("IS_EXITO");
            entity.Property(e => e.Mensaje)
                .IsUnicode(false)
                .HasColumnName("MENSAJE");
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdNivelReparacionProveedor>(entity =>
        {
            entity.HasKey(e => e.IdNivelReparacionProveedor).HasName("PK__BD_NIVEL__AA637844BB6E4AC4");

            entity.ToTable("BD_NIVEL_REPARACION_PROVEEDOR");

            entity.Property(e => e.IdNivelReparacionProveedor).HasColumnName("ID_NIVEL_REPARACION_PROVEEDOR");
            entity.Property(e => e.FechaAlta)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ALTA");
            entity.Property(e => e.IdNivelReparacion).HasColumnName("ID_NIVEL_REPARACION");
            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Status)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdNomina>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_NOMINA");

            entity.HasIndex(e => new { e.Year, e.Month, e.Curp }, "IX_BD_NOMINA");

            entity.HasIndex(e => new { e.Year, e.Month, e.Curp }, "IX_BD_NOMINA_1").IsUnique();

            entity.HasIndex(e => new { e.Year, e.Month, e.Secuencia }, "IX_BD_NOMINA_2").IsUnique();

            entity.Property(e => e.Antiguedad)
                .HasColumnType("date")
                .HasColumnName("ANTIGUEDAD");
            entity.Property(e => e.AyudaComida)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AYUDA_COMIDA");
            entity.Property(e => e.AyudaTransporte)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AYUDA_TRANSPORTE");
            entity.Property(e => e.Bonos)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("BONOS");
            entity.Property(e => e.Centro)
                .HasMaxLength(50)
                .IsFixedLength()
                .HasColumnName("CENTRO");
            entity.Property(e => e.Comisiones)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COMISIONES");
            entity.Property(e => e.Curp)
                .HasMaxLength(18)
                .IsFixedLength()
                .HasColumnName("CURP");
            entity.Property(e => e.Descuentos)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DESCUENTOS");
            entity.Property(e => e.EsquemaTpv)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ESQUEMA_TPV");
            entity.Property(e => e.FecBaja)
                .HasColumnType("date")
                .HasColumnName("FEC_BAJA");
            entity.Property(e => e.Finiquito)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("FINIQUITO");
            entity.Property(e => e.Guardias)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("GUARDIAS");
            entity.Property(e => e.IdPlaza).HasColumnName("ID_PLAZA");
            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");
            entity.Property(e => e.IdProyecto).HasColumnName("ID_PROYECTO");
            entity.Property(e => e.IdRegion).HasColumnName("ID_REGION");
            entity.Property(e => e.ImpSar)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IMP_SAR");
            entity.Property(e => e.ImpSobreNomina)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IMP_SOBRE_NOMINA");
            entity.Property(e => e.Month).HasColumnName("MONTH");
            entity.Property(e => e.Nombre)
                .HasMaxLength(80)
                .IsFixedLength()
                .HasColumnName("NOMBRE");
            entity.Property(e => e.Prestaciones)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PRESTACIONES");
            entity.Property(e => e.Ptu)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PTU");
            entity.Property(e => e.Puesto)
                .HasMaxLength(30)
                .IsFixedLength()
                .HasColumnName("PUESTO");
            entity.Property(e => e.Secuencia).HasColumnName("SECUENCIA");
            entity.Property(e => e.Sueldo)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("SUELDO");
            entity.Property(e => e.TotConViaticos)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("TOT_CON_VIATICOS");
            entity.Property(e => e.TotSinViaticos)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("TOT_SIN_VIATICOS");
            entity.Property(e => e.Vacaciones)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VACACIONES");
            entity.Property(e => e.Vales)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALES");
            entity.Property(e => e.ViaticosNoComp)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VIATICOS_NO_COMP");
            entity.Property(e => e.Year).HasColumnName("YEAR");
        });

        modelBuilder.Entity<BdNominaDetalle>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_NOMINA_DETALLE");

            entity.HasIndex(e => new { e.Year, e.Month, e.Secuencia, e.Curp, e.IdProyecto }, "IX_BD_NOMINA_DETALLE").IsUnique();

            entity.HasIndex(e => new { e.Year, e.Month, e.Secuencia }, "IX_BD_NOMINA_DETALLE_1").IsUnique();

            entity.Property(e => e.Costo)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COSTO");
            entity.Property(e => e.Curp)
                .HasMaxLength(18)
                .IsFixedLength()
                .HasColumnName("CURP");
            entity.Property(e => e.IdProyecto).HasColumnName("ID_PROYECTO");
            entity.Property(e => e.Month).HasColumnName("MONTH");
            entity.Property(e => e.Nombre)
                .HasMaxLength(80)
                .IsFixedLength()
                .HasColumnName("NOMBRE");
            entity.Property(e => e.Porcentaje)
                .HasColumnType("decimal(3, 2)")
                .HasColumnName("PORCENTAJE");
            entity.Property(e => e.Secuencia).HasColumnName("SECUENCIA");
            entity.Property(e => e.Year).HasColumnName("YEAR");
        });

        modelBuilder.Entity<BdNotificacionesOdt>(entity =>
        {
            entity.HasKey(e => e.IdNotificacionOdt).HasName("PK__BD_NOTIF__0C6C7932E99A37E4");

            entity.ToTable("BD_NOTIFICACIONES_ODTS");

            entity.Property(e => e.IdNotificacionOdt).HasColumnName("ID_NOTIFICACION_ODT");
            entity.Property(e => e.EmailPrueba)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("EMAIL_PRUEBA");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdPlantilla).HasColumnName("ID_PLANTILLA");
            entity.Property(e => e.IdStatus).HasColumnName("ID_STATUS");
            entity.Property(e => e.IdStatusFin).HasColumnName("ID_STATUS_FIN");
            entity.Property(e => e.IdStatusIni).HasColumnName("ID_STATUS_INI");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.NombreEnvio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NOMBRE_ENVIO");
            entity.Property(e => e.NombreUsuarioPrueba)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NOMBRE_USUARIO_PRUEBA");
        });

        modelBuilder.Entity<BdObservacionesCambioUnidad>(entity =>
        {
            entity.HasKey(e => e.IdObservacionesCamnbioUnidad).HasName("PK__BD_OBSER__025B14885121EE15");

            entity.ToTable("BD_OBSERVACIONES_CAMBIO_UNIDAD");

            entity.Property(e => e.IdObservacionesCamnbioUnidad).HasColumnName("ID_OBSERVACIONES_CAMNBIO_UNIDAD");
            entity.Property(e => e.Comentario)
                .IsUnicode(false)
                .HasColumnName("COMENTARIO");
            entity.Property(e => e.FechaAlta)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ALTA");
            entity.Property(e => e.IdStatusUnidadEnvio).HasColumnName("ID_STATUS_UNIDAD_ENVIO");
            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.Status)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdOnbaseInbox>(entity =>
        {
            entity.HasKey(e => e.IdOnbaseInbox).HasName("PK__BD_ONBAS__610C6D1059B23E38");

            entity.ToTable("BD_ONBASE_INBOX");

            entity.HasIndex(e => e.Preodt, "IX_BD_ONBASE_INBOX");

            entity.HasIndex(e => e.Afiliacion, "IX_BD_ONBASE_INBOX_1");

            entity.HasIndex(e => e.Arodt, "IX_BD_ONBASE_INBOX_2");

            entity.HasIndex(e => e.Proveedor, "IX_BD_ONBASE_INBOX_3");

            entity.HasIndex(e => e.IdOnbaseInbox, "IX_BD_ONBASE_INBOX_4");

            entity.Property(e => e.IdOnbaseInbox).HasColumnName("ID_ONBASE_INBOX");
            entity.Property(e => e.Afilamex)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AFILAMEX");
            entity.Property(e => e.Afiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AFILIACION");
            entity.Property(e => e.Arodt)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ARODT");
            entity.Property(e => e.Canal)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CANAL");
            entity.Property(e => e.Carga)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CARGA");
            entity.Property(e => e.Codigoproducto)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CODIGOPRODUCTO");
            entity.Property(e => e.Colonia)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("COLONIA");
            entity.Property(e => e.Comercio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("COMERCIO");
            entity.Property(e => e.Conectividad)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CONECTIVIDAD");
            entity.Property(e => e.Contacto1)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CONTACTO1");
            entity.Property(e => e.Contacto2)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CONTACTO2");
            entity.Property(e => e.Contactocomercio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CONTACTOCOMERCIO");
            entity.Property(e => e.Cp)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CP");
            entity.Property(e => e.Descripcion)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");
            entity.Property(e => e.Diasatencion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DIASATENCION");
            entity.Property(e => e.Domicilio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DOMICILIO");
            entity.Property(e => e.Ejecutivoka)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("EJECUTIVOKA");
            entity.Property(e => e.Ejecutivosucursal)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("EJECUTIVOSUCURSAL");
            entity.Property(e => e.Emailejecutivo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("EMAILEJECUTIVO");
            entity.Property(e => e.Emailejecutivoka)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("EMAILEJECUTIVOKA");
            entity.Property(e => e.Emailrespuesta)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("EMAILRESPUESTA");
            entity.Property(e => e.Emailserv)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("EMAILSERV");
            entity.Property(e => e.Estado)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ESTADO");
            entity.Property(e => e.Fechaenvio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("FECHAENVIO");
            entity.Property(e => e.Foliotelecarga)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("FOLIOTELECARGA");
            entity.Property(e => e.Horarioatencion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("HORARIOATENCION");
            entity.Property(e => e.Idamex)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IDAMEX");
            entity.Property(e => e.Idcaja)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IDCAJA");
            entity.Property(e => e.Mcc)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("MCC");
            entity.Property(e => e.Modelotpv)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("MODELOTPV");
            entity.Property(e => e.Numrollos)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NUMROLLOS");
            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");
            entity.Property(e => e.Poblacion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("POBLACION");
            entity.Property(e => e.Preodt)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("PREODT");
            entity.Property(e => e.Producto)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("PRODUCTO");
            entity.Property(e => e.Proveedor)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("PROVEEDOR");
            entity.Property(e => e.Proyecto)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("PROYECTO");
            entity.Property(e => e.Razonsocial)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("RAZONSOCIAL");
            entity.Property(e => e.Referenciaubicacion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("REFERENCIAUBICACION");
            entity.Property(e => e.Rfc)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RFC");
            entity.Property(e => e.Subtiposervicio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("SUBTIPOSERVICIO");
            entity.Property(e => e.Sucursal)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("SUCURSAL");
            entity.Property(e => e.Telefono)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");
            entity.Property(e => e.Telejecutivo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TELEJECUTIVO");
            entity.Property(e => e.Telsucursal)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TELSUCURSAL");
            entity.Property(e => e.Tipoab)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("TIPOAB");
            entity.Property(e => e.Tiposervicio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("TIPOSERVICIO");
        });

        modelBuilder.Entity<BdOnbaseInboxConfirmacion>(entity =>
        {
            entity.HasKey(e => e.IdOnbaseInboxConfirmacion).HasName("PK__BD_ONBAS__58AB64DCF8551C15");

            entity.ToTable("BD_ONBASE_INBOX_CONFIRMACION");

            entity.HasIndex(e => e.Preodt, "missing_index_260345_260344");

            entity.Property(e => e.IdOnbaseInboxConfirmacion).HasColumnName("ID_ONBASE_INBOX_CONFIRMACION");
            entity.Property(e => e.Afiliacion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("AFILIACION");
            entity.Property(e => e.Canal)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CANAL");
            entity.Property(e => e.Colonia)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("COLONIA");
            entity.Property(e => e.Conectividad)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CONECTIVIDAD");
            entity.Property(e => e.Contacto1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CONTACTO1");
            entity.Property(e => e.Contacto2)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CONTACTO2");
            entity.Property(e => e.Contactocomercio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CONTACTOCOMERCIO");
            entity.Property(e => e.Cp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CP");
            entity.Property(e => e.Descripcion)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");
            entity.Property(e => e.Diasatencion)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DIASATENCION");
            entity.Property(e => e.Ejecutivoka)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("EJECUTIVOKA");
            entity.Property(e => e.Ejecutivosucursal)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("EJECUTIVOSUCURSAL");
            entity.Property(e => e.Emailejecutivoka)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("EMAILEJECUTIVOKA");
            entity.Property(e => e.Emailserv)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("EMAILSERV");
            entity.Property(e => e.Estado)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("ESTADO");
            entity.Property(e => e.Foliotelecarga)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("FOLIOTELECARGA");
            entity.Property(e => e.Horarioatencion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("HORARIOATENCION");
            entity.Property(e => e.Idcaja)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IDCAJA");
            entity.Property(e => e.Mcc)
                .HasColumnType("text")
                .HasColumnName("MCC");
            entity.Property(e => e.Modelotpv)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("MODELOTPV");
            entity.Property(e => e.Poblacion)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("POBLACION");
            entity.Property(e => e.Preodt)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("PREODT");
            entity.Property(e => e.Producto)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("PRODUCTO");
            entity.Property(e => e.Proveedor)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("PROVEEDOR");
            entity.Property(e => e.Proyecto)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("PROYECTO");
            entity.Property(e => e.Referenciaubicacion)
                .IsUnicode(false)
                .HasColumnName("REFERENCIAUBICACION");
            entity.Property(e => e.Sintoma)
                .IsUnicode(false)
                .HasColumnName("SINTOMA");
            entity.Property(e => e.Sucursal)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("SUCURSAL");
            entity.Property(e => e.Telefono)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");
            entity.Property(e => e.Telejecutivo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("TELEJECUTIVO");
            entity.Property(e => e.Telsucursal)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("TELSUCURSAL");
            entity.Property(e => e.Tipoab)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("TIPOAB");
        });

        modelBuilder.Entity<BdOpcionesReingenieriaTipoUsuario>(entity =>
        {
            entity.HasKey(e => e.IdOpcionesReingenieriaTipoUsuario).HasName("PK__BD_OPCIO__E3409B23F71C8231");

            entity.ToTable("BD_OPCIONES_REINGENIERIA_TIPO_USUARIO");

            entity.Property(e => e.IdOpcionesReingenieriaTipoUsuario).HasColumnName("ID_OPCIONES_REINGENIERIA_TIPO_USUARIO");
            entity.Property(e => e.IdOpcionesReingenieria).HasColumnName("ID_OPCIONES_REINGENIERIA");
            entity.Property(e => e.IdTipoUsuario).HasColumnName("ID_TIPO_USUARIO");
        });

        modelBuilder.Entity<BdOpcionesReingenierium>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_OPCIONES_REINGENIERIA");

            entity.Property(e => e.FechaAlta)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ALTA");
            entity.Property(e => e.IdOpcionesReingenieria)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_OPCIONES_REINGENIERIA");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.Opcion)
                .IsUnicode(false)
                .HasColumnName("OPCION");
            entity.Property(e => e.Status)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdOrdenCompra>(entity =>
        {
            entity.HasKey(e => e.IdOrdenCompra).HasName("PK__BD_ORDEN__6C6555B88AAE0349");

            entity.ToTable("BD_ORDEN_COMPRA");

            entity.Property(e => e.IdOrdenCompra).HasColumnName("ID_ORDEN_COMPRA");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.FecOrdenCompra)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ORDEN_COMPRA");
            entity.Property(e => e.IdStatusOrdenCompra).HasColumnName("ID_STATUS_ORDEN_COMPRA");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
        });

        modelBuilder.Entity<BdOrdenCompraInsumo>(entity =>
        {
            entity.HasKey(e => e.IdOrdenCompraInsumo).HasName("PK__BD_ORDEN__83776C9344C8B686");

            entity.ToTable("BD_ORDEN_COMPRA_INSUMOS");

            entity.Property(e => e.IdOrdenCompraInsumo).HasColumnName("ID_ORDEN_COMPRA_INSUMO");
            entity.Property(e => e.Cantidad).HasColumnName("CANTIDAD");
            entity.Property(e => e.Costo).HasColumnName("COSTO");
            entity.Property(e => e.IdInsumo).HasColumnName("ID_INSUMO");
            entity.Property(e => e.IdOrdenCompra).HasColumnName("ID_ORDEN_COMPRA");
            entity.Property(e => e.IdResponsable).HasColumnName("ID_RESPONSABLE");
            entity.Property(e => e.IdTipoResponsable).HasColumnName("ID_TIPO_RESPONSABLE");
            entity.Property(e => e.IsRecibido).HasColumnName("IS_RECIBIDO");
            entity.Property(e => e.Total)
                .HasComputedColumnSql("([CANTIDAD]*[COSTO])", false)
                .HasColumnName("TOTAL");
        });

        modelBuilder.Entity<BdOrdenCompraNoFactura>(entity =>
        {
            entity.HasKey(e => e.IdOrdenCompraNoFactura).HasName("PK__BD_ORDEN__050DFE803E90B59E");

            entity.ToTable("BD_ORDEN_COMPRA_NO_FACTURA");

            entity.Property(e => e.IdOrdenCompraNoFactura).HasColumnName("ID_ORDEN_COMPRA_NO_FACTURA");
            entity.Property(e => e.FecFactura)
                .HasColumnType("datetime")
                .HasColumnName("FEC_FACTURA");
            entity.Property(e => e.IdOrdenCompra).HasColumnName("ID_ORDEN_COMPRA");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.NoFactura)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NO_FACTURA");
        });

        modelBuilder.Entity<BdOrdenCompraUnidade>(entity =>
        {
            entity.HasKey(e => e.IdOrdenCompraUnidad).HasName("PK__BD_ORDEN__CA8BA0FD21EDC624");

            entity.ToTable("BD_ORDEN_COMPRA_UNIDADES");

            entity.Property(e => e.IdOrdenCompraUnidad).HasColumnName("ID_ORDEN_COMPRA_UNIDAD");
            entity.Property(e => e.Cantidad).HasColumnName("CANTIDAD");
            entity.Property(e => e.Costo).HasColumnName("COSTO");
            entity.Property(e => e.IdModelo).HasColumnName("ID_MODELO");
            entity.Property(e => e.IdOrdenCompra).HasColumnName("ID_ORDEN_COMPRA");
            entity.Property(e => e.IdResponsable).HasColumnName("ID_RESPONSABLE");
            entity.Property(e => e.IdTipoResponsable).HasColumnName("ID_TIPO_RESPONSABLE");
            entity.Property(e => e.IsRecibido).HasColumnName("IS_RECIBIDO");
            entity.Property(e => e.Total)
                .HasComputedColumnSql("([CANTIDAD]*[COSTO])", false)
                .HasColumnName("TOTAL");
        });

        modelBuilder.Entity<BdOrdenCompraVendedor>(entity =>
        {
            entity.HasKey(e => e.IdOrdenCompraVendedor).HasName("PK__BD_ORDEN__BFD995CEE26E874D");

            entity.ToTable("BD_ORDEN_COMPRA_VENDEDOR");

            entity.Property(e => e.IdOrdenCompraVendedor).HasColumnName("ID_ORDEN_COMPRA_VENDEDOR");
            entity.Property(e => e.ArcherVendorId).HasColumnName("ARCHER_VENDOR_ID");
            entity.Property(e => e.CentroCosto)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CENTRO_COSTO");
            entity.Property(e => e.Comentario)
                .IsUnicode(false)
                .HasColumnName("COMENTARIO");
            entity.Property(e => e.IdOrdenCompra).HasColumnName("ID_ORDEN_COMPRA");
            entity.Property(e => e.IdTipoItemOrdenCompra).HasColumnName("ID_TIPO_ITEM_ORDEN_COMPRA");
            entity.Property(e => e.IdVendedor).HasColumnName("ID_VENDEDOR");
            entity.Property(e => e.Moneda)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("MONEDA");
            entity.Property(e => e.NoOrdenCompra)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NO_ORDEN_COMPRA");
            entity.Property(e => e.TerminoPago)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("TERMINO_PAGO");
        });

        modelBuilder.Entity<BdOrdenesCompraEvidencium>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_ORDENES_COMPRA_EVIDENCIA");

            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdOrden).HasColumnName("ID_ORDEN");
            entity.Property(e => e.IdOrdenesCompraEvidencia)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_ORDENES_COMPRA_EVIDENCIA");
            entity.Property(e => e.NombreArchivo)
                .IsUnicode(false)
                .HasColumnName("NOMBRE_ARCHIVO");
            entity.Property(e => e.NombreSistema)
                .IsUnicode(false)
                .HasColumnName("NOMBRE_SISTEMA");
            entity.Property(e => e.UsuarioAlta).HasColumnName("USUARIO_ALTA");
        });

        modelBuilder.Entity<BdPaseListaTecnico>(entity =>
        {
            entity.HasKey(e => e.IdPaseListaTecnico);

            entity.ToTable("BD_PASE_LISTA_TECNICO");

            entity.Property(e => e.IdPaseListaTecnico).HasColumnName("ID_PASE_LISTA_TECNICO");
            entity.Property(e => e.FechaHora)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_HORA");
            entity.Property(e => e.IdTecnico).HasColumnName("ID_TECNICO");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdPasoArNumber>(entity =>
        {
            entity.HasKey(e => e.IdPaso).HasName("PK__BD_PASO___B68ACC884D109FDE");

            entity.ToTable("BD_PASO_AR_NUMBER");

            entity.Property(e => e.IdPaso).HasColumnName("ID_PASO");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IdStatus).HasColumnName("ID_STATUS");
            entity.Property(e => e.Number).HasColumnName("NUMBER");
            entity.Property(e => e.Status)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdPasoCambioStatusUnidadMasivo>(entity =>
        {
            entity.HasKey(e => e.IdPasoCambioStatusUnidadMasivo).HasName("PK__BD_PASO___EE8C715F2D788351");

            entity.ToTable("BD_PASO_CAMBIO_STATUS_UNIDAD_MASIVO");

            entity.HasIndex(e => e.IdCarga, "missing_index_236170_236169");

            entity.Property(e => e.IdPasoCambioStatusUnidadMasivo).HasColumnName("ID_PASO_CAMBIO_STATUS_UNIDAD_MASIVO");
            entity.Property(e => e.Comentario)
                .IsUnicode(false)
                .HasColumnName("COMENTARIO");
            entity.Property(e => e.FecCarga)
                .HasColumnType("datetime")
                .HasColumnName("FEC_CARGA");
            entity.Property(e => e.IdCarga).HasColumnName("ID_CARGA");
            entity.Property(e => e.IdResponsable).HasColumnName("ID_RESPONSABLE");
            entity.Property(e => e.IdStatusUnidad).HasColumnName("ID_STATUS_UNIDAD");
            entity.Property(e => e.IdTipoResponsable).HasColumnName("ID_TIPO_RESPONSABLE");
            entity.Property(e => e.IdUsuarioCarga).HasColumnName("ID_USUARIO_CARGA");
            entity.Property(e => e.NoSerie)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");
            entity.Property(e => e.Validacion)
                .IsUnicode(false)
                .HasColumnName("VALIDACION");
        });

        modelBuilder.Entity<BdPasoCancelacionMasivaOdt>(entity =>
        {
            entity.HasKey(e => e.IdPasoCancelacionMasivaOdt).HasName("PK__BD_PASO___17426534B5B3BE3C");

            entity.ToTable("BD_PASO_CANCELACION_MASIVA_ODT");

            entity.Property(e => e.IdPasoCancelacionMasivaOdt).HasColumnName("ID_PASO_CANCELACION_MASIVA_ODT");
            entity.Property(e => e.CausaCancelacion)
                .IsUnicode(false)
                .HasColumnName("CAUSA_CANCELACION");
            entity.Property(e => e.FechaAlta)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ALTA");
            entity.Property(e => e.IdCarga).HasColumnName("ID_CARGA");
            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");
            entity.Property(e => e.Odt)
                .IsUnicode(false)
                .HasColumnName("ODT");
            entity.Property(e => e.Status)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.UsuarioAlta).HasColumnName("USUARIO_ALTA");
        });

        modelBuilder.Entity<BdPasoComentarioOdt>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_PASO_COMENTARIO_ODT");

            entity.Property(e => e.Comentario)
                .IsUnicode(false)
                .HasColumnName("COMENTARIO");
            entity.Property(e => e.FechaAlta)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ALTA");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.NoAr)
                .IsUnicode(false)
                .HasColumnName("NO_AR");
            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");
            entity.Property(e => e.Status)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdPasoConsolidado>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_PASO_CONSOLIDADO");

            entity.Property(e => e.IdConsolidado)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_CONSOLIDADO");
            entity.Property(e => e.IdSolicitud).HasColumnName("ID_SOLICITUD");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.IsConsolidado).HasColumnName("IS_CONSOLIDADO");
            entity.Property(e => e.Status)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdPasoTpvReporteSantanderDiario>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_PASO_TPV_REPORTE_SANTANDER_DIARIO");

            entity.Property(e => e.ActivoUObsoleto)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("ACTIVO_U_OBSOLETO");
            entity.Property(e => e.AfiliacionDeRetiro)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AFILIACION_DE_RETIRO");
            entity.Property(e => e.Aplicativo)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("APLICATIVO");
            entity.Property(e => e.Ar1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AR_1");
            entity.Property(e => e.Ar2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AR_2");
            entity.Property(e => e.Ar541)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AR_541");
            entity.Property(e => e.CableCorrienteSiNo)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("CABLE_CORRIENTE_SI_NO");
            entity.Property(e => e.ComentarioReparacionLaboratorio)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("COMENTARIO_REPARACION_LABORATORIO");
            entity.Property(e => e.Comentarios)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("COMENTARIOS");
            entity.Property(e => e.Comparacion1)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("COMPARACION_1");
            entity.Property(e => e.Comparacion2)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("COMPARACION_2");
            entity.Property(e => e.Conectividad)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("CONECTIVIDAD");
            entity.Property(e => e.ControlInventario74787428)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("CONTROL_INVENTARIO_7478_7428");
            entity.Property(e => e.DescCliente)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_CLIENTE");
            entity.Property(e => e.DescMarca)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_MARCA");
            entity.Property(e => e.DescModelo)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_MODELO");
            entity.Property(e => e.DescNivelDiagnostico)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("DESC_NIVEL_DIAGNOSTICO");
            entity.Property(e => e.DescStatusUnidad)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_STATUS_UNIDAD");
            entity.Property(e => e.DescTipoResponsable)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_TIPO_RESPONSABLE");
            entity.Property(e => e.DescZona)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_ZONA");
            entity.Property(e => e.EliminadorSiNo)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ELIMINADOR_SI_NO");
            entity.Property(e => e.EntregaAProveedor)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ENTREGA_A_PROVEEDOR");
            entity.Property(e => e.EquipoOracle)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("EQUIPO_ORACLE");
            entity.Property(e => e.EquiposADestruccion)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("EQUIPOS_A_DESTRUCCION");
            entity.Property(e => e.Estado)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ESTADO");
            entity.Property(e => e.Expr1)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("EXPR1");
            entity.Property(e => e.FecStatus)
                .HasMaxLength(17)
                .IsUnicode(false)
                .HasColumnName("FEC_STATUS");
            entity.Property(e => e.FechaCierreSisei)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("FECHA_CIERRE_SISEI");
            entity.Property(e => e.FechaDeCierre1)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("FECHA_DE_CIERRE_1");
            entity.Property(e => e.FechaDeCierre2)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("FECHA_DE_CIERRE_2");
            entity.Property(e => e.FechaIngreso)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("FECHA_INGRESO");
            entity.Property(e => e.FechaInstalacion)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("FECHA_INSTALACION");
            entity.Property(e => e.FechaRetornoFabricante)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("FECHA_RETORNO_FABRICANTE");
            entity.Property(e => e.FechaSgs1)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("FECHA_SGS_1");
            entity.Property(e => e.FechaSgs2)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("FECHA_SGS_2");
            entity.Property(e => e.FechaUltimoIngreso)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("FECHA_ULTIMO_INGRESO");
            entity.Property(e => e.Guia)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("GUIA");
            entity.Property(e => e.IdEnvio).HasColumnName("ID_ENVIO");
            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");
            entity.Property(e => e.IsDaniada)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("IS_DANIADA");
            entity.Property(e => e.IsNueva)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("IS_NUEVA");
            entity.Property(e => e.IsReparada)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("IS_REPARADA");
            entity.Property(e => e.IsRetiro)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("IS_RETIRO");
            entity.Property(e => e.Largo).HasColumnName("LARGO");
            entity.Property(e => e.Licencias)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("LICENCIAS");
            entity.Property(e => e.Mes3)
                .HasMaxLength(30)
                .HasColumnName("MES_3");
            entity.Property(e => e.MesIngreso)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("MES_INGRESO");
            entity.Property(e => e.MesInstalacion)
                .HasMaxLength(30)
                .HasColumnName("MES_INSTALACION");
            entity.Property(e => e.ModeloSantander)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("MODELO_SANTANDER");
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.NoImei)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_IMEI");
            entity.Property(e => e.NoInventario)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_INVENTARIO");
            entity.Property(e => e.NoSerie)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");
            entity.Property(e => e.NoSim)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SIM");
            entity.Property(e => e.NuevaOUsada)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("NUEVA_O_USADA");
            entity.Property(e => e.NuevaUsadaReparada)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("NUEVA_USADA_REPARADA");
            entity.Property(e => e.PendientesPorReparacionYGarantia)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("PENDIENTES_POR_REPARACION_Y_GARANTIA");
            entity.Property(e => e.Proveedor)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("PROVEEDOR");
            entity.Property(e => e.Region)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("REGION");
            entity.Property(e => e.ResponsableDestino)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RESPONSABLE_DESTINO");
            entity.Property(e => e.ResponsableOrigen)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RESPONSABLE_ORIGEN");
            entity.Property(e => e.SeAtiende)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("SE_ATIENDE");
            entity.Property(e => e.Solicitud).HasColumnName("SOLICITUD");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.StatusSantander)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("STATUS_SANTANDER");
            entity.Property(e => e.Tecnologia)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("TECNOLOGIA");
            entity.Property(e => e.TerminalesCifradas55208)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("TERMINALES_CIFRADAS_55208");
            entity.Property(e => e.TerminalesEnGarantia)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("TERMINALES_EN_GARANTIA");
            entity.Property(e => e.TipoDeServicioRetiro)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("TIPO_DE_SERVICIO_RETIRO");
            entity.Property(e => e.TipoServicio1)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("TIPO_SERVICIO_1");
            entity.Property(e => e.TomaDeInventario)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("TOMA_DE_INVENTARIO");
            entity.Property(e => e.UltimaEntradaPorOdtProveedor)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ULTIMA_ENTRADA_POR_ODT_PROVEEDOR");
            entity.Property(e => e.UsuarioUltimoMovimiento)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("USUARIO_ULTIMO_MOVIMIENTO");
            entity.Property(e => e.Version)
                .HasMaxLength(700)
                .IsUnicode(false)
                .HasColumnName("VERSION");
            entity.Property(e => e.Zona)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZONA");
        });

        modelBuilder.Entity<BdPasoTpvReporteSantanderDiarioFabricante>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_PASO_TPV_REPORTE_SANTANDER_DIARIO_FABRICANTE");

            entity.Property(e => e.ActivoUObsoleto)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("ACTIVO_U_OBSOLETO");
            entity.Property(e => e.AfiliacionDeRetiro)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AFILIACION_DE_RETIRO");
            entity.Property(e => e.Aplicativo)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("APLICATIVO");
            entity.Property(e => e.Ar1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AR_1");
            entity.Property(e => e.Ar2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AR_2");
            entity.Property(e => e.Ar541)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AR_541");
            entity.Property(e => e.CableCorrienteSiNo)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("CABLE_CORRIENTE_SI_NO");
            entity.Property(e => e.ComentarioReparacionLaboratorio)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("COMENTARIO_REPARACION_LABORATORIO");
            entity.Property(e => e.Comentarios)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("COMENTARIOS");
            entity.Property(e => e.Comparacion1)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("COMPARACION_1");
            entity.Property(e => e.Comparacion2)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("COMPARACION_2");
            entity.Property(e => e.Conectividad)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("CONECTIVIDAD");
            entity.Property(e => e.ControlInventario74787428)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("CONTROL_INVENTARIO_7478_7428");
            entity.Property(e => e.DescCliente)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_CLIENTE");
            entity.Property(e => e.DescMarca)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_MARCA");
            entity.Property(e => e.DescModelo)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_MODELO");
            entity.Property(e => e.DescNivelDiagnostico)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("DESC_NIVEL_DIAGNOSTICO");
            entity.Property(e => e.DescStatusUnidad)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_STATUS_UNIDAD");
            entity.Property(e => e.DescTipoResponsable)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_TIPO_RESPONSABLE");
            entity.Property(e => e.DescZona)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_ZONA");
            entity.Property(e => e.EliminadorSiNo)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ELIMINADOR_SI_NO");
            entity.Property(e => e.EntregaAProveedor)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ENTREGA_A_PROVEEDOR");
            entity.Property(e => e.EquipoOracle)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("EQUIPO_ORACLE");
            entity.Property(e => e.EquiposADestruccion)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("EQUIPOS_A_DESTRUCCION");
            entity.Property(e => e.Estado)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ESTADO");
            entity.Property(e => e.Expr1)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("EXPR1");
            entity.Property(e => e.FecStatus)
                .HasMaxLength(17)
                .IsUnicode(false)
                .HasColumnName("FEC_STATUS");
            entity.Property(e => e.FechaCierreSisei)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("FECHA_CIERRE_SISEI");
            entity.Property(e => e.FechaDeCierre1)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("FECHA_DE_CIERRE_1");
            entity.Property(e => e.FechaDeCierre2)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("FECHA_DE_CIERRE_2");
            entity.Property(e => e.FechaIngreso)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("FECHA_INGRESO");
            entity.Property(e => e.FechaInstalacion)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("FECHA_INSTALACION");
            entity.Property(e => e.FechaRetornoFabricante)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("FECHA_RETORNO_FABRICANTE");
            entity.Property(e => e.FechaSgs1)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("FECHA_SGS_1");
            entity.Property(e => e.FechaSgs2)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("FECHA_SGS_2");
            entity.Property(e => e.FechaUltimoIngreso)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("FECHA_ULTIMO_INGRESO");
            entity.Property(e => e.Guia)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("GUIA");
            entity.Property(e => e.IdAplicativo).HasColumnName("ID_APLICATIVO");
            entity.Property(e => e.IdConectividad).HasColumnName("ID_CONECTIVIDAD");
            entity.Property(e => e.IdEnvio).HasColumnName("ID_ENVIO");
            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");
            entity.Property(e => e.IsDaniada)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("IS_DANIADA");
            entity.Property(e => e.IsNueva)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("IS_NUEVA");
            entity.Property(e => e.IsReparada)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("IS_REPARADA");
            entity.Property(e => e.IsRetiro)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("IS_RETIRO");
            entity.Property(e => e.Largo).HasColumnName("LARGO");
            entity.Property(e => e.Licencias)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("LICENCIAS");
            entity.Property(e => e.Mes3)
                .HasMaxLength(30)
                .HasColumnName("MES_3");
            entity.Property(e => e.MesIngreso)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("MES_INGRESO");
            entity.Property(e => e.MesInstalacion)
                .HasMaxLength(30)
                .HasColumnName("MES_INSTALACION");
            entity.Property(e => e.ModeloSantander)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("MODELO_SANTANDER");
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.NoImei)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_IMEI");
            entity.Property(e => e.NoInventario)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_INVENTARIO");
            entity.Property(e => e.NoSerie)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");
            entity.Property(e => e.NoSim)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SIM");
            entity.Property(e => e.NuevaOUsada)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("NUEVA_O_USADA");
            entity.Property(e => e.NuevaUsadaReparada)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("NUEVA_USADA_REPARADA");
            entity.Property(e => e.PendientesPorReparacionYGarantia)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("PENDIENTES_POR_REPARACION_Y_GARANTIA");
            entity.Property(e => e.Proveedor)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("PROVEEDOR");
            entity.Property(e => e.Region)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("REGION");
            entity.Property(e => e.ResponsableDestino)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RESPONSABLE_DESTINO");
            entity.Property(e => e.ResponsableOrigen)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RESPONSABLE_ORIGEN");
            entity.Property(e => e.SeAtiende)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("SE_ATIENDE");
            entity.Property(e => e.Solicitud).HasColumnName("SOLICITUD");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.StatusSantander)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("STATUS_SANTANDER");
            entity.Property(e => e.Tecnologia)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("TECNOLOGIA");
            entity.Property(e => e.TerminalesCifradas55208)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("TERMINALES_CIFRADAS_55208");
            entity.Property(e => e.TerminalesEnGarantia)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("TERMINALES_EN_GARANTIA");
            entity.Property(e => e.TipoDeServicioRetiro)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("TIPO_DE_SERVICIO_RETIRO");
            entity.Property(e => e.TipoServicio1)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("TIPO_SERVICIO_1");
            entity.Property(e => e.TomaDeInventario)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("TOMA_DE_INVENTARIO");
            entity.Property(e => e.UltimaEntradaPorOdtProveedor)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ULTIMA_ENTRADA_POR_ODT_PROVEEDOR");
            entity.Property(e => e.UsuarioUltimoMovimiento)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("USUARIO_ULTIMO_MOVIMIENTO");
            entity.Property(e => e.Version)
                .HasMaxLength(700)
                .IsUnicode(false)
                .HasColumnName("VERSION");
            entity.Property(e => e.Zona)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZONA");
        });

        modelBuilder.Entity<BdPasoTpvReporteSantanderDiarioInstalado>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_PASO_TPV_REPORTE_SANTANDER_DIARIO_INSTALADO");

            entity.Property(e => e.ActivoUObsoleto)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("ACTIVO_U_OBSOLETO");
            entity.Property(e => e.AfiliacionDeRetiro)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AFILIACION_DE_RETIRO");
            entity.Property(e => e.Aplicativo)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("APLICATIVO");
            entity.Property(e => e.Ar1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AR_1");
            entity.Property(e => e.Ar2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AR_2");
            entity.Property(e => e.Ar541)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AR_541");
            entity.Property(e => e.CableCorrienteSiNo)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("CABLE_CORRIENTE_SI_NO");
            entity.Property(e => e.ComentarioReparacionLaboratorio)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("COMENTARIO_REPARACION_LABORATORIO");
            entity.Property(e => e.Comentarios)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("COMENTARIOS");
            entity.Property(e => e.Comparacion1)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("COMPARACION_1");
            entity.Property(e => e.Comparacion2)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("COMPARACION_2");
            entity.Property(e => e.Conectividad)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("CONECTIVIDAD");
            entity.Property(e => e.ControlInventario74787428)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("CONTROL_INVENTARIO_7478_7428");
            entity.Property(e => e.DescCliente)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_CLIENTE");
            entity.Property(e => e.DescMarca)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_MARCA");
            entity.Property(e => e.DescModelo)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_MODELO");
            entity.Property(e => e.DescNivelDiagnostico)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("DESC_NIVEL_DIAGNOSTICO");
            entity.Property(e => e.DescStatusUnidad)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_STATUS_UNIDAD");
            entity.Property(e => e.DescTipoResponsable)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_TIPO_RESPONSABLE");
            entity.Property(e => e.DescZona)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_ZONA");
            entity.Property(e => e.EliminadorSiNo)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ELIMINADOR_SI_NO");
            entity.Property(e => e.EntregaAProveedor)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ENTREGA_A_PROVEEDOR");
            entity.Property(e => e.EquipoOracle)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("EQUIPO_ORACLE");
            entity.Property(e => e.EquiposADestruccion)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("EQUIPOS_A_DESTRUCCION");
            entity.Property(e => e.Estado)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ESTADO");
            entity.Property(e => e.Expr1)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("EXPR1");
            entity.Property(e => e.FecStatus)
                .HasMaxLength(17)
                .IsUnicode(false)
                .HasColumnName("FEC_STATUS");
            entity.Property(e => e.FechaCierreSisei)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("FECHA_CIERRE_SISEI");
            entity.Property(e => e.FechaDeCierre1)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("FECHA_DE_CIERRE_1");
            entity.Property(e => e.FechaDeCierre2)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("FECHA_DE_CIERRE_2");
            entity.Property(e => e.FechaIngreso)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("FECHA_INGRESO");
            entity.Property(e => e.FechaInstalacion)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("FECHA_INSTALACION");
            entity.Property(e => e.FechaRetornoFabricante)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("FECHA_RETORNO_FABRICANTE");
            entity.Property(e => e.FechaSgs1)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("FECHA_SGS_1");
            entity.Property(e => e.FechaSgs2)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("FECHA_SGS_2");
            entity.Property(e => e.FechaUltimoIngreso)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("FECHA_ULTIMO_INGRESO");
            entity.Property(e => e.Guia)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("GUIA");
            entity.Property(e => e.IdAplicativo).HasColumnName("ID_APLICATIVO");
            entity.Property(e => e.IdConectividad).HasColumnName("ID_CONECTIVIDAD");
            entity.Property(e => e.IdEnvio).HasColumnName("ID_ENVIO");
            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");
            entity.Property(e => e.IsDaniada)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("IS_DANIADA");
            entity.Property(e => e.IsNueva)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("IS_NUEVA");
            entity.Property(e => e.IsReparada)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("IS_REPARADA");
            entity.Property(e => e.IsRetiro)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("IS_RETIRO");
            entity.Property(e => e.Largo).HasColumnName("LARGO");
            entity.Property(e => e.Licencias)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("LICENCIAS");
            entity.Property(e => e.Mes3)
                .HasMaxLength(30)
                .HasColumnName("MES_3");
            entity.Property(e => e.MesIngreso)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("MES_INGRESO");
            entity.Property(e => e.MesInstalacion)
                .HasMaxLength(30)
                .HasColumnName("MES_INSTALACION");
            entity.Property(e => e.ModeloSantander)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("MODELO_SANTANDER");
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.NoImei)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_IMEI");
            entity.Property(e => e.NoInventario)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_INVENTARIO");
            entity.Property(e => e.NoSerie)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");
            entity.Property(e => e.NoSim)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SIM");
            entity.Property(e => e.NuevaOUsada)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("NUEVA_O_USADA");
            entity.Property(e => e.NuevaUsadaReparada)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("NUEVA_USADA_REPARADA");
            entity.Property(e => e.PendientesPorReparacionYGarantia)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("PENDIENTES_POR_REPARACION_Y_GARANTIA");
            entity.Property(e => e.Proveedor)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("PROVEEDOR");
            entity.Property(e => e.Region)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("REGION");
            entity.Property(e => e.ResponsableDestino)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RESPONSABLE_DESTINO");
            entity.Property(e => e.ResponsableOrigen)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RESPONSABLE_ORIGEN");
            entity.Property(e => e.SeAtiende)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("SE_ATIENDE");
            entity.Property(e => e.Solicitud).HasColumnName("SOLICITUD");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.StatusSantander)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("STATUS_SANTANDER");
            entity.Property(e => e.Tecnologia)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("TECNOLOGIA");
            entity.Property(e => e.TerminalesCifradas55208)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("TERMINALES_CIFRADAS_55208");
            entity.Property(e => e.TerminalesEnGarantia)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("TERMINALES_EN_GARANTIA");
            entity.Property(e => e.TipoDeServicioRetiro)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("TIPO_DE_SERVICIO_RETIRO");
            entity.Property(e => e.TipoServicio1)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("TIPO_SERVICIO_1");
            entity.Property(e => e.TomaDeInventario)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("TOMA_DE_INVENTARIO");
            entity.Property(e => e.UltimaEntradaPorOdtProveedor)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ULTIMA_ENTRADA_POR_ODT_PROVEEDOR");
            entity.Property(e => e.UsuarioUltimoMovimiento)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("USUARIO_ULTIMO_MOVIMIENTO");
            entity.Property(e => e.Version)
                .HasMaxLength(700)
                .IsUnicode(false)
                .HasColumnName("VERSION");
            entity.Property(e => e.Zona)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZONA");
        });

        modelBuilder.Entity<BdPasoTpvReporteSantanderDiarioStock>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_PASO_TPV_REPORTE_SANTANDER_DIARIO_STOCK");

            entity.Property(e => e.ActivoUObsoleto)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("ACTIVO_U_OBSOLETO");
            entity.Property(e => e.AfiliacionDeRetiro)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AFILIACION_DE_RETIRO");
            entity.Property(e => e.Aplicativo)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("APLICATIVO");
            entity.Property(e => e.Ar1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AR_1");
            entity.Property(e => e.Ar2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AR_2");
            entity.Property(e => e.Ar541)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AR_541");
            entity.Property(e => e.CableCorrienteSiNo)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("CABLE_CORRIENTE_SI_NO");
            entity.Property(e => e.ComentarioReparacionLaboratorio)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("COMENTARIO_REPARACION_LABORATORIO");
            entity.Property(e => e.Comentarios)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("COMENTARIOS");
            entity.Property(e => e.Comparacion1)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("COMPARACION_1");
            entity.Property(e => e.Comparacion2)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("COMPARACION_2");
            entity.Property(e => e.Conectividad)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("CONECTIVIDAD");
            entity.Property(e => e.ControlInventario74787428)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("CONTROL_INVENTARIO_7478_7428");
            entity.Property(e => e.DescCliente)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_CLIENTE");
            entity.Property(e => e.DescMarca)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_MARCA");
            entity.Property(e => e.DescModelo)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_MODELO");
            entity.Property(e => e.DescNivelDiagnostico)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("DESC_NIVEL_DIAGNOSTICO");
            entity.Property(e => e.DescStatusUnidad)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_STATUS_UNIDAD");
            entity.Property(e => e.DescTipoResponsable)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_TIPO_RESPONSABLE");
            entity.Property(e => e.DescZona)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_ZONA");
            entity.Property(e => e.EliminadorSiNo)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ELIMINADOR_SI_NO");
            entity.Property(e => e.EntregaAProveedor)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ENTREGA_A_PROVEEDOR");
            entity.Property(e => e.EquipoOracle)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("EQUIPO_ORACLE");
            entity.Property(e => e.EquiposADestruccion)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("EQUIPOS_A_DESTRUCCION");
            entity.Property(e => e.Expr1)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("EXPR1");
            entity.Property(e => e.FecStatus)
                .HasMaxLength(17)
                .IsUnicode(false)
                .HasColumnName("FEC_STATUS");
            entity.Property(e => e.FechaCierreSisei)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("FECHA_CIERRE_SISEI");
            entity.Property(e => e.FechaDeCierre1)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("FECHA_DE_CIERRE_1");
            entity.Property(e => e.FechaDeCierre2)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("FECHA_DE_CIERRE_2");
            entity.Property(e => e.FechaIngreso)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("FECHA_INGRESO");
            entity.Property(e => e.FechaInstalacion)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("FECHA_INSTALACION");
            entity.Property(e => e.FechaRetornoFabricante)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("FECHA_RETORNO_FABRICANTE");
            entity.Property(e => e.FechaSgs1)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("FECHA_SGS_1");
            entity.Property(e => e.FechaSgs2)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("FECHA_SGS_2");
            entity.Property(e => e.FechaUltimoIngreso)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("FECHA_ULTIMO_INGRESO");
            entity.Property(e => e.Guia)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("GUIA");
            entity.Property(e => e.IdAplicativo).HasColumnName("ID_APLICATIVO");
            entity.Property(e => e.IdConectividad).HasColumnName("ID_CONECTIVIDAD");
            entity.Property(e => e.IdEnvio).HasColumnName("ID_ENVIO");
            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");
            entity.Property(e => e.IsDaniada)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("IS_DANIADA");
            entity.Property(e => e.IsNueva)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("IS_NUEVA");
            entity.Property(e => e.IsReparada)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("IS_REPARADA");
            entity.Property(e => e.IsRetiro)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("IS_RETIRO");
            entity.Property(e => e.Largo).HasColumnName("LARGO");
            entity.Property(e => e.Licencias)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("LICENCIAS");
            entity.Property(e => e.Mes3)
                .HasMaxLength(30)
                .HasColumnName("MES_3");
            entity.Property(e => e.MesIngreso)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("MES_INGRESO");
            entity.Property(e => e.MesInstalacion)
                .HasMaxLength(30)
                .HasColumnName("MES_INSTALACION");
            entity.Property(e => e.ModeloSantander)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("MODELO_SANTANDER");
            entity.Property(e => e.NoImei)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_IMEI");
            entity.Property(e => e.NoInventario)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_INVENTARIO");
            entity.Property(e => e.NoSerie)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");
            entity.Property(e => e.NoSim)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SIM");
            entity.Property(e => e.NuevaOUsada)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("NUEVA_O_USADA");
            entity.Property(e => e.NuevaUsadaReparada)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("NUEVA_USADA_REPARADA");
            entity.Property(e => e.PendientesPorReparacionYGarantia)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("PENDIENTES_POR_REPARACION_Y_GARANTIA");
            entity.Property(e => e.Proveedor)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("PROVEEDOR");
            entity.Property(e => e.ResponsableDestino)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RESPONSABLE_DESTINO");
            entity.Property(e => e.ResponsableOrigen)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RESPONSABLE_ORIGEN");
            entity.Property(e => e.SeAtiende)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("SE_ATIENDE");
            entity.Property(e => e.Solicitud).HasColumnName("SOLICITUD");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.StatusSantander)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("STATUS_SANTANDER");
            entity.Property(e => e.Tecnologia)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("TECNOLOGIA");
            entity.Property(e => e.TerminalesCifradas55208)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("TERMINALES_CIFRADAS_55208");
            entity.Property(e => e.TerminalesEnGarantia)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("TERMINALES_EN_GARANTIA");
            entity.Property(e => e.TipoDeServicioRetiro)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("TIPO_DE_SERVICIO_RETIRO");
            entity.Property(e => e.TipoServicio1)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("TIPO_SERVICIO_1");
            entity.Property(e => e.TomaDeInventario)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("TOMA_DE_INVENTARIO");
            entity.Property(e => e.UltimaEntradaPorOdtProveedor)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ULTIMA_ENTRADA_POR_ODT_PROVEEDOR");
            entity.Property(e => e.UsuarioUltimoMovimiento)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("USUARIO_ULTIMO_MOVIMIENTO");
            entity.Property(e => e.Version)
                .HasMaxLength(700)
                .IsUnicode(false)
                .HasColumnName("VERSION");
        });

        modelBuilder.Entity<BdPeriodoUsuarioInactivo>(entity =>
        {
            entity.HasKey(e => e.IdPeriodoUsuarioInactivo);

            entity.ToTable("BD_PERIODO_USUARIO_INACTIVO");

            entity.Property(e => e.IdPeriodoUsuarioInactivo).HasColumnName("ID_PERIODO_USUARIO_INACTIVO");
            entity.Property(e => e.FecCambio)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_CAMBIO");
            entity.Property(e => e.FecFin)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_FIN");
            entity.Property(e => e.FecInicio)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_INICIO");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.IdUsuarioCambio).HasColumnName("ID_USUARIO_CAMBIO");
            entity.Property(e => e.Status)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.StatusUsuario)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("STATUS_USUARIO");
        });

        modelBuilder.Entity<BdPestanasBitacoraAr>(entity =>
        {
            entity.HasKey(e => e.IdPestanasBitacoraAr);

            entity.ToTable("BD_PESTANAS_BITACORA_AR");

            entity.Property(e => e.IdPestanasBitacoraAr).HasColumnName("ID_PESTANAS_BITACORA_AR");
            entity.Property(e => e.NombrePestana)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("NOMBRE_PESTANA");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdPhonesOnBase>(entity =>
        {
            entity.HasKey(e => e.PhoneId).HasName("PK__BdPhones__F3EE4BB09E4FD5C1");

            entity.ToTable("BdPhonesOnBase");

            entity.Property(e => e.AreaCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CountryCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Number)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<BdPlazaCp>(entity =>
        {
            entity.HasKey(e => e.IdPlazaCp);

            entity.ToTable("BD_PLAZA_CP");

            entity.HasIndex(e => e.Cp, "IX_BD_PLAZA_CP_CP").HasFillFactor(80);

            entity.Property(e => e.IdPlazaCp).HasColumnName("ID_PLAZA_CP");
            entity.Property(e => e.Cp)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("CP");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdPlaza).HasColumnName("ID_PLAZA");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");

            entity.HasOne(d => d.IdPlazaNavigation).WithMany(p => p.BdPlazaCps)
                .HasForeignKey(d => d.IdPlaza)
                .HasConstraintName("FK_BD_PLAZA_CP_C_PLAZAS");
        });

        modelBuilder.Entity<BdPreciosLicenciaAndroid>(entity =>
        {
            entity.HasKey(e => e.IdPrecioLicencia).HasName("PK__BD_PRECI__AD3F36D1CCA1633C");

            entity.ToTable("BD_PRECIOS_LICENCIA_ANDROID");

            entity.Property(e => e.IdPrecioLicencia).HasColumnName("ID_PRECIO_LICENCIA");
            entity.Property(e => e.CostoMensual)
                .HasColumnType("decimal(8, 2)")
                .HasColumnName("COSTO_MENSUAL");
            entity.Property(e => e.RangoLicencia)
                .IsUnicode(false)
                .HasColumnName("RANGO_LICENCIA");
        });

        modelBuilder.Entity<BdPreciosLicenciaWeb>(entity =>
        {
            entity.HasKey(e => e.IdPrecioLicencia).HasName("PK__BD_PRECI__AD3F36D1E8047AD2");

            entity.ToTable("BD_PRECIOS_LICENCIA_WEB");

            entity.Property(e => e.IdPrecioLicencia).HasColumnName("ID_PRECIO_LICENCIA");
            entity.Property(e => e.CostoMensual)
                .HasColumnType("decimal(8, 2)")
                .HasColumnName("COSTO_MENSUAL");
            entity.Property(e => e.RangoLicencia)
                .IsUnicode(false)
                .HasColumnName("RANGO_LICENCIA");
        });

        modelBuilder.Entity<BdPresupuesto>(entity =>
        {
            entity.HasKey(e => e.IdPresupuesto);

            entity.ToTable("BD_PRESUPUESTOS");

            entity.HasIndex(e => new { e.IdRegion, e.IdCliente, e.IdConcepto, e.Year }, "IX_BD_PRESUPUESTOS").IsUnique();

            entity.Property(e => e.IdPresupuesto).HasColumnName("ID_PRESUPUESTO");
            entity.Property(e => e.Abril)
                .HasColumnType("decimal(20, 0)")
                .HasColumnName("ABRIL");
            entity.Property(e => e.Agosto)
                .HasColumnType("decimal(20, 0)")
                .HasColumnName("AGOSTO");
            entity.Property(e => e.Diciembre)
                .HasColumnType("decimal(20, 0)")
                .HasColumnName("DICIEMBRE");
            entity.Property(e => e.Enero)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ENERO");
            entity.Property(e => e.Febrero)
                .HasColumnType("decimal(20, 0)")
                .HasColumnName("FEBRERO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdConcepto).HasColumnName("ID_CONCEPTO");
            entity.Property(e => e.IdRegion).HasColumnName("ID_REGION");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.Julio)
                .HasColumnType("decimal(20, 0)")
                .HasColumnName("JULIO");
            entity.Property(e => e.Junio)
                .HasColumnType("decimal(20, 0)")
                .HasColumnName("JUNIO");
            entity.Property(e => e.Marzo)
                .HasColumnType("decimal(20, 0)")
                .HasColumnName("MARZO");
            entity.Property(e => e.Mayo)
                .HasColumnType("decimal(20, 0)")
                .HasColumnName("MAYO");
            entity.Property(e => e.Noviembre)
                .HasColumnType("decimal(20, 0)")
                .HasColumnName("NOVIEMBRE");
            entity.Property(e => e.Octubre)
                .HasColumnType("decimal(20, 0)")
                .HasColumnName("OCTUBRE");
            entity.Property(e => e.Septiembre)
                .HasColumnType("decimal(20, 0)")
                .HasColumnName("SEPTIEMBRE");
            entity.Property(e => e.Status).HasColumnName("STATUS");
            entity.Property(e => e.Total)
                .HasColumnType("decimal(20, 0)")
                .HasColumnName("TOTAL");
            entity.Property(e => e.Year).HasColumnName("YEAR");
        });

        modelBuilder.Entity<BdPresupuestosEjercido>(entity =>
        {
            entity.HasKey(e => e.IdPresupuestoEjercido);

            entity.ToTable("BD_PRESUPUESTOS_EJERCIDO");

            entity.HasIndex(e => new { e.IdConcepto, e.IdCliente, e.IdRegion, e.Mes, e.Semana, e.Importe }, "IX_BD_PRESUPUESTOS_EJERCIDO").IsUnique();

            entity.HasIndex(e => new { e.Year, e.Mes, e.IdCliente }, "IX_BD_PRESUPUESTOS_EJERCIDO_1");

            entity.Property(e => e.IdPresupuestoEjercido).HasColumnName("ID_PRESUPUESTO_EJERCIDO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdConcepto).HasColumnName("ID_CONCEPTO");
            entity.Property(e => e.IdRegion).HasColumnName("ID_REGION");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.Importe)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("IMPORTE");
            entity.Property(e => e.Mes)
                .HasMaxLength(15)
                .IsFixedLength()
                .HasColumnName("MES");
            entity.Property(e => e.Semana).HasColumnName("SEMANA");
            entity.Property(e => e.Year).HasColumnName("YEAR");
        });

        modelBuilder.Entity<BdPresupuestosRegional>(entity =>
        {
            entity.HasKey(e => e.IdPresupuestoRegional);

            entity.ToTable("BD_PRESUPUESTOS_REGIONAL");

            entity.HasIndex(e => new { e.IdRegion, e.IdConcepto, e.Year }, "IX_BD_PRESUPUESTOS_REGIONAL").IsUnique();

            entity.Property(e => e.IdPresupuestoRegional).HasColumnName("ID_PRESUPUESTO_REGIONAL");
            entity.Property(e => e.Abril)
                .HasColumnType("decimal(20, 0)")
                .HasColumnName("ABRIL");
            entity.Property(e => e.Agosto)
                .HasColumnType("decimal(20, 0)")
                .HasColumnName("AGOSTO");
            entity.Property(e => e.Diciembre)
                .HasColumnType("decimal(20, 0)")
                .HasColumnName("DICIEMBRE");
            entity.Property(e => e.Enero)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ENERO");
            entity.Property(e => e.Febrero)
                .HasColumnType("decimal(20, 0)")
                .HasColumnName("FEBRERO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdConcepto).HasColumnName("ID_CONCEPTO");
            entity.Property(e => e.IdRegion).HasColumnName("ID_REGION");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.Julio)
                .HasColumnType("decimal(20, 0)")
                .HasColumnName("JULIO");
            entity.Property(e => e.Junio)
                .HasColumnType("decimal(20, 0)")
                .HasColumnName("JUNIO");
            entity.Property(e => e.Marzo)
                .HasColumnType("decimal(20, 0)")
                .HasColumnName("MARZO");
            entity.Property(e => e.Mayo)
                .HasColumnType("decimal(20, 0)")
                .HasColumnName("MAYO");
            entity.Property(e => e.Noviembre)
                .HasColumnType("decimal(20, 0)")
                .HasColumnName("NOVIEMBRE");
            entity.Property(e => e.Octubre)
                .HasColumnType("decimal(20, 0)")
                .HasColumnName("OCTUBRE");
            entity.Property(e => e.Septiembre)
                .HasColumnType("decimal(20, 0)")
                .HasColumnName("SEPTIEMBRE");
            entity.Property(e => e.Status).HasColumnName("STATUS");
            entity.Property(e => e.Total)
                .HasColumnType("decimal(20, 0)")
                .HasColumnName("TOTAL");
            entity.Property(e => e.Year).HasColumnName("YEAR");
        });

        modelBuilder.Entity<BdProactiva>(entity =>
        {
            entity.HasKey(e => e.IdProactiva);

            entity.ToTable("BD_PROACTIVAS");

            entity.HasIndex(e => new { e.Year, e.Month, e.NoAfiliacion }, "IX_BD_PROACTIVAS").IsUnique();

            entity.HasIndex(e => e.NoAfiliacion, "IX_BD_PROACTIVAS_1");

            entity.Property(e => e.IdProactiva).HasColumnName("ID_PROACTIVA");
            entity.Property(e => e.Estatus)
                .HasMaxLength(15)
                .IsFixedLength()
                .HasColumnName("ESTATUS");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.LiberaDia).HasColumnName("LIBERA_DIA");
            entity.Property(e => e.LiberaMes).HasColumnName("LIBERA_MES");
            entity.Property(e => e.LiberaYear).HasColumnName("LIBERA_YEAR");
            entity.Property(e => e.Month).HasColumnName("MONTH");
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.Week).HasColumnName("WEEK");
            entity.Property(e => e.Year).HasColumnName("YEAR");
        });

        modelBuilder.Entity<BdProductoStatusAr>(entity =>
        {
            entity.HasKey(e => e.IdProductoStatusAr);

            entity.ToTable("BD_PRODUCTO_STATUS_AR");

            entity.Property(e => e.IdProductoStatusAr).HasColumnName("ID_PRODUCTO_STATUS_AR");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");
            entity.Property(e => e.IdStatusAr).HasColumnName("ID_STATUS_AR");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.StatusBb)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS_BB");
            entity.Property(e => e.StatusWeb)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS_WEB");

            entity.HasOne(d => d.IdStatusArNavigation).WithMany(p => p.BdProductoStatusArs)
                .HasForeignKey(d => d.IdStatusAr)
                .HasConstraintName("FK_BD_PRODUCTO_STATUS_AR_C_STATUS_AR");
        });

        modelBuilder.Entity<BdProsaRespuestaAbc>(entity =>
        {
            entity.HasKey(e => e.IdProsaRespuestaAbc).HasName("PK__BD_PROSA__7C0075B645FBBF27");

            entity.ToTable("BD_PROSA_RESPUESTA_ABC");

            entity.Property(e => e.IdProsaRespuestaAbc).HasColumnName("ID_PROSA_RESPUESTA_ABC");
            entity.Property(e => e.Cadena)
                .IsUnicode(false)
                .HasColumnName("CADENA");
            entity.Property(e => e.IdArchivosProsaAbc).HasColumnName("ID_ARCHIVOS_PROSA_ABC");
            entity.Property(e => e.NombreArchivo)
                .IsUnicode(false)
                .HasColumnName("NOMBRE_ARCHIVO");
            entity.Property(e => e.Status)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdPrueba>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_PRUEBA");

            entity.Property(e => e.ActivoUObsoleto)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("ACTIVO_U_OBSOLETO");
            entity.Property(e => e.AfiliacionDeRetiro)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AFILIACION_DE_RETIRO");
            entity.Property(e => e.Aplicativo)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("APLICATIVO");
            entity.Property(e => e.Ar1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AR_1");
            entity.Property(e => e.Ar2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AR_2");
            entity.Property(e => e.Ar541)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AR_541");
            entity.Property(e => e.CableCorrienteSiNo)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("CABLE_CORRIENTE_SI_NO");
            entity.Property(e => e.ComentarioReparacionLaboratorio)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("COMENTARIO_REPARACION_LABORATORIO");
            entity.Property(e => e.Comentarios)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("COMENTARIOS");
            entity.Property(e => e.Comparacion1)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("COMPARACION_1");
            entity.Property(e => e.Comparacion2)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("COMPARACION_2");
            entity.Property(e => e.Conectividad)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("CONECTIVIDAD");
            entity.Property(e => e.ControlInventario74787428)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("CONTROL_INVENTARIO_7478_7428");
            entity.Property(e => e.DescCliente)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_CLIENTE");
            entity.Property(e => e.DescMarca)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_MARCA");
            entity.Property(e => e.DescModelo)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_MODELO");
            entity.Property(e => e.DescNivelDiagnostico)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("DESC_NIVEL_DIAGNOSTICO");
            entity.Property(e => e.DescStatusUnidad)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_STATUS_UNIDAD");
            entity.Property(e => e.DescTipoResponsable)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_TIPO_RESPONSABLE");
            entity.Property(e => e.DescZona)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_ZONA");
            entity.Property(e => e.EliminadorSiNo)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ELIMINADOR_SI_NO");
            entity.Property(e => e.EntregaAProveedor)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ENTREGA_A_PROVEEDOR");
            entity.Property(e => e.EquipoOracle)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("EQUIPO_ORACLE");
            entity.Property(e => e.EquiposADestruccion)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("EQUIPOS_A_DESTRUCCION");
            entity.Property(e => e.Expr1)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("EXPR1");
            entity.Property(e => e.FecStatus)
                .HasMaxLength(17)
                .IsUnicode(false)
                .HasColumnName("FEC_STATUS");
            entity.Property(e => e.FechaCierreSisei)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("FECHA_CIERRE_SISEI");
            entity.Property(e => e.FechaDeCierre1)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("FECHA_DE_CIERRE_1");
            entity.Property(e => e.FechaDeCierre2)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("FECHA_DE_CIERRE_2");
            entity.Property(e => e.FechaIngreso)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("FECHA_INGRESO");
            entity.Property(e => e.FechaInstalacion)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("FECHA_INSTALACION");
            entity.Property(e => e.FechaRetornoFabricante)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("FECHA_RETORNO_FABRICANTE");
            entity.Property(e => e.FechaSgs1)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("FECHA_SGS_1");
            entity.Property(e => e.FechaSgs2)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("FECHA_SGS_2");
            entity.Property(e => e.FechaUltimoIngreso)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("FECHA_ULTIMO_INGRESO");
            entity.Property(e => e.Guia)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("GUIA");
            entity.Property(e => e.IdEnvio).HasColumnName("ID_ENVIO");
            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");
            entity.Property(e => e.IsDaniada)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("IS_DANIADA");
            entity.Property(e => e.IsNueva)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("IS_NUEVA");
            entity.Property(e => e.IsReparada)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("IS_REPARADA");
            entity.Property(e => e.IsRetiro)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("IS_RETIRO");
            entity.Property(e => e.Largo).HasColumnName("LARGO");
            entity.Property(e => e.Licencias)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("LICENCIAS");
            entity.Property(e => e.Mes3)
                .HasMaxLength(30)
                .HasColumnName("MES_3");
            entity.Property(e => e.MesIngreso)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("MES_INGRESO");
            entity.Property(e => e.MesInstalacion)
                .HasMaxLength(30)
                .HasColumnName("MES_INSTALACION");
            entity.Property(e => e.ModeloSantander)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("MODELO_SANTANDER");
            entity.Property(e => e.NoImei)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_IMEI");
            entity.Property(e => e.NoInventario)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_INVENTARIO");
            entity.Property(e => e.NoSerie)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");
            entity.Property(e => e.NoSim)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SIM");
            entity.Property(e => e.NuevaOUsada)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("NUEVA_O_USADA");
            entity.Property(e => e.NuevaUsadaReparada)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("NUEVA_USADA_REPARADA");
            entity.Property(e => e.PendientesPorReparacionYGarantia)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("PENDIENTES_POR_REPARACION_Y_GARANTIA");
            entity.Property(e => e.Proveedor)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("PROVEEDOR");
            entity.Property(e => e.ResponsableDestino)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RESPONSABLE_DESTINO");
            entity.Property(e => e.ResponsableOrigen)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RESPONSABLE_ORIGEN");
            entity.Property(e => e.SeAtiende)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("SE_ATIENDE");
            entity.Property(e => e.Solicitud).HasColumnName("SOLICITUD");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.StatusSantander)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("STATUS_SANTANDER");
            entity.Property(e => e.Tecnologia)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("TECNOLOGIA");
            entity.Property(e => e.TerminalesCifradas55208)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("TERMINALES_CIFRADAS_55208");
            entity.Property(e => e.TerminalesEnGarantia)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("TERMINALES_EN_GARANTIA");
            entity.Property(e => e.TipoDeServicioRetiro)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("TIPO_DE_SERVICIO_RETIRO");
            entity.Property(e => e.TipoServicio1)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("TIPO_SERVICIO_1");
            entity.Property(e => e.TomaDeInventario)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("TOMA_DE_INVENTARIO");
            entity.Property(e => e.UltimaEntradaPorOdtProveedor)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ULTIMA_ENTRADA_POR_ODT_PROVEEDOR");
            entity.Property(e => e.UsuarioUltimoMovimiento)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("USUARIO_ULTIMO_MOVIMIENTO");
            entity.Property(e => e.Version)
                .HasMaxLength(700)
                .IsUnicode(false)
                .HasColumnName("VERSION");
        });

        modelBuilder.Entity<BdPruebaApi>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_PRUEBA_API");

            entity.Property(e => e.Campo)
                .IsUnicode(false)
                .HasColumnName("campo");
        });

        modelBuilder.Entity<BdPruebaNoSeries>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_PRUEBA_NO_SERIES");

            entity.Property(e => e.IdModelo).HasColumnName("ID_MODELO");
            entity.Property(e => e.NoSerie)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");
            entity.Property(e => e.TotalLetras).HasColumnName("TOTAL_LETRAS");
            entity.Property(e => e.TotalNumeros).HasColumnName("TOTAL_NUMEROS");
            entity.Property(e => e.ValidacionLetras)
                .IsUnicode(false)
                .HasColumnName("VALIDACION_LETRAS");
            entity.Property(e => e.ValidacionLog)
                .IsUnicode(false)
                .HasColumnName("VALIDACION_LOG");
            entity.Property(e => e.ValidacionNumero)
                .IsUnicode(false)
                .HasColumnName("VALIDACION_NUMERO");
        });

        modelBuilder.Entity<BdPruebaSp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_PRUEBA_SP");

            entity.Property(e => e.DescPrueba)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_PRUEBA");
            entity.Property(e => e.IdPrueba)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_PRUEBA");
        });

        modelBuilder.Entity<BdPruebasUnitaria>(entity =>
        {
            entity.HasKey(e => e.IdPruebas).HasName("PK__BD_PRUEB__9927CC8E9E6934B7");

            entity.ToTable("BD_PRUEBAS_UNITARIAS");

            entity.Property(e => e.IdPruebas).HasColumnName("ID_PRUEBAS");
            entity.Property(e => e.DescError)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("DESC_ERROR");
        });

        modelBuilder.Entity<BdQuestsCallcenter>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_QUESTS_CALLCENTER");

            entity.Property(e => e.IdCuestionario).HasColumnName("ID_CUESTIONARIO");
            entity.Property(e => e.IdQuestsCallcenter)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_QUESTS_CALLCENTER");
            entity.Property(e => e.IsRechazo).HasColumnName("IS_RECHAZO");
            entity.Property(e => e.Orden).HasColumnName("ORDEN");
            entity.Property(e => e.Pregunta)
                .IsUnicode(false)
                .HasColumnName("PREGUNTA");
        });

        modelBuilder.Entity<BdRecepcionElavon>(entity =>
        {
            entity.HasKey(e => e.IdRecepcionElavon);

            entity.ToTable("BD_RECEPCION_ELAVON");

            entity.Property(e => e.IdRecepcionElavon).HasColumnName("ID_RECEPCION_ELAVON");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IsProcesado).HasColumnName("IS_PROCESADO");
            entity.Property(e => e.NombreArchivo)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("NOMBRE_ARCHIVO");
            entity.Property(e => e.XmlData)
                .HasColumnType("xml")
                .HasColumnName("XML_DATA");
        });

        modelBuilder.Entity<BdRecepcionInsumo>(entity =>
        {
            entity.HasKey(e => e.IdRecepcionInsumo).HasName("PK__BD_RECEP__3F8A213BECF1FD0F");

            entity.ToTable("BD_RECEPCION_INSUMOS");

            entity.Property(e => e.IdRecepcionInsumo).HasColumnName("ID_RECEPCION_INSUMO");
            entity.Property(e => e.CantidadRecepcionada).HasColumnName("CANTIDAD_RECEPCIONADA");
            entity.Property(e => e.IdInsumo).HasColumnName("ID_INSUMO");
            entity.Property(e => e.IdOrdenCompra).HasColumnName("ID_ORDEN_COMPRA");
        });

        modelBuilder.Entity<BdRecoverPassword>(entity =>
        {
            entity.HasKey(e => e.IdRecoveryPassword).HasName("PK__BD_RECOV__B61A99475620F5CF");

            entity.ToTable("BD_RECOVER_PASSWORD");

            entity.Property(e => e.IdRecoveryPassword).HasColumnName("ID_RECOVERY_PASSWORD");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.TemporaryPassword)
                .IsUnicode(false)
                .HasColumnName("TEMPORARY_PASSWORD");
        });

        modelBuilder.Entity<BdReglasAsignacionAutomatica>(entity =>
        {
            entity.HasKey(e => e.IdReglaAsignacionAutomatica).HasName("PK__BD_REGLA__0DCA118C14576F0B");

            entity.ToTable("BD_REGLAS_ASIGNACION_AUTOMATICA");

            entity.Property(e => e.IdReglaAsignacionAutomatica).HasColumnName("ID_REGLA_ASIGNACION_AUTOMATICA");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");
            entity.Property(e => e.IdRegion).HasColumnName("ID_REGION");
            entity.Property(e => e.IdTecnico).HasColumnName("ID_TECNICO");
            entity.Property(e => e.IdZona).HasColumnName("ID_ZONA");
        });

        modelBuilder.Entity<BdReglasCampanasDeployment>(entity =>
        {
            entity.HasKey(e => e.IdReglaCampanaDeployment).HasName("PK__BD_REGLA__CC652B612A216F5F");

            entity.ToTable("BD_REGLAS_CAMPANAS_DEPLOYMENT");

            entity.Property(e => e.IdReglaCampanaDeployment).HasColumnName("ID_REGLA_CAMPANA_DEPLOYMENT");
            entity.Property(e => e.Dias).HasColumnName("DIAS");
            entity.Property(e => e.EmailPrueba)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("EMAIL_PRUEBA");
            entity.Property(e => e.FecCierreFin)
                .HasColumnType("datetime")
                .HasColumnName("FEC_CIERRE_FIN");
            entity.Property(e => e.FecCierreIni)
                .HasColumnType("datetime")
                .HasColumnName("FEC_CIERRE_INI");
            entity.Property(e => e.FecIniEnvio)
                .HasColumnType("datetime")
                .HasColumnName("FEC_INI_ENVIO");
            entity.Property(e => e.FecUltimoEnvio)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ULTIMO_ENVIO");
            entity.Property(e => e.IdDatoListaMailjet).HasColumnName("ID_DATO_LISTA_MAILJET");
            entity.Property(e => e.IdEmisorEmail).HasColumnName("ID_EMISOR_EMAIL");
            entity.Property(e => e.IdFalla).HasColumnName("ID_FALLA");
            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");
            entity.Property(e => e.IdServicio).HasColumnName("ID_SERVICIO");
            entity.Property(e => e.IdStatusAr).HasColumnName("ID_STATUS_AR");
            entity.Property(e => e.IdTemplateMailjet).HasColumnName("ID_TEMPLATE_MAILJET");
            entity.Property(e => e.IdTipoRecurrencia).HasColumnName("ID_TIPO_RECURRENCIA");
            entity.Property(e => e.IsRecurrente).HasColumnName("IS_RECURRENTE");
            entity.Property(e => e.Nombre)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NOMBRE");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdReglasCampanasMkt>(entity =>
        {
            entity.HasKey(e => e.IdReglaCampanaMkt).HasName("PK__BD_REGLA__4C03E8945A4135A6");

            entity.ToTable("BD_REGLAS_CAMPANAS_MKT");

            entity.Property(e => e.IdReglaCampanaMkt).HasColumnName("ID_REGLA_CAMPANA_MKT");
            entity.Property(e => e.Dias).HasColumnName("DIAS");
            entity.Property(e => e.EmailPrueba)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("EMAIL_PRUEBA");
            entity.Property(e => e.FecCierreFin)
                .HasColumnType("datetime")
                .HasColumnName("FEC_CIERRE_FIN");
            entity.Property(e => e.FecCierreIni)
                .HasColumnType("datetime")
                .HasColumnName("FEC_CIERRE_INI");
            entity.Property(e => e.FecIniEnvio)
                .HasColumnType("datetime")
                .HasColumnName("FEC_INI_ENVIO");
            entity.Property(e => e.FecUltimoEnvio)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ULTIMO_ENVIO");
            entity.Property(e => e.IdDatoListaMailjet).HasColumnName("ID_DATO_LISTA_MAILJET");
            entity.Property(e => e.IdEmisorEmail).HasColumnName("ID_EMISOR_EMAIL");
            entity.Property(e => e.IdFalla).HasColumnName("ID_FALLA");
            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");
            entity.Property(e => e.IdServicio).HasColumnName("ID_SERVICIO");
            entity.Property(e => e.IdStatusAr).HasColumnName("ID_STATUS_AR");
            entity.Property(e => e.IdTemplateMailjet).HasColumnName("ID_TEMPLATE_MAILJET");
            entity.Property(e => e.IdTipoRecurrencia).HasColumnName("ID_TIPO_RECURRENCIA");
            entity.Property(e => e.IsRecurrente).HasColumnName("IS_RECURRENTE");
            entity.Property(e => e.Nombre)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NOMBRE");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdReglasModelo>(entity =>
        {
            entity.HasKey(e => e.IdReglas).HasName("PK__BD_REGLA__DC4295B8DEBA1CB0");

            entity.ToTable("BD_REGLAS_MODELOS");

            entity.Property(e => e.IdReglas).HasColumnName("ID_REGLAS");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdModelo).HasColumnName("ID_MODELO");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.LetrasMax).HasColumnName("LETRAS_MAX");
            entity.Property(e => e.LetrasMin).HasColumnName("LETRAS_MIN");
            entity.Property(e => e.LongMax).HasColumnName("LONG_MAX");
            entity.Property(e => e.LongMin).HasColumnName("LONG_MIN");
            entity.Property(e => e.NumeroMax).HasColumnName("NUMERO_MAX");
            entity.Property(e => e.NumeroMin).HasColumnName("NUMERO_MIN");
            entity.Property(e => e.Status)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdReglasOperativasProsa>(entity =>
        {
            entity.HasKey(e => e.IdReglaOperativaProsa).HasName("PK__BD_REGLA__3F237E36C2AFD742");

            entity.ToTable("BD_REGLAS_OPERATIVAS_PROSA");

            entity.Property(e => e.IdReglaOperativaProsa).HasColumnName("ID_REGLA_OPERATIVA_PROSA");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdFalla).HasColumnName("ID_FALLA");
            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");
            entity.Property(e => e.IdServicio).HasColumnName("ID_SERVICIO");
            entity.Property(e => e.IdStatusAr).HasColumnName("ID_STATUS_AR");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.NoOdt).HasColumnName("NO_ODT");
        });

        modelBuilder.Entity<BdReglasStatusAlmacen>(entity =>
        {
            entity.HasKey(e => e.IdReglasStatusAlmacen);

            entity.ToTable("BD_REGLAS_STATUS_ALMACEN");

            entity.Property(e => e.IdReglasStatusAlmacen).HasColumnName("ID_REGLAS_STATUS_ALMACEN");
            entity.Property(e => e.ColorRgb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("COLOR_RGB");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdOperador).HasColumnName("ID_OPERADOR");
            entity.Property(e => e.IdStatusSolicitudAlmacen).HasColumnName("ID_STATUS_SOLICITUD_ALMACEN");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Minutos).HasColumnName("MINUTOS");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdReglasStatusAr>(entity =>
        {
            entity.HasKey(e => e.IdReglaStatusAr);

            entity.ToTable("BD_REGLAS_STATUS_AR");

            entity.Property(e => e.IdReglaStatusAr).HasColumnName("ID_REGLA_STATUS_AR");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdClienteProductoStatusAr).HasColumnName("ID_CLIENTE_PRODUCTO_STATUS_AR");
            entity.Property(e => e.IdOperador).HasColumnName("ID_OPERADOR");
            entity.Property(e => e.IdTiempoMedicion).HasColumnName("ID_TIEMPO_MEDICION");
            entity.Property(e => e.IdTiempoReferencia).HasColumnName("ID_TIEMPO_REFERENCIA");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Minutos).HasColumnName("MINUTOS");
            entity.Property(e => e.Prioridad).HasColumnName("PRIORIDAD");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");

            entity.HasOne(d => d.IdClienteProductoStatusArNavigation).WithMany(p => p.BdReglasStatusArs)
                .HasForeignKey(d => d.IdClienteProductoStatusAr)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BD_REGLAS_STATUS_AR_BD_CLIENTE_PRODUCTO_STATUS_AR");

            entity.HasOne(d => d.IdOperadorNavigation).WithMany(p => p.BdReglasStatusArs)
                .HasForeignKey(d => d.IdOperador)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BD_REGLAS_STATUS_AR_C_OPERADORES");

            entity.HasOne(d => d.IdTiempoMedicionNavigation).WithMany(p => p.BdReglasStatusArs)
                .HasForeignKey(d => d.IdTiempoMedicion)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BD_REGLAS_STATUS_AR_C_TIEMPO_MEDICION");

            entity.HasOne(d => d.IdTiempoReferenciaNavigation).WithMany(p => p.BdReglasStatusArs)
                .HasForeignKey(d => d.IdTiempoReferencia)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BD_REGLAS_STATUS_AR_C_TIEMPO_REFERENCIA");
        });

        modelBuilder.Entity<BdReingresoSim>(entity =>
        {
            entity.HasKey(e => e.IdReingresoSim);

            entity.ToTable("BD_REINGRESO_SIM");

            entity.Property(e => e.IdReingresoSim).HasColumnName("ID_REINGRESO_SIM");
            entity.Property(e => e.FecReingreso)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_REINGRESO");
            entity.Property(e => e.IdSim).HasColumnName("ID_SIM");
            entity.Property(e => e.IdSolicitudRecoleccionAnterior).HasColumnName("ID_SOLICITUD_RECOLECCION_ANTERIOR");
            entity.Property(e => e.IdSolicitudRecoleccionReingreso).HasColumnName("ID_SOLICITUD_RECOLECCION_REINGRESO");
            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");
            entity.Property(e => e.IdUsuarioReingreso).HasColumnName("ID_USUARIO_REINGRESO");

            entity.HasOne(d => d.IdSolicitudRecoleccionAnteriorNavigation).WithMany(p => p.BdReingresoSimIdSolicitudRecoleccionAnteriorNavigations)
                .HasForeignKey(d => d.IdSolicitudRecoleccionAnterior)
                .HasConstraintName("FK_BD_REINGRESO_SIM_BD_SOLICITUD_RECOLECCION");

            entity.HasOne(d => d.IdSolicitudRecoleccionReingresoNavigation).WithMany(p => p.BdReingresoSimIdSolicitudRecoleccionReingresoNavigations)
                .HasForeignKey(d => d.IdSolicitudRecoleccionReingreso)
                .HasConstraintName("FK_BD_REINGRESO_SIM_BD_SOLICITUD_RECOLECCION1");

            entity.HasOne(d => d.IdUnidadNavigation).WithMany(p => p.BdReingresoSims)
                .HasForeignKey(d => d.IdUnidad)
                .HasConstraintName("FK_BD_REINGRESO_SIM_BD_UNIDADES");
        });

        modelBuilder.Entity<BdReingresoUnidad>(entity =>
        {
            entity.HasKey(e => e.IdReingresoUnidad);

            entity.ToTable("BD_REINGRESO_UNIDAD");

            entity.HasIndex(e => e.IdUnidad, "IX_BD_REINGRESO_UNIDAD_ID_UNIDAD").HasFillFactor(80);

            entity.Property(e => e.IdReingresoUnidad).HasColumnName("ID_REINGRESO_UNIDAD");
            entity.Property(e => e.FecReingreso)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_REINGRESO");
            entity.Property(e => e.IdAplicativo).HasColumnName("ID_APLICATIVO");
            entity.Property(e => e.IdClienteAnterior).HasColumnName("ID_CLIENTE_ANTERIOR");
            entity.Property(e => e.IdClienteReingreso).HasColumnName("ID_CLIENTE_REINGRESO");
            entity.Property(e => e.IdConectividad).HasColumnName("ID_CONECTIVIDAD");
            entity.Property(e => e.IdResponsableAnterior).HasColumnName("ID_RESPONSABLE_ANTERIOR");
            entity.Property(e => e.IdResponsableReingreso).HasColumnName("ID_RESPONSABLE_REINGRESO");
            entity.Property(e => e.IdSolicitudRecoleccionAnterior).HasColumnName("ID_SOLICITUD_RECOLECCION_ANTERIOR");
            entity.Property(e => e.IdSolicitudRecoleccionReingreso).HasColumnName("ID_SOLICITUD_RECOLECCION_REINGRESO");
            entity.Property(e => e.IdStatusUnidadAnterior).HasColumnName("ID_STATUS_UNIDAD_ANTERIOR");
            entity.Property(e => e.IdStatusUnidadReingreso).HasColumnName("ID_STATUS_UNIDAD_REINGRESO");
            entity.Property(e => e.IdTipoResponsableAnterior).HasColumnName("ID_TIPO_RESPONSABLE_ANTERIOR");
            entity.Property(e => e.IdTipoResponsableReingreso).HasColumnName("ID_TIPO_RESPONSABLE_REINGRESO");
            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");
            entity.Property(e => e.IdUsuarioReingreso).HasColumnName("ID_USUARIO_REINGRESO");
            entity.Property(e => e.IsDaniadaAnterior).HasColumnName("IS_DANIADA_ANTERIOR");
            entity.Property(e => e.IsDaniadaReingreso).HasColumnName("IS_DANIADA_REINGRESO");
            entity.Property(e => e.IsNuevaAnterior).HasColumnName("IS_NUEVA_ANTERIOR");
            entity.Property(e => e.IsNuevaReingreso).HasColumnName("IS_NUEVA_REINGRESO");
            entity.Property(e => e.NoImeiAnterior)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_IMEI_ANTERIOR");
            entity.Property(e => e.NoImeiReingreso)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_IMEI_REINGRESO");
            entity.Property(e => e.NoInventarioAnterior)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_INVENTARIO_ANTERIOR");
            entity.Property(e => e.NoInventarioReingreso)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_INVENTARIO_REINGRESO");
            entity.Property(e => e.NoSerieAnterior)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE_ANTERIOR");
            entity.Property(e => e.NoSerieReingreso)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE_REINGRESO");
            entity.Property(e => e.NoSimAnterior)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SIM_ANTERIOR");
            entity.Property(e => e.NoSimReingreso)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SIM_REINGRESO");

            entity.HasOne(d => d.IdSolicitudRecoleccionAnteriorNavigation).WithMany(p => p.BdReingresoUnidadIdSolicitudRecoleccionAnteriorNavigations)
                .HasForeignKey(d => d.IdSolicitudRecoleccionAnterior)
                .HasConstraintName("FK_BD_REINGRESO_UNIDAD_BD_SOLICITUD_RECOLECCION");

            entity.HasOne(d => d.IdSolicitudRecoleccionReingresoNavigation).WithMany(p => p.BdReingresoUnidadIdSolicitudRecoleccionReingresoNavigations)
                .HasForeignKey(d => d.IdSolicitudRecoleccionReingreso)
                .HasConstraintName("FK_BD_REINGRESO_UNIDAD_BD_SOLICITUD_RECOLECCION1");

            entity.HasOne(d => d.IdStatusUnidadAnteriorNavigation).WithMany(p => p.BdReingresoUnidadIdStatusUnidadAnteriorNavigations)
                .HasForeignKey(d => d.IdStatusUnidadAnterior)
                .HasConstraintName("FK_BD_REINGRESO_UNIDAD_C_STATUS_UNIDAD");

            entity.HasOne(d => d.IdStatusUnidadReingresoNavigation).WithMany(p => p.BdReingresoUnidadIdStatusUnidadReingresoNavigations)
                .HasForeignKey(d => d.IdStatusUnidadReingreso)
                .HasConstraintName("FK_BD_REINGRESO_UNIDAD_C_STATUS_UNIDAD1");

            entity.HasOne(d => d.IdTipoResponsableAnteriorNavigation).WithMany(p => p.BdReingresoUnidadIdTipoResponsableAnteriorNavigations)
                .HasForeignKey(d => d.IdTipoResponsableAnterior)
                .HasConstraintName("FK_BD_REINGRESO_UNIDAD_C_TIPO_RESPONSABLE");

            entity.HasOne(d => d.IdTipoResponsableReingresoNavigation).WithMany(p => p.BdReingresoUnidadIdTipoResponsableReingresoNavigations)
                .HasForeignKey(d => d.IdTipoResponsableReingreso)
                .HasConstraintName("FK_BD_REINGRESO_UNIDAD_C_TIPO_RESPONSABLE1");

            entity.HasOne(d => d.IdUnidadNavigation).WithMany(p => p.BdReingresoUnidads)
                .HasForeignKey(d => d.IdUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BD_REINGRESO_UNIDAD_BD_UNIDADES");
        });

        modelBuilder.Entity<BdRelacionFacturaEnvio>(entity =>
        {
            entity.HasKey(e => e.IdRelacionFacturaEnvio).HasName("PK__BD_RELAC__9A00745F38B1DE48");

            entity.ToTable("BD_RELACION_FACTURA_ENVIO", tb => tb.HasTrigger("TR_VALIDATE_CARGA"));

            entity.Property(e => e.IdRelacionFacturaEnvio).HasColumnName("ID_RELACION_FACTURA_ENVIO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdEnvio).HasColumnName("ID_ENVIO");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.IsProcesada).HasColumnName("IS_PROCESADA");
            entity.Property(e => e.NoFactura)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NO_FACTURA");
        });

        modelBuilder.Entity<BdReparacionUnidad>(entity =>
        {
            entity.HasKey(e => e.IdReparacionUnidad);

            entity.ToTable("BD_REPARACION_UNIDAD");

            entity.HasIndex(e => new { e.IdTecnico, e.IdStatusReparacion }, "IX_BD_REPARACION_UNIDAD_ID_TECNICO, ID_STATUS_REPARACION");

            entity.HasIndex(e => e.IdUnidad, "IX_BD_REPARACION_UNIDAD_ID_UNIDAD");

            entity.HasIndex(e => e.IdStatusReparacion, "IX_MI_BD_REPARACION_UNIDAD_100_99");

            entity.HasIndex(e => new { e.IdTecnico, e.IdStatusReparacion }, "IX_MI_BD_REPARACION_UNIDAD_192_191");

            entity.HasIndex(e => new { e.IdTecnico, e.IdStatusReparacion, e.IdUsuarioAlta }, "IX_MI_BD_REPARACION_UNIDAD_195_194");

            entity.HasIndex(e => new { e.IdTecnico, e.IdStatusReparacion }, "IX_MI_BD_REPARACION_UNIDAD_6108_6107");

            entity.Property(e => e.IdReparacionUnidad).HasColumnName("ID_REPARACION_UNIDAD");
            entity.Property(e => e.Costo)
                .HasColumnType("numeric(18, 0)")
                .HasColumnName("COSTO");
            entity.Property(e => e.DescReparacion)
                .IsUnicode(false)
                .HasColumnName("DESC_REPARACION");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.FecReparacion)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_REPARACION");
            entity.Property(e => e.FecStatus)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_STATUS");
            entity.Property(e => e.IdLlave).HasColumnName("ID_LLAVE");
            entity.Property(e => e.IdNivelReparacion).HasColumnName("ID_NIVEL_REPARACION");
            entity.Property(e => e.IdReparacion).HasColumnName("ID_REPARACION");
            entity.Property(e => e.IdSoftware).HasColumnName("ID_SOFTWARE");
            entity.Property(e => e.IdStatusReparacion).HasColumnName("ID_STATUS_REPARACION");
            entity.Property(e => e.IdTecnico).HasColumnName("ID_TECNICO");
            entity.Property(e => e.IdTipoReparacion).HasColumnName("ID_TIPO_REPARACION");
            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.IdUsuarioReparacion).HasColumnName("ID_USUARIO_REPARACION");
            entity.Property(e => e.IdUsuarioStatus).HasColumnName("ID_USUARIO_STATUS");
        });

        modelBuilder.Entity<BdReparecionesCargaPdf>(entity =>
        {
            entity.HasKey(e => e.IdReparacionCargaPdf).HasName("PK__BD_REPAR__CEE12DE5E1221796");

            entity.ToTable("BD_REPARECIONES_CARGA_PDF");

            entity.Property(e => e.IdReparacionCargaPdf).HasColumnName("ID_REPARACION_CARGA_PDF");
            entity.Property(e => e.ArchivoSistema)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ARCHIVO_SISTEMA");
            entity.Property(e => e.ArchivoUsuario)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ARCHIVO_USUARIO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
        });

        modelBuilder.Entity<BdReporteAuditoriaInsumo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_REPORTE_AUDITORIA_INSUMOS");

            entity.Property(e => e.ComentarioIncoformidad)
                .IsUnicode(false)
                .HasColumnName("COMENTARIO_INCOFORMIDAD");
            entity.Property(e => e.IdAuditoria).HasColumnName("ID_AUDITORIA");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdInsumo).HasColumnName("ID_INSUMO");
            entity.Property(e => e.IdReporteAuditoriaInsumos)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_REPORTE_AUDITORIA_INSUMOS");
            entity.Property(e => e.IdStatusInsumo).HasColumnName("ID_STATUS_INSUMO");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.Status)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.TotalIng).HasColumnName("TOTAL_ING");
            entity.Property(e => e.TotalSistema).HasColumnName("TOTAL_SISTEMA");
        });

        modelBuilder.Entity<BdReporteAuditoriaUnidad>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_REPORTE_AUDITORIA_UNIDAD");

            entity.Property(e => e.Aplicativo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APLICATIVO");
            entity.Property(e => e.ComentarioIncoformidad)
                .IsUnicode(false)
                .HasColumnName("COMENTARIO_INCOFORMIDAD");
            entity.Property(e => e.Conectividad)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CONECTIVIDAD");
            entity.Property(e => e.Daniada).HasColumnName("DANIADA");
            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");
            entity.Property(e => e.IdAuditoria).HasColumnName("ID_AUDITORIA");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdFisico).HasColumnName("ID_FISICO");
            entity.Property(e => e.IdModelo).HasColumnName("ID_MODELO");
            entity.Property(e => e.IdRazon).HasColumnName("ID_RAZON");
            entity.Property(e => e.IdReporteAuditoriaUnidad)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_REPORTE_AUDITORIA_UNIDAD");
            entity.Property(e => e.IdStatusUnidad).HasColumnName("ID_STATUS_UNIDAD");
            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.IsConfirmacion).HasColumnName("IS_CONFIRMACION");
            entity.Property(e => e.IsNoConfirmacion).HasColumnName("IS_NO_CONFIRMACION");
            entity.Property(e => e.Marca)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MARCA");
            entity.Property(e => e.NoSerie)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");
            entity.Property(e => e.Producto)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PRODUCTO");
            entity.Property(e => e.Status)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdReporteAuditoriaUnidadTrash>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_REPORTE_AUDITORIA_UNIDAD_TRASH");

            entity.Property(e => e.Aplicativo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APLICATIVO");
            entity.Property(e => e.ComentarioIncoformidad)
                .IsUnicode(false)
                .HasColumnName("COMENTARIO_INCOFORMIDAD");
            entity.Property(e => e.Conectividad)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CONECTIVIDAD");
            entity.Property(e => e.Daniada).HasColumnName("DANIADA");
            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");
            entity.Property(e => e.FechaEnLaQueSeElimino)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_EN_LA_QUE_SE_ELIMINO");
            entity.Property(e => e.IdAuditoria).HasColumnName("ID_AUDITORIA");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdFisico).HasColumnName("ID_FISICO");
            entity.Property(e => e.IdModelo).HasColumnName("ID_MODELO");
            entity.Property(e => e.IdRazon).HasColumnName("ID_RAZON");
            entity.Property(e => e.IdReporteAuditoriaUnidad).HasColumnName("ID_REPORTE_AUDITORIA_UNIDAD");
            entity.Property(e => e.IdStatusUnidad).HasColumnName("ID_STATUS_UNIDAD");
            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.IdUsuarioQueElimino).HasColumnName("ID_USUARIO_QUE_ELIMINO");
            entity.Property(e => e.IsConfirmacion).HasColumnName("IS_CONFIRMACION");
            entity.Property(e => e.Marca)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MARCA");
            entity.Property(e => e.NoSerie)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");
            entity.Property(e => e.Producto)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PRODUCTO");
        });

        modelBuilder.Entity<BdReporteCierre>(entity =>
        {
            entity.HasKey(e => e.IdReporteCierre).HasName("PK_C_REPORTES_CIERRE");

            entity.ToTable("BD_REPORTE_CIERRE");

            entity.HasIndex(e => e.IdCliente, "IX_BD_REPORTE_CIERRE_ID_CLIENTE").HasFillFactor(80);

            entity.HasIndex(e => new { e.IdCliente, e.Status, e.IdStatusReporteCierre }, "IX_MI_BD_REPORTE_CIERRE_19_18");

            entity.HasIndex(e => new { e.Status, e.IdStatusReporteCierre }, "IX_MI_BD_REPORTE_CIERRE_21_20");

            entity.Property(e => e.IdReporteCierre).HasColumnName("ID_REPORTE_CIERRE");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdStatusReporteCierre).HasColumnName("ID_STATUS_REPORTE_CIERRE");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.NumArs).HasColumnName("NUM_ARS");
            entity.Property(e => e.Report)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("REPORT");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");

            entity.HasOne(d => d.IdClienteNavigation).WithMany(p => p.BdReporteCierres)
                .HasForeignKey(d => d.IdCliente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_C_REPORTES_CIERRE_C_CLIENTES");

            entity.HasOne(d => d.IdStatusReporteCierreNavigation).WithMany(p => p.BdReporteCierres)
                .HasForeignKey(d => d.IdStatusReporteCierre)
                .HasConstraintName("FK_BD_REPORTE_CIERRE_C_STATUS_REPORTE_CIERRE");
        });

        modelBuilder.Entity<BdReporteCierreAr>(entity =>
        {
            entity.HasKey(e => e.IdReporteCierreAr);

            entity.ToTable("BD_REPORTE_CIERRE_AR");

            entity.HasIndex(e => e.IdAr, "IX_BD_REPORTE_CIERRE_AR_ID_AR").HasFillFactor(80);

            entity.HasIndex(e => e.IdReporteCierre, "IX_BD_REPORTE_CIERRE_AR_ID_REPORTE_CIERRE").HasFillFactor(80);

            entity.Property(e => e.IdReporteCierreAr).HasColumnName("ID_REPORTE_CIERRE_AR");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdReporteCierre).HasColumnName("ID_REPORTE_CIERRE");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");

            entity.HasOne(d => d.IdClienteNavigation).WithMany(p => p.BdReporteCierreArs)
                .HasForeignKey(d => d.IdCliente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BD_REPORTE_CIERRE_AR_C_CLIENTES");

            entity.HasOne(d => d.IdReporteCierreNavigation).WithMany(p => p.BdReporteCierreArs)
                .HasForeignKey(d => d.IdReporteCierre)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BD_REPORTE_CIERRE_AR_C_REPORTES_CIERRE");
        });

        modelBuilder.Entity<BdReporteMovInventario>(entity =>
        {
            entity.HasKey(e => e.IdBdReporteMovInventario);

            entity.ToTable("BD_REPORTE_MOV_INVENTARIO");

            entity.Property(e => e.IdBdReporteMovInventario).HasColumnName("ID_BD_REPORTE_MOV_INVENTARIO");
            entity.Property(e => e.DiaSemana)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("DIA_SEMANA");
            entity.Property(e => e.IdAlmacen).HasColumnName("ID_ALMACEN");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdModelo).HasColumnName("ID_MODELO");
            entity.Property(e => e.IdReporteMovInventario).HasColumnName("ID_REPORTE_MOV_INVENTARIO");
            entity.Property(e => e.UDispInicioDia).HasColumnName("U_DISP_INICIO_DIA");
            entity.Property(e => e.UEntradasDia).HasColumnName("U_ENTRADAS_DIA");
            entity.Property(e => e.UEntradasLab).HasColumnName("U_ENTRADAS_LAB");
            entity.Property(e => e.UInvLab).HasColumnName("U_INV_LAB");
            entity.Property(e => e.USalInst).HasColumnName("U_SAL_INST");
            entity.Property(e => e.USalLab).HasColumnName("U_SAL_LAB");
            entity.Property(e => e.USalManto).HasColumnName("U_SAL_MANTO");

            entity.HasOne(d => d.IdReporteMovInventarioNavigation).WithMany(p => p.BdReporteMovInventarios)
                .HasForeignKey(d => d.IdReporteMovInventario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BD_REPORTE_MOV_INVENTARIO_C_REPORTE_MOV_INVENTARIO");
        });

        modelBuilder.Entity<BdReporteTipoUsuario>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_REPORTE_TIPO_USUARIOS");

            entity.Property(e => e.IdReporteTipoUsuarios)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_REPORTE_TIPO_USUARIOS");
            entity.Property(e => e.IdTipoUsuario).HasColumnName("ID_TIPO_USUARIO");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.Menu)
                .IsUnicode(false)
                .HasColumnName("MENU");
            entity.Property(e => e.TipoUsuarios)
                .IsUnicode(false)
                .HasColumnName("TIPO_USUARIOS");
        });

        modelBuilder.Entity<BdReportesAuditoriaInsumoIngAlm>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_REPORTES_AUDITORIA_INSUMO_ING_ALM");

            entity.Property(e => e.Cantidad).HasColumnName("CANTIDAD");
            entity.Property(e => e.IdAuditoria).HasColumnName("ID_AUDITORIA");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdInsumo).HasColumnName("ID_INSUMO");
            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");
            entity.Property(e => e.IdReporteAuditoriaInsumoIngAlm)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_REPORTE_AUDITORIA_INSUMO_ING_ALM");
            entity.Property(e => e.IdResponsableInventario).HasColumnName("ID_RESPONSABLE_INVENTARIO");
        });

        modelBuilder.Entity<BdReportesAuditoriaUnidadIngAlm>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_REPORTES_AUDITORIA_UNIDAD_ING_ALM");

            entity.Property(e => e.IdAplicativo).HasColumnName("ID_APLICATIVO");
            entity.Property(e => e.IdAuditoria).HasColumnName("ID_AUDITORIA");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdConectividad).HasColumnName("ID_CONECTIVIDAD");
            entity.Property(e => e.IdModelo).HasColumnName("ID_MODELO");
            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");
            entity.Property(e => e.IdReporteAuditoriaUnidadIngAlm)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_REPORTE_AUDITORIA_UNIDAD_ING_ALM");
            entity.Property(e => e.IdResponsableInventario).HasColumnName("ID_RESPONSABLE_INVENTARIO");
            entity.Property(e => e.NoSerie)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");
            entity.Property(e => e.NoSim).HasColumnName("NO_SIM");
        });

        modelBuilder.Entity<BdResponsableStatus>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_RESPONSABLE_STATUS");

            entity.Property(e => e.IdResponsable).HasColumnName("ID_RESPONSABLE");
            entity.Property(e => e.IdStatusAr).HasColumnName("ID_STATUS_AR");
        });

        modelBuilder.Entity<BdRetiro>(entity =>
        {
            entity.HasKey(e => e.IdRetiro);

            entity.ToTable("BD_RETIROS");

            entity.HasIndex(e => e.IdTecnico, "IX_BD_RETIROS");

            entity.HasIndex(e => e.FecAlta, "IX_BD_RETIROS_1");

            entity.HasIndex(e => e.IdAr, "IX_BD_RETIROS_ID_AR").HasFillFactor(80);

            entity.HasIndex(e => e.IdNegocio, "IX_BD_RETIROS_ID_NEGOCIO").HasFillFactor(80);

            entity.HasIndex(e => e.IdUnidad, "IX_BD_RETIROS_ID_UNIDAD").HasFillFactor(80);

            entity.Property(e => e.IdRetiro).HasColumnName("ID_RETIRO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdAplicativo).HasColumnName("ID_APLICATIVO");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IdConectividad).HasColumnName("ID_CONECTIVIDAD");
            entity.Property(e => e.IdNegocio).HasColumnName("ID_NEGOCIO");
            entity.Property(e => e.IdParent).HasColumnName("ID_PARENT");
            entity.Property(e => e.IdTecnico).HasColumnName("ID_TECNICO");
            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.IsDaniada).HasColumnName("IS_DANIADA");
            entity.Property(e => e.IsNueva).HasColumnName("IS_NUEVA");
            entity.Property(e => e.Tipo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("TIPO");

            entity.HasOne(d => d.IdNegocioNavigation).WithMany(p => p.BdRetiros)
                .HasForeignKey(d => d.IdNegocio)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BD_RETIROS_BD_NEGOCIOS");

            entity.HasOne(d => d.IdParentNavigation).WithMany(p => p.BdRetiroIdParentNavigations)
                .HasForeignKey(d => d.IdParent)
                .HasConstraintName("FK_BD_RETIROS_BD_UNIDADES1");

            entity.HasOne(d => d.IdTecnicoNavigation).WithMany(p => p.BdRetiros)
                .HasForeignKey(d => d.IdTecnico)
                .HasConstraintName("FK_BD_RETIROS_C_USUARIOS");

            entity.HasOne(d => d.IdUnidadNavigation).WithMany(p => p.BdRetiroIdUnidadNavigations)
                .HasForeignKey(d => d.IdUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BD_RETIROS_BD_UNIDADES");
        });

        modelBuilder.Entity<BdRfcCliente>(entity =>
        {
            entity.HasKey(e => e.IdRfcClientes).HasName("PK__BD_RFC_C__652661DBD045E062");

            entity.ToTable("BD_RFC_CLIENTES");

            entity.Property(e => e.IdRfcClientes).HasColumnName("ID_RFC_CLIENTES");
            entity.Property(e => e.Cliente)
                .IsUnicode(false)
                .HasColumnName("CLIENTE");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.NoAfiliacion)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.Rfc)
                .IsUnicode(false)
                .HasColumnName("RFC");
            entity.Property(e => e.Status)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdRfcClientesPaso>(entity =>
        {
            entity.HasKey(e => e.IdRfcClientesPaso).HasName("PK__BD_RFC_C__F27C42B4DB31C3C9");

            entity.ToTable("BD_RFC_CLIENTES_PASO");

            entity.Property(e => e.IdRfcClientesPaso).HasColumnName("ID_RFC_CLIENTES_PASO");
            entity.Property(e => e.Cliente)
                .IsUnicode(false)
                .HasColumnName("CLIENTE");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdCargasNegociosOtrosClientes).HasColumnName("ID_CARGAS_NEGOCIOS_OTROS_CLIENTES");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.NoAfiliacion)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.Observaciones)
                .IsUnicode(false)
                .HasColumnName("OBSERVACIONES");
            entity.Property(e => e.Rfc)
                .IsUnicode(false)
                .HasColumnName("RFC");
            entity.Property(e => e.Status)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdSalesforceAbc>(entity =>
        {
            entity.HasKey(e => e.IdSalesforceAbc).HasName("PK__BD_SALES__1A2F76E74F202435");

            entity.ToTable("BD_SALESFORCE_ABC");

            entity.Property(e => e.IdSalesforceAbc).HasColumnName("ID_SALESFORCE_ABC");
            entity.Property(e => e.CadenaAbc)
                .IsUnicode(false)
                .HasColumnName("CADENA_ABC");
            entity.Property(e => e.FechaAlta)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ALTA");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.Status)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdSalesforceInbox>(entity =>
        {
            entity.HasKey(e => e.IdSalesforceInbox).HasName("PK__BD_SALES__93200B36AA247439");

            entity.ToTable("BD_SALESFORCE_INBOX");

            entity.Property(e => e.IdSalesforceInbox).HasColumnName("ID_SALESFORCE_INBOX");
            entity.Property(e => e.Afilamex)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AFILAMEX");
            entity.Property(e => e.Afiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AFILIACION");
            entity.Property(e => e.Arodt)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ARODT");
            entity.Property(e => e.Campana)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CAMPANA");
            entity.Property(e => e.Canal)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CANAL");
            entity.Property(e => e.Carga)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CARGA");
            entity.Property(e => e.Codigoproducto)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CODIGOPRODUCTO");
            entity.Property(e => e.Colonia)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("COLONIA");
            entity.Property(e => e.Comercio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("COMERCIO");
            entity.Property(e => e.Conectividad)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CONECTIVIDAD");
            entity.Property(e => e.Contacto1)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CONTACTO1");
            entity.Property(e => e.Contacto2)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CONTACTO2");
            entity.Property(e => e.Contactocomercio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CONTACTOCOMERCIO");
            entity.Property(e => e.Cp)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CP");
            entity.Property(e => e.Descripcion)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");
            entity.Property(e => e.Diasatencion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DIASATENCION");
            entity.Property(e => e.Domicilio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DOMICILIO");
            entity.Property(e => e.Ejecutivoka)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("EJECUTIVOKA");
            entity.Property(e => e.Ejecutivosucursal)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("EJECUTIVOSUCURSAL");
            entity.Property(e => e.Emailejecutivo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("EMAILEJECUTIVO");
            entity.Property(e => e.Emailejecutivoka)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("EMAILEJECUTIVOKA");
            entity.Property(e => e.Emailrespuesta)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("EMAILRESPUESTA");
            entity.Property(e => e.Emailserv)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("EMAILSERV");
            entity.Property(e => e.Estado)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ESTADO");
            entity.Property(e => e.Fechaenvio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("FECHAENVIO");
            entity.Property(e => e.Foliotelecarga)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("FOLIOTELECARGA");
            entity.Property(e => e.Horarioatencion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("HORARIOATENCION");
            entity.Property(e => e.IdArLogWsSaleforce).HasColumnName("ID_AR_LOG_WS_SALEFORCE");
            entity.Property(e => e.Idamex)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IDAMEX");
            entity.Property(e => e.Idcaja)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IDCAJA");
            entity.Property(e => e.IsProcesado).HasColumnName("IS_PROCESADO");
            entity.Property(e => e.Mcc)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("MCC");
            entity.Property(e => e.Modelotpv)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("MODELOTPV");
            entity.Property(e => e.Negotiationtype)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NEGOTIATIONTYPE");
            entity.Property(e => e.Numrollos)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NUMROLLOS");
            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");
            entity.Property(e => e.Poblacion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("POBLACION");
            entity.Property(e => e.Preodt)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("PREODT");
            entity.Property(e => e.ProductCategory)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Producto)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("PRODUCTO");
            entity.Property(e => e.Proveedor)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("PROVEEDOR");
            entity.Property(e => e.Proyecto)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("PROYECTO");
            entity.Property(e => e.Razonsocial)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("RAZONSOCIAL");
            entity.Property(e => e.Referenciaubicacion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("REFERENCIAUBICACION");
            entity.Property(e => e.Rfc)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RFC");
            entity.Property(e => e.Subtiposervicio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("SUBTIPOSERVICIO");
            entity.Property(e => e.Sucursal)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("SUCURSAL");
            entity.Property(e => e.Telefono)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");
            entity.Property(e => e.Telejecutivo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("TELEJECUTIVO");
            entity.Property(e => e.Telsucursal)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TELSUCURSAL");
            entity.Property(e => e.Tipoab)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("TIPOAB");
            entity.Property(e => e.Tiposervicio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("TIPOSERVICIO");
        });

        modelBuilder.Entity<BdSellerOnBase>(entity =>
        {
            entity.HasKey(e => e.SellerOnBaseId).HasName("PK__BdSeller__7A0A4969FDDB4469");

            entity.ToTable("BdSellerOnBase");

            entity.Property(e => e.AccountNumber)
                .HasMaxLength(14)
                .IsUnicode(false);
            entity.Property(e => e.Amcc)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("AMCC");
            entity.Property(e => e.City)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.CloseHour)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Country)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.Currency)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.District)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.Mcc)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("MCC");
            entity.Property(e => e.Name)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.Number)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.OpenHour)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.PostalCode)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.ReceiptName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.RefPoint1)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.RefPoint2)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.State)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.Street)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<BdServicesSendSupplier>(entity =>
        {
            entity.HasKey(e => e.IdServicesSendSupplier).HasName("PK__BdServic__8F9B24C3F6BBF619");

            entity.Property(e => e.IdServicesSendSupplier).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.ShipmentDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<BdServicioCausa>(entity =>
        {
            entity.HasKey(e => e.IdServicioCausa);

            entity.ToTable("BD_SERVICIO_CAUSA");

            entity.Property(e => e.IdServicioCausa).HasColumnName("ID_SERVICIO_CAUSA");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdCausa).HasColumnName("ID_CAUSA");
            entity.Property(e => e.IdServicio).HasColumnName("ID_SERVICIO");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");

            entity.HasOne(d => d.IdCausaNavigation).WithMany(p => p.BdServicioCausas)
                .HasForeignKey(d => d.IdCausa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BD_SERVICIO_CAUSA_C_CAUSAS");

            entity.HasOne(d => d.IdServicioNavigation).WithMany(p => p.BdServicioCausas)
                .HasForeignKey(d => d.IdServicio)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BD_SERVICIO_CAUSA_C_SERVICIOS");
        });

        modelBuilder.Entity<BdServicioCausaRechazoPrecio>(entity =>
        {
            entity.HasKey(e => e.IdServicioCausaRechazoPrecio);

            entity.ToTable("BD_SERVICIO_CAUSA_RECHAZO_PRECIO");

            entity.HasIndex(e => new { e.IdCliente, e.IdServicio, e.IdEspecificacionCausaRechazo, e.Precio }, "IX_MI_BD_SERVICIO_CAUSA_RECHAZO_PRECIO_10225_10224");

            entity.HasIndex(e => new { e.IdCliente, e.Precio }, "IX_MI_BD_SERVICIO_CAUSA_RECHAZO_PRECIO_10227_10226");

            entity.HasIndex(e => new { e.IdCliente, e.IdServicio, e.IdEspecificacionCausaRechazo, e.Precio }, "IX_MI_BD_SERVICIO_CAUSA_RECHAZO_PRECIO_10229_10228");

            entity.HasIndex(e => new { e.IdCliente, e.Precio }, "IX_MI_BD_SERVICIO_CAUSA_RECHAZO_PRECIO_10231_10230");

            entity.HasIndex(e => e.IdCliente, "IX_MI_BD_SERVICIO_CAUSA_RECHAZO_PRECIO_10233_10232");

            entity.HasIndex(e => new { e.IdCliente, e.IdServicio, e.IdEspecificacionCausaRechazo }, "IX_MI_BD_SERVICIO_CAUSA_RECHAZO_PRECIO_10243_10242");

            entity.HasIndex(e => new { e.IdCliente, e.IdServicio, e.IdEspecificacionCausaRechazo }, "IX_MI_BD_SERVICIO_CAUSA_RECHAZO_PRECIO_10246_10245");

            entity.HasIndex(e => e.IdCliente, "IX_MI_BD_SERVICIO_CAUSA_RECHAZO_PRECIO_10248_10247");

            entity.HasIndex(e => e.IdServicio, "IX_MI_BD_SERVICIO_CAUSA_RECHAZO_PRECIO_149568_149567");

            entity.HasIndex(e => new { e.IdServicio, e.IdEspecificacionCausaRechazo }, "IX_MI_BD_SERVICIO_CAUSA_RECHAZO_PRECIO_149573_149572");

            entity.Property(e => e.IdServicioCausaRechazoPrecio).HasColumnName("ID_SERVICIO_CAUSA_RECHAZO_PRECIO");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdEspecificacionCausaRechazo).HasColumnName("ID_ESPECIFICACION_CAUSA_RECHAZO");
            entity.Property(e => e.IdServicio).HasColumnName("ID_SERVICIO");
            entity.Property(e => e.Precio)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("PRECIO");
        });

        modelBuilder.Entity<BdServicioMovInv>(entity =>
        {
            entity.HasKey(e => e.IdServicioMovInv).HasName("PK_BD_SERVICIO_MOV_INT");

            entity.ToTable("BD_SERVICIO_MOV_INV");

            entity.Property(e => e.IdServicioMovInv).HasColumnName("ID_SERVICIO_MOV_INV");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdMovInv).HasColumnName("ID_MOV_INV");
            entity.Property(e => e.IdServicio).HasColumnName("ID_SERVICIO");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.IsRequired).HasColumnName("IS_REQUIRED");

            entity.HasOne(d => d.IdMovInvNavigation).WithMany(p => p.BdServicioMovInvs)
                .HasForeignKey(d => d.IdMovInv)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BD_SERVICIO_MOV_INT_C_MOV_INV");
        });

        modelBuilder.Entity<BdServicioSegmento>(entity =>
        {
            entity.HasKey(e => e.IdServicioSegmento);

            entity.ToTable("BD_SERVICIO_SEGMENTO");

            entity.HasIndex(e => new { e.IdServicio, e.IdSegmento, e.IdTipoPlaza }, "IX_BD_SERVICIO_SEGMENTO_ID_SERVICIO, ID_SEGMENTO, ID_TIPO_PLAZA");

            entity.Property(e => e.IdServicioSegmento).HasColumnName("ID_SERVICIO_SEGMENTO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.HorasGarantia).HasColumnName("HORAS_GARANTIA");
            entity.Property(e => e.IdSegmento).HasColumnName("ID_SEGMENTO");
            entity.Property(e => e.IdServicio).HasColumnName("ID_SERVICIO");
            entity.Property(e => e.IdTipoPlaza).HasColumnName("ID_TIPO_PLAZA");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.PrecioExito)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("PRECIO_EXITO");
            entity.Property(e => e.Ta).HasColumnName("TA");
            entity.Property(e => e.Tr).HasColumnName("TR");
            entity.Property(e => e.Ts).HasColumnName("TS");
        });

        modelBuilder.Entity<BdServicioSegmentoTarea>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_SERVICIO_SEGMENTO_TAREA");

            entity.Property(e => e.IdServicioParent).HasColumnName("ID_SERVICIO_PARENT");
            entity.Property(e => e.IdServicioSegmento).HasColumnName("ID_SERVICIO_SEGMENTO");
            entity.Property(e => e.IdServicioTarea)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_SERVICIO_TAREA");
            entity.Property(e => e.IsRequired).HasColumnName("IS_REQUIRED");
            entity.Property(e => e.Status)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdServicioSolucion>(entity =>
        {
            entity.HasKey(e => e.IdServicioSolucion);

            entity.ToTable("BD_SERVICIO_SOLUCION");

            entity.Property(e => e.IdServicioSolucion).HasColumnName("ID_SERVICIO_SOLUCION");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdServicio).HasColumnName("ID_SERVICIO");
            entity.Property(e => e.IdSolucion).HasColumnName("ID_SOLUCION");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");

            entity.HasOne(d => d.IdServicioNavigation).WithMany(p => p.BdServicioSolucions)
                .HasForeignKey(d => d.IdServicio)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BD_SERVICIO_SOLUCION_C_SERVICIOS");

            entity.HasOne(d => d.IdSolucionNavigation).WithMany(p => p.BdServicioSolucions)
                .HasForeignKey(d => d.IdSolucion)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BD_SERVICIO_SOLUCION_C_SOLUCIONES");
        });

        modelBuilder.Entity<BdServicioSolucionPrecio>(entity =>
        {
            entity.HasKey(e => e.IdServicioSolucionPrecio);

            entity.ToTable("BD_SERVICIO_SOLUCION_PRECIO");

            entity.Property(e => e.IdServicioSolucionPrecio).HasColumnName("ID_SERVICIO_SOLUCION_PRECIO");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdEspecifTipoFalla).HasColumnName("ID_ESPECIF_TIPO_FALLA");
            entity.Property(e => e.IdServicio).HasColumnName("ID_SERVICIO");
            entity.Property(e => e.Precio)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("PRECIO");
        });

        modelBuilder.Entity<BdServicioTipoFalla>(entity =>
        {
            entity.HasKey(e => e.IdServicioTipoFalla);

            entity.ToTable("BD_SERVICIO_TIPO_FALLA");

            entity.Property(e => e.IdServicioTipoFalla).HasColumnName("ID_SERVICIO_TIPO_FALLA");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdServicio).HasColumnName("ID_SERVICIO");
            entity.Property(e => e.IdTipoFalla).HasColumnName("ID_TIPO_FALLA");
        });

        modelBuilder.Entity<BdServicioWeekhour>(entity =>
        {
            entity.HasKey(e => e.IdServicioWeekhour);

            entity.ToTable("BD_SERVICIO_WEEKHOUR");

            entity.HasIndex(e => e.IdServicio, "IX_BD_SERVICIO_WEEKHOUR_ID_SERVICIO").HasFillFactor(80);

            entity.Property(e => e.IdServicioWeekhour).HasColumnName("ID_SERVICIO_WEEKHOUR");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdServicio).HasColumnName("ID_SERVICIO");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.IdWeekhour).HasColumnName("ID_WEEKHOUR");
        });

        modelBuilder.Entity<BdServiciosFalla>(entity =>
        {
            entity.HasKey(e => e.IdServicioFalla);

            entity.ToTable("BD_SERVICIOS_FALLAS");

            entity.Property(e => e.IdServicioFalla).HasColumnName("ID_SERVICIO_FALLA");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdFalla).HasColumnName("ID_FALLA");
            entity.Property(e => e.IdOtrosClientes).HasColumnName("ID_OTROS_CLIENTES");
            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");
            entity.Property(e => e.IdServicio).HasColumnName("ID_SERVICIO");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
        });

        modelBuilder.Entity<BdServiciosFallasProyEspeciale>(entity =>
        {
            entity.ToTable("BD_SERVICIOS_FALLAS_PROY_ESPECIALES");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdFalla).HasColumnName("ID_FALLA");
            entity.Property(e => e.IdProyectoEspecial).HasColumnName("ID_PROYECTO_ESPECIAL");
            entity.Property(e => e.IdServicio).HasColumnName("ID_SERVICIO");
            entity.Property(e => e.IdUsuario)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("ID_USUARIO");
            entity.Property(e => e.Mensaje)
                .HasColumnType("text")
                .HasColumnName("MENSAJE");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdServiciosFallasProyectosSalesforce>(entity =>
        {
            entity.HasKey(e => e.IdServicioFallaProyectoSalesforce).HasName("PK__BD_SERVI__75300E46B9A9823D");

            entity.ToTable("BD_SERVICIOS_FALLAS_PROYECTOS_SALESFORCE");

            entity.Property(e => e.IdServicioFallaProyectoSalesforce).HasColumnName("ID_SERVICIO_FALLA_PROYECTO_SALESFORCE");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdFalla).HasColumnName("ID_FALLA");
            entity.Property(e => e.IdServicio).HasColumnName("ID_SERVICIO");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.Status)
                .HasDefaultValueSql("((1))")
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdServiciosSantander>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_SERVICIOS_SANTANDER");

            entity.Property(e => e.ClaveSantander)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CLAVE_SANTANDER");
            entity.Property(e => e.IdServicio).HasColumnName("ID_SERVICIO");
            entity.Property(e => e.IdServicioSantander)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_SERVICIO_SANTANDER");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdServiciosTecnicosReingenierium>(entity =>
        {
            entity.HasKey(e => e.IdServiciosTecnicosReingenieria).HasName("PK__BD_SERVI__1F8B0BBC66075E75");

            entity.ToTable("BD_SERVICIOS_TECNICOS_REINGENIERIA");

            entity.Property(e => e.IdServiciosTecnicosReingenieria).HasColumnName("ID_SERVICIOS_TECNICOS_REINGENIERIA");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");
            entity.Property(e => e.IdServicio).HasColumnName("ID_SERVICIO");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Status)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdSim>(entity =>
        {
            entity.HasKey(e => e.IdSim);

            entity.ToTable("BD_SIMS");

            entity.HasIndex(e => new { e.IdSolicitudRecoleccion, e.Status }, "IX_BD_SIMS_ID_SOLICITUD_RECOLECCION, STATUS");

            entity.HasIndex(e => e.IdUnidad, "IX_BD_SIMS_ID_UNIDAD").HasFillFactor(80);

            entity.HasIndex(e => e.NoSim, "IX_BD_SIMS_NO_SIM").HasFillFactor(80);

            entity.HasIndex(e => e.NoSim, "IX_MI_BD_SIMS_4794_4793");

            entity.HasIndex(e => new { e.NoSim, e.Status }, "IX_MI_BD_SIMS_4796_4795");

            entity.Property(e => e.IdSim).HasColumnName("ID_SIM");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.FecStatus)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_STATUS");
            entity.Property(e => e.IdCarrier).HasColumnName("ID_CARRIER");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdSolicitudRecoleccion).HasColumnName("ID_SOLICITUD_RECOLECCION");
            entity.Property(e => e.IdStatusSim).HasColumnName("ID_STATUS_SIM");
            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.IdUsuarioStatus).HasColumnName("ID_USUARIO_STATUS");
            entity.Property(e => e.IsDisponible).HasColumnName("IS_DISPONIBLE");
            entity.Property(e => e.NoImei)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_IMEI");
            entity.Property(e => e.NoSim)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SIM");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdSimsAltum>(entity =>
        {
            entity.HasKey(e => e.IdSimAlta);

            entity.ToTable("BD_SIMS_ALTA");

            entity.Property(e => e.IdSimAlta).HasColumnName("ID_SIM_ALTA");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdCarrier).HasColumnName("ID_CARRIER");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdSolicitudRecoleccion).HasColumnName("ID_SOLICITUD_RECOLECCION");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.IsAsignado).HasColumnName("IS_ASIGNADO");
            entity.Property(e => e.IsNullCarrier).HasColumnName("IS_NULL_CARRIER");
            entity.Property(e => e.IsNullSim).HasColumnName("IS_NULL_SIM");
            entity.Property(e => e.IsNumeric).HasColumnName("IS_NUMERIC");
            entity.Property(e => e.IsOtroCliente).HasColumnName("IS_OTRO_CLIENTE");
            entity.Property(e => e.IsProcesado).HasColumnName("IS_PROCESADO");
            entity.Property(e => e.IsReingreso).HasColumnName("IS_REINGRESO");
            entity.Property(e => e.NoSim)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NO_SIM");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.Validacion).HasColumnName("VALIDACION");
        });

        modelBuilder.Entity<BdSimsFaltantesEnero>(entity =>
        {
            entity.HasKey(e => e.IdSimFaltante).HasName("PK__BD_SIMS___DA56A5C7BD71AC7A");

            entity.ToTable("BD_SIMS_FALTANTES_ENERO");

            entity.Property(e => e.IdSimFaltante).HasColumnName("ID_SIM_FALTANTE");
            entity.Property(e => e.FecProcesado)
                .HasColumnType("datetime")
                .HasColumnName("FEC_PROCESADO");
            entity.Property(e => e.NoAr)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("NO_AR");
            entity.Property(e => e.SimInstalado)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("SIM_INSTALADO");
            entity.Property(e => e.SimRetirado)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("SIM_RETIRADO");
        });

        modelBuilder.Entity<BdSimsTemp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_SIMS_TEMP");

            entity.Property(e => e.IdSimTemp)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_SIM_TEMP");
            entity.Property(e => e.NoSim)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SIM");
        });

        modelBuilder.Entity<BdSlaRulesState>(entity =>
        {
            entity.HasKey(e => e.SlaRulesStateId).HasName("PK__BdSlaRul__F017A1A58315D8D9");

            entity.ToTable("BdSlaRulesState");

            entity.Property(e => e.Cp)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.Days).HasColumnName("days");
        });

        modelBuilder.Entity<BdSoftelPaso>(entity =>
        {
            entity.HasKey(e => e.IdSoftelPaso).HasName("PK__BD_SOFTE__2BA7B6E7D84AB152");

            entity.ToTable("BD_SOFTEL_PASO");

            entity.Property(e => e.IdSoftelPaso).HasColumnName("ID_SOFTEL_PASO");
            entity.Property(e => e.Body)
                .IsUnicode(false)
                .HasColumnName("BODY");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.From)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("FROM");
            entity.Property(e => e.NumberMsg).HasColumnName("NUMBER_MSG");
            entity.Property(e => e.Status)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.Subject)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("SUBJECT");
        });

        modelBuilder.Entity<BdSolicitudAlmacenComentario>(entity =>
        {
            entity.HasKey(e => e.IdComentarioSolicitudAlmacen).HasName("PK_BD_COMENTARIO_SOLICITUD_ALMACEN");

            entity.ToTable("BD_SOLICITUD_ALMACEN_COMENTARIO");

            entity.Property(e => e.IdComentarioSolicitudAlmacen).HasColumnName("ID_COMENTARIO_SOLICITUD_ALMACEN");
            entity.Property(e => e.DescComentarioSolicitudAlmacen)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("DESC_COMENTARIO_SOLICITUD_ALMACEN");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdSolicitudAlmacen).HasColumnName("ID_SOLICITUD_ALMACEN");
            entity.Property(e => e.IdStatusSolicitudAlmacen).HasColumnName("ID_STATUS_SOLICITUD_ALMACEN");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
        });

        modelBuilder.Entity<BdSolicitudCorreo>(entity =>
        {
            entity.HasKey(e => e.IdSolicitudCorreo).HasName("PK_BD_SOLICITUDES_CORREO");

            entity.ToTable("BD_SOLICITUD_CORREO");

            entity.Property(e => e.IdSolicitudCorreo).HasColumnName("ID_SOLICITUD_CORREO");
            entity.Property(e => e.Estatus).HasColumnName("ESTATUS");
            entity.Property(e => e.FechaAlta)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ALTA");
            entity.Property(e => e.FechaCorreo)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_CORREO");
            entity.Property(e => e.IdCarga).HasColumnName("ID_CARGA");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdCorreo)
                .HasMaxLength(100)
                .HasColumnName("ID_CORREO");
            entity.Property(e => e.IdNegocio).HasColumnName("ID_NEGOCIO");
            entity.Property(e => e.IdServicio).HasColumnName("ID_SERVICIO");
            entity.Property(e => e.Imei)
                .HasMaxLength(50)
                .HasColumnName("IMEI");
            entity.Property(e => e.Nemonico)
                .HasMaxLength(150)
                .HasColumnName("NEMONICO");
            entity.Property(e => e.NoAr)
                .HasMaxLength(100)
                .HasColumnName("NO_AR");
            entity.Property(e => e.NoSerieEquipo)
                .HasMaxLength(200)
                .HasColumnName("NO_SERIE_EQUIPO");
            entity.Property(e => e.Observaciones)
                .HasMaxLength(3000)
                .HasColumnName("OBSERVACIONES");
        });

        modelBuilder.Entity<BdSolicitudCorreoLog>(entity =>
        {
            entity.HasKey(e => e.IdSolicitudCorreoLog).HasName("PK_BD_SOLICITUD_CORREOLOG");

            entity.ToTable("BD_SOLICITUD_CORREO_LOG");

            entity.Property(e => e.IdSolicitudCorreoLog).HasColumnName("ID_SOLICITUD_CORREO_LOG");
            entity.Property(e => e.ContenidoEmail).HasColumnName("CONTENIDO_EMAIL");
            entity.Property(e => e.FechaAlta)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ALTA");
            entity.Property(e => e.FechaCorreo)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_CORREO");
            entity.Property(e => e.IdCorreo)
                .HasMaxLength(100)
                .HasColumnName("ID_CORREO");
            entity.Property(e => e.Mensaje)
                .HasMaxLength(300)
                .HasColumnName("MENSAJE");
        });

        modelBuilder.Entity<BdSolicitudCorreoOki>(entity =>
        {
            entity.HasKey(e => e.IdSolicitudCorreoOki).HasName("PK_BD_SOLICITUDES_CORREO_OKI");

            entity.ToTable("BD_SOLICITUD_CORREO_OKI");

            entity.Property(e => e.IdSolicitudCorreoOki).HasColumnName("ID_SOLICITUD_CORREO_OKI");
            entity.Property(e => e.Estatus).HasColumnName("ESTATUS");
            entity.Property(e => e.Falla)
                .HasMaxLength(500)
                .HasColumnName("FALLA");
            entity.Property(e => e.FechaAlta)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ALTA");
            entity.Property(e => e.FechaCorreo)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_CORREO");
            entity.Property(e => e.IdCarga).HasColumnName("ID_CARGA");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdCorreo)
                .HasMaxLength(100)
                .HasColumnName("ID_CORREO");
            entity.Property(e => e.IdNegocio).HasColumnName("ID_NEGOCIO");
            entity.Property(e => e.IdServicio).HasColumnName("ID_SERVICIO");
            entity.Property(e => e.Nemonico)
                .HasMaxLength(150)
                .HasColumnName("NEMONICO");
            entity.Property(e => e.NoAr)
                .HasMaxLength(100)
                .HasColumnName("NO_AR");
            entity.Property(e => e.NombreCajero)
                .HasMaxLength(200)
                .HasColumnName("NOMBRE_CAJERO");
            entity.Property(e => e.Observaciones)
                .HasMaxLength(3000)
                .HasColumnName("OBSERVACIONES");
            entity.Property(e => e.Ticket)
                .HasMaxLength(50)
                .HasColumnName("TICKET");
        });

        modelBuilder.Entity<BdSolicitudRecoleccion>(entity =>
        {
            entity.HasKey(e => e.IdSolicitudRecoleccion).HasName("PK_BD_SOLICITUDES_RECOLECCION");

            entity.ToTable("BD_SOLICITUD_RECOLECCION");

            entity.HasIndex(e => e.IdStatusSolicitudRecoleccion, "IX_MI_BD_SOLICITUD_RECOLECCION_4599_4598");

            entity.HasIndex(e => e.IdStatusSolicitudRecoleccion, "IX_MI_BD_SOLICITUD_RECOLECCION_4785_4784");

            entity.HasIndex(e => e.IdStatusSolicitudRecoleccion, "IX_MI_BD_SOLICITUD_RECOLECCION_4787_4786");

            entity.Property(e => e.IdSolicitudRecoleccion).HasColumnName("ID_SOLICITUD_RECOLECCION");
            entity.Property(e => e.CalleNum)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("CALLE_NUM");
            entity.Property(e => e.Cantidades).HasColumnName("CANTIDADES");
            entity.Property(e => e.Ciudad)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("CIUDAD");
            entity.Property(e => e.Colonia)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("COLONIA");
            entity.Property(e => e.Cp)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("CP");
            entity.Property(e => e.Delegacion)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("DELEGACION");
            entity.Property(e => e.Distribuidor)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DISTRIBUIDOR");
            entity.Property(e => e.Estado)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("ESTADO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.FecRecoleccion)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_RECOLECCION");
            entity.Property(e => e.HoraRecoleccion)
                .HasColumnType("datetime")
                .HasColumnName("HORA_RECOLECCION");
            entity.Property(e => e.IdAlmacenDestino).HasColumnName("ID_ALMACEN_DESTINO");
            entity.Property(e => e.IdAttachSolicitud).HasColumnName("ID_ATTACH_SOLICITUD");
            entity.Property(e => e.IdChofer).HasColumnName("ID_CHOFER");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdServicioMensajeria).HasColumnName("ID_SERVICIO_MENSAJERIA");
            entity.Property(e => e.IdStatusSolicitudRecoleccion).HasColumnName("ID_STATUS_SOLICITUD_RECOLECCION");
            entity.Property(e => e.IdTipoSolicitud).HasColumnName("ID_TIPO_SOLICITUD");
            entity.Property(e => e.IdUnidadMensajeria).HasColumnName("ID_UNIDAD_MENSAJERIA");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.NoUnidades).HasColumnName("NO_UNIDADES");

            entity.HasOne(d => d.IdChoferNavigation).WithMany(p => p.BdSolicitudRecoleccions)
                .HasForeignKey(d => d.IdChofer)
                .HasConstraintName("FK_BD_SOLICITUD_RECOLECCION_C_CHOFERES");

            entity.HasOne(d => d.IdStatusSolicitudRecoleccionNavigation).WithMany(p => p.BdSolicitudRecoleccions)
                .HasForeignKey(d => d.IdStatusSolicitudRecoleccion)
                .HasConstraintName("FK_BD_SOLICITUD_RECOLECCION_C_STATUS_SOLICITUD_RECOLECCION");

            entity.HasOne(d => d.IdUnidadMensajeriaNavigation).WithMany(p => p.BdSolicitudRecoleccions)
                .HasForeignKey(d => d.IdUnidadMensajeria)
                .HasConstraintName("FK_BD_SOLICITUD_RECOLECCION_C_UNIDAD_MENSAJERIA");
        });

        modelBuilder.Entity<BdSolicitudRecoleccionInsumo>(entity =>
        {
            entity.HasKey(e => e.IdSolicitudRecoleccionInsumos);

            entity.ToTable("BD_SOLICITUD_RECOLECCION_INSUMOS");

            entity.Property(e => e.IdSolicitudRecoleccionInsumos).HasColumnName("ID_SOLICITUD_RECOLECCION_INSUMOS");
            entity.Property(e => e.Cantidades).HasColumnName("CANTIDADES");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdInsumo).HasColumnName("ID_INSUMO");
            entity.Property(e => e.IdSolicitudRecoleccion).HasColumnName("ID_SOLICITUD_RECOLECCION");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");

            entity.HasOne(d => d.IdSolicitudRecoleccionNavigation).WithMany(p => p.BdSolicitudRecoleccionInsumos)
                .HasForeignKey(d => d.IdSolicitudRecoleccion)
                .HasConstraintName("FK_BD_SOLICITUD_RECOLECCION_INSUMOS_BD_SOLICITUD_RECOLECCION");
        });

        modelBuilder.Entity<BdSolicitudRecoleccionModelo>(entity =>
        {
            entity.HasKey(e => e.IdSolicitudRecoleccionModelo);

            entity.ToTable("BD_SOLICITUD_RECOLECCION_MODELO");

            entity.Property(e => e.IdSolicitudRecoleccionModelo).HasColumnName("ID_SOLICITUD_RECOLECCION_MODELO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdModelo).HasColumnName("ID_MODELO");
            entity.Property(e => e.IdSolicitudRecoleccion).HasColumnName("ID_SOLICITUD_RECOLECCION");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.NoUnidades).HasColumnName("NO_UNIDADES");

            entity.HasOne(d => d.IdSolicitudRecoleccionNavigation).WithMany(p => p.BdSolicitudRecoleccionModelos)
                .HasForeignKey(d => d.IdSolicitudRecoleccion)
                .HasConstraintName("FK_BD_SOLICITUD_RECOLECCION_MODELO_BD_SOLICITUD_RECOLECCION");
        });

        modelBuilder.Entity<BdSolicitudViaticosConceptosPaso>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_SOLICITUD_VIATICOS_CONCEPTOS_PASO");

            entity.Property(e => e.Alimentos)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ALIMENTOS");
            entity.Property(e => e.Aviones)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("AVIONES");
            entity.Property(e => e.Capacitacion)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CAPACITACION");
            entity.Property(e => e.Casetas)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CASETAS");
            entity.Property(e => e.Cerrajeros)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CERRAJEROS");
            entity.Property(e => e.Cliente).HasColumnName("CLIENTE");
            entity.Property(e => e.CompraDeMateriales)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("COMPRA_DE_MATERIALES");
            entity.Property(e => e.Destino)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("DESTINO");
            entity.Property(e => e.Estacionamiento)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ESTACIONAMIENTO");
            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");
            entity.Property(e => e.FechaLiberacion)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_LIBERACION");
            entity.Property(e => e.Gasolina)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("GASOLINA");
            entity.Property(e => e.Hospedaje)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("HOSPEDAJE");
            entity.Property(e => e.KilometrosPasaje)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("KILOMETROS_PASAJE");
            entity.Property(e => e.KilometrosTaxi)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("KILOMETROS_TAXI");
            entity.Property(e => e.MantenimientoAutomovil)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("MANTENIMIENTO_AUTOMOVIL");
            entity.Property(e => e.MantenimientoMotocicletas)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("MANTENIMIENTO_MOTOCICLETAS");
            entity.Property(e => e.Motivo).HasColumnName("MOTIVO");
            entity.Property(e => e.NoAr)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("NO_AR");
            entity.Property(e => e.Papeleria)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("PAPELERIA");
            entity.Property(e => e.Paqueteria)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("PAQUETERIA");
            entity.Property(e => e.Pasaje)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("PASAJE");
            entity.Property(e => e.Taxi)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TAXI");
            entity.Property(e => e.TaxiUber)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TAXI_UBER");
            entity.Property(e => e.Taxilotesa)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TAXILOTESA");
            entity.Property(e => e.Telefono)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");
            entity.Property(e => e.UsuarioSolicitante).HasColumnName("USUARIO_SOLICITANTE");
        });

        modelBuilder.Entity<BdSolicitudesAlmacen>(entity =>
        {
            entity.HasKey(e => e.IdSolicitudAlmacen);

            entity.ToTable("BD_SOLICITUDES_ALMACEN");

            entity.HasIndex(e => e.IdAr, "IX_BD_SOLICITUDES_ALMACEN_ID_AR").HasFillFactor(80);

            entity.HasIndex(e => e.IdEnvio, "IX_BD_SOLICITUDES_ALMACEN_ID_ENVIO").HasFillFactor(80);

            entity.HasIndex(e => e.IdStatusSolicitudAlmacen, "IX_BD_SOLICITUDES_ALMACEN_ID_STATUS_SOLICITUD_ALMACEN");

            entity.HasIndex(e => new { e.IdStatusSolicitudAlmacen, e.IdEnvio }, "IX_BD_SOLICITUDES_ALMACEN_ID_STATUS_SOLICITUD_ALMACEN, ID_ENVIO").HasFillFactor(80);

            entity.HasIndex(e => e.IdStatusSolicitudAlmacen, "IX_MI_BD_SOLICITUDES_ALMACEN_12_11");

            entity.HasIndex(e => e.IdStatusSolicitudAlmacen, "IX_MI_BD_SOLICITUDES_ALMACEN_1906_1905");

            entity.HasIndex(e => e.IdStatusSolicitudAlmacen, "IX_MI_BD_SOLICITUDES_ALMACEN_21326_21325");

            entity.HasIndex(e => e.IdStatusSolicitudAlmacen, "IX_MI_BD_SOLICITUDES_ALMACEN_22_21");

            entity.HasIndex(e => e.IdStatusSolicitudAlmacen, "IX_MI_BD_SOLICITUDES_ALMACEN_4_3");

            entity.Property(e => e.IdSolicitudAlmacen).HasColumnName("ID_SOLICITUD_ALMACEN");
            entity.Property(e => e.CantidadSparePart).HasColumnName("CANTIDAD_SPARE_PART");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.FecCompromiso)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_COMPROMISO");
            entity.Property(e => e.FecConfirm)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_CONFIRM");
            entity.Property(e => e.IdAlmacen).HasColumnName("ID_ALMACEN");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IdDireccion).HasColumnName("ID_DIRECCION");
            entity.Property(e => e.IdEnvio).HasColumnName("ID_ENVIO");
            entity.Property(e => e.IdInsumo).HasColumnName("ID_INSUMO");
            entity.Property(e => e.IdMarca).HasColumnName("ID_MARCA");
            entity.Property(e => e.IdModelo).HasColumnName("ID_MODELO");
            entity.Property(e => e.IdResponsableDestino).HasColumnName("ID_RESPONSABLE_DESTINO");
            entity.Property(e => e.IdSparePart).HasColumnName("ID_SPARE_PART");
            entity.Property(e => e.IdStatusSolicitudAlmacen).HasColumnName("ID_STATUS_SOLICITUD_ALMACEN");
            entity.Property(e => e.IdTipoResponsableDestino).HasColumnName("ID_TIPO_RESPONSABLE_DESTINO");
            entity.Property(e => e.IdTipoServicio).HasColumnName("ID_TIPO_SERVICIO");
            entity.Property(e => e.IdTipoSolicitudAlmacen).HasColumnName("ID_TIPO_SOLICITUD_ALMACEN");
            entity.Property(e => e.IdUrgenciaSolicitudAlmacen).HasColumnName("ID_URGENCIA_SOLICITUD_ALMACEN");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.IdUsuarioConfirm).HasColumnName("ID_USUARIO_CONFIRM");
            entity.Property(e => e.IsEntregasParciales).HasColumnName("IS_ENTREGAS_PARCIALES");
            entity.Property(e => e.Notas)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasColumnName("NOTAS");
            entity.Property(e => e.OtraDireccion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("OTRA_DIRECCION");

            entity.HasOne(d => d.IdDireccionNavigation).WithMany(p => p.BdSolicitudesAlmacens)
                .HasForeignKey(d => d.IdDireccion)
                .HasConstraintName("FK_BD_SOLICITUDES_ALMACEN_BD_DIRECCIONES");

            entity.HasOne(d => d.IdSparePartNavigation).WithMany(p => p.BdSolicitudesAlmacens)
                .HasForeignKey(d => d.IdSparePart)
                .HasConstraintName("FK_BD_SOLICITUDES_ALMACEN_C_SPARE_PARTS");

            entity.HasOne(d => d.IdTipoResponsableDestinoNavigation).WithMany(p => p.BdSolicitudesAlmacens)
                .HasForeignKey(d => d.IdTipoResponsableDestino)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BD_SOLICITUDES_ALMACEN_C_TIPO_RESPONSABLE");

            entity.HasOne(d => d.IdTipoServicioNavigation).WithMany(p => p.BdSolicitudesAlmacens)
                .HasForeignKey(d => d.IdTipoServicio)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BD_SOLICITUDES_ALMACEN_C_TIPO_SERVICIO_SOLICITUD_ALMACEN");

            entity.HasOne(d => d.IdTipoSolicitudAlmacenNavigation).WithMany(p => p.BdSolicitudesAlmacens)
                .HasForeignKey(d => d.IdTipoSolicitudAlmacen)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BD_SOLICITUDES_ALMACEN_C_TIPO_SOLICITUD_ALMACEN");

            entity.HasOne(d => d.IdUrgenciaSolicitudAlmacenNavigation).WithMany(p => p.BdSolicitudesAlmacens)
                .HasForeignKey(d => d.IdUrgenciaSolicitudAlmacen)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BD_SOLICITUDES_ALMACEN_C_URGENCIA_SOLICITUD_ALMACEN");
        });

        modelBuilder.Entity<BdSolicitudesAlmacenOld>(entity =>
        {
            entity.HasKey(e => e.IdSolicitudAlmacen);

            entity.ToTable("BD_SOLICITUDES_ALMACEN_OLD");

            entity.HasIndex(e => e.IdAr, "IX_BD_SOLICITUDES_ALMACEN_ID_AR").HasFillFactor(80);

            entity.Property(e => e.IdSolicitudAlmacen).HasColumnName("ID_SOLICITUD_ALMACEN");
            entity.Property(e => e.CantidadSparePart).HasColumnName("CANTIDAD_SPARE_PART");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.FecConfirm)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_CONFIRM");
            entity.Property(e => e.IdAlmacen).HasColumnName("ID_ALMACEN");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IdInsumo).HasColumnName("ID_INSUMO");
            entity.Property(e => e.IdMarca).HasColumnName("ID_MARCA");
            entity.Property(e => e.IdModelo).HasColumnName("ID_MODELO");
            entity.Property(e => e.IdResponsableDestino).HasColumnName("ID_RESPONSABLE_DESTINO");
            entity.Property(e => e.IdSparePart).HasColumnName("ID_SPARE_PART");
            entity.Property(e => e.IdStatusSolicitudAlmacen).HasColumnName("ID_STATUS_SOLICITUD_ALMACEN");
            entity.Property(e => e.IdTipoResponsableDestino).HasColumnName("ID_TIPO_RESPONSABLE_DESTINO");
            entity.Property(e => e.IdTipoSolicitudAlmacen).HasColumnName("ID_TIPO_SOLICITUD_ALMACEN");
            entity.Property(e => e.IdUrgenciaSolicitudAlmacen).HasColumnName("ID_URGENCIA_SOLICITUD_ALMACEN");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.IdUsuarioConfirm).HasColumnName("ID_USUARIO_CONFIRM");
            entity.Property(e => e.Notas)
                .HasMaxLength(400)
                .IsUnicode(false)
                .HasColumnName("NOTAS");

            entity.HasOne(d => d.IdAlmacenNavigation).WithMany(p => p.BdSolicitudesAlmacenOlds)
                .HasForeignKey(d => d.IdAlmacen)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BD_SOLICITUDES_ALMACEN_OLD_C_ALMACENES");

            entity.HasOne(d => d.IdResponsableDestinoNavigation).WithMany(p => p.BdSolicitudesAlmacenOldIdResponsableDestinoNavigations)
                .HasForeignKey(d => d.IdResponsableDestino)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BD_SOLICITUDES_ALMACEN_OLD_C_USUARIOS");

            entity.HasOne(d => d.IdSparePartNavigation).WithMany(p => p.BdSolicitudesAlmacenOlds)
                .HasForeignKey(d => d.IdSparePart)
                .HasConstraintName("FK_BD_SOLICITUDES_ALMACEN_OLD_C_SPARE_PARTS");

            entity.HasOne(d => d.IdTipoResponsableDestinoNavigation).WithMany(p => p.BdSolicitudesAlmacenOlds)
                .HasForeignKey(d => d.IdTipoResponsableDestino)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BD_SOLICITUDES_ALMACEN_OLD_C_TIPO_RESPONSABLE");

            entity.HasOne(d => d.IdTipoSolicitudAlmacenNavigation).WithMany(p => p.BdSolicitudesAlmacenOlds)
                .HasForeignKey(d => d.IdTipoSolicitudAlmacen)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BD_SOLICITUDES_ALMACEN_OLD_C_TIPO_SOLICITUD_ALMACEN");

            entity.HasOne(d => d.IdUrgenciaSolicitudAlmacenNavigation).WithMany(p => p.BdSolicitudesAlmacenOlds)
                .HasForeignKey(d => d.IdUrgenciaSolicitudAlmacen)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BD_SOLICITUDES_ALMACEN_OLD_C_URGENCIA_SOLICITUD_ALMACEN");

            entity.HasOne(d => d.IdUsuarioAltaNavigation).WithMany(p => p.BdSolicitudesAlmacenOldIdUsuarioAltaNavigations)
                .HasForeignKey(d => d.IdUsuarioAlta)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BD_SOLICITUDES_ALMACEN_OLD_C_USUARIOS1");

            entity.HasOne(d => d.IdUsuarioConfirmNavigation).WithMany(p => p.BdSolicitudesAlmacenOldIdUsuarioConfirmNavigations)
                .HasForeignKey(d => d.IdUsuarioConfirm)
                .HasConstraintName("FK_BD_SOLICITUDES_ALMACEN_OLD_C_USUARIOS2");
        });

        modelBuilder.Entity<BdSolicitudesDevolucion>(entity =>
        {
            entity.HasKey(e => e.IdSolicitudDevolucion);

            entity.ToTable("BD_SOLICITUDES_DEVOLUCION");

            entity.Property(e => e.IdSolicitudDevolucion).HasColumnName("ID_SOLICITUD_DEVOLUCION");
            entity.Property(e => e.Accesorios).HasColumnName("ACCESORIOS");
            entity.Property(e => e.CalleNum)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CALLE_NUM");
            entity.Property(e => e.Ciudad)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CIUDAD");
            entity.Property(e => e.Colonia)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("COLONIA");
            entity.Property(e => e.Cp)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CP");
            entity.Property(e => e.Delegacion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DELEGACION");
            entity.Property(e => e.Estado)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ESTADO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.FecDevolucion)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_DEVOLUCION");
            entity.Property(e => e.HoraDevolucion)
                .HasColumnType("datetime")
                .HasColumnName("HORA_DEVOLUCION");
            entity.Property(e => e.IdAlmacen).HasColumnName("ID_ALMACEN");
            entity.Property(e => e.IdChofer).HasColumnName("ID_CHOFER");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdEnvio).HasColumnName("ID_ENVIO");
            entity.Property(e => e.IdModelo).HasColumnName("ID_MODELO");
            entity.Property(e => e.IdServicioMensajeria).HasColumnName("ID_SERVICIO_MENSAJERIA");
            entity.Property(e => e.IdSolicitante).HasColumnName("ID_SOLICITANTE");
            entity.Property(e => e.IdStatusSolicitudDevolucion).HasColumnName("ID_STATUS_SOLICITUD_DEVOLUCION");
            entity.Property(e => e.IdStatusValidacionDevolucion).HasColumnName("ID_STATUS_VALIDACION_DEVOLUCION");
            entity.Property(e => e.IdUnidadMensajeria).HasColumnName("ID_UNIDAD_MENSAJERIA");
            entity.Property(e => e.Insumos).HasColumnName("INSUMOS");
            entity.Property(e => e.NoSims).HasColumnName("NO_SIMS");
            entity.Property(e => e.NoUnidades).HasColumnName("NO_UNIDADES");
            entity.Property(e => e.Notas)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("NOTAS");
            entity.Property(e => e.Refacciones).HasColumnName("REFACCIONES");
            entity.Property(e => e.SpareParts).HasColumnName("SPARE_PARTS");
        });

        modelBuilder.Entity<BdSolicitudesDevolucionInsumo>(entity =>
        {
            entity.HasKey(e => e.IdSolicitudDevolucionInsumo);

            entity.ToTable("BD_SOLICITUDES_DEVOLUCION_INSUMOS");

            entity.Property(e => e.IdSolicitudDevolucionInsumo).HasColumnName("ID_SOLICITUD_DEVOLUCION_INSUMO");
            entity.Property(e => e.Cantidad)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("CANTIDAD");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdInsumo).HasColumnName("ID_INSUMO");
            entity.Property(e => e.IdSolicitudDevolucion).HasColumnName("ID_SOLICITUD_DEVOLUCION");
            entity.Property(e => e.IdStatusInsumoIni).HasColumnName("ID_STATUS_INSUMO_INI");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.IsRecibidoRetorno).HasColumnName("IS_RECIBIDO_RETORNO");

            entity.HasOne(d => d.IdUsuarioAltaNavigation).WithMany(p => p.BdSolicitudesDevolucionInsumos)
                .HasForeignKey(d => d.IdUsuarioAlta)
                .HasConstraintName("FK_BD_SOLICITUDES_DEVOLUCION_INSUMO_C_USUARIOS");
        });

        modelBuilder.Entity<BdSolicitudesDevolucionItem>(entity =>
        {
            entity.HasKey(e => e.IdSolicitudDevolucionItem).HasName("PK_BD_SOLICITUDES_DEVOLUCION_INSUMO");

            entity.ToTable("BD_SOLICITUDES_DEVOLUCION_ITEMS");

            entity.Property(e => e.IdSolicitudDevolucionItem).HasColumnName("ID_SOLICITUD_DEVOLUCION_ITEM");
            entity.Property(e => e.Cantidad)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("CANTIDAD");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdAccesorio).HasColumnName("ID_ACCESORIO");
            entity.Property(e => e.IdInsumo).HasColumnName("ID_INSUMO");
            entity.Property(e => e.IdRefaccion).HasColumnName("ID_REFACCION");
            entity.Property(e => e.IdSolicitudDevolucion).HasColumnName("ID_SOLICITUD_DEVOLUCION");
            entity.Property(e => e.IdSparePart).HasColumnName("ID_SPARE_PART");
            entity.Property(e => e.IdStatusInsumoIni).HasColumnName("ID_STATUS_INSUMO_INI");
            entity.Property(e => e.IdTipoItemSolicitudAlmacen).HasColumnName("ID_TIPO_ITEM_SOLICITUD_ALMACEN");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.IsRecibidoRetorno).HasColumnName("IS_RECIBIDO_RETORNO");
        });

        modelBuilder.Entity<BdSolicitudesDevolucionModelo>(entity =>
        {
            entity.HasKey(e => e.IdSolicitudDevolucionModelo);

            entity.ToTable("BD_SOLICITUDES_DEVOLUCION_MODELO");

            entity.Property(e => e.IdSolicitudDevolucionModelo).HasColumnName("ID_SOLICITUD_DEVOLUCION_MODELO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdModelo).HasColumnName("ID_MODELO");
            entity.Property(e => e.IdSolicitudDevolucion).HasColumnName("ID_SOLICITUD_DEVOLUCION");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.NoUnidades).HasColumnName("NO_UNIDADES");

            entity.HasOne(d => d.IdModeloNavigation).WithMany(p => p.BdSolicitudesDevolucionModelos)
                .HasForeignKey(d => d.IdModelo)
                .HasConstraintName("FK_BD_SOLICITUDES_DEVOLUCION_MODELO_C_MODELOS");

            entity.HasOne(d => d.IdUsuarioAltaNavigation).WithMany(p => p.BdSolicitudesDevolucionModelos)
                .HasForeignKey(d => d.IdUsuarioAlta)
                .HasConstraintName("FK_BD_SOLICITUDES_DEVOLUCION_MODELO_C_USUARIOS");
        });

        modelBuilder.Entity<BdSolicitudesDevolucionUnidad>(entity =>
        {
            entity.HasKey(e => e.IdSolicitudDevolucionUnidad);

            entity.ToTable("BD_SOLICITUDES_DEVOLUCION_UNIDAD");

            entity.HasIndex(e => new { e.IdSolicitudDevolucion, e.IsRecibidoRetorno }, "IX_BD_SOLICITUDES_DEVOLUCION_UNIDAD_ID_SOLICITUD_DEVOLUCION, IS_RECIBIDO_RETORNO");

            entity.HasIndex(e => e.NoSerie, "IX_MI_BD_SOLICITUDES_DEVOLUCION_UNIDAD_34302_34301");

            entity.Property(e => e.IdSolicitudDevolucionUnidad).HasColumnName("ID_SOLICITUD_DEVOLUCION_UNIDAD");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdSolicitudDevolucion).HasColumnName("ID_SOLICITUD_DEVOLUCION");
            entity.Property(e => e.IdStatusUnidadIni).HasColumnName("ID_STATUS_UNIDAD_INI");
            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.IsRecibidoRetorno).HasColumnName("IS_RECIBIDO_RETORNO");
            entity.Property(e => e.NoSerie)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");

            entity.HasOne(d => d.IdUnidadNavigation).WithMany(p => p.BdSolicitudesDevolucionUnidads)
                .HasForeignKey(d => d.IdUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BD_SOLICITUDES_DEVOLUCION_UNIDAD_BD_UNIDADES");

            entity.HasOne(d => d.IdUsuarioAltaNavigation).WithMany(p => p.BdSolicitudesDevolucionUnidads)
                .HasForeignKey(d => d.IdUsuarioAlta)
                .HasConstraintName("FK_BD_SOLICITUDES_DEVOLUCION_UNIDAD_C_USUARIOS");
        });

        modelBuilder.Entity<BdSolicitudesViatico>(entity =>
        {
            entity.HasKey(e => e.IdSolicitudViaticos).HasName("PK_C_SOLICITUD_VIATICO");

            entity.ToTable("BD_SOLICITUDES_VIATICOS", tb => tb.HasTrigger("TR_VALIDA_VIATICOS"));

            entity.HasIndex(e => e.IdAr, "IX_BD_SOLICITUDES_VIATICOS_ID_AR").HasFillFactor(80);

            entity.HasIndex(e => e.IdStatusSolicitudViaticos, "IX_BD_SOLICITUDES_VIATICOS_ID_STATUS_SOLICITUD_VIATICOS").HasFillFactor(80);

            entity.HasIndex(e => new { e.IdStatusSolicitudViaticos, e.FecAlta }, "IX_BD_SOLICITUDES_VIATICOS_ID_STATUS_SOLICITUD_VIATICOS, FEC_ALTA");

            entity.HasIndex(e => e.IdComprobacionSolicitudesViaticos, "IX_MI_BD_SOLICITUDES_VIATICOS_120168_120167");

            entity.HasIndex(e => new { e.IdStatusSolicitudViaticos, e.FecAlta }, "IX_MI_BD_SOLICITUDES_VIATICOS_27346_27345");

            entity.HasIndex(e => e.IdStatusSolicitudViaticos, "IX_MI_BD_SOLICITUDES_VIATICOS_8692_8691");

            entity.HasIndex(e => new { e.IdStatusSolicitudViaticos, e.FecConfirmacion }, "IX_MI_BD_SOLICITUDES_VIATICOS_97642_97641");

            entity.HasIndex(e => new { e.IdStatusSolicitudViaticos, e.IdUsuarioSolicitado, e.FecConfirmacion }, "IX_MI_BD_SOLICITUDES_VIATICOS_97748_97747");

            entity.Property(e => e.IdSolicitudViaticos).HasColumnName("ID_SOLICITUD_VIATICOS");
            entity.Property(e => e.ComentarioAutorizador)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("COMENTARIO_AUTORIZADOR");
            entity.Property(e => e.ComentarioConfirmador)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("COMENTARIO_CONFIRMADOR");
            entity.Property(e => e.ComentarioSolicitante)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("COMENTARIO_SOLICITANTE");
            entity.Property(e => e.Destino)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DESTINO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.FecConfirmacion)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_CONFIRMACION");
            entity.Property(e => e.FromAutomatizacion).HasColumnName("FROM_AUTOMATIZACION");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdComprobacionSolicitudesViaticos).HasColumnName("ID_COMPROBACION_SOLICITUDES_VIATICOS");
            entity.Property(e => e.IdCuentaBancaria).HasColumnName("ID_CUENTA_BANCARIA");
            entity.Property(e => e.IdStatusSolicitudViaticos).HasColumnName("ID_STATUS_SOLICITUD_VIATICOS");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.IdUsuarioSolicitado).HasColumnName("ID_USUARIO_SOLICITADO");
            entity.Property(e => e.NumConfirmacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NUM_CONFIRMACION");

            entity.HasOne(d => d.IdStatusSolicitudViaticosNavigation).WithMany(p => p.BdSolicitudesViaticos)
                .HasForeignKey(d => d.IdStatusSolicitudViaticos)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_C_SOLICITUD_VIATICO_C_STATUS_SOLICITUD_VIATICOS");
        });

        modelBuilder.Entity<BdSolicitudesViaticosConcepto>(entity =>
        {
            entity.HasKey(e => e.IdSolicitudViaticosConcepto).HasName("PK_BD_SOLICITUDES_VIATICOS_CONCEPTO");

            entity.ToTable("BD_SOLICITUDES_VIATICOS_CONCEPTOS", tb => tb.HasTrigger("TR_VALIDA_VIATICOS_CONCEPTOS"));

            entity.HasIndex(e => e.IdSolicitudViaticos, "IX_BD_SOLICITUDES_VIATICOS_CONCEPTOS_ID_SOLICITUD_VIATICOS").HasFillFactor(80);

            entity.Property(e => e.IdSolicitudViaticosConcepto).HasColumnName("ID_SOLICITUD_VIATICOS_CONCEPTO");
            entity.Property(e => e.Adeudo)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("ADEUDO");
            entity.Property(e => e.CantidadAutorizada)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("CANTIDAD_AUTORIZADA");
            entity.Property(e => e.CantidadComprobada)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("CANTIDAD_COMPROBADA");
            entity.Property(e => e.CantidadSolicitada)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("CANTIDAD_SOLICITADA");
            entity.Property(e => e.CantidadSolicitadaReal)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CANTIDAD_SOLICITADA_REAL");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.FromAutomatizacion).HasColumnName("FROM_AUTOMATIZACION");
            entity.Property(e => e.IdSolicitudViaticos).HasColumnName("ID_SOLICITUD_VIATICOS");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.IdViatico).HasColumnName("ID_VIATICO");
            entity.Property(e => e.Kilometros)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("KILOMETROS");
            entity.Property(e => e.Observaciones)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("OBSERVACIONES");

            entity.HasOne(d => d.IdSolicitudViaticosNavigation).WithMany(p => p.BdSolicitudesViaticosConceptos)
                .HasForeignKey(d => d.IdSolicitudViaticos)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BD_SOLICITUDES_VIATICOS_CONCEPTO_BD_SOLICITUDES_VIATICOS");

            entity.HasOne(d => d.IdViaticoNavigation).WithMany(p => p.BdSolicitudesViaticosConceptos)
                .HasForeignKey(d => d.IdViatico)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BD_SOLICITUDES_VIATICOS_CONCEPTO_C_VIATICOS");
        });

        modelBuilder.Entity<BdSolicitudesViaticosConceptosTemp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_SOLICITUDES_VIATICOS_CONCEPTOS_TEMP");

            entity.Property(e => e.Adeudo)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("ADEUDO");
            entity.Property(e => e.CantidadAutorizada)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("CANTIDAD_AUTORIZADA");
            entity.Property(e => e.CantidadComprobada)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("CANTIDAD_COMPROBADA");
            entity.Property(e => e.CantidadSolicitada)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("CANTIDAD_SOLICITADA");
            entity.Property(e => e.CantidadSolicitadaReal)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CANTIDAD_SOLICITADA_REAL");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.FromAutomatizacion).HasColumnName("FROM_AUTOMATIZACION");
            entity.Property(e => e.IdSolicitudViaticos).HasColumnName("ID_SOLICITUD_VIATICOS");
            entity.Property(e => e.IdSolicitudViaticosConcepto)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_SOLICITUD_VIATICOS_CONCEPTO");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.IdViatico).HasColumnName("ID_VIATICO");
            entity.Property(e => e.Kilometros)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("KILOMETROS");
            entity.Property(e => e.Observaciones)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("OBSERVACIONES");
        });

        modelBuilder.Entity<BdSoporteTecnico>(entity =>
        {
            entity.HasKey(e => e.IdSoporteTecnico);

            entity.ToTable("BD_SOPORTE_TECNICO");

            entity.HasIndex(e => new { e.IdAr, e.Status }, "IX_BD_SOPORTE_TECNICO_ID_AR, STATUS");

            entity.HasIndex(e => e.Status, "IX_BD_SOPORTE_TECNICO_STATUS");

            entity.Property(e => e.IdSoporteTecnico).HasColumnName("ID_SOPORTE_TECNICO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.FecConfirm)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_CONFIRM");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IdStatusArAnt).HasColumnName("ID_STATUS_AR_ANT");
            entity.Property(e => e.IdTipoSoporteTecnico).HasColumnName("ID_TIPO_SOPORTE_TECNICO");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.IdUsuarioConfirm).HasColumnName("ID_USUARIO_CONFIRM");
            entity.Property(e => e.IdUsuarioSoporte).HasColumnName("ID_USUARIO_SOPORTE");
            entity.Property(e => e.IsChecked).HasColumnName("IS_CHECKED");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");

            entity.HasOne(d => d.IdTipoSoporteTecnicoNavigation).WithMany(p => p.BdSoporteTecnicos)
                .HasForeignKey(d => d.IdTipoSoporteTecnico)
                .HasConstraintName("FK_BD_SOPORTE_TECNICO_C_TIPO_SOPORTE_TECNICO");
        });

        modelBuilder.Entity<BdSparePartPrecio>(entity =>
        {
            entity.HasKey(e => e.IdSparePartPrecio);

            entity.ToTable("BD_SPARE_PART_PRECIO");

            entity.Property(e => e.IdSparePartPrecio).HasColumnName("ID_SPARE_PART_PRECIO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdMoneda).HasColumnName("ID_MONEDA");
            entity.Property(e => e.IdSparePart).HasColumnName("ID_SPARE_PART");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Precio)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("PRECIO");

            entity.HasOne(d => d.IdClienteNavigation).WithMany(p => p.BdSparePartPrecios)
                .HasForeignKey(d => d.IdCliente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BD_SPARE_PART_PRECIO_C_CLIENTES");

            entity.HasOne(d => d.IdMonedaNavigation).WithMany(p => p.BdSparePartPrecios)
                .HasForeignKey(d => d.IdMoneda)
                .HasConstraintName("FK_BD_SPARE_PART_PRECIO_C_MONEDAS");

            entity.HasOne(d => d.IdSparePartNavigation).WithMany(p => p.BdSparePartPrecios)
                .HasForeignKey(d => d.IdSparePart)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BD_SPARE_PART_PRECIO_C_SPARE_PARTS");
        });

        modelBuilder.Entity<BdStatusDoctoTipoResponsablePrefacturacion>(entity =>
        {
            entity.HasKey(e => e.IdStatusDoctoTipoResponsablePrefacturacion).HasName("PK_BD_MOV_DOCTOS_PREFACTURACION");

            entity.ToTable("BD_STATUS_DOCTO_TIPO_RESPONSABLE_PREFACTURACION");

            entity.Property(e => e.IdStatusDoctoTipoResponsablePrefacturacion).HasColumnName("ID_STATUS_DOCTO_TIPO_RESPONSABLE_PREFACTURACION");
            entity.Property(e => e.IdStatusDoctoPrefacturacion).HasColumnName("ID_STATUS_DOCTO_PREFACTURACION");
            entity.Property(e => e.IdTipoDoctoPrefacturacion).HasColumnName("ID_TIPO_DOCTO_PREFACTURACION");
            entity.Property(e => e.IdTipoResponsablePrefacturacion).HasColumnName("ID_TIPO_RESPONSABLE_PREFACTURACION");
            entity.Property(e => e.IsClienteAssign).HasColumnName("IS_CLIENTE_ASSIGN");
            entity.Property(e => e.IsPartnerAssign).HasColumnName("IS_PARTNER_ASSIGN");
            entity.Property(e => e.IsPrefacturacionAssign).HasColumnName("IS_PREFACTURACION_ASSIGN");
        });

        modelBuilder.Entity<BdStatusTipoUsuario>(entity =>
        {
            entity.HasKey(e => e.IdStatusTipoUsuario);

            entity.ToTable("BD_STATUS_TIPO_USUARIO");

            entity.Property(e => e.IdStatusTipoUsuario).HasColumnName("ID_STATUS_TIPO_USUARIO");
            entity.Property(e => e.IdStatusAr).HasColumnName("ID_STATUS_AR");
            entity.Property(e => e.IdTipoUsuario).HasColumnName("ID_TIPO_USUARIO");
        });

        modelBuilder.Entity<BdStoreAltaManual>(entity =>
        {
            entity.HasKey(e => e.IdStoreAltaManual).HasName("PK__BD_STORE__B987F7023CE46150");

            entity.ToTable("BD_STORE_ALTA_MANUAL");

            entity.Property(e => e.IdStoreAltaManual).HasColumnName("ID_STORE_ALTA_MANUAL");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.Texto)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("TEXTO");
        });

        modelBuilder.Entity<BdSustitucione>(entity =>
        {
            entity.HasKey(e => e.IdSustitucion);

            entity.ToTable("BD_SUSTITUCIONES");

            entity.HasIndex(e => new { e.IdNegocio, e.IdUnidadEntrada }, "missing_index_1120489_1120488");

            entity.HasIndex(e => new { e.IdTecnico, e.IdUnidadEntrada }, "missing_index_1120491_1120490");

            entity.Property(e => e.IdSustitucion).HasColumnName("ID_SUSTITUCION");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IdNegocio).HasColumnName("ID_NEGOCIO");
            entity.Property(e => e.IdParent).HasColumnName("ID_PARENT");
            entity.Property(e => e.IdTecnico).HasColumnName("ID_TECNICO");
            entity.Property(e => e.IdUnidadEntrada).HasColumnName("ID_UNIDAD_ENTRADA");
            entity.Property(e => e.IdUnidadSalida).HasColumnName("ID_UNIDAD_SALIDA");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.NoEquipoEntrada)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_EQUIPO_ENTRADA");
            entity.Property(e => e.NoEquipoSalida)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_EQUIPO_SALIDA");

            entity.HasOne(d => d.IdNegocioNavigation).WithMany(p => p.BdSustituciones)
                .HasForeignKey(d => d.IdNegocio)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BD_SUSTITUCIONES_BD_NEGOCIOS");

            entity.HasOne(d => d.IdTecnicoNavigation).WithMany(p => p.BdSustituciones)
                .HasForeignKey(d => d.IdTecnico)
                .HasConstraintName("FK_BD_SUSTITUCIONES_C_USUARIOS");

            entity.HasOne(d => d.IdUnidadEntradaNavigation).WithMany(p => p.BdSustitucioneIdUnidadEntradaNavigations)
                .HasForeignKey(d => d.IdUnidadEntrada)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BD_SUSTITUCIONES_BD_UNIDADES");

            entity.HasOne(d => d.IdUnidadSalidaNavigation).WithMany(p => p.BdSustitucioneIdUnidadSalidaNavigations)
                .HasForeignKey(d => d.IdUnidadSalida)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BD_SUSTITUCIONES_BD_UNIDADES1");
        });

        modelBuilder.Entity<BdTarea>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_TAREA");

            entity.HasIndex(e => e.IdTarea, "IX_BD_TAREA_ID_TAREA");

            entity.HasIndex(e => e.IdAr, "IX_MI_BD_TAREA_21448_21447");

            entity.Property(e => e.DescTrabajo)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("DESC_TRABAJO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.FechaCierre)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_CIERRE");
            entity.Property(e => e.Folio)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FOLIO");
            entity.Property(e => e.IdAlta).HasColumnName("ID_ALTA");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IdAttatch)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ID_ATTATCH");
            entity.Property(e => e.IdServicioTarea).HasColumnName("ID_SERVICIO_TAREA");
            entity.Property(e => e.IdTarea)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_TAREA");
            entity.Property(e => e.IdTipoCierreTarea).HasColumnName("ID_TIPO_CIERRE_TAREA");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdTemoCp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_TEMO_CP");

            entity.Property(e => e.Cp)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("CP");
            entity.Property(e => e.IdTipoPlazaClienteCp)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_TIPO_PLAZA_CLIENTE_CP");
            entity.Property(e => e.IsCorrecto).HasColumnName("IS_CORRECTO");
        });

        modelBuilder.Entity<BdTempActualizaTipoPlazaCliente>(entity =>
        {
            entity.ToTable("BD_TEMP_ACTUALIZA_TIPO_PLAZA_CLIENTE");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.IdSegmento).HasColumnName("ID_SEGMENTO");
            entity.Property(e => e.IdServicio).HasColumnName("ID_SERVICIO");
            entity.Property(e => e.IdTipoPlaza).HasColumnName("ID_TIPO_PLAZA");
            entity.Property(e => e.IdTipoPlazaCliente).HasColumnName("ID_TIPO_PLAZA_CLIENTE");
        });

        modelBuilder.Entity<BdTempAfiliacionPrimeraOdt>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_TEMP_AFILIACION_PRIMERA_ODT");

            entity.Property(e => e.Error)
                .IsUnicode(false)
                .HasColumnName("ERROR");
            entity.Property(e => e.IdCarga).HasColumnName("ID_CARGA");
            entity.Property(e => e.NoAfiliacion)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.Status)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdTempCambioSlaOdt>(entity =>
        {
            entity.HasKey(e => e.IdTempCambioSlaOdt).HasName("PK__BD_TEMP___6728AE79D2F6045F");

            entity.ToTable("BD_TEMP_CAMBIO_SLA_ODT");

            entity.Property(e => e.IdTempCambioSlaOdt).HasColumnName("ID_TEMP_CAMBIO_SLA_ODT");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.FecAltaOdt)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA_ODT");
            entity.Property(e => e.FecGarantiaOdt)
                .HasColumnType("datetime")
                .HasColumnName("FEC_GARANTIA_ODT");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IdCarga).HasColumnName("ID_CARGA");
            entity.Property(e => e.IdProyecto)
                .IsUnicode(false)
                .HasColumnName("ID_PROYECTO");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");
            entity.Property(e => e.Odt)
                .IsUnicode(false)
                .HasColumnName("ODT");
            entity.Property(e => e.Status)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdTempCorreccion>(entity =>
        {
            entity.HasKey(e => e.IdTempCorreccion);

            entity.ToTable("BD_TEMP_CORRECCION");

            entity.Property(e => e.IdTempCorreccion).HasColumnName("ID_TEMP_CORRECCION");
            entity.Property(e => e.DescNegocio)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("DESC_NEGOCIO");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdNegocio).HasColumnName("ID_NEGOCIO");
            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.NoSerieMal)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE_MAL");
            entity.Property(e => e.NoSerieOk)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE_OK");
        });

        modelBuilder.Entity<BdTempServicioCierrePdum>(entity =>
        {
            entity.HasKey(e => e.IdTempServicioCierrePda);

            entity.ToTable("BD_TEMP_SERVICIO_CIERRE_PDA");

            entity.Property(e => e.IdTempServicioCierrePda).HasColumnName("ID_TEMP_SERVICIO_CIERRE_PDA");
            entity.Property(e => e.IdServicio).HasColumnName("ID_SERVICIO");
            entity.Property(e => e.IsCierrePda).HasColumnName("IS_CIERRE_PDA");
        });

        modelBuilder.Entity<BdTemplatesDeploymentMailjet>(entity =>
        {
            entity.HasKey(e => e.IdTemplateDeploymentMailjet).HasName("PK__BD_TEMPL__52CAC36BB03D0E3D");

            entity.ToTable("BD_TEMPLATES_DEPLOYMENT_MAILJET");

            entity.Property(e => e.IdTemplateDeploymentMailjet).HasColumnName("ID_TEMPLATE_DEPLOYMENT_MAILJET");
            entity.Property(e => e.AsuntoEmail)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ASUNTO_EMAIL");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdMailjet).HasColumnName("ID_MAILJET");
            entity.Property(e => e.IdTipoPlantilla).HasColumnName("ID_TIPO_PLANTILLA");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.Nombre)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NOMBRE");
            entity.Property(e => e.NombreArchivo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NOMBRE_ARCHIVO");
            entity.Property(e => e.RutaArchivo)
                .IsUnicode(false)
                .HasColumnName("RUTA_ARCHIVO");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdTemplatesMailjet>(entity =>
        {
            entity.HasKey(e => e.IdTemplateMailjet).HasName("PK__BD_TEMPL__28F194E540060898");

            entity.ToTable("BD_TEMPLATES_MAILJET");

            entity.Property(e => e.IdTemplateMailjet).HasColumnName("ID_TEMPLATE_MAILJET");
            entity.Property(e => e.AsuntoEmail)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ASUNTO_EMAIL");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdMailjet).HasColumnName("ID_MAILJET");
            entity.Property(e => e.IdTipoPlantilla).HasColumnName("ID_TIPO_PLANTILLA");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.Nombre)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NOMBRE");
            entity.Property(e => e.NombreArchivo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NOMBRE_ARCHIVO");
            entity.Property(e => e.RutaArchivo)
                .IsUnicode(false)
                .HasColumnName("RUTA_ARCHIVO");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdTerminale>(entity =>
        {
            entity.HasKey(e => e.IdTerminal).HasName("PK__BD_TERMINALES__403C232B");

            entity.ToTable("BD_TERMINALES");

            entity.HasIndex(e => e.IdTerminal, "PK_BD_TERMINALES")
                .IsUnique()
                .HasFillFactor(80);

            entity.Property(e => e.IdTerminal).HasColumnName("ID_TERMINAL");
            entity.Property(e => e.AppRoute)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("APP_ROUTE");
            entity.Property(e => e.DescTerminal)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_TERMINAL");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");
            entity.Property(e => e.DocRoute)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DOC_ROUTE");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.Version)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("VERSION");
            entity.Property(e => e.WebRoute)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("WEB_ROUTE");
        });

        modelBuilder.Entity<BdTestigo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_TESTIGO");

            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID");
            entity.Property(e => e.Mensaje).HasColumnName("MENSAJE");
            entity.Property(e => e.NoAr)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("NO_AR");
            entity.Property(e => e.Proceso)
                .HasMaxLength(150)
                .IsFixedLength()
                .HasColumnName("PROCESO");
        });

        modelBuilder.Entity<BdTipoPlan>(entity =>
        {
            entity.HasKey(e => e.IdTipoPlan);

            entity.ToTable("BD_TIPO_PLAN");

            entity.Property(e => e.IdTipoPlan).HasColumnName("ID_TIPO_PLAN");
            entity.Property(e => e.DescTipoPlan)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("DESC_TIPO_PLAN");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdTipoPlazaClienteCp>(entity =>
        {
            entity.HasKey(e => e.IdTipoPlazaClienteCp);

            entity.ToTable("BD_TIPO_PLAZA_CLIENTE_CP");

            entity.HasIndex(e => e.Cp, "IX_BD_TIPO_PLAZA_CLIENTE_CP_CP").HasFillFactor(80);

            entity.HasIndex(e => e.IdTipoPlazaCliente, "missing_index_3665_3664");

            entity.Property(e => e.IdTipoPlazaClienteCp).HasColumnName("ID_TIPO_PLAZA_CLIENTE_CP");
            entity.Property(e => e.Cp)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CP");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdTipoPlazaCliente).HasColumnName("ID_TIPO_PLAZA_CLIENTE");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
        });

        modelBuilder.Entity<BdTipoServicioProducto>(entity =>
        {
            entity.HasKey(e => e.IdTipoServicioProducto);

            entity.ToTable("BD_TIPO_SERVICIO_PRODUCTO");

            entity.Property(e => e.IdTipoServicioProducto).HasColumnName("ID_TIPO_SERVICIO_PRODUCTO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");
            entity.Property(e => e.IdTipoCobro).HasColumnName("ID_TIPO_COBRO");
            entity.Property(e => e.IdTipoServicio).HasColumnName("ID_TIPO_SERVICIO");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");

            entity.HasOne(d => d.IdTipoCobroNavigation).WithMany(p => p.BdTipoServicioProductos)
                .HasForeignKey(d => d.IdTipoCobro)
                .HasConstraintName("FK_BD_TIPO_SERVICIO_PRODUCTO_C_TIPO_COBRO");

            entity.HasOne(d => d.IdTipoServicioNavigation).WithMany(p => p.BdTipoServicioProductos)
                .HasForeignKey(d => d.IdTipoServicio)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BD_TIPO_SERVICIO_PRODUCTO_C_TIPO_SERVICIO");
        });

        modelBuilder.Entity<BdTipoUsuariosMenu>(entity =>
        {
            entity.HasKey(e => e.IdTipoUsuariosMenus).HasName("PK__BD_TIPO___4C54092968A42549");

            entity.ToTable("BD_TIPO_USUARIOS_MENUS");

            entity.Property(e => e.IdTipoUsuariosMenus).HasColumnName("ID_TIPO_USUARIOS_MENUS");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdMenu0).HasColumnName("ID_MENU0");
            entity.Property(e => e.IdMenu1).HasColumnName("ID_MENU1");
            entity.Property(e => e.IdTipoUsuario).HasColumnName("ID_TIPO_USUARIO");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Status)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdTiposDeServiciosCosto>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_TIPOS_DE_SERVICIOS_COSTO");

            entity.Property(e => e.IdMensajeriaPrecio).HasColumnName("ID_MENSAJERIA_PRECIO");
            entity.Property(e => e.IdTipoDeServicioCosto)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_TIPO_DE_SERVICIO_COSTO");
            entity.Property(e => e.IdUrgencia).HasColumnName("ID_URGENCIA");
            entity.Property(e => e.Servicio)
                .IsUnicode(false)
                .HasColumnName("SERVICIO");
            entity.Property(e => e.Status)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdTokensSalesforce>(entity =>
        {
            entity.HasKey(e => e.IdTokenSalesforce).HasName("PK__BdTokens__BDED1DF8AAA6D971");

            entity.ToTable("BdTokensSalesforce");

            entity.Property(e => e.FecAlta).HasColumnType("datetime");
            entity.Property(e => e.Token)
                .HasMaxLength(4000)
                .IsUnicode(false);
        });

        modelBuilder.Entity<BdTpvsAltum>(entity =>
        {
            entity.HasKey(e => e.IdTpvAlta);

            entity.ToTable("BD_TPVS_ALTA");

            entity.HasIndex(e => new { e.IsReingreso, e.IsProcesada, e.IsCambioModelo }, "IX_MI_BD_TPVS_ALTA_27383_27382");

            entity.HasIndex(e => e.NoSerie, "IX_MI_BD_TPVS_ALTA_27385_27384");

            entity.HasIndex(e => new { e.IsReingreso, e.IsProcesada, e.IsCambioModelo }, "IX_MI_BD_TPVS_ALTA_27387_27386");

            entity.HasIndex(e => new { e.IsAsignada, e.IsProcesada }, "IX_MI_BD_TPVS_ALTA_27389_27388");

            entity.HasIndex(e => new { e.IsAsignada, e.IsProcesada }, "IX_MI_BD_TPVS_ALTA_27391_27390");

            entity.HasIndex(e => new { e.IsAsignada, e.IsProcesada }, "IX_MI_BD_TPVS_ALTA_27398_27397");

            entity.HasIndex(e => e.IdSolicitudRecoleccion, "IX_MI_BD_TPVS_ALTA_27400_27399");

            entity.HasIndex(e => new { e.IsAsignada, e.IsProcesada }, "IX_MI_BD_TPVS_ALTA_27419_27418");

            entity.Property(e => e.IdTpvAlta).HasColumnName("ID_TPV_ALTA");
            entity.Property(e => e.ExistsModelo).HasColumnName("EXISTS_MODELO");
            entity.Property(e => e.ExistsSim).HasColumnName("EXISTS_SIM");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdAplicativo).HasColumnName("ID_APLICATIVO");
            entity.Property(e => e.IdCarga).HasColumnName("ID_CARGA");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdConectividad).HasColumnName("ID_CONECTIVIDAD");
            entity.Property(e => e.IdModelo).HasColumnName("ID_MODELO");
            entity.Property(e => e.IdModeloAnt).HasColumnName("ID_MODELO_ANT");
            entity.Property(e => e.IdOrdenCompra).HasColumnName("ID_ORDEN_COMPRA");
            entity.Property(e => e.IdResponsable).HasColumnName("ID_RESPONSABLE");
            entity.Property(e => e.IdSolicitudRecoleccion).HasColumnName("ID_SOLICITUD_RECOLECCION");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.IsAsignada).HasColumnName("IS_ASIGNADA");
            entity.Property(e => e.IsCambioModelo).HasColumnName("IS_CAMBIO_MODELO");
            entity.Property(e => e.IsErrorSerie).HasColumnName("IS_ERROR_SERIE");
            entity.Property(e => e.IsGprs).HasColumnName("IS_GPRS");
            entity.Property(e => e.IsNueva).HasColumnName("IS_NUEVA");
            entity.Property(e => e.IsNullAplicativo).HasColumnName("IS_NULL_APLICATIVO");
            entity.Property(e => e.IsNullCliente).HasColumnName("IS_NULL_CLIENTE");
            entity.Property(e => e.IsNullConectividad).HasColumnName("IS_NULL_CONECTIVIDAD");
            entity.Property(e => e.IsNullNoImei).HasColumnName("IS_NULL_NO_IMEI");
            entity.Property(e => e.IsNullNoSerie).HasColumnName("IS_NULL_NO_SERIE");
            entity.Property(e => e.IsNullNoSim).HasColumnName("IS_NULL_NO_SIM");
            entity.Property(e => e.IsNullNueva).HasColumnName("IS_NULL_NUEVA");
            entity.Property(e => e.IsProcesada).HasColumnName("IS_PROCESADA");
            entity.Property(e => e.IsReingreso).HasColumnName("IS_REINGRESO");
            entity.Property(e => e.MsgErrorSerie)
                .IsUnicode(false)
                .HasColumnName("MSG_ERROR_SERIE");
            entity.Property(e => e.NoImei)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_IMEI");
            entity.Property(e => e.NoInventario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_INVENTARIO");
            entity.Property(e => e.NoSerie)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");
            entity.Property(e => e.NoSim)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SIM");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdTrackingLog>(entity =>
        {
            entity.HasKey(e => e.IdTrackingLog).HasName("PK__BD_TRACK__8A2729830646EBDF");

            entity.ToTable("BD_TRACKING_LOG");

            entity.Property(e => e.IdTrackingLog).HasColumnName("ID_TRACKING_LOG");
            entity.Property(e => e.Afiliacion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("AFILIACION");
            entity.Property(e => e.FecVisita)
                .HasColumnType("datetime")
                .HasColumnName("FEC_VISITA");
            entity.Property(e => e.IdTipoTracking).HasColumnName("ID_TIPO_TRACKING");
            entity.Property(e => e.Odt)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ODT");
        });

        modelBuilder.Entity<BdTransaccione>(entity =>
        {
            entity.HasKey(e => e.IdTransacciones);

            entity.ToTable("BD_TRANSACCIONES");

            entity.HasIndex(e => new { e.Month, e.Year, e.NoFiliacion }, "IX_BD_TRANSACCIONES");

            entity.HasIndex(e => new { e.Month, e.Year, e.NoFiliacion }, "IX_BD_TRANSACCIONES_1").IsUnique();

            entity.HasIndex(e => e.NoFiliacion, "IX_BD_TRANSACCIONES_2");

            entity.Property(e => e.IdTransacciones).HasColumnName("ID_TRANSACCIONES");
            entity.Property(e => e.ApprovedcCount).HasColumnName("APPROVEDC_COUNT");
            entity.Property(e => e.Declinedcount).HasColumnName("DECLINEDCOUNT");
            entity.Property(e => e.Month).HasColumnName("MONTH");
            entity.Property(e => e.NoFiliacion).HasColumnName("NO_FILIACION");
            entity.Property(e => e.Year).HasColumnName("YEAR");
        });

        modelBuilder.Entity<BdTransaccionesPaso>(entity =>
        {
            entity.HasKey(e => e.IdTransaccionesPaso);

            entity.ToTable("BD_TRANSACCIONES_PASO");

            entity.HasIndex(e => new { e.IdCarga, e.IsError }, "missing_index_645850_645849");

            entity.HasIndex(e => new { e.IdCarga, e.IsError }, "missing_index_653860_653859");

            entity.Property(e => e.IdTransaccionesPaso).HasColumnName("ID_TRANSACCIONES_PASO");
            entity.Property(e => e.ApprovedcCount).HasColumnName("APPROVEDC_COUNT");
            entity.Property(e => e.Declinedcount).HasColumnName("DECLINEDCOUNT");
            entity.Property(e => e.DescError)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_ERROR");
            entity.Property(e => e.IdCarga).HasColumnName("ID_CARGA");
            entity.Property(e => e.IsError).HasColumnName("IS_ERROR");
            entity.Property(e => e.Month).HasColumnName("MONTH");
            entity.Property(e => e.NoAfiliacion).HasColumnName("NO_AFILIACION");
            entity.Property(e => e.Year).HasColumnName("YEAR");
        });

        modelBuilder.Entity<BdTransaccionesRespaldo>(entity =>
        {
            entity.HasKey(e => e.IdTransaccionRespaldo).HasName("PK__BD_TRANS__9723621E46E1D854");

            entity.ToTable("BD_TRANSACCIONES_RESPALDO");

            entity.Property(e => e.IdTransaccionRespaldo).HasColumnName("ID_TRANSACCION_RESPALDO");
            entity.Property(e => e.ApprovedcCount).HasColumnName("APPROVEDC_COUNT");
            entity.Property(e => e.Declinedcount).HasColumnName("DECLINEDCOUNT");
            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.Month).HasColumnName("MONTH");
            entity.Property(e => e.NoAfiliacion).HasColumnName("NO_AFILIACION");
            entity.Property(e => e.Year).HasColumnName("YEAR");
        });

        modelBuilder.Entity<BdTransferencia>(entity =>
        {
            entity.HasKey(e => e.IdTransferencia).HasName("PK__BD_TRANS__20A04596E971E01A");

            entity.ToTable("BD_TRANSFERENCIAS");

            entity.Property(e => e.IdTransferencia).HasColumnName("ID_TRANSFERENCIA");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdStatusTransferencia).HasColumnName("ID_STATUS_TRANSFERENCIA");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.Status)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.SystemFilename)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("SYSTEM_FILENAME");
            entity.Property(e => e.UserFilename)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("USER_FILENAME");
        });

        modelBuilder.Entity<BdTransferenciasPaso>(entity =>
        {
            entity.HasKey(e => e.IdTransferenciaPaso).HasName("PK__BD_TRANS__BEB61D8067319EBB");

            entity.ToTable("BD_TRANSFERENCIAS_PASO");

            entity.HasIndex(e => e.IdTransferencia, "missing_index_278_277");

            entity.Property(e => e.IdTransferenciaPaso).HasColumnName("ID_TRANSFERENCIA_PASO");
            entity.Property(e => e.Error)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ERROR");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdResponsableDestino).HasColumnName("ID_RESPONSABLE_DESTINO");
            entity.Property(e => e.IdResponsableOrigen).HasColumnName("ID_RESPONSABLE_ORIGEN");
            entity.Property(e => e.IdTipoResponsableDestino).HasColumnName("ID_TIPO_RESPONSABLE_DESTINO");
            entity.Property(e => e.IdTipoResponsableOrigen).HasColumnName("ID_TIPO_RESPONSABLE_ORIGEN");
            entity.Property(e => e.IdTransferencia).HasColumnName("ID_TRANSFERENCIA");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.IsProcesada).HasColumnName("IS_PROCESADA");
            entity.Property(e => e.NoSerie)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");
        });

        modelBuilder.Entity<BdTransferenciasUnidad>(entity =>
        {
            entity.HasKey(e => e.IdTransferenciaUnidad).HasName("PK__BD_TRANS__27E50C086838334E");

            entity.ToTable("BD_TRANSFERENCIAS_UNIDAD");

            entity.HasIndex(e => e.IdUnidad, "IX_BD_TRANSFERENCIAS_UNIDAD_ID_UNIDAD");

            entity.HasIndex(e => new { e.IsRecibido, e.IdTipoResponsableDestino }, "missing_index_280_279");

            entity.HasIndex(e => new { e.IdTransferencia, e.IdUnidad }, "missing_index_3682_3681");

            entity.Property(e => e.IdTransferenciaUnidad).HasColumnName("ID_TRANSFERENCIA_UNIDAD");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.FecRecibido)
                .HasColumnType("datetime")
                .HasColumnName("FEC_RECIBIDO");
            entity.Property(e => e.IdResponsableDestino).HasColumnName("ID_RESPONSABLE_DESTINO");
            entity.Property(e => e.IdResponsableOrigen).HasColumnName("ID_RESPONSABLE_ORIGEN");
            entity.Property(e => e.IdTipoResponsableDestino).HasColumnName("ID_TIPO_RESPONSABLE_DESTINO");
            entity.Property(e => e.IdTipoResponsableOrigen).HasColumnName("ID_TIPO_RESPONSABLE_ORIGEN");
            entity.Property(e => e.IdTransferencia).HasColumnName("ID_TRANSFERENCIA");
            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");
            entity.Property(e => e.IsRecibido).HasColumnName("IS_RECIBIDO");
        });

        modelBuilder.Entity<BdUnidadAccesorio>(entity =>
        {
            entity.HasKey(e => e.IdUnidadAccesorio);

            entity.ToTable("BD_UNIDAD_ACCESORIO");

            entity.HasIndex(e => e.IdUnidad, "IX_BD_UNIDAD_ACCESORIO_ID_UNIDAD").HasFillFactor(80);

            entity.Property(e => e.IdUnidadAccesorio).HasColumnName("ID_UNIDAD_ACCESORIO");
            entity.Property(e => e.Costo)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("COSTO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.FecStatus)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_STATUS");
            entity.Property(e => e.IdAccesorio).HasColumnName("ID_ACCESORIO");
            entity.Property(e => e.IdStatusAccesorio).HasColumnName("ID_STATUS_ACCESORIO");
            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.IdUsuarioStatus).HasColumnName("ID_USUARIO_STATUS");
            entity.Property(e => e.NoSerie)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");

            entity.HasOne(d => d.IdAccesorioNavigation).WithMany(p => p.BdUnidadAccesorios)
                .HasForeignKey(d => d.IdAccesorio)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BD_UNIDAD_ACCESORIO_C_ACCESORIOS");

            entity.HasOne(d => d.IdStatusAccesorioNavigation).WithMany(p => p.BdUnidadAccesorios)
                .HasForeignKey(d => d.IdStatusAccesorio)
                .HasConstraintName("FK_BD_UNIDAD_ACCESORIO_C_STATUS_ACCESORIO");

            entity.HasOne(d => d.IdUnidadNavigation).WithMany(p => p.BdUnidadAccesorios)
                .HasForeignKey(d => d.IdUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BD_UNIDAD_ACCESORIO_BD_UNIDADES");
        });

        modelBuilder.Entity<BdUnidade>(entity =>
        {
            entity.HasKey(e => e.IdUnidad);

            entity.ToTable("BD_UNIDADES", tb => tb.HasTrigger("TR_REGLAS_BD_UNIDADES"));

            entity.HasIndex(e => new { e.IdCliente, e.IdMarca, e.IdTipoResponsable, e.IdResponsable, e.IsDaniada }, "IX_BD_UNIDADES_ID_CLIENTE, ID_MARCA, ID_TIPO_RESPONSABLE, ID_RESPONSABLE, IS_DANIADA");

            entity.HasIndex(e => new { e.IdCliente, e.Status }, "IX_BD_UNIDADES_ID_CLIENTE, STATUS");

            entity.HasIndex(e => new { e.IdMarca, e.IdModelo, e.IdResponsable, e.IdStatusUnidad }, "IX_BD_UNIDADES_ID_MARCA, ID_MODELO, ID_RESPONSABLE, ID_STATUS_UNIDAD").HasFillFactor(80);

            entity.HasIndex(e => e.IdModelo, "IX_BD_UNIDADES_ID_MODELO").HasFillFactor(80);

            entity.HasIndex(e => e.IdParent, "IX_BD_UNIDADES_ID_PARENT").HasFillFactor(80);

            entity.HasIndex(e => e.IdProducto, "IX_BD_UNIDADES_ID_PRODUCTO").HasFillFactor(80);

            entity.HasIndex(e => e.IdResponsable, "IX_BD_UNIDADES_ID_RESPONSABLE").HasFillFactor(80);

            entity.HasIndex(e => new { e.IdSolicitudRecoleccion, e.Status }, "IX_BD_UNIDADES_ID_SOLICITUD_RECOLECCION, STATUS");

            entity.HasIndex(e => e.IdStatusUnidad, "IX_BD_UNIDADES_ID_STATUS_UNIDAD").HasFillFactor(80);

            entity.HasIndex(e => new { e.IdStatusUnidad, e.Status }, "IX_BD_UNIDADES_ID_STATUS_UNIDAD, STATUS").HasFillFactor(80);

            entity.HasIndex(e => e.IdTipoResponsable, "IX_BD_UNIDADES_ID_TIPO_RESPONSABLE").HasFillFactor(80);

            entity.HasIndex(e => new { e.IdTipoResponsable, e.IdResponsable, e.IdStatusUnidad }, "IX_BD_UNIDADES_ID_TIPO_RESPONSABLE, ID_RESPONSABLE, ID_STATUS_UNIDAD").HasFillFactor(80);

            entity.HasIndex(e => new { e.IdTipoResponsable, e.IdResponsable, e.IdStatusUnidad, e.Status }, "IX_BD_UNIDADES_ID_TIPO_RESPONSABLE_ID_RESPONSABLE_ID_STATUS_UNIDAD_STATUS");

            entity.HasIndex(e => e.NoInventario, "IX_BD_UNIDADES_NO_INVENTARIO").HasFillFactor(80);

            entity.HasIndex(e => e.NoSerie, "IX_BD_UNIDADES_NO_SERIE")
                .IsUnique()
                .HasFillFactor(80);

            entity.HasIndex(e => e.Status, "IX_BD_UNIDADES_STATUS").HasFillFactor(80);

            entity.HasIndex(e => new { e.IdTipoResponsable, e.IdResponsable, e.IdStatusUnidad, e.Status }, "IX_MI_BD_UNIDADES_14_13");

            entity.HasIndex(e => new { e.IdTipoResponsable, e.IdResponsable, e.IdStatusUnidad, e.Status }, "IX_MI_BD_UNIDADES_17_16");

            entity.HasIndex(e => new { e.IdCliente, e.IdMarca, e.IdTipoResponsable, e.IsDaniada, e.Status, e.IdResponsable, e.IdStatusUnidad }, "IX_MI_BD_UNIDADES_187660_187659");

            entity.HasIndex(e => e.IdMarca, "IX_MI_BD_UNIDADES_1945_1944");

            entity.HasIndex(e => new { e.IdMarca, e.IdTipoResponsable, e.IdResponsable, e.IsDaniada, e.Status, e.IdStatusUnidad }, "IX_MI_BD_UNIDADES_22355_22354");

            entity.HasIndex(e => new { e.IdCliente, e.IdTipoResponsable, e.IdResponsable, e.IsDaniada, e.IdStatusUnidad }, "IX_MI_BD_UNIDADES_30715_30714");

            entity.HasIndex(e => e.IdItemsSolicitudAlmacen, "IX_MI_BD_UNIDADES_3420_3419");

            entity.HasIndex(e => new { e.IdCliente, e.IdMarca, e.IdModelo, e.IdTipoResponsable, e.IsDaniada, e.IdStatusUnidad, e.IdResponsable }, "IX_MI_BD_UNIDADES_3434_3433");

            entity.HasIndex(e => e.NoSim, "IX_MI_BD_UNIDADES_36101_36100");

            entity.HasIndex(e => new { e.IdTipoResponsable, e.Status }, "IX_MI_BD_UNIDADES_413_412");

            entity.HasIndex(e => e.Status, "IX_MI_BD_UNIDADES_415_414");

            entity.HasIndex(e => new { e.IdCliente, e.IdTipoResponsable, e.IdResponsable, e.IsRetiro, e.IdStatusUnidad, e.Status }, "IX_MI_BD_UNIDADES_4166_4165");

            entity.HasIndex(e => new { e.IdCliente, e.IdTipoResponsable, e.IdResponsable, e.IsRetiro, e.IdStatusUnidad, e.Status }, "IX_MI_BD_UNIDADES_4171_4170");

            entity.HasIndex(e => new { e.IdProducto, e.IsRetiro, e.Status }, "IX_MI_BD_UNIDADES_64246_64245");

            entity.HasIndex(e => new { e.IsRetiro, e.Status }, "IX_MI_BD_UNIDADES_64248_64247");

            entity.HasIndex(e => new { e.IdTipoResponsable, e.IdResponsable, e.IdStatusUnidad, e.Status }, "IX_MI_BD_UNIDADES_6_5");

            entity.HasIndex(e => new { e.IdCliente, e.Status }, "IX_MI_BD_UNIDADES_81_80");

            entity.HasIndex(e => new { e.IdCliente, e.IdMarca, e.IdModelo, e.IdTipoResponsable, e.IsDaniada, e.Status, e.IdResponsable, e.IdStatusUnidad }, "IX_MI_BD_UNIDADES_82332_82331");

            entity.HasIndex(e => e.Status, "IX_MI_BD_UNIDADES_83_82");

            entity.HasIndex(e => new { e.IdTipoResponsable, e.IdResponsable }, "IX_MI_BD_UNIDADES_8869_8868");

            entity.HasIndex(e => new { e.IdCliente, e.IdTipoResponsable, e.IdResponsable, e.Status, e.IdStatusUnidad }, "missing_index_1097_1096");

            entity.HasIndex(e => new { e.IdCliente, e.IdTipoResponsable, e.IdResponsable, e.Status, e.IdStatusUnidad }, "missing_index_1099_1098");

            entity.HasIndex(e => new { e.IdCliente, e.IdSim, e.Status, e.IdTipoResponsable }, "missing_index_118499_118498");

            entity.HasIndex(e => new { e.IdCliente, e.IdSim, e.Status, e.IdTipoResponsable }, "missing_index_118502_118501");

            entity.HasIndex(e => new { e.IdCliente, e.IdSim, e.Status, e.IdTipoResponsable }, "missing_index_118506_118505");

            entity.HasIndex(e => new { e.IdCliente, e.IdSim, e.Status, e.IdConectividad, e.IdTipoResponsable }, "missing_index_13281_13280");

            entity.HasIndex(e => new { e.IdCliente, e.IdSim, e.Status, e.IdConectividad, e.IdTipoResponsable }, "missing_index_13286_13285");

            entity.HasIndex(e => new { e.IdCliente, e.IdProducto, e.IdSim, e.Status, e.IdTipoResponsable }, "missing_index_137602_137601");

            entity.HasIndex(e => new { e.IdStatusUnidad, e.Status }, "missing_index_1539_1538");

            entity.HasIndex(e => e.IdOrdenCompra, "missing_index_200171_200170");

            entity.HasIndex(e => new { e.IdTipoResponsable, e.IdStatusUnidad, e.Status }, "missing_index_2282_2281");

            entity.HasIndex(e => new { e.IdSim, e.IdTipoResponsable }, "missing_index_39390_39389");

            entity.HasIndex(e => new { e.IdCliente, e.Status, e.IdAplicativo, e.IdConectividad, e.IdTipoResponsable }, "missing_index_3944_3943");

            entity.HasIndex(e => new { e.IdCliente, e.IdSim, e.Status, e.IdTipoResponsable }, "missing_index_47726_47725");

            entity.HasIndex(e => new { e.IdCliente, e.Status, e.IdTipoResponsable }, "missing_index_75902_75901");

            entity.HasIndex(e => e.IdUnidad, "missing_index_ID_UNIDAD");

            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");
            entity.Property(e => e.Caja)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("CAJA");
            entity.Property(e => e.Comentarios)
                .IsUnicode(false)
                .HasColumnName("COMENTARIOS");
            entity.Property(e => e.Costo)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("COSTO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.FecInicio)
                .HasColumnType("datetime")
                .HasColumnName("FEC_INICIO");
            entity.Property(e => e.FechaVencimientoKernel)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_VENCIMIENTO_KERNEL");
            entity.Property(e => e.FolioTelmex)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("FOLIO_TELMEX");
            entity.Property(e => e.IdAplicativo).HasColumnName("ID_APLICATIVO");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdConectividad).HasColumnName("ID_CONECTIVIDAD");
            entity.Property(e => e.IdFabricante).HasColumnName("ID_FABRICANTE");
            entity.Property(e => e.IdItemsSolicitudAlmacen).HasColumnName("ID_ITEMS_SOLICITUD_ALMACEN");
            entity.Property(e => e.IdLlave).HasColumnName("ID_LLAVE");
            entity.Property(e => e.IdMarca).HasColumnName("ID_MARCA");
            entity.Property(e => e.IdModelo).HasColumnName("ID_MODELO");
            entity.Property(e => e.IdMoneda).HasColumnName("ID_MONEDA");
            entity.Property(e => e.IdNivelDiagnostico).HasColumnName("ID_NIVEL_DIAGNOSTICO");
            entity.Property(e => e.IdOrdenCompra).HasColumnName("ID_ORDEN_COMPRA");
            entity.Property(e => e.IdParent).HasColumnName("ID_PARENT");
            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");
            entity.Property(e => e.IdResponsable).HasColumnName("ID_RESPONSABLE");
            entity.Property(e => e.IdSim).HasColumnName("ID_SIM");
            entity.Property(e => e.IdSoftware).HasColumnName("ID_SOFTWARE");
            entity.Property(e => e.IdSolicitudRecoleccion).HasColumnName("ID_SOLICITUD_RECOLECCION");
            entity.Property(e => e.IdStatusUnidad).HasColumnName("ID_STATUS_UNIDAD");
            entity.Property(e => e.IdTecnicoEnviadaScrap).HasColumnName("ID_TECNICO_ENVIADA_SCRAP");
            entity.Property(e => e.IdTipoConexion).HasColumnName("ID_TIPO_CONEXION");
            entity.Property(e => e.IdTipoResponsable).HasColumnName("ID_TIPO_RESPONSABLE");
            entity.Property(e => e.IdTipoTerminal).HasColumnName("ID_TIPO_TERMINAL");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.IsDaniada).HasColumnName("IS_DANIADA");
            entity.Property(e => e.IsDato).HasColumnName("IS_DATO");
            entity.Property(e => e.IsDiagnosticada).HasColumnName("IS_DIAGNOSTICADA");
            entity.Property(e => e.IsFacturable).HasColumnName("IS_FACTURABLE");
            entity.Property(e => e.IsGarantia).HasColumnName("IS_GARANTIA");
            entity.Property(e => e.IsInternacional).HasColumnName("IS_INTERNACIONAL");
            entity.Property(e => e.IsNueva).HasColumnName("IS_NUEVA");
            entity.Property(e => e.IsPropiedadCliente).HasColumnName("IS_PROPIEDAD_CLIENTE");
            entity.Property(e => e.IsRetiro).HasColumnName("IS_RETIRO");
            entity.Property(e => e.IsVenta).HasColumnName("IS_VENTA");
            entity.Property(e => e.MotivoEnviadaScrap)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("MOTIVO_ENVIADA_SCRAP");
            entity.Property(e => e.NoEquipo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_EQUIPO");
            entity.Property(e => e.NoImei)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_IMEI");
            entity.Property(e => e.NoInventario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_INVENTARIO");
            entity.Property(e => e.NoSerie)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");
            entity.Property(e => e.NoSim)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SIM");
            entity.Property(e => e.NoTarima)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_TARIMA");
            entity.Property(e => e.OrdenCompra)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ORDEN_COMPRA");
            entity.Property(e => e.PosicionInventario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("POSICION_INVENTARIO");
            entity.Property(e => e.PurchaseOrderNo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("purchase_order_no");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.Version)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("VERSION");
            entity.Property(e => e.VersionKernel)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("VERSION_KERNEL");
            entity.Property(e => e.Vigencia)
                .HasColumnType("datetime")
                .HasColumnName("VIGENCIA");
        });

        modelBuilder.Entity<BdUnidadesAltum>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_UNIDADES_ALTA");

            entity.Property(e => e.Costo)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("COSTO");
            entity.Property(e => e.DuplicadaEnLista).HasColumnName("DUPLICADA_EN_LISTA");
            entity.Property(e => e.FecAlta)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdCarrier).HasColumnName("ID_CARRIER");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdMarca).HasColumnName("ID_MARCA");
            entity.Property(e => e.IdModelo).HasColumnName("ID_MODELO");
            entity.Property(e => e.IdMoneda).HasColumnName("ID_MONEDA");
            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");
            entity.Property(e => e.IdResponsable).HasColumnName("ID_RESPONSABLE");
            entity.Property(e => e.IdTipoResponsable).HasColumnName("ID_TIPO_RESPONSABLE");
            entity.Property(e => e.IdUnidadAlta)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_UNIDAD_ALTA");
            entity.Property(e => e.IsDaniada).HasColumnName("IS_DANIADA");
            entity.Property(e => e.IsNueva).HasColumnName("IS_NUEVA");
            entity.Property(e => e.IsProcessed).HasColumnName("IS_PROCESSED");
            entity.Property(e => e.NecesitaCarrier).HasColumnName("NECESITA_CARRIER");
            entity.Property(e => e.NecesitaCostoOIdMoneda).HasColumnName("NECESITA_COSTO_O_ID_MONEDA");
            entity.Property(e => e.NecesitaNoSim).HasColumnName("NECESITA_NO_SIM");
            entity.Property(e => e.NoEquipo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_EQUIPO");
            entity.Property(e => e.NoImei)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_IMEI");
            entity.Property(e => e.NoImeiDuplicado).HasColumnName("NO_IMEI_DUPLICADO");
            entity.Property(e => e.NoInventario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_INVENTARIO");
            entity.Property(e => e.NoSerie)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");
            entity.Property(e => e.NoSim)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SIM");
            entity.Property(e => e.NoSimDuplicado).HasColumnName("NO_SIM_DUPLICADO");
            entity.Property(e => e.NoSimIncorrecto).HasColumnName("NO_SIM_INCORRECTO");
            entity.Property(e => e.PosicionInventario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("POSICION_INVENTARIO");
            entity.Property(e => e.UnidadDuplicada).HasColumnName("UNIDAD_DUPLICADA");
        });

        modelBuilder.Entity<BdUnidadesNoReportada>(entity =>
        {
            entity.HasKey(e => e.IdUnidadNoReportada);

            entity.ToTable("BD_UNIDADES_NO_REPORTADAS");

            entity.Property(e => e.IdUnidadNoReportada).HasColumnName("ID_UNIDAD_NO_REPORTADA");
            entity.Property(e => e.IdAuditoriaReporte).HasColumnName("ID_AUDITORIA_REPORTE");
            entity.Property(e => e.IdStatusSerie).HasColumnName("ID_STATUS_SERIE");
            entity.Property(e => e.NoSerieNoReportado)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE_NO_REPORTADO");

            entity.HasOne(d => d.IdAuditoriaReporteNavigation).WithMany(p => p.BdUnidadesNoReportada)
                .HasForeignKey(d => d.IdAuditoriaReporte)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BD_UNIDADES_NO_REPORTADAS_BD_AUDITORIA_REPORTE");
        });

        modelBuilder.Entity<BdUnidadesPasoTest>(entity =>
        {
            entity.HasKey(e => e.IdUnidadPasoTest).HasName("PK__BD_UNIDA__33C276C900238AC8");

            entity.ToTable("BD_UNIDADES_PASO_TEST");

            entity.Property(e => e.IdUnidadPasoTest).HasColumnName("ID_UNIDAD_PASO_TEST");
            entity.Property(e => e.IdAplicativo).HasColumnName("ID_APLICATIVO");
            entity.Property(e => e.IdConectividad).HasColumnName("ID_CONECTIVIDAD");
            entity.Property(e => e.IdModelo).HasColumnName("ID_MODELO");
            entity.Property(e => e.IdResponsable).HasColumnName("ID_RESPONSABLE");
            entity.Property(e => e.IdTipoResponsable).HasColumnName("ID_TIPO_RESPONSABLE");
            entity.Property(e => e.NoSerie)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");
        });

        modelBuilder.Entity<BdUnidadesPorRecibirAlmacen>(entity =>
        {
            entity.HasKey(e => e.IdRecepcion);

            entity.ToTable("BD_UNIDADES_POR_RECIBIR_ALMACEN");

            entity.HasIndex(e => new { e.IdJefeAlmacen, e.IsProcesada }, "IX_BD_UNIDADES_POR_RECIBIR_ALMACEN_ID_JEFE_ALMACEN, IS_PROCESADA");

            entity.HasIndex(e => new { e.NoSerie, e.IdJefeAlmacen }, "IX_MI_BD_UNIDADES_POR_RECIBIR_ALMACEN_7196_7195");

            entity.Property(e => e.IdRecepcion).HasColumnName("ID_RECEPCION");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdJefeAlmacen).HasColumnName("ID_JEFE_ALMACEN");
            entity.Property(e => e.IsProcesada).HasColumnName("IS_PROCESADA");
            entity.Property(e => e.NoSerie)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");
            entity.Property(e => e.PosicionInventario)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("POSICION_INVENTARIO");
        });

        modelBuilder.Entity<BdUnidadesPorRecibirAlmacen2>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_UNIDADES_POR_RECIBIR_ALMACEN2");

            entity.HasIndex(e => new { e.IsProcesada, e.NoSerie }, "IX_MI_BD_UNIDADES_POR_RECIBIR_ALMACEN2_11003_11002");

            entity.HasIndex(e => e.NoSerie, "IX_MI_BD_UNIDADES_POR_RECIBIR_ALMACEN2_209_208");

            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdRecepcion)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_RECEPCION");
            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.IsProcesada).HasColumnName("IS_PROCESADA");
            entity.Property(e => e.NoSerie)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");
            entity.Property(e => e.Posicion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("POSICION");
        });

        modelBuilder.Entity<BdUnidadesProcesadasAlmacen>(entity =>
        {
            entity.HasKey(e => e.IdUnidadProcesadaAlmacen).HasName("PK__BD_UNIDA__8006DB168CAAACE5");

            entity.ToTable("BD_UNIDADES_PROCESADAS_ALMACEN");

            entity.Property(e => e.IdUnidadProcesadaAlmacen).HasColumnName("ID_UNIDAD_PROCESADA_ALMACEN");
            entity.Property(e => e.IdCarga).HasColumnName("ID_CARGA");
            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.NoSerie)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");
            entity.Property(e => e.Status)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.Success)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("SUCCESS");
        });

        modelBuilder.Entity<BdUnidadesRefaccionesAlmacen>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_UNIDADES_REFACCIONES_ALMACEN");

            entity.Property(e => e.Costo)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("COSTO");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdLlave).HasColumnName("ID_LLAVE");
            entity.Property(e => e.IdMarca).HasColumnName("ID_MARCA");
            entity.Property(e => e.IdModelo).HasColumnName("ID_MODELO");
            entity.Property(e => e.IdMoneda).HasColumnName("ID_MONEDA");
            entity.Property(e => e.IdParent).HasColumnName("ID_PARENT");
            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");
            entity.Property(e => e.IdResponsable).HasColumnName("ID_RESPONSABLE");
            entity.Property(e => e.IdSim).HasColumnName("ID_SIM");
            entity.Property(e => e.IdSoftware).HasColumnName("ID_SOFTWARE");
            entity.Property(e => e.IdSolicitudRecoleccion).HasColumnName("ID_SOLICITUD_RECOLECCION");
            entity.Property(e => e.IdStatusUnidad).HasColumnName("ID_STATUS_UNIDAD");
            entity.Property(e => e.IdTipoResponsable).HasColumnName("ID_TIPO_RESPONSABLE");
            entity.Property(e => e.IdUnidadRefaccionAlta)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_UNIDAD_REFACCION_ALTA");
            entity.Property(e => e.IsDaniada).HasColumnName("IS_DANIADA");
            entity.Property(e => e.IsDatoNulo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("IS_DATO_NULO");
            entity.Property(e => e.IsJefeAlmacen).HasColumnName("IS_JEFE_ALMACEN");
            entity.Property(e => e.IsListaNoSerieDuplicada).HasColumnName("IS_LISTA_NO_SERIE_DUPLICADA");
            entity.Property(e => e.IsModeloMarca).HasColumnName("IS_MODELO_MARCA");
            entity.Property(e => e.IsNoSerieDuplicada).HasColumnName("IS_NO_SERIE_DUPLICADA");
            entity.Property(e => e.IsNueva).HasColumnName("IS_NUEVA");
            entity.Property(e => e.IsOrdenCompra).HasColumnName("IS_ORDEN_COMPRA");
            entity.Property(e => e.IsProcesada).HasColumnName("IS_PROCESADA");
            entity.Property(e => e.IsPropiedadCliente).HasColumnName("IS_PROPIEDAD_CLIENTE");
            entity.Property(e => e.IsRetiro).HasColumnName("IS_RETIRO");
            entity.Property(e => e.IsTipoMoneda).HasColumnName("IS_TIPO_MONEDA");
            entity.Property(e => e.NecesitaCostoOIdMoneda).HasColumnName("NECESITA_COSTO_O_ID_MONEDA");
            entity.Property(e => e.NoEquipo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_EQUIPO");
            entity.Property(e => e.NoImei)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_IMEI");
            entity.Property(e => e.NoInventario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_INVENTARIO");
            entity.Property(e => e.NoSerie)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");
            entity.Property(e => e.NoSim)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SIM");
            entity.Property(e => e.OrdenCompra)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ORDEN_COMPRA");
            entity.Property(e => e.PosicionInventario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("POSICION_INVENTARIO");
        });

        modelBuilder.Entity<BdUnidadesRefaccionesAltum>(entity =>
        {
            entity.HasKey(e => e.IdUnidadRefaccionAlta).HasName("PK_BD_REFACCIONES_ALTA");

            entity.ToTable("BD_UNIDADES_REFACCIONES_ALTA");

            entity.Property(e => e.IdUnidadRefaccionAlta).HasColumnName("ID_UNIDAD_REFACCION_ALTA");
            entity.Property(e => e.Costo)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("COSTO");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdLlave).HasColumnName("ID_LLAVE");
            entity.Property(e => e.IdMarca).HasColumnName("ID_MARCA");
            entity.Property(e => e.IdModelo).HasColumnName("ID_MODELO");
            entity.Property(e => e.IdMoneda).HasColumnName("ID_MONEDA");
            entity.Property(e => e.IdParent).HasColumnName("ID_PARENT");
            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");
            entity.Property(e => e.IdResponsable).HasColumnName("ID_RESPONSABLE");
            entity.Property(e => e.IdSim).HasColumnName("ID_SIM");
            entity.Property(e => e.IdSoftware).HasColumnName("ID_SOFTWARE");
            entity.Property(e => e.IdSolicitudRecoleccion).HasColumnName("ID_SOLICITUD_RECOLECCION");
            entity.Property(e => e.IdStatusUnidad).HasColumnName("ID_STATUS_UNIDAD");
            entity.Property(e => e.IdTipoResponsable).HasColumnName("ID_TIPO_RESPONSABLE");
            entity.Property(e => e.IsDaniada).HasColumnName("IS_DANIADA");
            entity.Property(e => e.IsDatoNulo)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("IS_DATO_NULO");
            entity.Property(e => e.IsListaNoSerieDuplicada).HasColumnName("IS_LISTA_NO_SERIE_DUPLICADA");
            entity.Property(e => e.IsNoSerieDuplicada).HasColumnName("IS_NO_SERIE_DUPLICADA");
            entity.Property(e => e.IsNueva).HasColumnName("IS_NUEVA");
            entity.Property(e => e.IsProcesada).HasColumnName("IS_PROCESADA");
            entity.Property(e => e.IsPropiedadCliente).HasColumnName("IS_PROPIEDAD_CLIENTE");
            entity.Property(e => e.IsRetiro).HasColumnName("IS_RETIRO");
            entity.Property(e => e.NecesitaCostoOIdMoneda).HasColumnName("NECESITA_COSTO_O_ID_MONEDA");
            entity.Property(e => e.NoEquipo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_EQUIPO");
            entity.Property(e => e.NoImei)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_IMEI");
            entity.Property(e => e.NoInventario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_INVENTARIO");
            entity.Property(e => e.NoSerie)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");
            entity.Property(e => e.NoSim)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SIM");
            entity.Property(e => e.PosicionInventario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("POSICION_INVENTARIO");
        });

        modelBuilder.Entity<BdUnidadesReportada>(entity =>
        {
            entity.HasKey(e => e.IdUnidadReportada);

            entity.ToTable("BD_UNIDADES_REPORTADAS");

            entity.Property(e => e.IdUnidadReportada).HasColumnName("ID_UNIDAD_REPORTADA");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");
            entity.Property(e => e.DestinoEnvio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESTINO_ENVIO");
            entity.Property(e => e.Existe).HasColumnName("EXISTE");
            entity.Property(e => e.FecEnvio)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ENVIO");
            entity.Property(e => e.FecUltimoStatus)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ULTIMO_STATUS");
            entity.Property(e => e.Guia)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("GUIA");
            entity.Property(e => e.IdAuditoriaReporte).HasColumnName("ID_AUDITORIA_REPORTE");
            entity.Property(e => e.IdEnvio).HasColumnName("ID_ENVIO");
            entity.Property(e => e.IdStatusSerie).HasColumnName("ID_STATUS_SERIE");
            entity.Property(e => e.IsDuplicada).HasColumnName("IS_DUPLICADA");
            entity.Property(e => e.NoDiasTransito).HasColumnName("NO_DIAS_TRANSITO");
            entity.Property(e => e.NoSerieReportado)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE_REPORTADO");
            entity.Property(e => e.Pertenece).HasColumnName("PERTENECE");
            entity.Property(e => e.Responsable)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("RESPONSABLE");

            entity.HasOne(d => d.IdAuditoriaReporteNavigation).WithMany(p => p.BdUnidadesReportada)
                .HasForeignKey(d => d.IdAuditoriaReporte)
                .HasConstraintName("FK_BD_UNIDADES_REPORTADAS_BD_UNIDADES_REPORTADAS");
        });

        modelBuilder.Entity<BdUnidadesTemp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_UNIDADES_TEMP");

            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdLlave).HasColumnName("ID_LLAVE");
            entity.Property(e => e.IdMarca).HasColumnName("ID_MARCA");
            entity.Property(e => e.IdModelo).HasColumnName("ID_MODELO");
            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");
            entity.Property(e => e.IdResponsable).HasColumnName("ID_RESPONSABLE");
            entity.Property(e => e.IdSim).HasColumnName("ID_SIM");
            entity.Property(e => e.IdSoftware).HasColumnName("ID_SOFTWARE");
            entity.Property(e => e.IdSolicitudRecoleccion).HasColumnName("ID_SOLICITUD_RECOLECCION");
            entity.Property(e => e.IdStatusUnidad).HasColumnName("ID_STATUS_UNIDAD");
            entity.Property(e => e.IdTipoResponsable).HasColumnName("ID_TIPO_RESPONSABLE");
            entity.Property(e => e.IdUnidad)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_UNIDAD");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.IsNueva).HasColumnName("IS_NUEVA");
            entity.Property(e => e.IsRetiro).HasColumnName("IS_RETIRO");
            entity.Property(e => e.NoEquipo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_EQUIPO");
            entity.Property(e => e.NoImei)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_IMEI");
            entity.Property(e => e.NoInventario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_INVENTARIO");
            entity.Property(e => e.NoSerie)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");
            entity.Property(e => e.NoSim)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SIM");
            entity.Property(e => e.PosicionInventario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("POSICION_INVENTARIO");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdUniversoSim>(entity =>
        {
            entity.HasKey(e => e.IdUniversoSims);

            entity.ToTable("BD_UNIVERSO_SIMS");

            entity.HasIndex(e => e.Sim, "IX_BD_UNIVERSO_SIMS");

            entity.HasIndex(e => new { e.Sim, e.StatusCarga }, "IX_BD_UNIVERSO_SIMS_1");

            entity.HasIndex(e => new { e.Sim, e.EstatusGeneral }, "IX_BD_UNIVERSO_SIMS_2");

            entity.Property(e => e.IdUniversoSims).HasColumnName("ID_UNIVERSO_SIMS");
            entity.Property(e => e.Carrier)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("CARRIER");
            entity.Property(e => e.EstatusGeneral)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("ESTATUS_GENERAL");
            entity.Property(e => e.FechaActual)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("FECHA_ACTUAL");
            entity.Property(e => e.FechaCarga)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_CARGA");
            entity.Property(e => e.IdProceso)
                .HasMaxLength(50)
                .IsFixedLength()
                .HasColumnName("ID_PROCESO");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.Linea)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("LINEA");
            entity.Property(e => e.Observaciones)
                .HasColumnType("text")
                .HasColumnName("OBSERVACIONES");
            entity.Property(e => e.Origen)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("ORIGEN");
            entity.Property(e => e.Sim)
                .HasMaxLength(35)
                .IsFixedLength()
                .HasColumnName("SIM");
            entity.Property(e => e.StatusCarga)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("STATUS_CARGA");
        });

        modelBuilder.Entity<BdUniversoUnidade>(entity =>
        {
            entity.HasKey(e => e.IdUniversoUnidades);

            entity.ToTable("BD_UNIVERSO_UNIDADES");

            entity.Property(e => e.IdUniversoUnidades).HasColumnName("ID_UNIVERSO_UNIDADES");
            entity.Property(e => e.AssetNumber)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("ASSET_NUMBER");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdProceso)
                .HasMaxLength(50)
                .IsFixedLength()
                .HasColumnName("ID_PROCESO");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.MajorCategory)
                .HasMaxLength(15)
                .IsFixedLength()
                .HasColumnName("MAJOR_CATEGORY");
            entity.Property(e => e.MinorCategory)
                .HasMaxLength(30)
                .IsFixedLength()
                .HasColumnName("MINOR_CATEGORY");
            entity.Property(e => e.NoSerie)
                .HasMaxLength(30)
                .IsFixedLength()
                .HasColumnName("NO_SERIE");
            entity.Property(e => e.Observaciones)
                .HasColumnType("text")
                .HasColumnName("OBSERVACIONES");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("STATUS");
            entity.Property(e => e.StatusCarga)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("STATUS_CARGA");
        });

        modelBuilder.Entity<BdUpdateIsContractNegocio>(entity =>
        {
            entity.HasKey(e => e.IdUpdateIsContractNegocios);

            entity.ToTable("BD_UPDATE_IS_CONTRACT_NEGOCIOS");

            entity.Property(e => e.IdUpdateIsContractNegocios).HasColumnName("ID_UPDATE_IS_CONTRACT_NEGOCIOS");
            entity.Property(e => e.IdNegocio).HasColumnName("ID_NEGOCIO");
        });

        modelBuilder.Entity<BdUploadDhl>(entity =>
        {
            entity.HasKey(e => e.IdUploadDhl).HasName("PK__BD_UPLOA__7B20E2120FAE9EDF");

            entity.ToTable("BD_UPLOAD_DHL");

            entity.Property(e => e.IdUploadDhl).HasColumnName("ID_UPLOAD_DHL");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
        });

        modelBuilder.Entity<BdUploadEstafetum>(entity =>
        {
            entity.HasKey(e => e.IdUploadEstafeta).HasName("PK__BD_UPLOA__536D36A397F27C8A");

            entity.ToTable("BD_UPLOAD_ESTAFETA");

            entity.Property(e => e.IdUploadEstafeta).HasColumnName("ID_UPLOAD_ESTAFETA");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
        });

        modelBuilder.Entity<BdUploadedFilesSendSf>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__BdUpload__3214EC07381814A9");

            entity.ToTable("BdUploadedFilesSendSf");

            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.FileNameSystem)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FileNameUser)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<BdUsuarioAlmacen>(entity =>
        {
            entity.HasKey(e => e.IdUsuarioAlmacen);

            entity.ToTable("BD_USUARIO_ALMACEN");

            entity.HasIndex(e => e.IdAlmacen, "IX_BD_USUARIO_ALMACEN_ID_ALMACEN").HasFillFactor(80);

            entity.HasIndex(e => e.IdUsuario, "IX_BD_USUARIO_ALMACEN_ID_USUARIO").HasFillFactor(80);

            entity.Property(e => e.IdUsuarioAlmacen).HasColumnName("ID_USUARIO_ALMACEN");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdAlmacen).HasColumnName("ID_ALMACEN");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
        });

        modelBuilder.Entity<BdUsuarioArchivosVario>(entity =>
        {
            entity.HasKey(e => e.IdUsuarioArchivosVarios);

            entity.ToTable("BD_USUARIO_ARCHIVOS_VARIOS");

            entity.Property(e => e.IdUsuarioArchivosVarios).HasColumnName("ID_USUARIO_ARCHIVOS_VARIOS");
            entity.Property(e => e.FechaAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_ALTA");
            entity.Property(e => e.FechaStatus)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_STATUS");
            entity.Property(e => e.IdTipoArchivo).HasColumnName("ID_TIPO_ARCHIVO");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.NombreArchivoSistema)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("NOMBRE_ARCHIVO_SISTEMA");
            entity.Property(e => e.NombreArchivoUsuario)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("NOMBRE_ARCHIVO_USUARIO");
            entity.Property(e => e.Ruta)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("RUTA");
            entity.Property(e => e.Status)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdUsuarioCelular>(entity =>
        {
            entity.HasKey(e => e.IdUsuarioCelular);

            entity.ToTable("BD_USUARIO_CELULAR");

            entity.Property(e => e.IdUsuarioCelular).HasColumnName("ID_USUARIO_CELULAR");
            entity.Property(e => e.Celular)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CELULAR");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.FecFinPlan)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_FIN_PLAN");
            entity.Property(e => e.FecIniPlan)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_INI_PLAN");
            entity.Property(e => e.IdModeloCelular).HasColumnName("ID_MODELO_CELULAR");
            entity.Property(e => e.IdTipoPlan).HasColumnName("ID_TIPO_PLAN");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Imei)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("IMEI");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdUsuarioCliente>(entity =>
        {
            entity.HasKey(e => e.IdUsuarioCliente);

            entity.ToTable("BD_USUARIO_CLIENTE");

            entity.HasIndex(e => e.IdCliente, "IX_BD_USUARIO_CLIENTE_ID_CLIENTE").HasFillFactor(80);

            entity.HasIndex(e => e.IdUsuario, "IX_BD_USUARIO_CLIENTE_ID_USUARIO").HasFillFactor(80);

            entity.HasIndex(e => e.IdCliente, "IX_MI_BD_USUARIO_CLIENTE_1922_1921");

            entity.Property(e => e.IdUsuarioCliente).HasColumnName("ID_USUARIO_CLIENTE");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
        });

        modelBuilder.Entity<BdUsuarioModuloNotificacione>(entity =>
        {
            entity.HasKey(e => e.IdUsuarioModuloNotificacion).HasName("PK__BD_USUAR__49008BEC1294D4E0");

            entity.ToTable("BD_USUARIO_MODULO_NOTIFICACIONES");

            entity.Property(e => e.IdUsuarioModuloNotificacion).HasColumnName("ID_USUARIO_MODULO_NOTIFICACION");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.FecModificacion)
                .HasColumnType("datetime")
                .HasColumnName("FEC_MODIFICACION");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.IdUsuarioModificacion).HasColumnName("ID_USUARIO_MODIFICACION");
            entity.Property(e => e.IsDeployment).HasColumnName("IS_DEPLOYMENT");
            entity.Property(e => e.IsMarketing).HasColumnName("IS_MARKETING");
            entity.Property(e => e.IsOdt).HasColumnName("IS_ODT");
        });

        modelBuilder.Entity<BdUsuarioProducto>(entity =>
        {
            entity.HasKey(e => e.IdUsuarioProducto);

            entity.ToTable("BD_USUARIO_PRODUCTO");

            entity.HasIndex(e => e.IdProducto, "IX_BD_USUARIO_PRODUCTO_ID_PRODUCTO").HasFillFactor(80);

            entity.HasIndex(e => e.IdUsuario, "IX_BD_USUARIO_PRODUCTO_ID_USUARIO").HasFillFactor(80);

            entity.Property(e => e.IdUsuarioProducto).HasColumnName("ID_USUARIO_PRODUCTO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
        });

        modelBuilder.Entity<BdUsuarioStatusUnidad>(entity =>
        {
            entity.HasKey(e => e.IdUsuarioStatusUnidad).HasName("PK__BD_USUAR__D713569DB6312571");

            entity.ToTable("BD_USUARIO_STATUS_UNIDAD");

            entity.Property(e => e.IdUsuarioStatusUnidad).HasColumnName("ID_USUARIO_STATUS_UNIDAD");
            entity.Property(e => e.IdStatus).HasColumnName("ID_STATUS");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.IsChecked).HasColumnName("IS_CHECKED");
        });

        modelBuilder.Entity<BdUsuarioTecnico>(entity =>
        {
            entity.HasKey(e => e.IdUsuarioTecnico);

            entity.ToTable("BD_USUARIO_TECNICO");

            entity.Property(e => e.IdUsuarioTecnico).HasColumnName("ID_USUARIO_TECNICO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdTecnico).HasColumnName("ID_TECNICO");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
        });

        modelBuilder.Entity<BdUsuarioVistaEscalamiento>(entity =>
        {
            entity.HasKey(e => e.IdUsuarioVistaEscalamiento);

            entity.ToTable("BD_USUARIO_VISTA_ESCALAMIENTO");

            entity.HasIndex(e => e.IdUsuario, "IX_BD_USUARIO_VISTA_ESCALAMIENTO_ID_USUARIO").HasFillFactor(80);

            entity.HasIndex(e => e.IdVistaEscalamiento, "IX_BD_USUARIO_VISTA_ESCALAMIENTO_ID_VISTA_ESCALAMIENTO").HasFillFactor(80);

            entity.Property(e => e.IdUsuarioVistaEscalamiento).HasColumnName("ID_USUARIO_VISTA_ESCALAMIENTO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.IdVistaEscalamiento).HasColumnName("ID_VISTA_ESCALAMIENTO");

            entity.HasOne(d => d.IdVistaEscalamientoNavigation).WithMany(p => p.BdUsuarioVistaEscalamientos)
                .HasForeignKey(d => d.IdVistaEscalamiento)
                .HasConstraintName("FK_BD_USUARIO_VISTA_ESCALAMIENTO_C_VISTAS_ESCALAMIENTO");
        });

        modelBuilder.Entity<BdUsuarioZona>(entity =>
        {
            entity.HasKey(e => e.IdUsuarioZona);

            entity.ToTable("BD_USUARIO_ZONA");

            entity.HasIndex(e => e.IdRegion, "IX_BD_USUARIO_ZONA_ID_REGION").HasFillFactor(80);

            entity.HasIndex(e => new { e.IdRegion, e.IdZona }, "IX_BD_USUARIO_ZONA_ID_REGION, ID_ZONA");

            entity.HasIndex(e => e.IdUsuario, "IX_BD_USUARIO_ZONA_ID_USUARIO").HasFillFactor(80);

            entity.HasIndex(e => e.IdZona, "IX_BD_USUARIO_ZONA_ID_ZONA").HasFillFactor(80);

            entity.HasIndex(e => e.IdZona, "IX_MI_BD_USUARIO_ZONA_30337_30336");

            entity.Property(e => e.IdUsuarioZona).HasColumnName("ID_USUARIO_ZONA");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdRegion).HasColumnName("ID_REGION");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.IdZona).HasColumnName("ID_ZONA");
        });

        modelBuilder.Entity<BdUsuariosEnviarEmail>(entity =>
        {
            entity.HasKey(e => e.IdUsuarioEnviarEmail).HasName("PK__BD_USUAR__637D42F614A663DC");

            entity.ToTable("BD_USUARIOS_ENVIAR_EMAIL");

            entity.Property(e => e.IdUsuarioEnviarEmail).HasColumnName("ID_USUARIO_ENVIAR_EMAIL");
            entity.Property(e => e.IdSendUsuarioAlta).HasColumnName("ID_SEND_USUARIO_ALTA");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
        });

        modelBuilder.Entity<BdUsuariosEnviorEmail2>(entity =>
        {
            entity.HasKey(e => e.IdUsuariosEnviorEmail2).HasName("PK__BD_USUAR__3C909B57279D1526");

            entity.ToTable("BD_USUARIOS_ENVIOR_EMAIL_2");

            entity.Property(e => e.IdUsuariosEnviorEmail2).HasColumnName("ID_USUARIOS_ENVIOR_EMAIL_2");
            entity.Property(e => e.Checked)
                .IsUnicode(false)
                .HasColumnName("CHECKED");
            entity.Property(e => e.IdNotificacionesEmail).HasColumnName("ID_NOTIFICACIONES_EMAIL");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.Status)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdUsuariosNotificacionesAltum>(entity =>
        {
            entity.HasKey(e => e.IdUsuarioNotificacionAlta).HasName("PK__BD_USUAR__106027DBE1B2CCAF");

            entity.ToTable("BD_USUARIOS_NOTIFICACIONES_ALTA");

            entity.Property(e => e.IdUsuarioNotificacionAlta).HasColumnName("ID_USUARIO_NOTIFICACION_ALTA");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdEmisorEmail).HasColumnName("ID_EMISOR_EMAIL");
            entity.Property(e => e.IdTemplateMailjet).HasColumnName("ID_TEMPLATE_MAILJET");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdVacacione>(entity =>
        {
            entity.HasKey(e => e.IdVacaciones);

            entity.ToTable("BD_VACACIONES");

            entity.Property(e => e.IdVacaciones).HasColumnName("ID_VACACIONES");
            entity.Property(e => e.FecInicio)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_INICIO");
            entity.Property(e => e.FecSolicitud)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_SOLICITUD");
            entity.Property(e => e.FecTermina)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_TERMINA");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Periodo).HasColumnName("PERIODO");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdValMovimientosInvServicioFalla>(entity =>
        {
            entity.HasKey(e => e.IdValMovimientosInvServicioFalla).HasName("PK__BD_VAL_M__864C0184D5FD1DC1");

            entity.ToTable("BD_VAL_MOVIMIENTOS_INV_SERVICIO_FALLA");

            entity.Property(e => e.IdValMovimientosInvServicioFalla).HasColumnName("ID_VAL_MOVIMIENTOS_INV_SERVICIO_FALLA");
            entity.Property(e => e.FechaAlta)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ALTA");
            entity.Property(e => e.IdFalla).HasColumnName("ID_FALLA");
            entity.Property(e => e.IdMovInventario).HasColumnName("ID_MOV_INVENTARIO");
            entity.Property(e => e.IdServicio).HasColumnName("ID_SERVICIO");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Status)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<BdVistaEscalamientoStatusAr>(entity =>
        {
            entity.HasKey(e => e.IdVistaEscalamientoStatusAr).HasName("PK_BD_VISTA_ECALAMIENTO_STATUS_AR");

            entity.ToTable("BD_VISTA_ESCALAMIENTO_STATUS_AR");

            entity.Property(e => e.IdVistaEscalamientoStatusAr).HasColumnName("ID_VISTA_ESCALAMIENTO_STATUS_AR");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdStatusAr).HasColumnName("ID_STATUS_AR");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.IdVistaEscalamiento).HasColumnName("ID_VISTA_ESCALAMIENTO");

            entity.HasOne(d => d.IdVistaEscalamientoNavigation).WithMany(p => p.BdVistaEscalamientoStatusArs)
                .HasForeignKey(d => d.IdVistaEscalamiento)
                .HasConstraintName("FK_BD_VISTA_ESCALAMIENTO_STATUS_AR_C_STATUS_AR");
        });

        modelBuilder.Entity<BdWincorCliente>(entity =>
        {
            entity.HasKey(e => e.IdClienteWincor);

            entity.ToTable("BD_WINCOR_CLIENTES");

            entity.Property(e => e.IdClienteWincor).HasColumnName("ID_CLIENTE_WINCOR");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.Nombre)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NOMBRE");
        });

        modelBuilder.Entity<BdWincorClientesServicio>(entity =>
        {
            entity.HasKey(e => e.IdClienteServicioWincor).HasName("PK_BD_WINCOR_CLIENTE_SERVICIO");

            entity.ToTable("BD_WINCOR_CLIENTES_SERVICIOS");

            entity.Property(e => e.IdClienteServicioWincor).HasColumnName("ID_CLIENTE_SERVICIO_WINCOR");
            entity.Property(e => e.IdClienteWincor).HasColumnName("ID_CLIENTE_WINCOR");
            entity.Property(e => e.IdFalla).HasColumnName("ID_FALLA");
            entity.Property(e => e.IdServicio).HasColumnName("ID_SERVICIO");
            entity.Property(e => e.IdServicioWincor).HasColumnName("ID_SERVICIO_WINCOR");
        });

        modelBuilder.Entity<BdWincorServicio>(entity =>
        {
            entity.HasKey(e => e.IdServicioWincor).HasName("PK_BD_WINCOR_PROYECTOS");

            entity.ToTable("BD_WINCOR_SERVICIOS");

            entity.Property(e => e.IdServicioWincor).HasColumnName("ID_SERVICIO_WINCOR");
            entity.Property(e => e.Nombre)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NOMBRE");
        });

        modelBuilder.Entity<BdWorkload>(entity =>
        {
            entity.HasKey(e => e.IdWorkload);

            entity.ToTable("BD_WORKLOAD");

            entity.HasIndex(e => e.FecAlta, "IX_BD_WORKLOAD_FEC_ALTA");

            entity.Property(e => e.IdWorkload).HasColumnName("ID_WORKLOAD");
            entity.Property(e => e.BlkBy).IsUnicode(false);
            entity.Property(e => e.Command).IsUnicode(false);
            entity.Property(e => e.Cputime)
                .IsUnicode(false)
                .HasColumnName("CPUTime");
            entity.Property(e => e.Dbname)
                .IsUnicode(false)
                .HasColumnName("DBName");
            entity.Property(e => e.DiskIo)
                .IsUnicode(false)
                .HasColumnName("DiskIO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.HostName).IsUnicode(false);
            entity.Property(e => e.LastBatch).IsUnicode(false);
            entity.Property(e => e.Login).IsUnicode(false);
            entity.Property(e => e.ProgramName).IsUnicode(false);
            entity.Property(e => e.Requestid)
                .IsUnicode(false)
                .HasColumnName("REQUESTID");
            entity.Property(e => e.Spid)
                .IsUnicode(false)
                .HasColumnName("SPID");
            entity.Property(e => e.SpidUno)
                .IsUnicode(false)
                .HasColumnName("SPID_UNO");
            entity.Property(e => e.Status).IsUnicode(false);
        });

        modelBuilder.Entity<BdWsBancomer>(entity =>
        {
            entity.HasKey(e => e.IdTareaBancomer);

            entity.ToTable("BD_WS_BANCOMER", tb => tb.HasTrigger("TR_BD_BANCOMER_FECHA_CARGA"));

            entity.HasIndex(e => e.Status, "IX_BD_WS_BANCOMER_Status");

            entity.HasIndex(e => e.TaskId, "IX_BD_WS_BANCOMER_Task_ID");

            entity.Property(e => e.IdTareaBancomer).HasColumnName("id_tarea_bancomer");
            entity.Property(e => e.AssigneeId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Assignee_Id");
            entity.Property(e => e.Automatico).HasColumnName("automatico");
            entity.Property(e => e.BbvaCiAutoserv)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BBVA_CI_Autoserv");
            entity.Property(e => e.BbvaCrtClaseAtm)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BBVA_CRT_Clase_ATM");
            entity.Property(e => e.BbvaCrtDireccion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BBVA_CRT_Direccion");
            entity.Property(e => e.BbvaCtrAutoservicio)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BBVA_CTR_Autoservicio");
            entity.Property(e => e.BbvaNdc)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BBVA_NDC");
            entity.Property(e => e.BbvaNoSerie)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BBVA_No_Serie");
            entity.Property(e => e.BbvaTsitio)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BBVA_Tsitio");
            entity.Property(e => e.Comentario)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Company)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Completion)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.CreateDate)
                .HasColumnType("datetime")
                .HasColumnName("Create_Date");
            entity.Property(e => e.FecCarga)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("FEC_CARGA");
            entity.Property(e => e.FechaEta)
                .HasColumnType("datetime")
                .HasColumnName("Fecha_ETA");
            entity.Property(e => e.FechaFinalizacion)
                .HasColumnType("datetime")
                .HasColumnName("Fecha_Finalizacion");
            entity.Property(e => e.FolioResolutor)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Folio_Resolutor");
            entity.Property(e => e.Importado).HasColumnName("importado");
            entity.Property(e => e.InstancedId)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Justificacion)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LastModifiedBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Last_Modified_By");
            entity.Property(e => e.PhoneNumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Phone_Number");
            entity.Property(e => e.Priority)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Summary)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.TaskId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Task_ID");
            entity.Property(e => e.TaskName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TaskNotes)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Task_Notes");
            entity.Property(e => e.TaskType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Urgency)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Z1DStatusReasonDisplay)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("z1D_StatusReasonDisplay");
        });

        modelBuilder.Entity<BdZonaCp>(entity =>
        {
            entity.HasKey(e => e.IdZonaCp);

            entity.ToTable("BD_ZONA_CP");

            entity.HasIndex(e => e.Cp, "IX_BD_ZONA_CP")
                .IsUnique()
                .HasFillFactor(80);

            entity.HasIndex(e => e.Cp, "IX_BD_ZONA_CP_CP").HasFillFactor(80);

            entity.HasIndex(e => e.IdZona, "IX_BD_ZONA_CP_ID_ZONA").HasFillFactor(80);

            entity.HasIndex(e => e.IdZona, "missing_index_287418_287417");

            entity.HasIndex(e => e.IdZona, "missing_index_287424_287423");

            entity.HasIndex(e => e.IdUsuarioAlta, "missing_index_290259_290258");

            entity.Property(e => e.IdZonaCp).HasColumnName("ID_ZONA_CP");
            entity.Property(e => e.Cp)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("CP");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.IdZona).HasColumnName("ID_ZONA");
        });

        modelBuilder.Entity<BdZonaDar>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_ZONA_DAR");

            entity.Property(e => e.IdCp)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("ID_CP");
            entity.Property(e => e.IdZonaDar)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_ZONA_DAR");
            entity.Property(e => e.TipoZona).HasColumnName("TIPO_ZONA");
        });

        modelBuilder.Entity<BdZonasCp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BD_ZONAS_CP");

            entity.Property(e => e.AbreviaturaDestino)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("ABREVIATURA_DESTINO");
            entity.Property(e => e.AbreviaturaOrigen)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("ABREVIATURA_ORIGEN");
            entity.Property(e => e.IdZonasCp)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_ZONAS_CP");
            entity.Property(e => e.Zona).HasColumnName("ZONA");
        });

        modelBuilder.Entity<BdmassiveLayoutLog>(entity =>
        {
            entity.HasKey(e => e.MassiveLayoutId).HasName("PK__BDMassiv__A1BC536A488C3079");

            entity.ToTable("BDMassiveLayoutLog");

            entity.Property(e => e.DateDischarge).HasColumnType("datetime");
            entity.Property(e => e.FiltersJson)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.Layout)
                .HasMaxLength(256)
                .IsUnicode(false);
        });

        modelBuilder.Entity<BitacoraAActualizar>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BITACORA_A_ACTUALIZAR");

            entity.Property(e => e.Comentario)
                .IsUnicode(false)
                .HasColumnName("COMENTARIO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdBitacoraUnidad)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_BITACORA_UNIDAD");
            entity.Property(e => e.IdResponsable).HasColumnName("ID_RESPONSABLE");
            entity.Property(e => e.IdStatusUnidadFin).HasColumnName("ID_STATUS_UNIDAD_FIN");
            entity.Property(e => e.IdStatusUnidadIni).HasColumnName("ID_STATUS_UNIDAD_INI");
            entity.Property(e => e.IdTipoResponsable).HasColumnName("ID_TIPO_RESPONSABLE");
            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
        });

        modelBuilder.Entity<BitacoraError>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BITACORA_ERROR");

            entity.Property(e => e.Comentario)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("COMENTARIO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdError)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_ERROR");
            entity.Property(e => e.Modulo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MODULO");
            entity.Property(e => e.Objeto)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("OBJETO");
            entity.Property(e => e.Ruta)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("RUTA");
            entity.Property(e => e.Usuario)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("USUARIO");
        });

        modelBuilder.Entity<BitacoraMensajeriaCp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BITACORA_MENSAJERIA_CP");

            entity.Property(e => e.Cp)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("CP");
            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");
            entity.Property(e => e.IdCpMensajeria)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_CP_MENSAJERIA");
            entity.Property(e => e.IdEnvio).HasColumnName("ID_ENVIO");
            entity.Property(e => e.IdResponsableDestino).HasColumnName("ID_RESPONSABLE_DESTINO");
            entity.Property(e => e.Solicitud).HasColumnName("SOLICITUD");
        });

        modelBuilder.Entity<BitacoraSolucionErroresLeberacion>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BITACORA_SOLUCION_ERRORES_LEBERACION");

            entity.Property(e => e.Comentario)
                .IsUnicode(false)
                .HasColumnName("COMENTARIO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdBitacoraSolucion)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_BITACORA_SOLUCION");
            entity.Property(e => e.IdResponsable).HasColumnName("ID_RESPONSABLE");
            entity.Property(e => e.IdTipoResponsable).HasColumnName("ID_TIPO_RESPONSABLE");
            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
        });

        modelBuilder.Entity<BorrarActualizarUnidad>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("borrar_actualizar_unidad");

            entity.Property(e => e.FechaBitacora)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_BITACORA");
            entity.Property(e => e.IsActualizar).HasColumnName("IS_ACTUALIZAR");
            entity.Property(e => e.NoSerie)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");
        });

        modelBuilder.Entity<BorrarInsertUnidadCarga>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BORRAR_INSERT_UNIDAD_CARGA");

            entity.Property(e => e.NoSerie)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");
            entity.Property(e => e.Valor)
                .IsUnicode(false)
                .HasColumnName("VALOR");
        });

        modelBuilder.Entity<BorrarInsertarUnidade>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("borrar_insertar_unidades");

            entity.Property(e => e.Caja)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("CAJA");
            entity.Property(e => e.Comentarios)
                .IsUnicode(false)
                .HasColumnName("COMENTARIOS");
            entity.Property(e => e.Costo)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("COSTO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.FecInicio)
                .HasColumnType("datetime")
                .HasColumnName("FEC_INICIO");
            entity.Property(e => e.FechaVencimientoKernel)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_VENCIMIENTO_KERNEL");
            entity.Property(e => e.FolioTelmex)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("FOLIO_TELMEX");
            entity.Property(e => e.IdAplicativo).HasColumnName("ID_APLICATIVO");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdConectividad).HasColumnName("ID_CONECTIVIDAD");
            entity.Property(e => e.IdFabricante).HasColumnName("ID_FABRICANTE");
            entity.Property(e => e.IdItemsSolicitudAlmacen).HasColumnName("ID_ITEMS_SOLICITUD_ALMACEN");
            entity.Property(e => e.IdLlave).HasColumnName("ID_LLAVE");
            entity.Property(e => e.IdMarca).HasColumnName("ID_MARCA");
            entity.Property(e => e.IdModelo).HasColumnName("ID_MODELO");
            entity.Property(e => e.IdMoneda).HasColumnName("ID_MONEDA");
            entity.Property(e => e.IdNivelDiagnostico).HasColumnName("ID_NIVEL_DIAGNOSTICO");
            entity.Property(e => e.IdOrdenCompra).HasColumnName("ID_ORDEN_COMPRA");
            entity.Property(e => e.IdParent).HasColumnName("ID_PARENT");
            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");
            entity.Property(e => e.IdResponsable).HasColumnName("ID_RESPONSABLE");
            entity.Property(e => e.IdSim).HasColumnName("ID_SIM");
            entity.Property(e => e.IdSoftware).HasColumnName("ID_SOFTWARE");
            entity.Property(e => e.IdSolicitudRecoleccion).HasColumnName("ID_SOLICITUD_RECOLECCION");
            entity.Property(e => e.IdStatusUnidad).HasColumnName("ID_STATUS_UNIDAD");
            entity.Property(e => e.IdTecnicoEnviadaScrap).HasColumnName("ID_TECNICO_ENVIADA_SCRAP");
            entity.Property(e => e.IdTipoConexion).HasColumnName("ID_TIPO_CONEXION");
            entity.Property(e => e.IdTipoResponsable).HasColumnName("ID_TIPO_RESPONSABLE");
            entity.Property(e => e.IdTipoTerminal).HasColumnName("ID_TIPO_TERMINAL");
            entity.Property(e => e.IdUnidad)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_UNIDAD");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.IsDaniada).HasColumnName("IS_DANIADA");
            entity.Property(e => e.IsDato).HasColumnName("IS_DATO");
            entity.Property(e => e.IsDiagnosticada).HasColumnName("IS_DIAGNOSTICADA");
            entity.Property(e => e.IsFacturable).HasColumnName("IS_FACTURABLE");
            entity.Property(e => e.IsGarantia).HasColumnName("IS_GARANTIA");
            entity.Property(e => e.IsInternacional).HasColumnName("IS_INTERNACIONAL");
            entity.Property(e => e.IsNueva).HasColumnName("IS_NUEVA");
            entity.Property(e => e.IsPropiedadCliente).HasColumnName("IS_PROPIEDAD_CLIENTE");
            entity.Property(e => e.IsRetiro).HasColumnName("IS_RETIRO");
            entity.Property(e => e.IsVenta).HasColumnName("IS_VENTA");
            entity.Property(e => e.MotivoEnviadaScrap)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("MOTIVO_ENVIADA_SCRAP");
            entity.Property(e => e.NoEquipo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_EQUIPO");
            entity.Property(e => e.NoImei)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_IMEI");
            entity.Property(e => e.NoInventario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_INVENTARIO");
            entity.Property(e => e.NoSerie)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");
            entity.Property(e => e.NoSim)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SIM");
            entity.Property(e => e.NoTarima)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_TARIMA");
            entity.Property(e => e.OrdenCompra)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ORDEN_COMPRA");
            entity.Property(e => e.PosicionInventario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("POSICION_INVENTARIO");
            entity.Property(e => e.PurchaseOrderNo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("purchase_order_no");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.Version)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("VERSION");
            entity.Property(e => e.VersionKernel)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("VERSION_KERNEL");
            entity.Property(e => e.Vigencia)
                .HasColumnType("datetime")
                .HasColumnName("VIGENCIA");
        });

        modelBuilder.Entity<BorrarReporte2020>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BORRAR_REPORTE_2020");

            entity.Property(e => e.ActReferencias)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ACT_REFERENCIAS");
            entity.Property(e => e.Afiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AFILIACION");
            entity.Property(e => e.AfiliacionAmex)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AFILIACION_AMEX");
            entity.Property(e => e.AfiliacionAmexCierre)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AFILIACION_AMEX_CIERRE");
            entity.Property(e => e.AltaPor)
                .HasMaxLength(152)
                .IsUnicode(false)
                .HasColumnName("ALTA_POR");
            entity.Property(e => e.AmexPlan)
                .IsUnicode(false)
                .HasColumnName("AMEX_PLAN");
            entity.Property(e => e.Aplicativo)
                .IsUnicode(false)
                .HasColumnName("APLICATIVO");
            entity.Property(e => e.AreaCarga)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AREA_CARGA");
            entity.Property(e => e.AreaCierra)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AREA_CIERRA");
            entity.Property(e => e.AtiendeEnComercio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ATIENDE_EN_COMERCIO");
            entity.Property(e => e.Base)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BASE");
            entity.Property(e => e.CableCorriente)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CABLE_CORRIENTE");
            entity.Property(e => e.Caja)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CAJA");
            entity.Property(e => e.Canal)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CANAL");
            entity.Property(e => e.CantidadArchivos).HasColumnName("CANTIDAD_ARCHIVOS");
            entity.Property(e => e.Cargador)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CARGADOR");
            entity.Property(e => e.Carnet)
                .IsUnicode(false)
                .HasColumnName("CARNET");
            entity.Property(e => e.CasoSf)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CASO_SF");
            entity.Property(e => e.CerradoPor)
                .HasMaxLength(152)
                .IsUnicode(false)
                .HasColumnName("CERRADO_POR");
            entity.Property(e => e.Codigo)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CODIGO");
            entity.Property(e => e.CodigoAfiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CODIGO_AFILIACION");
            entity.Property(e => e.CodigoPostal)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("CODIGO_POSTAL");
            entity.Property(e => e.Colonia)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("COLONIA");
            entity.Property(e => e.Comentarios).HasColumnName("COMENTARIOS");
            entity.Property(e => e.Comercio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("COMERCIO");
            entity.Property(e => e.Conclusiones)
                .HasMaxLength(3000)
                .IsUnicode(false)
                .HasColumnName("CONCLUSIONES");
            entity.Property(e => e.Conectividad)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CONECTIVIDAD");
            entity.Property(e => e.Contacto1)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CONTACTO1");
            entity.Property(e => e.CorreoEjecutivo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CORREO_EJECUTIVO");
            entity.Property(e => e.CriterioCambio)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CRITERIO_CAMBIO");
            entity.Property(e => e.DescGiro)
                .IsUnicode(false)
                .HasColumnName("DESC_GIRO");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");
            entity.Property(e => e.DiasSlaAdmin)
                .HasColumnType("numeric(1, 1)")
                .HasColumnName("DIAS_SLA_ADMIN");
            entity.Property(e => e.DiasSlaGlobal)
                .HasColumnType("numeric(1, 1)")
                .HasColumnName("DIAS_SLA_GLOBAL");
            entity.Property(e => e.Direccion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");
            entity.Property(e => e.DireccionAlternaComercio)
                .IsUnicode(false)
                .HasColumnName("DIRECCION_ALTERNA_COMERCIO");
            entity.Property(e => e.Divisa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DIVISA");
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EMAIL");
            entity.Property(e => e.Equipo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("EQUIPO");
            entity.Property(e => e.Estado)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ESTADO");
            entity.Property(e => e.EstatusServicio)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ESTATUS_SERVICIO");
            entity.Property(e => e.EstatusServicio1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ESTATUS SERVICIO");
            entity.Property(e => e.FechaAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_ALTA");
            entity.Property(e => e.FechaAltaSistema)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_ALTA_SISTEMA");
            entity.Property(e => e.FechaAtencionProveedor)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_ATENCION_PROVEEDOR");
            entity.Property(e => e.FechaCierreSistema)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_CIERRE_SISTEMA");
            entity.Property(e => e.FechaInicioSlaInv).HasColumnName("FECHA_INICIO_SLA_INV");
            entity.Property(e => e.FechaMovInventario).HasColumnName("FECHA_MOV_INVENTARIO");
            entity.Property(e => e.FechaVencimiento)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_VENCIMIENTO");
            entity.Property(e => e.HorasVencidas)
                .IsRequired()
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("HORAS_VENCIDAS");
            entity.Property(e => e.IdAr)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_AR");
            entity.Property(e => e.IdFalla).HasColumnName("ID_FALLA");
            entity.Property(e => e.IdServicio).HasColumnName("ID_SERVICIO");
            entity.Property(e => e.IdTecnico)
                .HasMaxLength(152)
                .IsUnicode(false)
                .HasColumnName("ID_TECNICO");
            entity.Property(e => e.IdUsuarioAltaSf).HasColumnName("ID_USUARIO_ALTA_SF");
            entity.Property(e => e.Idamex)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IDAMEX");
            entity.Property(e => e.Industria)
                .IsUnicode(false)
                .HasColumnName("INDUSTRIA");
            entity.Property(e => e.MiComercio).HasColumnName("MI_COMERCIO");
            entity.Property(e => e.Modelo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("MODELO");
            entity.Property(e => e.ModeloInstalado)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("MODELO_INSTALADO");
            entity.Property(e => e.ModeloTerminalSale)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("MODELO_TERMINAL_SALE");
            entity.Property(e => e.MotivoCancelacion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("MOTIVO_CANCELACION");
            entity.Property(e => e.MotivoRechazo)
                .IsUnicode(false)
                .HasColumnName("MOTIVO_RECHAZO");
            entity.Property(e => e.MsiProsa)
                .IsUnicode(false)
                .HasColumnName("MSI_PROSA");
            entity.Property(e => e.MsiSantander)
                .IsUnicode(false)
                .HasColumnName("MSI_SANTANDER");
            entity.Property(e => e.NegotiationType)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Nivel)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("NIVEL");
            entity.Property(e => e.NivelSla)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("NIVEL_SLA");
            entity.Property(e => e.NivelSlaInventario)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("NIVEL_SLA_INVENTARIO");
            entity.Property(e => e.NumSerieSimEntra)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NUM_SERIE_SIM_ENTRA");
            entity.Property(e => e.NumSerieSimSale)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NUM_SERIE_SIM_SALE");
            entity.Property(e => e.NumSerieTerminalEntra)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NUM_SERIE_TERMINAL_ENTRA");
            entity.Property(e => e.NumSerieTerminalMto)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("NUM_SERIE_TERMINAL_MTO");
            entity.Property(e => e.NumSerieTerminalSale)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NUM_SERIE_TERMINAL_SALE");
            entity.Property(e => e.Observaciones)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("OBSERVACIONES");
            entity.Property(e => e.Odt)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ODT");
            entity.Property(e => e.OdtSalesforce)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ODT_SALESFORCE");
            entity.Property(e => e.Poblacion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("POBLACION");
            entity.Property(e => e.Producto)
                .IsUnicode(false)
                .HasColumnName("PRODUCTO");
            entity.Property(e => e.Proveedor)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("PROVEEDOR");
            entity.Property(e => e.Qps)
                .IsUnicode(false)
                .HasColumnName("QPS");
            entity.Property(e => e.RazonSocial)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RAZON_SOCIAL");
            entity.Property(e => e.Rechazo)
                .IsUnicode(false)
                .HasColumnName("RECHAZO");
            entity.Property(e => e.Rfc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RFC");
            entity.Property(e => e.RolloEntregados)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ROLLO_ENTREGADOS");
            entity.Property(e => e.RollosAInstalar).HasColumnName("ROLLOS_A_INSTALAR");
            entity.Property(e => e.SlaFijo).HasColumnName("SLA_FIJO");
            entity.Property(e => e.SubTipoServicio)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("SUB_TIPO_SERVICIO");
            entity.Property(e => e.Telefono)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");
            entity.Property(e => e.TelefonosEnCampo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TELEFONOS_EN_CAMPO");
            entity.Property(e => e.TidAmexCierre)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TID_AMEX_CIERRE");
            entity.Property(e => e.TieneAmex)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("TIENE_AMEX");
            entity.Property(e => e.TipoAB)
                .IsUnicode(false)
                .HasColumnName("TIPO_A_B");
            entity.Property(e => e.TipoCarga)
                .IsRequired()
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("TIPO_CARGA");
            entity.Property(e => e.TipoComercio2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TIPO_COMERCIO_2");
            entity.Property(e => e.TipoDeConfiguracionMit)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TIPO_DE_CONFIGURACION_MIT");
            entity.Property(e => e.TipoServicio)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("TIPO_SERVICIO");
            entity.Property(e => e.VestidurasGetnet)
                .IsRequired()
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("VESTIDURAS_GETNET");
            entity.Property(e => e.VoltajeNeutro)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("VOLTAJE_NEUTRO");
            entity.Property(e => e.Zona)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZONA");
        });

        modelBuilder.Entity<BorrarReporte2021>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BORRAR_REPORTE_2021");

            entity.Property(e => e.ActReferencias)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ACT_REFERENCIAS");
            entity.Property(e => e.Afiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AFILIACION");
            entity.Property(e => e.AfiliacionAmex)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AFILIACION_AMEX");
            entity.Property(e => e.AfiliacionAmexCierre)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AFILIACION_AMEX_CIERRE");
            entity.Property(e => e.AltaPor)
                .HasMaxLength(152)
                .IsUnicode(false)
                .HasColumnName("ALTA_POR");
            entity.Property(e => e.AmexPlan)
                .IsUnicode(false)
                .HasColumnName("AMEX_PLAN");
            entity.Property(e => e.Aplicativo)
                .IsUnicode(false)
                .HasColumnName("APLICATIVO");
            entity.Property(e => e.AreaCarga)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AREA_CARGA");
            entity.Property(e => e.AreaCierra)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AREA_CIERRA");
            entity.Property(e => e.AtiendeEnComercio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ATIENDE_EN_COMERCIO");
            entity.Property(e => e.Base)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BASE");
            entity.Property(e => e.CableCorriente)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CABLE_CORRIENTE");
            entity.Property(e => e.Caja)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CAJA");
            entity.Property(e => e.Canal)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CANAL");
            entity.Property(e => e.CantidadArchivos).HasColumnName("CANTIDAD_ARCHIVOS");
            entity.Property(e => e.Cargador)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CARGADOR");
            entity.Property(e => e.Carnet)
                .IsUnicode(false)
                .HasColumnName("CARNET");
            entity.Property(e => e.CasoSf)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CASO_SF");
            entity.Property(e => e.CerradoPor)
                .HasMaxLength(152)
                .IsUnicode(false)
                .HasColumnName("CERRADO_POR");
            entity.Property(e => e.Codigo)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CODIGO");
            entity.Property(e => e.CodigoAfiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CODIGO_AFILIACION");
            entity.Property(e => e.CodigoPostal)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("CODIGO_POSTAL");
            entity.Property(e => e.Colonia)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("COLONIA");
            entity.Property(e => e.Comentarios).HasColumnName("COMENTARIOS");
            entity.Property(e => e.Comercio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("COMERCIO");
            entity.Property(e => e.Conclusiones)
                .HasMaxLength(3000)
                .IsUnicode(false)
                .HasColumnName("CONCLUSIONES");
            entity.Property(e => e.Conectividad)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CONECTIVIDAD");
            entity.Property(e => e.Contacto1)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CONTACTO1");
            entity.Property(e => e.CorreoEjecutivo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CORREO_EJECUTIVO");
            entity.Property(e => e.CriterioCambio)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CRITERIO_CAMBIO");
            entity.Property(e => e.DescGiro)
                .IsUnicode(false)
                .HasColumnName("DESC_GIRO");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");
            entity.Property(e => e.DiasSlaAdmin)
                .HasColumnType("numeric(1, 1)")
                .HasColumnName("DIAS_SLA_ADMIN");
            entity.Property(e => e.DiasSlaGlobal)
                .HasColumnType("numeric(1, 1)")
                .HasColumnName("DIAS_SLA_GLOBAL");
            entity.Property(e => e.Direccion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");
            entity.Property(e => e.DireccionAlternaComercio)
                .IsUnicode(false)
                .HasColumnName("DIRECCION_ALTERNA_COMERCIO");
            entity.Property(e => e.Divisa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DIVISA");
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EMAIL");
            entity.Property(e => e.Equipo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("EQUIPO");
            entity.Property(e => e.Estado)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ESTADO");
            entity.Property(e => e.EstatusServicio)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ESTATUS_SERVICIO");
            entity.Property(e => e.EstatusServicio1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ESTATUS SERVICIO");
            entity.Property(e => e.FechaAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_ALTA");
            entity.Property(e => e.FechaAltaSistema)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_ALTA_SISTEMA");
            entity.Property(e => e.FechaAtencionProveedor)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_ATENCION_PROVEEDOR");
            entity.Property(e => e.FechaCierreSistema)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_CIERRE_SISTEMA");
            entity.Property(e => e.FechaInicioSlaInv).HasColumnName("FECHA_INICIO_SLA_INV");
            entity.Property(e => e.FechaMovInventario).HasColumnName("FECHA_MOV_INVENTARIO");
            entity.Property(e => e.FechaVencimiento)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_VENCIMIENTO");
            entity.Property(e => e.HorasVencidas)
                .IsRequired()
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("HORAS_VENCIDAS");
            entity.Property(e => e.IdAr)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_AR");
            entity.Property(e => e.IdFalla).HasColumnName("ID_FALLA");
            entity.Property(e => e.IdServicio).HasColumnName("ID_SERVICIO");
            entity.Property(e => e.IdTecnico)
                .HasMaxLength(152)
                .IsUnicode(false)
                .HasColumnName("ID_TECNICO");
            entity.Property(e => e.IdUsuarioAltaSf).HasColumnName("ID_USUARIO_ALTA_SF");
            entity.Property(e => e.Idamex)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IDAMEX");
            entity.Property(e => e.Industria)
                .IsUnicode(false)
                .HasColumnName("INDUSTRIA");
            entity.Property(e => e.MiComercio).HasColumnName("MI_COMERCIO");
            entity.Property(e => e.Modelo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("MODELO");
            entity.Property(e => e.ModeloInstalado)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("MODELO_INSTALADO");
            entity.Property(e => e.ModeloTerminalSale)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("MODELO_TERMINAL_SALE");
            entity.Property(e => e.MotivoCancelacion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("MOTIVO_CANCELACION");
            entity.Property(e => e.MotivoRechazo)
                .IsUnicode(false)
                .HasColumnName("MOTIVO_RECHAZO");
            entity.Property(e => e.MsiProsa)
                .IsUnicode(false)
                .HasColumnName("MSI_PROSA");
            entity.Property(e => e.MsiSantander)
                .IsUnicode(false)
                .HasColumnName("MSI_SANTANDER");
            entity.Property(e => e.NegotiationType)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Nivel)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("NIVEL");
            entity.Property(e => e.NivelSla)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("NIVEL_SLA");
            entity.Property(e => e.NivelSlaInventario)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("NIVEL_SLA_INVENTARIO");
            entity.Property(e => e.NumSerieSimEntra)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NUM_SERIE_SIM_ENTRA");
            entity.Property(e => e.NumSerieSimSale)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NUM_SERIE_SIM_SALE");
            entity.Property(e => e.NumSerieTerminalEntra)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NUM_SERIE_TERMINAL_ENTRA");
            entity.Property(e => e.NumSerieTerminalMto)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("NUM_SERIE_TERMINAL_MTO");
            entity.Property(e => e.NumSerieTerminalSale)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NUM_SERIE_TERMINAL_SALE");
            entity.Property(e => e.Observaciones)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("OBSERVACIONES");
            entity.Property(e => e.Odt)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ODT");
            entity.Property(e => e.OdtSalesforce)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ODT_SALESFORCE");
            entity.Property(e => e.Poblacion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("POBLACION");
            entity.Property(e => e.Producto)
                .IsUnicode(false)
                .HasColumnName("PRODUCTO");
            entity.Property(e => e.Proveedor)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("PROVEEDOR");
            entity.Property(e => e.Qps)
                .IsUnicode(false)
                .HasColumnName("QPS");
            entity.Property(e => e.RazonSocial)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RAZON_SOCIAL");
            entity.Property(e => e.Rechazo)
                .IsUnicode(false)
                .HasColumnName("RECHAZO");
            entity.Property(e => e.Rfc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RFC");
            entity.Property(e => e.RolloEntregados)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ROLLO_ENTREGADOS");
            entity.Property(e => e.RollosAInstalar).HasColumnName("ROLLOS_A_INSTALAR");
            entity.Property(e => e.SlaFijo).HasColumnName("SLA_FIJO");
            entity.Property(e => e.SubTipoServicio)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("SUB_TIPO_SERVICIO");
            entity.Property(e => e.Telefono)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");
            entity.Property(e => e.TelefonosEnCampo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TELEFONOS_EN_CAMPO");
            entity.Property(e => e.TidAmexCierre)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TID_AMEX_CIERRE");
            entity.Property(e => e.TieneAmex)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("TIENE_AMEX");
            entity.Property(e => e.TipoAB)
                .IsUnicode(false)
                .HasColumnName("TIPO_A_B");
            entity.Property(e => e.TipoCarga)
                .IsRequired()
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("TIPO_CARGA");
            entity.Property(e => e.TipoComercio2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TIPO_COMERCIO_2");
            entity.Property(e => e.TipoDeConfiguracionMit)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TIPO_DE_CONFIGURACION_MIT");
            entity.Property(e => e.TipoServicio)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("TIPO_SERVICIO");
            entity.Property(e => e.VestidurasGetnet)
                .IsRequired()
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("VESTIDURAS_GETNET");
            entity.Property(e => e.VoltajeNeutro)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("VOLTAJE_NEUTRO");
            entity.Property(e => e.Zona)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZONA");
        });

        modelBuilder.Entity<BorrarReporte20222023>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BORRAR_REPORTE_2022_2023");

            entity.Property(e => e.ActReferencias)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ACT_REFERENCIAS");
            entity.Property(e => e.Afiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AFILIACION");
            entity.Property(e => e.AfiliacionAmex)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AFILIACION_AMEX");
            entity.Property(e => e.AfiliacionAmexCierre)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AFILIACION_AMEX_CIERRE");
            entity.Property(e => e.AltaPor)
                .HasMaxLength(152)
                .IsUnicode(false)
                .HasColumnName("ALTA_POR");
            entity.Property(e => e.AmexPlan)
                .IsUnicode(false)
                .HasColumnName("AMEX_PLAN");
            entity.Property(e => e.Aplicativo)
                .IsUnicode(false)
                .HasColumnName("APLICATIVO");
            entity.Property(e => e.AreaCarga)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AREA_CARGA");
            entity.Property(e => e.AreaCierra)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AREA_CIERRA");
            entity.Property(e => e.AtiendeEnComercio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ATIENDE_EN_COMERCIO");
            entity.Property(e => e.Base)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BASE");
            entity.Property(e => e.CableCorriente)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CABLE_CORRIENTE");
            entity.Property(e => e.Caja)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CAJA");
            entity.Property(e => e.Canal)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CANAL");
            entity.Property(e => e.CantidadArchivos).HasColumnName("CANTIDAD_ARCHIVOS");
            entity.Property(e => e.Cargador)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CARGADOR");
            entity.Property(e => e.Carnet)
                .IsUnicode(false)
                .HasColumnName("CARNET");
            entity.Property(e => e.CasoSf)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CASO_SF");
            entity.Property(e => e.CerradoPor)
                .HasMaxLength(152)
                .IsUnicode(false)
                .HasColumnName("CERRADO_POR");
            entity.Property(e => e.Codigo)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CODIGO");
            entity.Property(e => e.CodigoAfiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CODIGO_AFILIACION");
            entity.Property(e => e.CodigoPostal)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("CODIGO_POSTAL");
            entity.Property(e => e.Colonia)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("COLONIA");
            entity.Property(e => e.Comentarios).HasColumnName("COMENTARIOS");
            entity.Property(e => e.Comercio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("COMERCIO");
            entity.Property(e => e.Conclusiones)
                .HasMaxLength(3000)
                .IsUnicode(false)
                .HasColumnName("CONCLUSIONES");
            entity.Property(e => e.Conectividad)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CONECTIVIDAD");
            entity.Property(e => e.Contacto1)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CONTACTO1");
            entity.Property(e => e.CorreoEjecutivo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CORREO_EJECUTIVO");
            entity.Property(e => e.CriterioCambio)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CRITERIO_CAMBIO");
            entity.Property(e => e.DescGiro)
                .IsUnicode(false)
                .HasColumnName("DESC_GIRO");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");
            entity.Property(e => e.DiasSlaAdmin)
                .HasColumnType("numeric(1, 1)")
                .HasColumnName("DIAS_SLA_ADMIN");
            entity.Property(e => e.DiasSlaGlobal)
                .HasColumnType("numeric(1, 1)")
                .HasColumnName("DIAS_SLA_GLOBAL");
            entity.Property(e => e.Direccion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");
            entity.Property(e => e.DireccionAlternaComercio)
                .IsUnicode(false)
                .HasColumnName("DIRECCION_ALTERNA_COMERCIO");
            entity.Property(e => e.Divisa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DIVISA");
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EMAIL");
            entity.Property(e => e.Equipo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("EQUIPO");
            entity.Property(e => e.Estado)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ESTADO");
            entity.Property(e => e.EstatusServicio)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ESTATUS_SERVICIO");
            entity.Property(e => e.EstatusServicio1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ESTATUS SERVICIO");
            entity.Property(e => e.FechaAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_ALTA");
            entity.Property(e => e.FechaAltaSistema)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_ALTA_SISTEMA");
            entity.Property(e => e.FechaAtencionProveedor)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_ATENCION_PROVEEDOR");
            entity.Property(e => e.FechaCierreSistema)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_CIERRE_SISTEMA");
            entity.Property(e => e.FechaInicioSlaInv).HasColumnName("FECHA_INICIO_SLA_INV");
            entity.Property(e => e.FechaMovInventario).HasColumnName("FECHA_MOV_INVENTARIO");
            entity.Property(e => e.FechaVencimiento)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_VENCIMIENTO");
            entity.Property(e => e.HorasVencidas)
                .IsRequired()
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("HORAS_VENCIDAS");
            entity.Property(e => e.IdAr)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_AR");
            entity.Property(e => e.IdFalla).HasColumnName("ID_FALLA");
            entity.Property(e => e.IdServicio).HasColumnName("ID_SERVICIO");
            entity.Property(e => e.IdTecnico)
                .HasMaxLength(152)
                .IsUnicode(false)
                .HasColumnName("ID_TECNICO");
            entity.Property(e => e.IdUsuarioAltaSf).HasColumnName("ID_USUARIO_ALTA_SF");
            entity.Property(e => e.Idamex)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IDAMEX");
            entity.Property(e => e.Industria)
                .IsUnicode(false)
                .HasColumnName("INDUSTRIA");
            entity.Property(e => e.MiComercio).HasColumnName("MI_COMERCIO");
            entity.Property(e => e.Modelo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("MODELO");
            entity.Property(e => e.ModeloInstalado)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("MODELO_INSTALADO");
            entity.Property(e => e.ModeloTerminalSale)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("MODELO_TERMINAL_SALE");
            entity.Property(e => e.MotivoCancelacion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("MOTIVO_CANCELACION");
            entity.Property(e => e.MotivoRechazo)
                .IsUnicode(false)
                .HasColumnName("MOTIVO_RECHAZO");
            entity.Property(e => e.MsiProsa)
                .IsUnicode(false)
                .HasColumnName("MSI_PROSA");
            entity.Property(e => e.MsiSantander)
                .IsUnicode(false)
                .HasColumnName("MSI_SANTANDER");
            entity.Property(e => e.NegotiationType)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Nivel)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("NIVEL");
            entity.Property(e => e.NivelSla)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("NIVEL_SLA");
            entity.Property(e => e.NivelSlaInventario)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("NIVEL_SLA_INVENTARIO");
            entity.Property(e => e.NumSerieSimEntra)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NUM_SERIE_SIM_ENTRA");
            entity.Property(e => e.NumSerieSimSale)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NUM_SERIE_SIM_SALE");
            entity.Property(e => e.NumSerieTerminalEntra)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NUM_SERIE_TERMINAL_ENTRA");
            entity.Property(e => e.NumSerieTerminalMto)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("NUM_SERIE_TERMINAL_MTO");
            entity.Property(e => e.NumSerieTerminalSale)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NUM_SERIE_TERMINAL_SALE");
            entity.Property(e => e.Observaciones)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("OBSERVACIONES");
            entity.Property(e => e.Odt)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ODT");
            entity.Property(e => e.OdtSalesforce)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ODT_SALESFORCE");
            entity.Property(e => e.Poblacion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("POBLACION");
            entity.Property(e => e.Producto)
                .IsUnicode(false)
                .HasColumnName("PRODUCTO");
            entity.Property(e => e.Proveedor)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("PROVEEDOR");
            entity.Property(e => e.Qps)
                .IsUnicode(false)
                .HasColumnName("QPS");
            entity.Property(e => e.RazonSocial)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RAZON_SOCIAL");
            entity.Property(e => e.Rechazo)
                .IsUnicode(false)
                .HasColumnName("RECHAZO");
            entity.Property(e => e.Rfc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RFC");
            entity.Property(e => e.RolloEntregados)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ROLLO_ENTREGADOS");
            entity.Property(e => e.RollosAInstalar).HasColumnName("ROLLOS_A_INSTALAR");
            entity.Property(e => e.SlaFijo).HasColumnName("SLA_FIJO");
            entity.Property(e => e.SubTipoServicio)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("SUB_TIPO_SERVICIO");
            entity.Property(e => e.Telefono)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");
            entity.Property(e => e.TelefonosEnCampo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TELEFONOS_EN_CAMPO");
            entity.Property(e => e.TidAmexCierre)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TID_AMEX_CIERRE");
            entity.Property(e => e.TieneAmex)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("TIENE_AMEX");
            entity.Property(e => e.TipoAB)
                .IsUnicode(false)
                .HasColumnName("TIPO_A_B");
            entity.Property(e => e.TipoCarga)
                .IsRequired()
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("TIPO_CARGA");
            entity.Property(e => e.TipoComercio2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TIPO_COMERCIO_2");
            entity.Property(e => e.TipoDeConfiguracionMit)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TIPO_DE_CONFIGURACION_MIT");
            entity.Property(e => e.TipoServicio)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("TIPO_SERVICIO");
            entity.Property(e => e.VestidurasGetnet)
                .IsRequired()
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("VESTIDURAS_GETNET");
            entity.Property(e => e.VoltajeNeutro)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("VOLTAJE_NEUTRO");
            entity.Property(e => e.Zona)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZONA");
        });

        modelBuilder.Entity<BuscaOdtRpR>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("BUSCA_ODT_RP_RS");

            entity.Property(e => e.Buscar)
                .IsRequired()
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("BUSCAR");
            entity.Property(e => e.CantidadRpRs).HasColumnName("CANTIDAD_RP_RS");
            entity.Property(e => e.Estado)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ESTADO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.FecAtencion)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ATENCION");
            entity.Property(e => e.FecGarantia)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_GARANTIA");
            entity.Property(e => e.FecInicio)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_INICIO");
            entity.Property(e => e.IdAr)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_AR");
            entity.Property(e => e.IdArOriginal).HasColumnName("ID_AR_ORIGINAL");
            entity.Property(e => e.IdArRpRs).HasColumnName("ID_AR_RP_RS");
            entity.Property(e => e.IdZona).HasColumnName("ID_ZONA");
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.NoAr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AR");
            entity.Property(e => e.Poblacion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("POBLACION");
            entity.Property(e => e.Rp).HasColumnName("RP");
            entity.Property(e => e.Rs).HasColumnName("RS");
        });

        modelBuilder.Entity<CAccesorio>(entity =>
        {
            entity.HasKey(e => e.IdAccesorio);

            entity.ToTable("C_ACCESORIOS");

            entity.Property(e => e.IdAccesorio).HasColumnName("ID_ACCESORIO");
            entity.Property(e => e.Costo)
                .HasColumnType("numeric(18, 0)")
                .HasColumnName("COSTO");
            entity.Property(e => e.DescAccesorio)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_ACCESORIO");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CActasAdmin>(entity =>
        {
            entity.HasKey(e => e.IdTipoActaAdmin);

            entity.ToTable("C_ACTAS_ADMIN");

            entity.Property(e => e.IdTipoActaAdmin).HasColumnName("ID_TIPO_ACTA_ADMIN");
            entity.Property(e => e.DescActaAdmin)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("DESC_ACTA_ADMIN");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CAlmacene>(entity =>
        {
            entity.HasKey(e => e.IdAlmacen);

            entity.ToTable("C_ALMACENES");

            entity.Property(e => e.IdAlmacen).HasColumnName("ID_ALMACEN");
            entity.Property(e => e.AutoNotif).HasColumnName("AUTO_NOTIF");
            entity.Property(e => e.DescAlmacen)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_ALMACEN");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(250)
                .HasColumnName("DESCRIPCION");
            entity.Property(e => e.EnvioEmail).HasColumnName("ENVIO_EMAIL");
            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");
            entity.Property(e => e.IdResponsable).HasColumnName("ID_RESPONSABLE");
            entity.Property(e => e.IdZona).HasColumnName("ID_ZONA");
            entity.Property(e => e.IsLab).HasColumnName("IS_LAB");
            entity.Property(e => e.IsPropiedadCliente).HasColumnName("IS_PROPIEDAD_CLIENTE");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CArchivo>(entity =>
        {
            entity.HasKey(e => e.IdArchivo);

            entity.ToTable("C_ARCHIVOS");

            entity.Property(e => e.IdArchivo).HasColumnName("ID_ARCHIVO");
            entity.Property(e => e.DescArchivo)
                .IsUnicode(false)
                .HasColumnName("DESC_ARCHIVO");
            entity.Property(e => e.FechaAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_ALTA");
            entity.Property(e => e.IsAlmacenMasivo).HasColumnName("IS_ALMACEN_MASIVO");
            entity.Property(e => e.IsCerradoExito).HasColumnName("IS_CERRADO_EXITO");
            entity.Property(e => e.IsEnvio).HasColumnName("IS_ENVIO");
            entity.Property(e => e.IsRecepcion).HasColumnName("IS_RECEPCION");
            entity.Property(e => e.NombreArchivo)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("NOMBRE_ARCHIVO");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CArea>(entity =>
        {
            entity.HasKey(e => e.IdArea);

            entity.ToTable("C_AREAS");

            entity.Property(e => e.IdArea).HasColumnName("ID_AREA");
            entity.Property(e => e.DescArea)
                .HasMaxLength(75)
                .IsUnicode(false)
                .HasColumnName("DESC_AREA");
            entity.Property(e => e.FechaAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_ALTA");
            entity.Property(e => e.IdJefeArea).HasColumnName("ID_JEFE_AREA");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CBanco>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("C_BANCOS");

            entity.Property(e => e.DescBanco)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_BANCO");
            entity.Property(e => e.IdBanco)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_BANCO");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CBbvaMicroformasServicio>(entity =>
        {
            entity.HasKey(e => e.IdBbva).HasName("PK__C_BBVA_M__705754273FA11A03");

            entity.ToTable("C_BBVA_MICROFORMAS_SERVICIOS");

            entity.Property(e => e.IdBbva).HasColumnName("ID_BBVA");
            entity.Property(e => e.DesservBbva)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESSERV_BBVA");
            entity.Property(e => e.IdFalla).HasColumnName("ID_FALLA");
            entity.Property(e => e.IdSegmento).HasColumnName("ID_SEGMENTO");
            entity.Property(e => e.IdServicio).HasColumnName("ID_SERVICIO");
            entity.Property(e => e.TipoServicio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("TIPO_SERVICIO");
            entity.Property(e => e.Vim)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("VIM");
        });

        modelBuilder.Entity<CBitacoraAgendadosComentario>(entity =>
        {
            entity.HasKey(e => e.IdBitacoraAgendadosComentarios);

            entity.ToTable("C_BITACORA_AGENDADOS_COMENTARIOS");

            entity.Property(e => e.IdBitacoraAgendadosComentarios).HasColumnName("ID_BITACORA_AGENDADOS_COMENTARIOS");
            entity.Property(e => e.Comentario)
                .HasMaxLength(450)
                .IsUnicode(false)
                .HasColumnName("COMENTARIO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CCalifJuntum>(entity =>
        {
            entity.HasKey(e => e.IdCalifJunta);

            entity.ToTable("C_CALIF_JUNTA");

            entity.Property(e => e.IdCalifJunta).HasColumnName("ID_CALIF_JUNTA");
            entity.Property(e => e.CalifJunta)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("CALIF_JUNTA");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdStatusJunta).HasColumnName("ID_STATUS_JUNTA");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CCanale>(entity =>
        {
            entity.HasKey(e => e.IdCanal).HasName("PK__C_CANALE__6C4D2FE6A370FF03");

            entity.ToTable("C_CANALES");

            entity.Property(e => e.IdCanal).HasColumnName("ID_CANAL");
            entity.Property(e => e.DescCanal)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_CANAL");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CCarrier>(entity =>
        {
            entity.HasKey(e => e.IdCarrier);

            entity.ToTable("C_CARRIER");

            entity.Property(e => e.IdCarrier).HasColumnName("ID_CARRIER");
            entity.Property(e => e.Caracter)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CARACTER");
            entity.Property(e => e.CaracterObligatorio).HasColumnName("CARACTER_OBLIGATORIO");
            entity.Property(e => e.DescCarrier)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_CARRIER");
            entity.Property(e => e.DigitoVerificador).HasColumnName("DIGITO_VERIFICADOR");
            entity.Property(e => e.LetraMax).HasColumnName("LETRA_MAX");
            entity.Property(e => e.LetraMin).HasColumnName("LETRA_MIN");
            entity.Property(e => e.LongMax).HasColumnName("LONG_MAX");
            entity.Property(e => e.LongMin).HasColumnName("LONG_MIN");
            entity.Property(e => e.NumMax).HasColumnName("NUM_MAX");
            entity.Property(e => e.NumMin).HasColumnName("NUM_MIN");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CCategoriaValidaDispositivo>(entity =>
        {
            entity.HasKey(e => e.IdCategoriaValidaDispositivos);

            entity.ToTable("C_CATEGORIA_VALIDA_DISPOSITIVOS");

            entity.Property(e => e.IdCategoriaValidaDispositivos).HasColumnName("ID_CATEGORIA_VALIDA_DISPOSITIVOS");
            entity.Property(e => e.DescIdentificador)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESC_IDENTIFICADOR");
            entity.Property(e => e.Identificador)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IDENTIFICADOR");
        });

        modelBuilder.Entity<CCategorium>(entity =>
        {
            entity.HasKey(e => e.IdCategoria).HasName("PK__C_CATEGO__4BD51FA5239B33CE");

            entity.ToTable("C_CATEGORIA");

            entity.Property(e => e.IdCategoria).HasColumnName("ID_CATEGORIA");
            entity.Property(e => e.DescCategoria)
                .IsUnicode(false)
                .HasColumnName("DESC_CATEGORIA");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CCausa>(entity =>
        {
            entity.HasKey(e => e.IdCausa);

            entity.ToTable("C_CAUSAS");

            entity.HasIndex(e => new { e.IdCausa, e.IdCliente, e.Status, e.DescCausa }, "IX_C_CAUSAS");

            entity.Property(e => e.IdCausa).HasColumnName("ID_CAUSA");
            entity.Property(e => e.Clave)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CLAVE");
            entity.Property(e => e.DescCausa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_CAUSA");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CCausaCancelacion>(entity =>
        {
            entity.HasKey(e => e.IdCausaCancelacion).HasName("PK__C_CAUSA___D74935B60C901E7D");

            entity.ToTable("C_CAUSA_CANCELACION");

            entity.HasIndex(e => new { e.IdCliente, e.IdCausaCancelacion, e.DescCausaCancelacion, e.Status }, "IX_C_CAUSA_CANCELACION");

            entity.Property(e => e.IdCausaCancelacion).HasColumnName("ID_CAUSA_CANCELACION");
            entity.Property(e => e.DescCausaCancelacion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_CAUSA_CANCELACION");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdTipoCancelado).HasColumnName("ID_TIPO_CANCELADO");
            entity.Property(e => e.Status)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CCausaCancelacionSolicitudAlmacen>(entity =>
        {
            entity.HasKey(e => e.IdCausaCancelacionSolicitudAlmacen);

            entity.ToTable("C_CAUSA_CANCELACION_SOLICITUD_ALMACEN");

            entity.Property(e => e.IdCausaCancelacionSolicitudAlmacen).HasColumnName("ID_CAUSA_CANCELACION_SOLICITUD_ALMACEN");
            entity.Property(e => e.DescCausaCancelacionSolicitudAlmacen)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("DESC_CAUSA_CANCELACION_SOLICITUD_ALMACEN");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CCausaRetiro>(entity =>
        {
            entity.HasKey(e => e.IdCausaRetiro).HasName("PK__C_CAUSA___A118E7CB20DB452D");

            entity.ToTable("C_CAUSA_RETIRO");

            entity.Property(e => e.IdCausaRetiro).HasColumnName("ID_CAUSA_RETIRO");
            entity.Property(e => e.CausaRetiro)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CAUSA_RETIRO");
            entity.Property(e => e.FechaAlta)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ALTA");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Status)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CCausasRechazo>(entity =>
        {
            entity.HasKey(e => e.IdCausaRechazo);

            entity.ToTable("C_CAUSAS_RECHAZO");

            entity.HasIndex(e => new { e.IdCliente, e.IdTrechazo }, "IX_C_CAUSAS_RECHAZO");

            entity.HasIndex(e => e.IdTrechazo, "IX_C_CAUSAS_RECHAZO_1");

            entity.Property(e => e.IdCausaRechazo).HasColumnName("ID_CAUSA_RECHAZO");
            entity.Property(e => e.DescCausaRechazo)
                .IsUnicode(false)
                .HasColumnName("DESC_CAUSA_RECHAZO");
            entity.Property(e => e.Descripcion)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdTrechazo).HasColumnName("ID_TRECHAZO");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.StatusReasonCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("status_reason_code");
        });

        modelBuilder.Entity<CCausasRechazoDefinitivoDoctoPrefacturacion>(entity =>
        {
            entity.HasKey(e => e.IdCausaRechazoDefinitivoDoctoPrefacturacion);

            entity.ToTable("C_CAUSAS_RECHAZO_DEFINITIVO_DOCTO_PREFACTURACION");

            entity.Property(e => e.IdCausaRechazoDefinitivoDoctoPrefacturacion).HasColumnName("ID_CAUSA_RECHAZO_DEFINITIVO_DOCTO_PREFACTURACION");
            entity.Property(e => e.DescCausaRechazoDefinitivoDoctoPrefacturacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_CAUSA_RECHAZO_DEFINITIVO_DOCTO_PREFACTURACION");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CCausasRechazoSegmento>(entity =>
        {
            entity.HasKey(e => e.IdCausaRechazoSegmento);

            entity.ToTable("C_CAUSAS_RECHAZO_SEGMENTO");

            entity.Property(e => e.IdCausaRechazoSegmento).HasColumnName("ID_CAUSA_RECHAZO_SEGMENTO");
            entity.Property(e => e.IdCausaRechazo).HasColumnName("ID_CAUSA_RECHAZO");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdSegmento).HasColumnName("ID_SEGMENTO");
        });

        modelBuilder.Entity<CChofere>(entity =>
        {
            entity.HasKey(e => e.IdChofer);

            entity.ToTable("C_CHOFERES");

            entity.Property(e => e.IdChofer).HasColumnName("ID_CHOFER");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdServicioMensajeria).HasColumnName("ID_SERVICIO_MENSAJERIA");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Materno)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MATERNO");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NOMBRE");
            entity.Property(e => e.Paterno)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PATERNO");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CCliente>(entity =>
        {
            entity.HasKey(e => e.IdCliente).HasName("PK_BD_CLIENTES");

            entity.ToTable("C_CLIENTES");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.CadenaWincor)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CADENA_WINCOR");
            entity.Property(e => e.CentroCostos)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CENTRO_COSTOS");
            entity.Property(e => e.CharCodigoIntervencion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CHAR_CODIGO_INTERVENCION");
            entity.Property(e => e.DescCliente)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_CLIENTE");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");
            entity.Property(e => e.DocTir)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DOC_TIR");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdAccess).HasColumnName("ID_ACCESS");
            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");
            entity.Property(e => e.IdTipoCalculoUptime)
                .HasDefaultValueSql("((1))")
                .HasColumnName("ID_TIPO_CALCULO_UPTIME");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Is3X1).HasColumnName("IS_3_X_1");
            entity.Property(e => e.IsAddReplicate).HasColumnName("IS_ADD_REPLICATE");
            entity.Property(e => e.IsArUnico).HasColumnName("IS_AR_UNICO");
            entity.Property(e => e.IsArUpdatesNegocio)
                .HasDefaultValueSql("((0))")
                .HasColumnName("IS_AR_UPDATES_NEGOCIO");
            entity.Property(e => e.IsAsignacionAuto).HasColumnName("IS_ASIGNACION_AUTO");
            entity.Property(e => e.IsAsignacionMasiva).HasColumnName("IS_ASIGNACION_MASIVA");
            entity.Property(e => e.IsCierreMasivo).HasColumnName("IS_CIERRE_MASIVO");
            entity.Property(e => e.IsElavon).HasColumnName("IS_ELAVON");
            entity.Property(e => e.IsEmailServiceCharge).HasColumnName("IS_EMAIL_SERVICE_CHARGE");
            entity.Property(e => e.IsFacturacionAutomatica).HasColumnName("IS_FACTURACION_AUTOMATICA");
            entity.Property(e => e.IsFacturacionIguala).HasColumnName("IS_FACTURACION_IGUALA");
            entity.Property(e => e.IsFecGarantiaChange).HasColumnName("IS_FEC_GARANTIA_CHANGE");
            entity.Property(e => e.IsFecInicioDefault).HasColumnName("IS_FEC_INICIO_DEFAULT");
            entity.Property(e => e.IsIdReq)
                .HasDefaultValueSql("((0))")
                .HasColumnName("IS_ID_REQ");
            entity.Property(e => e.IsInterfazSantander).HasColumnName("IS_INTERFAZ_SANTANDER");
            entity.Property(e => e.IsLab)
                .HasDefaultValueSql("((0))")
                .HasColumnName("IS_LAB");
            entity.Property(e => e.IsModFecCita).HasColumnName("is_mod_fec_cita");
            entity.Property(e => e.IsModifiedAr).HasColumnName("IS_MODIFIED_AR");
            entity.Property(e => e.IsNumericNoAfiliacion)
                .HasDefaultValueSql("((0))")
                .HasColumnName("IS_NUMERIC_NO_AFILIACION");
            entity.Property(e => e.IsNumericNoAr)
                .HasDefaultValueSql("((1))")
                .HasColumnName("IS_NUMERIC_NO_AR");
            entity.Property(e => e.IsOneUnidad).HasColumnName("IS_ONE_UNIDAD");
            entity.Property(e => e.IsPagoEvento).HasColumnName("IS_PAGO_EVENTO");
            entity.Property(e => e.IsPagoIguala).HasColumnName("IS_PAGO_IGUALA");
            entity.Property(e => e.IsPendienteParte).HasColumnName("IS_PENDIENTE_PARTE");
            entity.Property(e => e.IsPrecioDoble).HasColumnName("IS_PRECIO_DOBLE");
            entity.Property(e => e.IsPrefacturacion)
                .HasDefaultValueSql("((0))")
                .HasColumnName("IS_PREFACTURACION");
            entity.Property(e => e.IsReparaciones)
                .HasDefaultValueSql("((0))")
                .HasColumnName("IS_REPARACIONES");
            entity.Property(e => e.IsReporteAr)
                .HasDefaultValueSql("((0))")
                .HasColumnName("IS_REPORTE_AR");
            entity.Property(e => e.IsRetipificados)
                .HasDefaultValueSql("((0))")
                .HasColumnName("IS_RETIPIFICADOS");
            entity.Property(e => e.IsRetornoAccesorios).HasColumnName("IS_RETORNO_ACCESORIOS");
            entity.Property(e => e.IsSegmentoDelimitador).HasColumnName("IS_SEGMENTO_DELIMITADOR");
            entity.Property(e => e.IsSendHistory).HasColumnName("IS_SEND_HISTORY");
            entity.Property(e => e.IsSingleMovInv)
                .HasDefaultValueSql("((0))")
                .HasColumnName("IS_SINGLE_MOV_INV");
            entity.Property(e => e.IsSustitucionNoNeeded).HasColumnName("IS_SUSTITUCION_NO_NEEDED");
            entity.Property(e => e.IsTimeNeeded).HasColumnName("IS_TIME_NEEDED");
            entity.Property(e => e.IsUnidadAtendidaRequired)
                .HasDefaultValueSql("((0))")
                .HasColumnName("IS_UNIDAD_ATENDIDA_REQUIRED");
            entity.Property(e => e.IsUptime)
                .HasDefaultValueSql("((0))")
                .HasColumnName("IS_UPTIME");
            entity.Property(e => e.IsValidaTir).HasColumnName("IS_VALIDA_TIR");
            entity.Property(e => e.IsVisitaCobrable)
                .HasDefaultValueSql("((0))")
                .HasColumnName("IS_VISITA_COBRABLE");
            entity.Property(e => e.IsWincor)
                .HasDefaultValueSql("((0))")
                .HasColumnName("IS_WINCOR");
            entity.Property(e => e.IsWincorTiempo).HasColumnName("IS_WINCOR_TIEMPO");
            entity.Property(e => e.NoPoliticaViaticos).HasColumnName("NO_POLITICA_VIATICOS");
            entity.Property(e => e.PorRechazo)
                .HasDefaultValueSql("((0))")
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("POR_RECHAZO");
            entity.Property(e => e.PorUptime)
                .HasDefaultValueSql("((99.7))")
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("POR_UPTIME");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");

            entity.HasOne(d => d.IdTipoCalculoUptimeNavigation).WithMany(p => p.CClientes)
                .HasForeignKey(d => d.IdTipoCalculoUptime)
                .HasConstraintName("FK_C_CLIENTES_C_TIPO_CALCULO_UPTIME");
        });

        modelBuilder.Entity<CClientesPmo>(entity =>
        {
            entity.HasKey(e => e.IdClienteProducto);

            entity.ToTable("C_CLIENTES_PMO");

            entity.HasIndex(e => e.IdCliente, "IX_C_CLIENTES_PMO").IsUnique();

            entity.HasIndex(e => new { e.IdCliente, e.IdProducto }, "IX_C_CLIENTES_PMO_1");

            entity.HasIndex(e => e.IdProducto, "IX_C_CLIENTES_PMO_2");

            entity.Property(e => e.IdClienteProducto).HasColumnName("ID_CLIENTE_PRODUCTO");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CCodigosIntervencionNivel0>(entity =>
        {
            entity.HasKey(e => e.IdCodigoNivel0);

            entity.ToTable("C_CODIGOS_INTERVENCION_NIVEL0");

            entity.Property(e => e.IdCodigoNivel0).HasColumnName("ID_CODIGO_NIVEL0");
            entity.Property(e => e.ClaveCodigo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CLAVE_CODIGO");
            entity.Property(e => e.DescCodigo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_CODIGO");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdTipoMedida).HasColumnName("ID_TIPO_MEDIDA");
            entity.Property(e => e.ReportaInstalacion).HasColumnName("REPORTA_INSTALACION");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CCodigosIntervencionNivel1>(entity =>
        {
            entity.HasKey(e => e.IdCodigoNivel1);

            entity.ToTable("C_CODIGOS_INTERVENCION_NIVEL1");

            entity.Property(e => e.IdCodigoNivel1).HasColumnName("ID_CODIGO_NIVEL1");
            entity.Property(e => e.ClaveCodigo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CLAVE_CODIGO");
            entity.Property(e => e.DescCodigo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_CODIGO");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdParentNivel0).HasColumnName("ID_PARENT_NIVEL0");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");

            entity.HasOne(d => d.IdParentNivel0Navigation).WithMany(p => p.CCodigosIntervencionNivel1s)
                .HasForeignKey(d => d.IdParentNivel0)
                .HasConstraintName("FK_C_CODIGOS_INTERVENCION_NIVEL1_C_CODIGOS_INTERVENCION_NIVEL0");
        });

        modelBuilder.Entity<CCodigosIntervencionNivel2>(entity =>
        {
            entity.HasKey(e => e.IdCodigoNivel2);

            entity.ToTable("C_CODIGOS_INTERVENCION_NIVEL2");

            entity.Property(e => e.IdCodigoNivel2).HasColumnName("ID_CODIGO_NIVEL2");
            entity.Property(e => e.ClaveCodigo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CLAVE_CODIGO");
            entity.Property(e => e.DescCodigo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_CODIGO");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdParentNivel0).HasColumnName("ID_PARENT_NIVEL0");
            entity.Property(e => e.IdParentNivel1).HasColumnName("ID_PARENT_NIVEL1");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CConceptoAr>(entity =>
        {
            entity.HasKey(e => e.IdConcepto);

            entity.ToTable("C_CONCEPTO_AR");

            entity.Property(e => e.IdConcepto).HasColumnName("ID_CONCEPTO");
            entity.Property(e => e.DescripcionConceptoAr)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CONCEPTO_AR");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CConceptosPmo>(entity =>
        {
            entity.HasKey(e => e.IdConceptosPmo);

            entity.ToTable("C_CONCEPTOS_PMO");

            entity.HasIndex(e => new { e.DescConcepto, e.IdTipoConcepto, e.IdAplica }, "IX_C_CONCEPTOS_PMO").IsUnique();

            entity.Property(e => e.IdConceptosPmo).HasColumnName("ID_CONCEPTOS_PMO");
            entity.Property(e => e.DescConcepto)
                .HasMaxLength(40)
                .IsFixedLength()
                .HasColumnName("DESC_CONCEPTO");
            entity.Property(e => e.IdAplica).HasColumnName("ID_APLICA");
            entity.Property(e => e.IdTipoConcepto).HasColumnName("ID_TIPO_CONCEPTO");
        });

        modelBuilder.Entity<CConectividad>(entity =>
        {
            entity.HasKey(e => e.IdConectividad).HasName("PK__C_CONECT__890C867F684A2BA3");

            entity.ToTable("C_CONECTIVIDAD");

            entity.HasIndex(e => new { e.IdConectividad, e.IdCliente, e.Status, e.DescConectividad }, "IX_C_CONECTIVIDAD");

            entity.HasIndex(e => new { e.IdProducto, e.DescConectividad, e.IdConectividad, e.IdCliente }, "IX_C_CONECTIVIDAD_1");

            entity.Property(e => e.IdConectividad).HasColumnName("ID_CONECTIVIDAD");
            entity.Property(e => e.DescConectividad)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_CONECTIVIDAD");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");
            entity.Property(e => e.FechaAlta)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ALTA");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.IsConjunto).HasColumnName("IS_CONJUNTO");
            entity.Property(e => e.IsGprs).HasColumnName("IS_GPRS");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CConectividadSantanderReporte>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("C_CONECTIVIDAD_SANTANDER_REPORTE");

            entity.Property(e => e.Activouobsoleto)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("ACTIVOUOBSOLETO");
            entity.Property(e => e.Aplicativo)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("APLICATIVO");
            entity.Property(e => e.Conectividad)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("CONECTIVIDAD");
            entity.Property(e => e.DescMarca)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("DESC_MARCA");
            entity.Property(e => e.DescModelo)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("DESC_MODELO");
            entity.Property(e => e.IdMarca).HasColumnName("ID_MARCA");
            entity.Property(e => e.IdModelo).HasColumnName("ID_MODELO");
            entity.Property(e => e.ModeloHomologado)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("MODELO_HOMOLOGADO");
            entity.Property(e => e.Tecnologia)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("TECNOLOGIA");
            entity.Property(e => e.TerminalesCifradas)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("TERMINALES_CIFRADAS");
            entity.Property(e => e.VersionCifrada)
                .HasMaxLength(700)
                .IsUnicode(false)
                .HasColumnName("VERSION_CIFRADA");
        });

        modelBuilder.Entity<CConsecutivo3m>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("C_CONSECUTIVO_3M");

            entity.Property(e => e.Autoriza1Email)
                .HasMaxLength(50)
                .IsFixedLength()
                .HasColumnName("Autoriza_1_email");
            entity.Property(e => e.Autoriza2Email)
                .HasMaxLength(50)
                .IsFixedLength()
                .HasColumnName("Autoriza_2_email");
            entity.Property(e => e.Autoriza3Email)
                .HasMaxLength(50)
                .IsFixedLength()
                .HasColumnName("Autoriza_3_email");
            entity.Property(e => e.Tc).HasColumnName("TC");
        });

        modelBuilder.Entity<CConsumible>(entity =>
        {
            entity.HasKey(e => e.IdConsumible);

            entity.ToTable("C_CONSUMIBLES");

            entity.Property(e => e.IdConsumible).HasColumnName("ID_CONSUMIBLE");
            entity.Property(e => e.Costo)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("COSTO");
            entity.Property(e => e.DescConsumible)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_CONSUMIBLE");
            entity.Property(e => e.FechaAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_ALTA");
            entity.Property(e => e.FechaStatus)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_STATUS");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.IdUsuarioStatus).HasColumnName("ID_USUARIO_STATUS");
            entity.Property(e => e.Marca)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("MARCA");
            entity.Property(e => e.Modulo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("MODULO");
            entity.Property(e => e.NoParte)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NO_PARTE");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CCpDarBbva94>(entity =>
        {
            entity.HasKey(e => e.IdCp).HasName("PK__C_CP_DAR__8B622F9B96D5D183");

            entity.ToTable("C_CP_DAR_BBVA_94");

            entity.Property(e => e.IdCp).HasColumnName("ID_CP");
            entity.Property(e => e.DAsenta)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("D_ASENTA");
            entity.Property(e => e.DCiudad)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("D_CIUDAD");
            entity.Property(e => e.DCodigo).HasColumnName("D_CODIGO");
            entity.Property(e => e.DCodigoNum).HasColumnName("D_CODIGO_NUM");
            entity.Property(e => e.DEstado)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("D_ESTADO");
            entity.Property(e => e.DMunicipio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("D_MUNICIPIO");
            entity.Property(e => e.DTipoAsenta)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("D_TIPO_ASENTA");
            entity.Property(e => e.DarOrigen)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DAR_ORIGEN");
            entity.Property(e => e.Div)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DIV");
            entity.Property(e => e.Respaldo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("RESPALDO");
        });

        modelBuilder.Entity<CCpProsa>(entity =>
        {
            entity.HasKey(e => e.IdCpProsa);

            entity.ToTable("C_CP_PROSA");

            entity.Property(e => e.IdCpProsa).HasColumnName("ID_CP_PROSA");
            entity.Property(e => e.Colonia)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("COLONIA");
            entity.Property(e => e.Cp)
                .HasMaxLength(5)
                .IsFixedLength()
                .HasColumnName("CP");
            entity.Property(e => e.Estado)
                .HasMaxLength(30)
                .IsFixedLength()
                .HasColumnName("ESTADO");
            entity.Property(e => e.Estatus)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("ESTATUS");
            entity.Property(e => e.FechaCarga)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_CARGA");
            entity.Property(e => e.Municipio)
                .HasMaxLength(60)
                .IsFixedLength()
                .HasColumnName("MUNICIPIO");
            entity.Property(e => e.Poblacion)
                .HasMaxLength(60)
                .IsFixedLength()
                .HasColumnName("POBLACION");
            entity.Property(e => e.Zona).HasColumnName("ZONA");
        });

        modelBuilder.Entity<CDatosTerminalProsaAbc>(entity =>
        {
            entity.HasKey(e => e.IdDatosTerminalProsaAbc).HasName("PK__C_DATOS___11C1123F5B57E4FB");

            entity.ToTable("C_DATOS_TERMINAL_PROSA_ABC");

            entity.Property(e => e.IdDatosTerminalProsaAbc).HasColumnName("ID_DATOS_TERMINAL_PROSA_ABC");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Longitud).HasColumnName("LONGITUD");
            entity.Property(e => e.Nombre)
                .IsUnicode(false)
                .HasColumnName("NOMBRE");
            entity.Property(e => e.Posicion).HasColumnName("POSICION");
            entity.Property(e => e.Status)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.TipoCampo)
                .IsUnicode(false)
                .HasColumnName("TIPO_CAMPO");
            entity.Property(e => e.TipoDato)
                .IsUnicode(false)
                .HasColumnName("TIPO_DATO");
            entity.Property(e => e.ValorDefecto)
                .IsUnicode(false)
                .HasColumnName("VALOR_DEFECTO");
        });

        modelBuilder.Entity<CDatosTerminalProsaAbcConfSalidum>(entity =>
        {
            entity.HasKey(e => e.IdDatosTerminalProsaAbcConfSalida).HasName("PK__C_DATOS___BA3C807236228089");

            entity.ToTable("C_DATOS_TERMINAL_PROSA_ABC_CONF_SALIDA");

            entity.Property(e => e.IdDatosTerminalProsaAbcConfSalida).HasColumnName("ID_DATOS_TERMINAL_PROSA_ABC_CONF_SALIDA");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.Longitud).HasColumnName("LONGITUD");
            entity.Property(e => e.NombreCampo)
                .IsUnicode(false)
                .HasColumnName("NOMBRE_CAMPO");
            entity.Property(e => e.Posicion).HasColumnName("POSICION");
            entity.Property(e => e.Status)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CDescripcionTrabajo>(entity =>
        {
            entity.HasKey(e => e.IdDescripcionTrabajo);

            entity.ToTable("C_DESCRIPCION_TRABAJO");

            entity.Property(e => e.IdDescripcionTrabajo).HasColumnName("ID_DESCRIPCION_TRABAJO");
            entity.Property(e => e.DescTrabajo)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("DESC_TRABAJO");
            entity.Property(e => e.IdEspecifTipoFalla).HasColumnName("ID_ESPECIF_TIPO_FALLA");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CDesviacione>(entity =>
        {
            entity.HasKey(e => e.IdDesviacion);

            entity.ToTable("C_DESVIACIONES");

            entity.HasIndex(e => new { e.IdCliente, e.Status, e.IsAdministradorLogistico }, "IX_MI_C_DESVIACIONES_59_58");

            entity.HasIndex(e => new { e.Status, e.IsAdministradorLogistico }, "IX_MI_C_DESVIACIONES_61_60");

            entity.Property(e => e.IdDesviacion).HasColumnName("ID_DESVIACION");
            entity.Property(e => e.DescDesviacion)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("DESC_DESVIACION");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdResponsable).HasColumnName("ID_RESPONSABLE");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.IsAdministradorLogistico).HasColumnName("IS_ADMINISTRADOR_LOGISTICO");
            entity.Property(e => e.IsDesviacionTemp).HasColumnName("IS_DESVIACION_TEMP");
            entity.Property(e => e.IsLaboratorio).HasColumnName("IS_LABORATORIO");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CDireccione>(entity =>
        {
            entity.HasKey(e => e.IdDirecciones);

            entity.ToTable("C_DIRECCIONES");

            entity.Property(e => e.IdDirecciones).HasColumnName("ID_DIRECCIONES");
            entity.Property(e => e.DescDireccion)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("DESC_DIRECCION");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdDireccionesJefe).HasColumnName("ID_DIRECCIONES_JEFE");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Status)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CDocsTir>(entity =>
        {
            entity.HasKey(e => e.IdDocsTir);

            entity.ToTable("C_DOCS_TIR");

            entity.Property(e => e.IdDocsTir).HasColumnName("ID_DOCS_TIR");
            entity.Property(e => e.DescDoc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("DESC_DOC");
            entity.Property(e => e.DocTir)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DOC_TIR");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CDominiosEmail>(entity =>
        {
            entity.HasKey(e => e.IdDominioEmail);

            entity.ToTable("C_DOMINIOS_EMAIL");

            entity.Property(e => e.IdDominioEmail).HasColumnName("ID_DOMINIO_EMAIL");
            entity.Property(e => e.DescDominioEmail)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_DOMINIO_EMAIL");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CElavonSantanderServicio>(entity =>
        {
            entity.HasKey(e => e.IdElavon).HasName("PK__C_ELAVON__5597FC3F896F8739");

            entity.ToTable("C_ELAVON_SANTANDER_SERVICIOS");

            entity.Property(e => e.IdElavon).HasColumnName("ID_ELAVON");
            entity.Property(e => e.DescServicioElavon)
                .IsUnicode(false)
                .HasColumnName("DESC_SERVICIO_ELAVON");
            entity.Property(e => e.IdFalla).HasColumnName("ID_FALLA");
            entity.Property(e => e.IdSegmento).HasColumnName("ID_SEGMENTO");
            entity.Property(e => e.IdServicio).HasColumnName("ID_SERVICIO");
            entity.Property(e => e.IsReparado).HasColumnName("IS_REPARADO");
            entity.Property(e => e.ServiciosSgs)
                .IsUnicode(false)
                .HasColumnName("SERVICIOS_SGS");
            entity.Property(e => e.SubtipoServicio)
                .IsUnicode(false)
                .HasColumnName("SUBTIPO_SERVICIO");
            entity.Property(e => e.Vip)
                .IsUnicode(false)
                .HasColumnName("VIP");
        });

        modelBuilder.Entity<CEmisoresEmail>(entity =>
        {
            entity.HasKey(e => e.IdEmisorEmail).HasName("PK__C_EMISOR__78798FCFA50007B5");

            entity.ToTable("C_EMISORES_EMAIL");

            entity.Property(e => e.IdEmisorEmail).HasColumnName("ID_EMISOR_EMAIL");
            entity.Property(e => e.DescEmisorEmail)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_EMISOR_EMAIL");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CEquipoCliente>(entity =>
        {
            entity.HasKey(e => e.IdEquipoCliente);

            entity.ToTable("C_EQUIPO_CLIENTE");

            entity.Property(e => e.IdEquipoCliente).HasColumnName("ID_EQUIPO_CLIENTE");
            entity.Property(e => e.DescripcionEquipo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_EQUIPO");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CEstadosDarBbva94>(entity =>
        {
            entity.HasKey(e => e.IdEstado).HasName("PK__C_ESTADO__241E2E01900C67EE");

            entity.ToTable("C_ESTADOS_DAR_BBVA_94");

            entity.Property(e => e.IdEstado).HasColumnName("ID_ESTADO");
            entity.Property(e => e.Dar)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DAR");
            entity.Property(e => e.Estado)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ESTADO");
            entity.Property(e => e.Proveedor)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("PROVEEDOR");
        });

        modelBuilder.Entity<CEtiquetaInformacionCierre>(entity =>
        {
            entity.HasKey(e => e.IdEtiquetaInformacionCierre).HasName("PK__C_ETIQUE__A8E02856BFD281CE");

            entity.ToTable("C_ETIQUETA_INFORMACION_CIERRE");

            entity.Property(e => e.IdEtiquetaInformacionCierre).HasColumnName("ID_ETIQUETA_INFORMACION_CIERRE");
            entity.Property(e => e.CampoServicio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CAMPO_SERVICIO");
            entity.Property(e => e.DescEtiquetaInformacionCierre)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_ETIQUETA_INFORMACION_CIERRE");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Ruta)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("RUTA");
            entity.Property(e => e.Status)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.Tipo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("TIPO");
        });

        modelBuilder.Entity<CEtiquetaInformacionRechazo>(entity =>
        {
            entity.HasKey(e => e.IdEtiquetaInformacionRechazo).HasName("PK__C_ETIQUE__4D80EA389BCF967B");

            entity.ToTable("C_ETIQUETA_INFORMACION_RECHAZO");

            entity.Property(e => e.IdEtiquetaInformacionRechazo).HasColumnName("ID_ETIQUETA_INFORMACION_RECHAZO");
            entity.Property(e => e.CampoServicio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CAMPO_SERVICIO");
            entity.Property(e => e.DescEtiquetaInformacionRechazo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_ETIQUETA_INFORMACION_RECHAZO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Ruta)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("RUTA");
            entity.Property(e => e.Status)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.Tipo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("TIPO");
        });

        modelBuilder.Entity<CEtiquetaInformacionUnidad>(entity =>
        {
            entity.HasKey(e => e.IdEtiquetaInformacionUnidad);

            entity.ToTable("C_ETIQUETA_INFORMACION_UNIDAD");

            entity.Property(e => e.IdEtiquetaInformacionUnidad).HasColumnName("ID_ETIQUETA_INFORMACION_UNIDAD");
            entity.Property(e => e.DescEtiquetaInformacionUnidad)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("DESC_ETIQUETA_INFORMACION_UNIDAD");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CFalla>(entity =>
        {
            entity.HasKey(e => e.IdFalla).HasName("PK_BD_FALLAS");

            entity.ToTable("C_FALLAS");

            entity.HasIndex(e => new { e.IdFalla, e.IdCliente, e.Status, e.DescFalla }, "IX_C_FALLAS");

            entity.Property(e => e.IdFalla).HasColumnName("ID_FALLA");
            entity.Property(e => e.Codigo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CODIGO");
            entity.Property(e => e.DescFalla)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("DESC_FALLA");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdTipoFalla).HasColumnName("ID_TIPO_FALLA");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.IsDowntime)
                .HasDefaultValueSql("((0))")
                .HasColumnName("IS_DOWNTIME");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CFallasEncontrada>(entity =>
        {
            entity.HasKey(e => e.IdFalla);

            entity.ToTable("C_FALLAS_ENCONTRADAS");

            entity.Property(e => e.IdFalla).HasColumnName("ID_FALLA");
            entity.Property(e => e.DescFalla)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_FALLA");
            entity.Property(e => e.FecAlta)
                .HasColumnType("date")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Status)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CGrupo>(entity =>
        {
            entity.HasKey(e => e.IdGrupo);

            entity.ToTable("C_GRUPOS");

            entity.Property(e => e.IdGrupo).HasColumnName("ID_GRUPO");
            entity.Property(e => e.DescGrupo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_GRUPO");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdDocsTir).HasColumnName("ID_DOCS_TIR");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CHora>(entity =>
        {
            entity.HasKey(e => e.IdHora);

            entity.ToTable("C_HORAS");

            entity.Property(e => e.IdHora).HasColumnName("ID_HORA");
            entity.Property(e => e.NoHora)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("NO_HORA");
        });

        modelBuilder.Entity<CHorario>(entity =>
        {
            entity.HasKey(e => e.IdHorario).HasName("PK_C_UPTIME");

            entity.ToTable("C_HORARIOS");

            entity.Property(e => e.IdHorario).HasColumnName("ID_HORARIO");
            entity.Property(e => e.DescHorario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_HORARIO");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CHorariosPersonal>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("C_HORARIOS_PERSONAL");

            entity.Property(e => e.DescHorarioPersonal)
                .HasMaxLength(75)
                .IsUnicode(false)
                .HasColumnName("DESC_HORARIO_PERSONAL");
            entity.Property(e => e.FechaAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_ALTA");
            entity.Property(e => e.IdHorarioPersonal)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_HORARIO_PERSONAL");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Inicio).HasColumnName("INICIO");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.Termino).HasColumnName("TERMINO");
        });

        modelBuilder.Entity<CInsumo>(entity =>
        {
            entity.HasKey(e => e.IdInsumo).HasName("PK_C_INSUMOS_1");

            entity.ToTable("C_INSUMOS");

            entity.Property(e => e.IdInsumo).HasColumnName("ID_INSUMO");
            entity.Property(e => e.Costo)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("COSTO");
            entity.Property(e => e.DescInsumo)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("DESC_INSUMO");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdTipoInsumo).HasColumnName("ID_TIPO_INSUMO");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.IsAgrupacion).HasColumnName("IS_AGRUPACION");
            entity.Property(e => e.IsControlInsumos).HasColumnName("IS_CONTROL_INSUMOS");
            entity.Property(e => e.Precio)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("PRECIO");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CInsumosAltum>(entity =>
        {
            entity.HasKey(e => e.IdInsumo);

            entity.ToTable("C_INSUMOS_ALTA");

            entity.Property(e => e.IdInsumo).HasColumnName("ID_INSUMO");
            entity.Property(e => e.Costo)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("COSTO");
            entity.Property(e => e.DescInsumo)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("DESC_INSUMO");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdTipoInsumo).HasColumnName("ID_TIPO_INSUMO");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Precio)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("PRECIO");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CInsumosOld>(entity =>
        {
            entity.HasKey(e => e.IdInsumo).HasName("PK_C_INSUMOS");

            entity.ToTable("C_INSUMOS_OLD");

            entity.HasIndex(e => new { e.IdCliente, e.Status }, "IX_C_INSUMOS_ID_CLIENTE_STATUS");

            entity.Property(e => e.IdInsumo).HasColumnName("ID_INSUMO");
            entity.Property(e => e.Costo)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("COSTO");
            entity.Property(e => e.DescInsumo)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("DESC_INSUMO");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdTipoInsumo).HasColumnName("ID_TIPO_INSUMO");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Precio)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("PRECIO");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");

            entity.HasOne(d => d.IdTipoInsumoNavigation).WithMany(p => p.CInsumosOlds)
                .HasForeignKey(d => d.IdTipoInsumo)
                .HasConstraintName("FK_C_INSUMOS_C_TIPO_INSUMO");
        });

        modelBuilder.Entity<CLayout>(entity =>
        {
            entity.HasKey(e => e.IdLayout).HasName("PK__C_LAYOUT__5B142612FE7EB56B");

            entity.ToTable("C_LAYOUTS");

            entity.Property(e => e.IdLayout).HasColumnName("ID_LAYOUT");
            entity.Property(e => e.DescLayout)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_LAYOUT");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Status)
                .HasDefaultValueSql("((1))")
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CLlafe>(entity =>
        {
            entity.HasKey(e => e.IdLlave).HasName("PK_BD_LLAVES");

            entity.ToTable("C_LLAVES");

            entity.Property(e => e.IdLlave).HasColumnName("ID_LLAVE");
            entity.Property(e => e.DescLlave)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_LLAVE");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CLogro>(entity =>
        {
            entity.HasKey(e => e.IdTipoLogro);

            entity.ToTable("C_LOGROS");

            entity.Property(e => e.IdTipoLogro).HasColumnName("ID_TIPO_LOGRO");
            entity.Property(e => e.DescLogro)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_LOGRO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CMarca>(entity =>
        {
            entity.HasKey(e => e.IdMarca);

            entity.ToTable("C_MARCAS");

            entity.Property(e => e.IdMarca).HasColumnName("ID_MARCA");
            entity.Property(e => e.DescMarca)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_MARCA");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");
            entity.Property(e => e.IdAccess).HasColumnName("ID_ACCESS");
            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");

            entity.HasOne(d => d.IdProductoNavigation).WithMany(p => p.CMarcas)
                .HasForeignKey(d => d.IdProducto)
                .HasConstraintName("FK_C_MARCAS_C_PRODUCTOS");
        });

        modelBuilder.Entity<CMcAutomovile>(entity =>
        {
            entity.HasKey(e => e.IdAutomovil).HasName("PK_BD_MC_AUTOMOVILES");

            entity.ToTable("C_MC_AUTOMOVILES");

            entity.Property(e => e.IdAutomovil).HasColumnName("ID_AUTOMOVIL");
            entity.Property(e => e.DescMarca)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("DESC_MARCA");
            entity.Property(e => e.DescModelo)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("DESC_MODELO");
            entity.Property(e => e.Estatus)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("ESTATUS");
            entity.Property(e => e.IdMedioTransporte).HasColumnName("ID_MEDIO_TRANSPORTE");
            entity.Property(e => e.IdTecnico).HasColumnName("ID_TECNICO");
            entity.Property(e => e.Niv)
                .HasMaxLength(18)
                .IsUnicode(false)
                .HasColumnName("NIV");
            entity.Property(e => e.Placas)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("PLACAS");
            entity.Property(e => e.RendimientoPorLitro).HasColumnName("RENDIMIENTO_POR_LITRO");
            entity.Property(e => e.Tipo)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("TIPO");
        });

        modelBuilder.Entity<CMcBoleto>(entity =>
        {
            entity.HasKey(e => e.IdBoleto).HasName("PK_BD_MC_BOLETOS");

            entity.ToTable("C_MC_BOLETOS");

            entity.Property(e => e.IdBoleto).HasColumnName("ID_BOLETO");
            entity.Property(e => e.Costo)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("COSTO");
            entity.Property(e => e.DescNombre)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_NOMBRE");
            entity.Property(e => e.Estatus)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ESTATUS");
        });

        modelBuilder.Entity<CMcBoletosRuta>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("C_MC_BOLETOS_RUTAS");

            entity.Property(e => e.IdBoleto).HasColumnName("ID_BOLETO");
            entity.Property(e => e.IdRuta).HasColumnName("ID_RUTA");
        });

        modelBuilder.Entity<CMcCaseta>(entity =>
        {
            entity.HasKey(e => e.IdCaseta).HasName("PK_BD_MC_CASETAS");

            entity.ToTable("C_MC_CASETAS");

            entity.Property(e => e.IdCaseta).HasColumnName("ID_CASETA");
            entity.Property(e => e.Costo)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("COSTO");
            entity.Property(e => e.DescCaseta)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_CASETA");
            entity.Property(e => e.Estatus)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ESTATUS");
        });

        modelBuilder.Entity<CMcCasetasRuta>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("C_MC_CASETAS_RUTAS");

            entity.Property(e => e.IdCaseta).HasColumnName("ID_CASETA");
            entity.Property(e => e.IdRuta).HasColumnName("ID_RUTA");
        });

        modelBuilder.Entity<CMcEstacionEvaluar>(entity =>
        {
            entity.HasKey(e => e.IdEstacionEvaluar).HasName("PK__C_MC_EST__F5C80A3C6FBA24D6");

            entity.ToTable("C_MC_ESTACION_EVALUAR");

            entity.Property(e => e.IdEstacionEvaluar).HasColumnName("ID_ESTACION_EVALUAR");
            entity.Property(e => e.DescripcionEstacion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ESTACION");
        });

        modelBuilder.Entity<CMcEstacionEvaluarRegla>(entity =>
        {
            entity.HasKey(e => e.IdEstacionEvaluarReglas).HasName("PK__C_MC_EST__0BA40FA67B2BD782");

            entity.ToTable("C_MC_ESTACION_EVALUAR_REGLAS");

            entity.Property(e => e.IdEstacionEvaluarReglas).HasColumnName("ID_ESTACION_EVALUAR_REGLAS");
            entity.Property(e => e.DanadoMaxTiempo).HasColumnName("DANADO_MAX_TIEMPO");
            entity.Property(e => e.DanadoMinTiempo).HasColumnName("DANADO_MIN_TIEMPO");
            entity.Property(e => e.DescripcionEstacionReglas)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ESTACION_REGLAS");
            entity.Property(e => e.IdEstacionEvaluar).HasColumnName("ID_ESTACION_EVALUAR");
            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");
            entity.Property(e => e.IdStatusUnidad).HasColumnName("ID_STATUS_UNIDAD");
            entity.Property(e => e.MaxTiempo).HasColumnName("MAX_TIEMPO");
            entity.Property(e => e.MinTiempo).HasColumnName("MIN_TIEMPO");
            entity.Property(e => e.Regla)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("REGLA");
        });

        modelBuilder.Entity<CMcMedioTransporte>(entity =>
        {
            entity.HasKey(e => e.IdMedioTransporte).HasName("PK_BD_MC_MEDIO_TRANSPORTE");

            entity.ToTable("C_MC_MEDIO_TRANSPORTE");

            entity.Property(e => e.IdMedioTransporte).HasColumnName("ID_MEDIO_TRANSPORTE");
            entity.Property(e => e.CostoPorCaseta)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("COSTO_POR_CASETA");
            entity.Property(e => e.CostoPorKm)
                .IsRequired()
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("COSTO_POR_KM");
            entity.Property(e => e.CostoPorMantenimiento)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("COSTO_POR_MANTENIMIENTO");
            entity.Property(e => e.DescNombre)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_NOMBRE");
            entity.Property(e => e.Estatus)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ESTATUS");
            entity.Property(e => e.IsAutobus).HasColumnName("IS_AUTOBUS");
            entity.Property(e => e.IsCasetas).HasColumnName("IS_CASETAS");
            entity.Property(e => e.IsMantenimiento).HasColumnName("IS_MANTENIMIENTO");
        });

        modelBuilder.Entity<CMcRuta>(entity =>
        {
            entity.HasKey(e => e.IdRuta).HasName("PK_BD_MC_RUTAS");

            entity.ToTable("C_MC_RUTAS");

            entity.Property(e => e.IdRuta).HasColumnName("ID_RUTA");
            entity.Property(e => e.DescNombre)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DESC_NOMBRE");
            entity.Property(e => e.EstadoDestino)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ESTADO_DESTINO");
            entity.Property(e => e.EstadoOrigen)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ESTADO_ORIGEN");
            entity.Property(e => e.Estatus)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("ESTATUS");
            entity.Property(e => e.PoblacionDestino)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("POBLACION_DESTINO");
            entity.Property(e => e.PoblacionOrigen)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("POBLACION_ORIGEN");
        });

        modelBuilder.Entity<CMcTopesMaximo>(entity =>
        {
            entity.HasKey(e => e.IdTopeMaximo);

            entity.ToTable("C_MC_TOPES_MAXIMOS");

            entity.Property(e => e.IdTopeMaximo).HasColumnName("ID_TOPE_MAXIMO");
            entity.Property(e => e.Estatus)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ESTATUS");
            entity.Property(e => e.IdViatico).HasColumnName("ID_VIATICO");
            entity.Property(e => e.PrecioMaximo)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("PRECIO_MAXIMO");
        });

        modelBuilder.Entity<CMcViaticosMotivo>(entity =>
        {
            entity.HasKey(e => e.IdMotivo).HasName("PK__C_MC_VIA__007C6C354A3E8764");

            entity.ToTable("C_MC_VIATICOS_MOTIVOS");

            entity.Property(e => e.IdMotivo).HasColumnName("ID_MOTIVO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Motivo)
                .IsRequired()
                .HasMaxLength(400)
                .IsUnicode(false)
                .HasColumnName("MOTIVO");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(19)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CMcViaticosRazonesCancelacion>(entity =>
        {
            entity.HasKey(e => e.IdRazon).HasName("PK__C_MC_VIA__E5BA9BD16B156B4A");

            entity.ToTable("C_MC_VIATICOS_RAZONES_CANCELACION");

            entity.Property(e => e.IdRazon).HasColumnName("ID_RAZON");
            entity.Property(e => e.Comentario)
                .IsRequired()
                .HasMaxLength(400)
                .IsUnicode(false)
                .HasColumnName("COMENTARIO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(19)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CMenu>(entity =>
        {
            entity.HasKey(e => e.IdMenu);

            entity.ToTable("C_MENU");

            entity.Property(e => e.IdMenu).HasColumnName("ID_MENU");
            entity.Property(e => e.DesMenu)
                .HasMaxLength(50)
                .HasColumnName("DES_MENU");
            entity.Property(e => e.DesName)
                .HasMaxLength(75)
                .HasColumnName("DES_NAME");
            entity.Property(e => e.Href)
                .IsUnicode(false)
                .HasColumnName("HREF");
            entity.Property(e => e.HrefV3)
                .IsUnicode(false)
                .HasColumnName("HREF_V3");
            entity.Property(e => e.IdParent).HasColumnName("ID_PARENT");
            entity.Property(e => e.IdParentV3).HasColumnName("ID_PARENT_V3");
            entity.Property(e => e.Image)
                .HasMaxLength(50)
                .HasColumnName("IMAGE");
            entity.Property(e => e.IsV2).HasColumnName("IS_V2");
            entity.Property(e => e.IsV3).HasColumnName("IS_V3");
            entity.Property(e => e.Nivel).HasColumnName("NIVEL");
            entity.Property(e => e.NivelV3).HasColumnName("NIVEL_V3");
            entity.Property(e => e.Orden).HasColumnName("ORDEN");
            entity.Property(e => e.OrdenV3).HasColumnName("ORDEN_V3");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasColumnName("STATUS");
            entity.Property(e => e.Target)
                .HasMaxLength(50)
                .HasColumnName("TARGET");
            entity.Property(e => e.TargetV3)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TARGET_V3");
        });

        modelBuilder.Entity<CMenuCopium>(entity =>
        {
            entity.HasKey(e => e.IdMenu);

            entity.ToTable("C_MENU_COPIA");

            entity.Property(e => e.IdMenu)
                .ValueGeneratedNever()
                .HasColumnName("ID_MENU");
            entity.Property(e => e.DesMenu)
                .HasMaxLength(50)
                .HasColumnName("DES_MENU");
            entity.Property(e => e.DesName)
                .HasMaxLength(75)
                .HasColumnName("DES_NAME");
            entity.Property(e => e.Href)
                .IsUnicode(false)
                .HasColumnName("HREF");
            entity.Property(e => e.HrefV3)
                .IsUnicode(false)
                .HasColumnName("HREF_V3");
            entity.Property(e => e.IdParent).HasColumnName("ID_PARENT");
            entity.Property(e => e.IdParentV3).HasColumnName("ID_PARENT_V3");
            entity.Property(e => e.Image)
                .HasMaxLength(50)
                .HasColumnName("IMAGE");
            entity.Property(e => e.IsV2).HasColumnName("IS_V2");
            entity.Property(e => e.IsV3).HasColumnName("IS_V3");
            entity.Property(e => e.Nivel).HasColumnName("NIVEL");
            entity.Property(e => e.NivelV3).HasColumnName("NIVEL_V3");
            entity.Property(e => e.Orden).HasColumnName("ORDEN");
            entity.Property(e => e.OrdenV3).HasColumnName("ORDEN_V3");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasColumnName("STATUS");
            entity.Property(e => e.Target)
                .HasMaxLength(50)
                .HasColumnName("TARGET");
            entity.Property(e => e.TargetV3)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TARGET_V3");
        });

        modelBuilder.Entity<CMinuto>(entity =>
        {
            entity.HasKey(e => e.IdMinuto);

            entity.ToTable("C_MINUTOS");

            entity.Property(e => e.IdMinuto).HasColumnName("ID_MINUTO");
            entity.Property(e => e.NoMinuto)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("NO_MINUTO");
        });

        modelBuilder.Entity<CModelo>(entity =>
        {
            entity.HasKey(e => e.IdModelo);

            entity.ToTable("C_MODELOS");

            entity.HasIndex(e => new { e.Sku, e.IdModelo, e.Status }, "IX_C_MODELOS")
                .IsUnique()
                .HasFillFactor(80);

            entity.HasIndex(e => e.Status, "IX_C_MODELOS_STATUS");

            entity.HasIndex(e => e.Status, "IX_MI_C_MODELOS_118_117");

            entity.HasIndex(e => new { e.IdMarca, e.Status }, "IX_MI_C_MODELOS_124_123");

            entity.HasIndex(e => new { e.Status, e.Sku }, "IX_MI_C_MODELOS_171_170");

            entity.HasIndex(e => e.IdMarca, "IX_MI_C_MODELOS_261_260");

            entity.HasIndex(e => new { e.IdMarca, e.Status }, "IX_MI_C_MODELOS_263_262");

            entity.HasIndex(e => e.Status, "IX_MI_C_MODELOS_271_270");

            entity.HasIndex(e => new { e.IdMarca, e.Status }, "IX_MI_C_MODELOS_35_34");

            entity.HasIndex(e => new { e.IdMarca, e.Status }, "IX_MI_C_MODELOS_53_52");

            entity.Property(e => e.IdModelo).HasColumnName("ID_MODELO");
            entity.Property(e => e.Costo)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("COSTO");
            entity.Property(e => e.DescModelo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_MODELO");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");
            entity.Property(e => e.DeviceType)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("device_type");
            entity.Property(e => e.DeviceTypeCategory)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("device_type_category");
            entity.Property(e => e.IdAccess).HasColumnName("ID_ACCESS");
            entity.Property(e => e.IdAttachImagenModelo).HasColumnName("ID_ATTACH_IMAGEN_MODELO");
            entity.Property(e => e.IdMarca).HasColumnName("ID_MARCA");
            entity.Property(e => e.IdMonedaCosto).HasColumnName("ID_MONEDA_COSTO");
            entity.Property(e => e.IdStatusModelo).HasColumnName("ID_STATUS_MODELO");
            entity.Property(e => e.IsConectividad).HasColumnName("IS_CONECTIVIDAD");
            entity.Property(e => e.IsConjunto).HasColumnName("IS_CONJUNTO");
            entity.Property(e => e.IsContacless).HasColumnName("IS_CONTACLESS");
            entity.Property(e => e.IsGprs).HasColumnName("IS_GPRS");
            entity.Property(e => e.IsItems).HasColumnName("IS_ITEMS");
            entity.Property(e => e.IsMulticonectividad).HasColumnName("IS_MULTICONECTIVIDAD");
            entity.Property(e => e.IsReporteSims).HasColumnName("IS_REPORTE_SIMS");
            entity.Property(e => e.MultiConectividad).HasColumnName("MULTI_CONECTIVIDAD");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SKU");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");

            entity.HasOne(d => d.IdMonedaCostoNavigation).WithMany(p => p.CModelos)
                .HasForeignKey(d => d.IdMonedaCosto)
                .HasConstraintName("FK_C_MODELOS_C_MONEDAS");
        });

        modelBuilder.Entity<CModelosValidosEglobal>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("C_MODELOS_VALIDOS_EGLOBAL");

            entity.Property(e => e.Aplicacion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("APLICACION");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdModelo).HasColumnName("ID_MODELO");
            entity.Property(e => e.Modelo)
                .HasMaxLength(400)
                .IsUnicode(false)
                .HasColumnName("MODELO");
            entity.Property(e => e.Reporte)
                .HasMaxLength(400)
                .IsUnicode(false)
                .HasColumnName("REPORTE");
            entity.Property(e => e.Sim)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("SIM");
            entity.Property(e => e.Tecnologia)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("TECNOLOGIA");
        });

        modelBuilder.Entity<CMoneda>(entity =>
        {
            entity.HasKey(e => e.IdMoneda);

            entity.ToTable("C_MONEDAS");

            entity.Property(e => e.IdMoneda).HasColumnName("ID_MONEDA");
            entity.Property(e => e.DescMoneda)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_MONEDA");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CMovInv>(entity =>
        {
            entity.HasKey(e => e.IdMovInv);

            entity.ToTable("C_MOV_INV");

            entity.Property(e => e.IdMovInv).HasColumnName("ID_MOV_INV");
            entity.Property(e => e.Corto)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CORTO");
            entity.Property(e => e.DescMovInv)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_MOV_INV");
            entity.Property(e => e.Href)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HREF");
            entity.Property(e => e.IsObligatorio).HasColumnName("IS_OBLIGATORIO");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CMovimientosInv>(entity =>
        {
            entity.HasKey(e => e.IdMovInventario).HasName("PK__C_MOVIMI__2898EE8B37C8C352");

            entity.ToTable("C_MOVIMIENTOS_INV");

            entity.Property(e => e.IdMovInventario).HasColumnName("ID_MOV_INVENTARIO");
            entity.Property(e => e.DescMovInventario)
                .IsUnicode(false)
                .HasColumnName("DESC_MOV_INVENTARIO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Status)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CMovmientosInvArchivo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("C_MOVMIENTOS_INV_ARCHIVOS");

            entity.Property(e => e.FechaAlta)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ALTA");
            entity.Property(e => e.IdArchivoMovimiento)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_ARCHIVO_MOVIMIENTO");
        });

        modelBuilder.Entity<CNivelReparacion>(entity =>
        {
            entity.HasKey(e => e.IdNivelReparacion);

            entity.ToTable("C_NIVEL_REPARACION");

            entity.HasIndex(e => e.IdNivelReparacion, "IX_C_NIVEL_REPARACION").IsUnique();

            entity.Property(e => e.IdNivelReparacion).HasColumnName("ID_NIVEL_REPARACION");
            entity.Property(e => e.DescNivelReparacion)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("DESC_NIVEL_REPARACION");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CNombreArchivoAbc>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("C_NOMBRE_ARCHIVO_ABC");

            entity.Property(e => e.FechaAlta)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ALTA");
            entity.Property(e => e.NoEnvio)
                .ValueGeneratedOnAdd()
                .HasColumnName("NO_ENVIO");
            entity.Property(e => e.Nombre)
                .IsUnicode(false)
                .HasColumnName("NOMBRE");
            entity.Property(e => e.Nombre2)
                .IsUnicode(false)
                .HasColumnName("NOMBRE2");
        });

        modelBuilder.Entity<CNombreArchivoAbcRecibido>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("C_NOMBRE_ARCHIVO_ABC_RECIBIDO");

            entity.Property(e => e.Corte)
                .ValueGeneratedOnAdd()
                .HasColumnName("CORTE");
            entity.Property(e => e.FechaAlta)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ALTA");
        });

        modelBuilder.Entity<CNombreCurso>(entity =>
        {
            entity.HasKey(e => e.IdNombreCurso).HasName("PK_C_CURSO");

            entity.ToTable("C_NOMBRE_CURSO");

            entity.Property(e => e.IdNombreCurso).HasColumnName("ID_NOMBRE_CURSO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.NombreCurso)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("NOMBRE_CURSO");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CNombreJuntum>(entity =>
        {
            entity.HasKey(e => e.IdNombreJunta);

            entity.ToTable("C_NOMBRE_JUNTA");

            entity.Property(e => e.IdNombreJunta).HasColumnName("ID_NOMBRE_JUNTA");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.NeedArea).HasColumnName("NEED_AREA");
            entity.Property(e => e.NombreJunta)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("NOMBRE_JUNTA");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CNotificacionesEmail>(entity =>
        {
            entity.HasKey(e => e.IdNotificacionesEmail).HasName("PK__C_NOTIFI__049DF4E05339656F");

            entity.ToTable("C_NOTIFICACIONES_EMAIL");

            entity.Property(e => e.IdNotificacionesEmail).HasColumnName("ID_NOTIFICACIONES_EMAIL");
            entity.Property(e => e.DescNotificacion)
                .IsUnicode(false)
                .HasColumnName("DESC_NOTIFICACION");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Status)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.Valor)
                .IsUnicode(false)
                .HasColumnName("VALOR");
        });

        modelBuilder.Entity<COperadore>(entity =>
        {
            entity.HasKey(e => e.IdOperador);

            entity.ToTable("C_OPERADORES");

            entity.Property(e => e.IdOperador).HasColumnName("ID_OPERADOR");
            entity.Property(e => e.DescOperador)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_OPERADOR");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<COtrosCliente>(entity =>
        {
            entity.HasKey(e => e.IdOtrosClientes).HasName("PK__C_OTROS___E81D6EA131C86097");

            entity.ToTable("C_OTROS_CLIENTES");

            entity.HasIndex(e => e.IdOtrosClientes, "IX_C_OTROS_CLIENTES_ID_OTROS_CLIENTES");

            entity.Property(e => e.IdOtrosClientes).HasColumnName("ID_OTROS_CLIENTES");
            entity.Property(e => e.DescOtrosClientes)
                .IsUnicode(false)
                .HasColumnName("DESC_OTROS_CLIENTES");
            entity.Property(e => e.FechaAlta)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ALTA");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Status)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CPlantillasDeployment>(entity =>
        {
            entity.HasKey(e => e.IdPlantillaDeployment).HasName("PK__C_PLANTI__4A51330ABCAA581B");

            entity.ToTable("C_PLANTILLAS_DEPLOYMENT");

            entity.Property(e => e.IdPlantillaDeployment).HasColumnName("ID_PLANTILLA_DEPLOYMENT");
            entity.Property(e => e.Archivo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ARCHIVO");
            entity.Property(e => e.DescPlantilla)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_PLANTILLA");
            entity.Property(e => e.Estatus).HasColumnName("ESTATUS");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
        });

        modelBuilder.Entity<CPlantillasEmail>(entity =>
        {
            entity.HasKey(e => e.IdPlantillaEmail).HasName("PK__C_PLANTI__6B956D1797ED9526");

            entity.ToTable("C_PLANTILLAS_EMAILS");

            entity.Property(e => e.IdPlantillaEmail).HasColumnName("ID_PLANTILLA_EMAIL");
            entity.Property(e => e.DescPlantilla)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_PLANTILLA");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdMailjet).HasColumnName("ID_MAILJET");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.Status).HasColumnName("STATUS");
        });

        modelBuilder.Entity<CPlaza>(entity =>
        {
            entity.HasKey(e => e.IdPlaza);

            entity.ToTable("C_PLAZAS");

            entity.Property(e => e.IdPlaza).HasColumnName("ID_PLAZA");
            entity.Property(e => e.DescPlaza)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_PLAZA");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdTipoPlaza).HasColumnName("ID_TIPO_PLAZA");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");

            entity.HasOne(d => d.IdTipoPlazaNavigation).WithMany(p => p.CPlazas)
                .HasForeignKey(d => d.IdTipoPlaza)
                .HasConstraintName("FK_C_PLAZAS_C_TIPO_PLAZA");
        });

        modelBuilder.Entity<CPrioridade>(entity =>
        {
            entity.HasKey(e => e.IdPrioridades);

            entity.ToTable("C_PRIORIDADES");

            entity.Property(e => e.IdPrioridades).HasColumnName("ID_PRIORIDADES");
            entity.Property(e => e.DescPrioridades)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("DESC_PRIORIDADES");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CProducto>(entity =>
        {
            entity.HasKey(e => e.IdProducto);

            entity.ToTable("C_PRODUCTOS");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");
            entity.Property(e => e.Class)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CLASS");
            entity.Property(e => e.ClassEdit)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CLASS_EDIT");
            entity.Property(e => e.DescProducto)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_PRODUCTO");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");
            entity.Property(e => e.IdParent).HasColumnName("ID_PARENT");
            entity.Property(e => e.IdTipoProducto).HasColumnName("ID_TIPO_PRODUCTO");
            entity.Property(e => e.Image)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMAGE");
            entity.Property(e => e.ImageEdit)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMAGE_EDIT");
            entity.Property(e => e.ImageInactive)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMAGE_INACTIVE");
            entity.Property(e => e.IsAccesorios).HasColumnName("IS_ACCESORIOS");
            entity.Property(e => e.IsBom).HasColumnName("IS_BOM");
            entity.Property(e => e.IsGprs).HasColumnName("IS_GPRS");
            entity.Property(e => e.IsInsumos).HasColumnName("IS_INSUMOS");
            entity.Property(e => e.IsKey).HasColumnName("IS_KEY");
            entity.Property(e => e.IsSoftware).HasColumnName("IS_SOFTWARE");
            entity.Property(e => e.IsSpareParts).HasColumnName("IS_SPARE_PARTS");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");

            entity.HasOne(d => d.IdTipoProductoNavigation).WithMany(p => p.CProductos)
                .HasForeignKey(d => d.IdTipoProducto)
                .HasConstraintName("FK_C_PRODUCTOS_C_TIPO_PRODUCTO");
        });

        modelBuilder.Entity<CProductoDhl>(entity =>
        {
            entity.HasKey(e => e.IdProductoDhl).HasName("PK__c_producto_dhl__7D102741");

            entity.ToTable("c_producto_dhl");

            entity.Property(e => e.IdProductoDhl)
                .ValueGeneratedNever()
                .HasColumnName("id_producto_dhl");
            entity.Property(e => e.DescProductoDhl)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("desc_producto_dhl");
            entity.Property(e => e.NomProductoDhl)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("nom_producto_dhl");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("status");
        });

        modelBuilder.Entity<CProductosNegocio>(entity =>
        {
            entity.HasKey(e => e.IdProductoNegocio).HasName("PK__C_PRODUC__14F134FAE99D68E4");

            entity.ToTable("C_PRODUCTOS_NEGOCIOS");

            entity.HasIndex(e => new { e.IdProductoNegocio, e.Status }, "IX_C_PRODUCTOS_NEGOCIOS");

            entity.Property(e => e.IdProductoNegocio).HasColumnName("ID_PRODUCTO_NEGOCIO");
            entity.Property(e => e.DescProductoNegocio)
                .IsUnicode(false)
                .HasColumnName("DESC_PRODUCTO_NEGOCIO");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CProductosPmo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("C_PRODUCTOS_PMO");

            entity.Property(e => e.DescProducto)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_PRODUCTO");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");
            entity.Property(e => e.IdProducto)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_PRODUCTO");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CProsaAbc>(entity =>
        {
            entity.HasKey(e => e.IdProsaAbc).HasName("PK__C_PROSA___D625DF87000F3DE7");

            entity.ToTable("C_PROSA_ABC");

            entity.Property(e => e.IdProsaAbc).HasColumnName("ID_PROSA_ABC");
            entity.Property(e => e.DescProsaAbc)
                .IsUnicode(false)
                .HasColumnName("DESC_PROSA_ABC");
            entity.Property(e => e.IdFalla).HasColumnName("ID_FALLA");
            entity.Property(e => e.IdProductoNegocio).HasColumnName("ID_PRODUCTO_NEGOCIO");
            entity.Property(e => e.IdServicio).HasColumnName("ID_SERVICIO");
            entity.Property(e => e.IdStatusArProsa).HasColumnName("ID_STATUS_AR_PROSA");
            entity.Property(e => e.IdStatusArProveedor).HasColumnName("ID_STATUS_AR_PROVEEDOR");
            entity.Property(e => e.IsUnique).HasColumnName("IS_UNIQUE");
            entity.Property(e => e.OdtProsa).HasColumnName("ODT_PROSA");
            entity.Property(e => e.OdtProveedor).HasColumnName("ODT_PROVEEDOR");
            entity.Property(e => e.OrdenProsa).HasColumnName("ORDEN_PROSA");
            entity.Property(e => e.OrdenProveedor).HasColumnName("ORDEN_PROVEEDOR");
        });

        modelBuilder.Entity<CProveedoresUsuario>(entity =>
        {
            entity.HasKey(e => e.IdProveedorUsuario).HasName("PK__C_PROVEE__EBE413EEBA61EF7D");

            entity.ToTable("C_PROVEEDORES_USUARIOS");

            entity.HasIndex(e => new { e.IdProveedorUsuario, e.DescProveedorUsuario }, "IX_C_PROVEEDORES_USUARIOS");

            entity.Property(e => e.IdProveedorUsuario).HasColumnName("ID_PROVEEDOR_USUARIO");
            entity.Property(e => e.DescProveedorUsuario)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_PROVEEDOR_USUARIO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IsCierreEspecial).HasColumnName("IS_CIERRE_ESPECIAL");
            entity.Property(e => e.IsReparador).HasColumnName("IS_REPARADOR");
            entity.Property(e => e.Status)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CProyecto>(entity =>
        {
            entity.HasKey(e => e.IdProyecto).HasName("PK_BD_PROYECTOS");

            entity.ToTable("C_PROYECTOS");

            entity.Property(e => e.IdProyecto).HasColumnName("ID_PROYECTO");
            entity.Property(e => e.DescProyecto)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("DESC_PROYECTO");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(400)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");
            entity.Property(e => e.FecGarantia)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_GARANTIA");
            entity.Property(e => e.FecInicio)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_INICIO");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.NumUnidades).HasColumnName("NUM_UNIDADES");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CProyectosEspeciale>(entity =>
        {
            entity.HasKey(e => e.IdProyectoEspecial);

            entity.ToTable("C_PROYECTOS_ESPECIALES");

            entity.Property(e => e.IdProyectoEspecial).HasColumnName("ID_PROYECTO_ESPECIAL");
            entity.Property(e => e.AplicaBloqueCierre)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("APLICA_BLOQUE_CIERRE");
            entity.Property(e => e.AplicaCierres).HasColumnName("APLICA_CIERRES");
            entity.Property(e => e.CallCenter).HasColumnName("CALL_CENTER");
            entity.Property(e => e.CargaMasiva).HasColumnName("CARGA_MASIVA");
            entity.Property(e => e.DescProyectoEspecial)
                .HasMaxLength(50)
                .IsFixedLength()
                .HasColumnName("DESC_PROYECTO_ESPECIAL");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.InterfaseOnbase).HasColumnName("INTERFASE_ONBASE");
            entity.Property(e => e.Status).HasColumnName("STATUS");
        });

        modelBuilder.Entity<CProyectosPmo>(entity =>
        {
            entity.HasKey(e => e.IdProyectoPmo);

            entity.ToTable("C_PROYECTOS_PMO");

            entity.HasIndex(e => new { e.IdCliente, e.IdUsuario }, "IX_C_PROYECTOS_PMO").IsUnique();

            entity.Property(e => e.IdProyectoPmo).HasColumnName("ID_PROYECTO_PMO");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.Perfil)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("PERFIL");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CPrueba>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("C_PRUEBAS");

            entity.Property(e => e.Celular)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CELULAR");
            entity.Property(e => e.ComentariosOki).HasColumnName("COMENTARIOS_OKI");
            entity.Property(e => e.Credencial)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("CREDENCIAL");
            entity.Property(e => e.Curp)
                .HasMaxLength(18)
                .IsUnicode(false)
                .HasColumnName("CURP");
            entity.Property(e => e.DiasVacaciones).HasColumnName("DIAS_VACACIONES");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("EMAIL");
            entity.Property(e => e.EmailServiceClose).HasColumnName("EMAIL_SERVICE_CLOSE");
            entity.Property(e => e.ExcelUltimoMov).HasColumnName("EXCEL_ULTIMO_MOV");
            entity.Property(e => e.ExcelUsuarioCierre).HasColumnName("EXCEL_USUARIO_CIERRE");
            entity.Property(e => e.FecAccesoPda)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ACCESO_PDA");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.FecBaja)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_BAJA");
            entity.Property(e => e.FecExp)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_EXP");
            entity.Property(e => e.FecIngreso)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_INGRESO");
            entity.Property(e => e.FecNac)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_NAC");
            entity.Property(e => e.FecReingreso)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_REINGRESO");
            entity.Property(e => e.FecStatus)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_STATUS");
            entity.Property(e => e.Frase)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("FRASE");
            entity.Property(e => e.HrefFoto)
                .HasMaxLength(75)
                .IsUnicode(false)
                .HasColumnName("HREF_FOTO");
            entity.Property(e => e.IdAlmacenOld).HasColumnName("ID_ALMACEN_OLD");
            entity.Property(e => e.IdArea).HasColumnName("ID_AREA");
            entity.Property(e => e.IdDatosFiscales).HasColumnName("ID_DATOS_FISCALES");
            entity.Property(e => e.IdDirecciones).HasColumnName("ID_DIRECCIONES");
            entity.Property(e => e.IdEdoNac).HasColumnName("ID_EDO_NAC");
            entity.Property(e => e.IdHorario).HasColumnName("ID_HORARIO");
            entity.Property(e => e.IdJefe).HasColumnName("ID_JEFE");
            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");
            entity.Property(e => e.IdPuesto).HasColumnName("ID_PUESTO");
            entity.Property(e => e.IdTipoUsuario).HasColumnName("ID_TIPO_USUARIO");
            entity.Property(e => e.IdUsuario)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_USUARIO");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.IdUsuarioStatus).HasColumnName("ID_USUARIO_STATUS");
            entity.Property(e => e.IdZona).HasColumnName("ID_ZONA");
            entity.Property(e => e.IsActualizacionMasivaCoordenadasNegocio).HasColumnName("IS_ACTUALIZACION_MASIVA_COORDENADAS_NEGOCIO");
            entity.Property(e => e.IsAddReplicate).HasColumnName("IS_ADD_REPLICATE");
            entity.Property(e => e.IsAdiministrarUsuarios).HasColumnName("IS_ADIMINISTRAR_USUARIOS");
            entity.Property(e => e.IsAllCliente).HasColumnName("IS_ALL_CLIENTE");
            entity.Property(e => e.IsAltaMasivaNegocios).HasColumnName("IS_ALTA_MASIVA_NEGOCIOS");
            entity.Property(e => e.IsAltaMasivaViaticos).HasColumnName("IS_ALTA_MASIVA_VIATICOS");
            entity.Property(e => e.IsAutorizaVacaciones).HasColumnName("IS_AUTORIZA_VACACIONES");
            entity.Property(e => e.IsCache).HasColumnName("IS_CACHE");
            entity.Property(e => e.IsCallCenterContacto).HasColumnName("IS_CALL_CENTER_CONTACTO");
            entity.Property(e => e.IsCambioStatusUnidadInstaladas).HasColumnName("IS_CAMBIO_STATUS_UNIDAD_INSTALADAS");
            entity.Property(e => e.IsCambioStatusUnidadReglaDisponibleUsado).HasColumnName("IS_CAMBIO_STATUS_UNIDAD_REGLA_DISPONIBLE_USADO");
            entity.Property(e => e.IsCambioStatusUnidadReglaDisponibleUsuado).HasColumnName("IS_CAMBIO_STATUS_UNIDAD_REGLA_DISPONIBLE_USUADO");
            entity.Property(e => e.IsConsultaUnidad).HasColumnName("IS_CONSULTA_UNIDAD");
            entity.Property(e => e.IsDaniadaUsuario).HasColumnName("IS_DANIADA_USUARIO");
            entity.Property(e => e.IsDeleteDrive).HasColumnName("IS_DELETE_DRIVE");
            entity.Property(e => e.IsDispatchProgramados).HasColumnName("IS_DISPATCH_PROGRAMADOS");
            entity.Property(e => e.IsEditaNegocios).HasColumnName("IS_EDITA_NEGOCIOS");
            entity.Property(e => e.IsEditarAlmacen).HasColumnName("IS_EDITAR_ALMACEN");
            entity.Property(e => e.IsEditarEspecificacionesServicio).HasColumnName("IS_EDITAR_ESPECIFICACIONES_SERVICIO");
            entity.Property(e => e.IsElavon).HasColumnName("IS_ELAVON");
            entity.Property(e => e.IsEligeVacaciones).HasColumnName("IS_ELIGE_VACACIONES");
            entity.Property(e => e.IsEmailServiceCharge).HasColumnName("IS_EMAIL_SERVICE_CHARGE");
            entity.Property(e => e.IsExlsNegocios).HasColumnName("IS_EXLS_NEGOCIOS");
            entity.Property(e => e.IsFecGarantiaChange).HasColumnName("IS_FEC_GARANTIA_CHANGE");
            entity.Property(e => e.IsFollowerDispatch).HasColumnName("IS_FOLLOWER_DISPATCH");
            entity.Property(e => e.IsModCUsuarios).HasColumnName("is_mod_c_usuarios");
            entity.Property(e => e.IsModificaMensajeria).HasColumnName("IS_MODIFICA_MENSAJERIA");
            entity.Property(e => e.IsModifiedAr).HasColumnName("IS_MODIFIED_AR");
            entity.Property(e => e.IsNotificacionInfoUsuario).HasColumnName("IS_NOTIFICACION_INFO_USUARIO");
            entity.Property(e => e.IsNotificacionLimiteUsuarios).HasColumnName("IS_NOTIFICACION_LIMITE_USUARIOS");
            entity.Property(e => e.IsPadronIngenieros).HasColumnName("IS_PADRON_INGENIEROS");
            entity.Property(e => e.IsPda).HasColumnName("IS_PDA");
            entity.Property(e => e.IsReabrirAuditoria).HasColumnName("IS_REABRIR_AUDITORIA");
            entity.Property(e => e.IsRecoverPassword).HasColumnName("IS_RECOVER_PASSWORD");
            entity.Property(e => e.IsRedireccionEnvio).HasColumnName("IS_REDIRECCION_ENVIO");
            entity.Property(e => e.IsReporteDesviacion).HasColumnName("IS_REPORTE_DESVIACION");
            entity.Property(e => e.IsReporteLicenciasDhl).HasColumnName("IS_REPORTE_LICENCIAS_DHL");
            entity.Property(e => e.IsReporteUnidadesApi).HasColumnName("IS_REPORTE_UNIDADES_API");
            entity.Property(e => e.IsStatusCambioAbiertas).HasColumnName("is_status_cambio_abiertas");
            entity.Property(e => e.IsStolenUnit).HasColumnName("IS_STOLEN_UNIT");
            entity.Property(e => e.IsUpdatePosicionInventario).HasColumnName("IS_UPDATE_POSICION_INVENTARIO");
            entity.Property(e => e.Materno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MATERNO");
            entity.Property(e => e.ModificaMUnidad).HasColumnName("MODIFICA_M_UNIDAD");
            entity.Property(e => e.NoIdNextel)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("NO_ID_NEXTEL");
            entity.Property(e => e.NoTelNextel)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("NO_TEL_NEXTEL");
            entity.Property(e => e.Nombre)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NOMBRE");
            entity.Property(e => e.Password)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("PASSWORD");
            entity.Property(e => e.Paterno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PATERNO");
            entity.Property(e => e.Sexo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SEXO");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.Telefono)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");
            entity.Property(e => e.TelefonoCasa)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TELEFONO_CASA");
            entity.Property(e => e.TelefonoOficina)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TELEFONO_OFICINA");
            entity.Property(e => e.TelefonoOficinaExt)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("TELEFONO_OFICINA_EXT");
            entity.Property(e => e.Username)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("USERNAME");
        });

        modelBuilder.Entity<CPuesto>(entity =>
        {
            entity.HasKey(e => e.IdPuesto);

            entity.ToTable("C_PUESTOS");

            entity.Property(e => e.IdPuesto).HasColumnName("ID_PUESTO");
            entity.Property(e => e.DescPuesto)
                .HasMaxLength(75)
                .IsUnicode(false)
                .HasColumnName("DESC_PUESTO");
            entity.Property(e => e.FechaAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_ALTA");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.IsResponsable).HasColumnName("IS_RESPONSABLE");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CRazonDevolucion>(entity =>
        {
            entity.HasKey(e => e.IdRazonDevolucion);

            entity.ToTable("C_RAZON_DEVOLUCION");

            entity.Property(e => e.IdRazonDevolucion).HasColumnName("ID_RAZON_DEVOLUCION");
            entity.Property(e => e.DescRazonDevolucion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_RAZON_DEVOLUCION");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CReasignacionTecnicoStatusArProveedor>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("C_REASIGNACION_TECNICO_STATUS_AR_PROVEEDOR");

            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");
            entity.Property(e => e.IdReasignacionTecnicoStatusArProveedor)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_REASIGNACION_TECNICO_STATUS_AR_PROVEEDOR");
            entity.Property(e => e.IdStatusAr).HasColumnName("ID_STATUS_AR");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Status)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CRegione>(entity =>
        {
            entity.HasKey(e => e.IdRegion).HasName("PK_C_ZONAS");

            entity.ToTable("C_REGIONES");

            entity.HasIndex(e => new { e.IdRegion, e.Status, e.DescRegion }, "IX_C_REGIONES");

            entity.Property(e => e.IdRegion).HasColumnName("ID_REGION");
            entity.Property(e => e.Color)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("COLOR");
            entity.Property(e => e.DescRegion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_REGION");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(250)
                .HasColumnName("DESCRIPCION");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CRegionesPmo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("C_REGIONES_PMO");

            entity.Property(e => e.DescRegion)
                .HasMaxLength(30)
                .IsFixedLength()
                .HasColumnName("DESC_REGION");
            entity.Property(e => e.IdRegion).HasColumnName("ID_REGION");
        });

        modelBuilder.Entity<CReglaCancelacionServiciosFalla>(entity =>
        {
            entity.HasKey(e => e.IdReglaCancelacionServiciosFallas).HasName("PK__C_REGLA___FC739600373AF128");

            entity.ToTable("C_REGLA_CANCELACION_SERVICIOS_FALLAS");

            entity.Property(e => e.IdReglaCancelacionServiciosFallas).HasColumnName("ID_REGLA_CANCELACION_SERVICIOS_FALLAS");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdFalla).HasColumnName("ID_FALLA");
            entity.Property(e => e.IdServicio).HasColumnName("ID_SERVICIO");
            entity.Property(e => e.IdTipoCancelacion).HasColumnName("ID_TIPO_CANCELACION");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
        });

        modelBuilder.Entity<CReglasReplicasServicio>(entity =>
        {
            entity.HasKey(e => e.IdReglasReplicasServicio).HasName("PK__C_REGLAS__FB31AF4046255C68");

            entity.ToTable("C_REGLAS_REPLICAS_SERVICIO");

            entity.Property(e => e.IdReglasReplicasServicio).HasColumnName("ID_REGLAS_REPLICAS_SERVICIO");
            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");
            entity.Property(e => e.IdFalla).HasColumnName("ID_FALLA");
            entity.Property(e => e.IdServicio).HasColumnName("ID_SERVICIO");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
        });

        modelBuilder.Entity<CReglasReplicasTipoUsuario>(entity =>
        {
            entity.HasKey(e => e.IdReglasReplicasTipoUsuario).HasName("PK__C_REGLAS__8638B6F515D37A5B");

            entity.ToTable("C_REGLAS_REPLICAS_TIPO_USUARIO");

            entity.Property(e => e.IdReglasReplicasTipoUsuario).HasColumnName("ID_REGLAS_REPLICAS_TIPO_USUARIO");
            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");
            entity.Property(e => e.IdTipoUsuario).HasColumnName("ID_TIPO_USUARIO");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
        });

        modelBuilder.Entity<CReparacione>(entity =>
        {
            entity.HasKey(e => e.IdReparacion);

            entity.ToTable("C_REPARACIONES");

            entity.Property(e => e.IdReparacion).HasColumnName("ID_REPARACION");
            entity.Property(e => e.DescReparacion)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("DESC_REPARACION");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Precio)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("PRECIO");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CReporteMovInventario>(entity =>
        {
            entity.HasKey(e => e.IdReporteMovInventario);

            entity.ToTable("C_REPORTE_MOV_INVENTARIO");

            entity.Property(e => e.IdReporteMovInventario).HasColumnName("ID_REPORTE_MOV_INVENTARIO");
            entity.Property(e => e.FecFin)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_FIN");
            entity.Property(e => e.FecIni)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_INI");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CReportesRetipificado>(entity =>
        {
            entity.HasKey(e => e.IdReporteRetipificados);

            entity.ToTable("C_REPORTES_RETIPIFICADOS");

            entity.Property(e => e.IdReporteRetipificados).HasColumnName("ID_REPORTE_RETIPIFICADOS");
            entity.Property(e => e.DescReporteRetipificados)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_REPORTE_RETIPIFICADOS");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CResponsable>(entity =>
        {
            entity.HasKey(e => e.IdResponsables).HasName("PK_C_RESPONSABLES_1");

            entity.ToTable("C_RESPONSABLES");

            entity.Property(e => e.IdResponsables).HasColumnName("ID_RESPONSABLES");
            entity.Property(e => e.DescResponsable)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("DESC_RESPONSABLE");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.IsAlmacen).HasColumnName("IS_ALMACEN");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CResponsableCancelacionProgramado>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("C_RESPONSABLE_CANCELACION_PROGRAMADO");

            entity.Property(e => e.DescResponsableCancelacionProgramado)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_RESPONSABLE_CANCELACION_PROGRAMADO");
            entity.Property(e => e.IdResponsableCancelacionProgramado)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_RESPONSABLE_CANCELACION_PROGRAMADO");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CResponsablesAgendado>(entity =>
        {
            entity.HasKey(e => e.IdResponsableAgendado).HasName("PK_C_RESPONSABLES");

            entity.ToTable("C_RESPONSABLES_AGENDADOS");

            entity.Property(e => e.IdResponsableAgendado).HasColumnName("ID_RESPONSABLE_AGENDADO");
            entity.Property(e => e.DescResponsableAgendado)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_RESPONSABLE_AGENDADO");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CSedeCurso>(entity =>
        {
            entity.HasKey(e => e.IdSedeCurso);

            entity.ToTable("C_SEDE_CURSO");

            entity.Property(e => e.IdSedeCurso).HasColumnName("ID_SEDE_CURSO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.SedeCurso)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("SEDE_CURSO");
            entity.Property(e => e.Status)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CSegmento>(entity =>
        {
            entity.HasKey(e => e.IdSegmento);

            entity.ToTable("C_SEGMENTOS");

            entity.HasIndex(e => new { e.IdSegmento, e.Status, e.DescSegmento }, "IX_C_SEGMENTOS");

            entity.Property(e => e.IdSegmento).HasColumnName("ID_SEGMENTO");
            entity.Property(e => e.DescSegmento)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_SEGMENTO");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.IsKeyAccount).HasColumnName("IS_KEY_ACCOUNT");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CServicio>(entity =>
        {
            entity.HasKey(e => e.IdServicio).HasName("PK_BD_SERVICIOS");

            entity.ToTable("C_SERVICIOS");

            entity.HasIndex(e => e.Status, "IX_C_SERVICIOS_STATUS");

            entity.HasIndex(e => new { e.IdCliente, e.Status }, "IX_MI_C_SERVICIOS_10039_10038");

            entity.HasIndex(e => new { e.IdCliente, e.Status }, "IX_MI_C_SERVICIOS_124_123");

            entity.HasIndex(e => e.Status, "IX_MI_C_SERVICIOS_1963_1962");

            entity.HasIndex(e => e.Status, "IX_MI_C_SERVICIOS_2_1");

            entity.HasIndex(e => e.Status, "IX_MI_C_SERVICIOS_88_87");

            entity.Property(e => e.IdServicio).HasColumnName("ID_SERVICIO");
            entity.Property(e => e.Codigo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CODIGO");
            entity.Property(e => e.DescServicio)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("DESC_SERVICIO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdArneedFile).HasColumnName("IdARNeedFile");
            entity.Property(e => e.IdArneedNocheckup).HasColumnName("IdARNeedNOcheckup");
            entity.Property(e => e.IdArreopen).HasColumnName("IdARReopen");
            entity.Property(e => e.IdCategoriaValidaDispositivos)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ID_CATEGORIA_VALIDA_DISPOSITIVOS");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdMoneda).HasColumnName("ID_MONEDA");
            entity.Property(e => e.IdTipoPrecio).HasColumnName("ID_TIPO_PRECIO");
            entity.Property(e => e.IdTipoServicio).HasColumnName("ID_TIPO_SERVICIO");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.IsAlertReincidente).HasColumnName("IS_ALERT_REINCIDENTE");
            entity.Property(e => e.IsAplicacionRequired).HasColumnName("IS_APLICACION_REQUIRED");
            entity.Property(e => e.IsAsignacionAuto).HasColumnName("IS_ASIGNACION_AUTO");
            entity.Property(e => e.IsCadenaCierreEscritaRequired).HasColumnName("IS_CADENA_CIERRE_ESCRITA_REQUIRED");
            entity.Property(e => e.IsCajaRequired).HasColumnName("IS_CAJA_REQUIRED");
            entity.Property(e => e.IsCallCenter).HasColumnName("IS_CALL_CENTER");
            entity.Property(e => e.IsCapacidadDiscoDuroRequired).HasColumnName("IS_CAPACIDAD_DISCO_DURO_REQUIRED");
            entity.Property(e => e.IsCausaRequired).HasColumnName("IS_CAUSA_REQUIRED");
            entity.Property(e => e.IsCausaSolucionRequired)
                .HasDefaultValueSql("((0))")
                .HasColumnName("IS_CAUSA_SOLUCION_REQUIRED");
            entity.Property(e => e.IsCierrePda)
                .HasDefaultValueSql("((0))")
                .HasColumnName("IS_CIERRE_PDA");
            entity.Property(e => e.IsCodigoIntervencionRequired).HasColumnName("IS_CODIGO_INTERVENCION_REQUIRED");
            entity.Property(e => e.IsCourtSchedule).HasColumnName("isCourtSchedule");
            entity.Property(e => e.IsDescTrabajoCatalogoRequired).HasColumnName("IS_DESC_TRABAJO_CATALOGO_REQUIRED");
            entity.Property(e => e.IsDescTrabajoRequired).HasColumnName("IS_DESC_TRABAJO_REQUIRED");
            entity.Property(e => e.IsDescripcionTrabajoRechazoRequired).HasColumnName("IS_DESCRIPCION_TRABAJO_RECHAZO_REQUIRED");
            entity.Property(e => e.IsDowntime)
                .HasDefaultValueSql("((0))")
                .HasColumnName("IS_DOWNTIME");
            entity.Property(e => e.IsDvRequired).HasColumnName("IS_DV_REQUIRED");
            entity.Property(e => e.IsEmailServiceCharge).HasColumnName("IS_EMAIL_SERVICE_CHARGE");
            entity.Property(e => e.IsEspecificaCausaRechazoRequired).HasColumnName("IS_ESPECIFICA_CAUSA_RECHAZO_REQUIRED");
            entity.Property(e => e.IsEspecificaTipoFalla).HasColumnName("IS_ESPECIFICA_TIPO_FALLA");
            entity.Property(e => e.IsFallaEncontradaCatalogoRequired).HasColumnName("IS_FALLA_ENCONTRADA_CATALOGO_REQUIRED");
            entity.Property(e => e.IsFallaEncontradaRequired)
                .HasDefaultValueSql("((0))")
                .HasColumnName("IS_FALLA_ENCONTRADA_REQUIRED");
            entity.Property(e => e.IsFecFinIngenieroRequired)
                .HasDefaultValueSql("((0))")
                .HasColumnName("IS_FEC_FIN_INGENIERO_REQUIRED");
            entity.Property(e => e.IsFecIniIngenieroRequired)
                .HasDefaultValueSql("((0))")
                .HasColumnName("IS_FEC_INI_INGENIERO_REQUIRED");
            entity.Property(e => e.IsFecLlegadaIngPartnerRequired).HasColumnName("IS_FEC_LLEGADA_ING_PARTNER_REQUIRED");
            entity.Property(e => e.IsFecLlegadaRequired)
                .HasDefaultValueSql("((0))")
                .HasColumnName("IS_FEC_LLEGADA_REQUIRED");
            entity.Property(e => e.IsFecLlegadaTercerosRequired)
                .HasDefaultValueSql("((0))")
                .HasColumnName("IS_FEC_LLEGADA_TERCEROS_REQUIRED");
            entity.Property(e => e.IsFolioServicioRechazoRequired).HasColumnName("IS_FOLIO_SERVICIO_RECHAZO_REQUIRED");
            entity.Property(e => e.IsFolioServicioRequired)
                .HasDefaultValueSql("((0))")
                .HasColumnName("IS_FOLIO_SERVICIO_REQUIRED");
            entity.Property(e => e.IsFolioTirRequired).HasColumnName("IS_FOLIO_TIR_REQUIRED");
            entity.Property(e => e.IsFolioValidacionRequired).HasColumnName("IS_FOLIO_VALIDACION_REQUIRED");
            entity.Property(e => e.IsHorarioGarantia).HasColumnName("IS_HORARIO_GARANTIA");
            entity.Property(e => e.IsIdCausaRechazoRequired).HasColumnName("IS_ID_CAUSA_RECHAZO_REQUIRED");
            entity.Property(e => e.IsIdModeloRequired)
                .HasDefaultValueSql("((0))")
                .HasColumnName("IS_ID_MODELO_REQUIRED");
            entity.Property(e => e.IsIdTipoFallaEncontradaRequired).HasColumnName("IS_ID_TIPO_FALLA_ENCONTRADA_REQUIRED");
            entity.Property(e => e.IsIdentificaAgendadosRequired).HasColumnName("IS_IDENTIFICA_AGENDADOS_REQUIRED");
            entity.Property(e => e.IsInstalacionLlavesRequired).HasColumnName("IS_INSTALACION_LLAVES_REQUIRED");
            entity.Property(e => e.IsInsumosRequired)
                .HasDefaultValueSql("((0))")
                .HasColumnName("IS_INSUMOS_REQUIRED");
            entity.Property(e => e.IsIntensidadSenialRequired)
                .HasDefaultValueSql("((0))")
                .HasColumnName("IS_INTENSIDAD_SENIAL_REQUIRED");
            entity.Property(e => e.IsIs2TaquetesAdicionalesRequired).HasColumnName("IS_IS_2_TAQUETES_ADICIONALES_REQUIRED");
            entity.Property(e => e.IsIsBlindajeTuercaSeguridadRequired).HasColumnName("IS_IS_BLINDAJE_TUERCA_SEGURIDAD_REQUIRED");
            entity.Property(e => e.IsIsBoletinRequired)
                .HasDefaultValueSql("((0))")
                .HasColumnName("IS_IS_BOLETIN_REQUIRED");
            entity.Property(e => e.IsIsFotografiasRequired).HasColumnName("IS_IS_FOTOGRAFIAS_REQUIRED");
            entity.Property(e => e.IsIsInstalacionPlacaFrontalRequired).HasColumnName("IS_IS_INSTALACION_PLACA_FRONTAL_REQUIRED");
            entity.Property(e => e.IsIsInstalacionPlacaLateralRequired).HasColumnName("IS_IS_INSTALACION_PLACA_LATERAL_REQUIRED");
            entity.Property(e => e.IsIsSimRemplazadaRequired)
                .HasDefaultValueSql("((0))")
                .HasColumnName("IS_IS_SIM_REMPLAZADA_REQUIRED");
            entity.Property(e => e.IsIsSoporteClienteRequired)
                .HasDefaultValueSql("((0))")
                .HasColumnName("IS_IS_SOPORTE_CLIENTE_REQUIRED");
            entity.Property(e => e.IsIsSustitucion4TuercasRequired).HasColumnName("IS_IS_SUSTITUCION_4_TUERCAS_REQUIRED");
            entity.Property(e => e.IsIsValidacionAlarmasRequired).HasColumnName("IS_IS_VALIDACION_ALARMAS_REQUIRED");
            entity.Property(e => e.IsLectorTarjetaRequired).HasColumnName("IS_LECTOR_TARJETA_REQUIRED");
            entity.Property(e => e.IsLecturaVoltajeRequired).HasColumnName("IS_LECTURA_VOLTAJE_REQUIRED");
            entity.Property(e => e.IsMemoriaRequired).HasColumnName("IS_MEMORIA_REQUIRED");
            entity.Property(e => e.IsMinutosGarantia).HasColumnName("IS_MINUTOS_GARANTIA");
            entity.Property(e => e.IsMonitorRequired).HasColumnName("IS_MONITOR_REQUIRED");
            entity.Property(e => e.IsMotivoCobroRequired)
                .HasDefaultValueSql("((0))")
                .HasColumnName("IS_MOTIVO_COBRO_REQUIRED");
            entity.Property(e => e.IsMultipleTask).HasColumnName("IS_MULTIPLE_TASK");
            entity.Property(e => e.IsNoEquipoRequired)
                .HasDefaultValueSql("((0))")
                .HasColumnName("IS_NO_EQUIPO_REQUIRED");
            entity.Property(e => e.IsNoInventarioRequired)
                .HasDefaultValueSql("((0))")
                .HasColumnName("IS_NO_INVENTARIO_REQUIRED");
            entity.Property(e => e.IsNoSerieRequired)
                .HasDefaultValueSql("((0))")
                .HasColumnName("IS_NO_SERIE_REQUIRED");
            entity.Property(e => e.IsNombrePersonaLlavesARequired).HasColumnName("IS_NOMBRE_PERSONA_LLAVES_A_REQUIRED");
            entity.Property(e => e.IsNombrePersonaLlavesBRequired).HasColumnName("IS_NOMBRE_PERSONA_LLAVES_B_REQUIRED");
            entity.Property(e => e.IsOtorganteSoporteClienteRequired)
                .HasDefaultValueSql("((0))")
                .HasColumnName("IS_OTORGANTE_SOPORTE_CLIENTE_REQUIRED");
            entity.Property(e => e.IsOtorganteTasRequired)
                .HasDefaultValueSql("((0))")
                .HasColumnName("IS_OTORGANTE_TAS_REQUIRED");
            entity.Property(e => e.IsOtorganteVoboClienteRequired)
                .HasDefaultValueSql("((0))")
                .HasColumnName("IS_OTORGANTE_VOBO_CLIENTE_REQUIRED");
            entity.Property(e => e.IsOtorganteVoboIngPartnerRequired).HasColumnName("IS_OTORGANTE_VOBO_ING_PARTNER_REQUIRED");
            entity.Property(e => e.IsOtorganteVoboRechazoRequired)
                .HasDefaultValueSql("((0))")
                .HasColumnName("IS_OTORGANTE_VOBO_RECHAZO_REQUIRED");
            entity.Property(e => e.IsOtorganteVoboRequired)
                .HasDefaultValueSql("((0))")
                .HasColumnName("IS_OTORGANTE_VOBO_REQUIRED");
            entity.Property(e => e.IsOtorganteVoboTercerosRequired)
                .HasDefaultValueSql("((0))")
                .HasColumnName("IS_OTORGANTE_VOBO_TERCEROS_REQUIRED");
            entity.Property(e => e.IsPrefacturacionAgendado)
                .HasDefaultValueSql("((0))")
                .HasColumnName("IS_PREFACTURACION_AGENDADO");
            entity.Property(e => e.IsPrefacturacionIsCobrable)
                .HasDefaultValueSql("((0))")
                .HasColumnName("IS_PREFACTURACION_IS_COBRABLE");
            entity.Property(e => e.IsPrefacturacionIsRetipificado)
                .HasDefaultValueSql("((0))")
                .HasColumnName("IS_PREFACTURACION_IS_RETIPIFICADO");
            entity.Property(e => e.IsProcesadorRequired).HasColumnName("IS_PROCESADOR_REQUIRED");
            entity.Property(e => e.IsProyecto).HasColumnName("IS_PROYECTO");
            entity.Property(e => e.IsReglaDuplicado).HasColumnName("IS_REGLA_DUPLICADO");
            entity.Property(e => e.IsReportReincidente).HasColumnName("IS_REPORT_REINCIDENTE");
            entity.Property(e => e.IsReporteServicioPartnerRequired).HasColumnName("IS_REPORTE_SERVICIO_PARTNER_REQUIRED");
            entity.Property(e => e.IsSolucionRequired).HasColumnName("IS_SOLUCION_REQUIRED");
            entity.Property(e => e.IsStatusInstalacionLlavesRequired).HasColumnName("IS_STATUS_INSTALACION_LLAVES_REQUIRED");
            entity.Property(e => e.IsTasRequired)
                .HasDefaultValueSql("((0))")
                .HasColumnName("IS_TAS_REQUIRED");
            entity.Property(e => e.IsTipoLlaveRequired).HasColumnName("IS_TIPO_LLAVE_REQUIRED");
            entity.Property(e => e.IsTipoPwRequired).HasColumnName("IS_TIPO_PW_REQUIRED");
            entity.Property(e => e.IsTipoTecladoRequired).HasColumnName("IS_TIPO_TECLADO_REQUIRED");
            entity.Property(e => e.IsVelocidadProcesadorRequired).HasColumnName("IS_VELOCIDAD_PROCESADOR_REQUIRED");
            entity.Property(e => e.IsVersionRequired).HasColumnName("IS_VERSION_REQUIRED");
            entity.Property(e => e.IsVersionTecladoEppRequired).HasColumnName("IS_VERSION_TECLADO_EPP_REQUIRED");
            entity.Property(e => e.IsWarrantyDays).HasColumnName("isWarrantyDays");
            entity.Property(e => e.IsXmlElavon).HasColumnName("IS_XML_ELAVON");
            entity.Property(e => e.KitInsumo).HasColumnName("KIT_INSUMO");
            entity.Property(e => e.LengthCodigoIntervencion).HasColumnName("LENGTH_CODIGO_INTERVENCION");
            entity.Property(e => e.MinPromedio).HasColumnName("MIN_PROMEDIO");
            entity.Property(e => e.MinTablero).HasColumnName("MIN_TABLERO");
            entity.Property(e => e.NeedClaveRechazo).HasColumnName("needClaveRechazo");
            entity.Property(e => e.NeedKit).HasColumnName("NEED_KIT");
            entity.Property(e => e.NeedNoSim).HasColumnName("needNoSim");
            entity.Property(e => e.NoDias).HasColumnName("NO_DIAS");
            entity.Property(e => e.RequestType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("request_type");
            entity.Property(e => e.RequisitosServicio)
                .HasMaxLength(400)
                .IsUnicode(false)
                .HasColumnName("REQUISITOS_SERVICIO");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");

            entity.HasOne(d => d.IdMonedaNavigation).WithMany(p => p.CServicios)
                .HasForeignKey(d => d.IdMoneda)
                .HasConstraintName("FK_C_SERVICIOS_C_MONEDAS");

            entity.HasOne(d => d.IdTipoPrecioNavigation).WithMany(p => p.CServicios)
                .HasForeignKey(d => d.IdTipoPrecio)
                .HasConstraintName("FK_C_SERVICIOS_C_TIPO_PRECIO");

            entity.HasOne(d => d.IdTipoServicioNavigation).WithMany(p => p.CServicios)
                .HasForeignKey(d => d.IdTipoServicio)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BD_SERVICIOS_C_TIPO_SERVICIO");
        });

        modelBuilder.Entity<CServicioMensajerium>(entity =>
        {
            entity.HasKey(e => e.IdServicioMensajeria);

            entity.ToTable("C_SERVICIO_MENSAJERIA");

            entity.Property(e => e.IdServicioMensajeria).HasColumnName("ID_SERVICIO_MENSAJERIA");
            entity.Property(e => e.DescServicioMensajeria)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_SERVICIO_MENSAJERIA");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.IsCamion).HasColumnName("IS_CAMION");
            entity.Property(e => e.IsInterno).HasColumnName("IS_INTERNO");
            entity.Property(e => e.PaginaWeb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PAGINA_WEB");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CServicioRetiroSimsSantander>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("C_SERVICIO_RETIRO_SIMS_SANTANDER");

            entity.Property(e => e.DescServicio)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("DESC_SERVICIO");
            entity.Property(e => e.DescServicioSantander)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("DESC_SERVICIO_SANTANDER");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdServicio).HasColumnName("ID_SERVICIO");
        });

        modelBuilder.Entity<CServiciosBancomer>(entity =>
        {
            entity.HasKey(e => new { e.IdServicio, e.Mov });

            entity.ToTable("C_SERVICIOS_BANCOMER");

            entity.Property(e => e.IdServicio).HasColumnName("ID_SERVICIO");
            entity.Property(e => e.Mov)
                .HasMaxLength(1)
                .IsFixedLength()
                .HasColumnName("MOV");
            entity.Property(e => e.DescServicio)
                .HasMaxLength(50)
                .HasColumnName("DESC_SERVICIO");
        });

        modelBuilder.Entity<CServiciosDoble>(entity =>
        {
            entity.HasKey(e => e.IdServicioDoble).HasName("PK__C_SERVIC__7E4206DD08E3A941");

            entity.ToTable("C_SERVICIOS_DOBLES");

            entity.Property(e => e.IdServicioDoble).HasColumnName("ID_SERVICIO_DOBLE");
            entity.Property(e => e.IdFalla).HasColumnName("ID_FALLA");
            entity.Property(e => e.IdServicio).HasColumnName("ID_SERVICIO");
            entity.Property(e => e.Outblue).HasColumnName("OUTBLUE");
            entity.Property(e => e.RollosProductivo).HasColumnName("ROLLOS_PRODUCTIVO");
        });

        modelBuilder.Entity<CServiciosSubserviciosReingenieriaLogBorrar>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("C_SERVICIOS_SUBSERVICIOS_REINGENIERIA_LOG_BORRAR");

            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdFalla).HasColumnName("ID_FALLA");
            entity.Property(e => e.IdServicio).HasColumnName("ID_SERVICIO");
            entity.Property(e => e.IdServiciosSubserviciosReingenieria)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_SERVICIOS_SUBSERVICIOS_REINGENIERIA");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Status)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CServiciosSubserviciosReingenierium>(entity =>
        {
            entity.HasKey(e => e.IdServiciosSubserviciosReingenieria).HasName("PK__C_SERVIC__3AB81DCCE36F0B4A");

            entity.ToTable("C_SERVICIOS_SUBSERVICIOS_REINGENIERIA");

            entity.Property(e => e.IdServiciosSubserviciosReingenieria).HasColumnName("ID_SERVICIOS_SUBSERVICIOS_REINGENIERIA");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdFalla).HasColumnName("ID_FALLA");
            entity.Property(e => e.IdServicio).HasColumnName("ID_SERVICIO");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Status)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CSoftware>(entity =>
        {
            entity.HasKey(e => e.IdSoftware).HasName("PK_BD_SOFTWARE");

            entity.ToTable("C_SOFTWARE");

            entity.Property(e => e.IdSoftware).HasColumnName("ID_SOFTWARE");
            entity.Property(e => e.DescSoftware)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_SOFTWARE");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CSolucione>(entity =>
        {
            entity.HasKey(e => e.IdSolucion);

            entity.ToTable("C_SOLUCIONES");

            entity.Property(e => e.IdSolucion).HasColumnName("ID_SOLUCION");
            entity.Property(e => e.Clave)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CLAVE");
            entity.Property(e => e.DescSolucion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_SOLUCION");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.IsExito).HasColumnName("IS_EXITO");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CSparePart>(entity =>
        {
            entity.HasKey(e => e.IdSparePart);

            entity.ToTable("C_SPARE_PARTS");

            entity.Property(e => e.IdSparePart).HasColumnName("ID_SPARE_PART");
            entity.Property(e => e.Costo)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("COSTO");
            entity.Property(e => e.DescSparePart)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_SPARE_PART");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");
            entity.Property(e => e.IdAttachImagenSparePart).HasColumnName("ID_ATTACH_IMAGEN_SPARE_PART");
            entity.Property(e => e.IdMarca).HasColumnName("ID_MARCA");
            entity.Property(e => e.IdTipoSparePart).HasColumnName("ID_TIPO_SPARE_PART");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SKU");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");

            entity.HasOne(d => d.IdTipoSparePartNavigation).WithMany(p => p.CSpareParts)
                .HasForeignKey(d => d.IdTipoSparePart)
                .HasConstraintName("FK_C_SPARE_PARTS_C_TIPO_SPARE_PART");
        });

        modelBuilder.Entity<CStatusAccesorio>(entity =>
        {
            entity.HasKey(e => e.IdStatusAccesorio);

            entity.ToTable("C_STATUS_ACCESORIO");

            entity.Property(e => e.IdStatusAccesorio).HasColumnName("ID_STATUS_ACCESORIO");
            entity.Property(e => e.DescStatusAccesorio)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_STATUS_ACCESORIO");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CStatusAr>(entity =>
        {
            entity.HasKey(e => e.IdStatusAr);

            entity.ToTable("C_STATUS_AR");

            entity.HasIndex(e => e.DescStatusAr, "IX_C_STATUS_AR");

            entity.HasIndex(e => new { e.IdStatusAr, e.DescStatusAr }, "IX_C_STATUS_AR_1");

            entity.HasIndex(e => new { e.IdStatusAr, e.Status, e.DescStatusAr }, "IX_C_STATUS_AR_2");

            entity.Property(e => e.IdStatusAr).HasColumnName("ID_STATUS_AR");
            entity.Property(e => e.DescStatusAr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_STATUS_AR");
            entity.Property(e => e.IdTipoDowntimeTrigger).HasColumnName("ID_TIPO_DOWNTIME_TRIGGER");
            entity.Property(e => e.IsAbierta).HasColumnName("IS_ABIERTA");
            entity.Property(e => e.IsAbiertaFreeze).HasColumnName("IS_ABIERTA_FREEZE");
            entity.Property(e => e.IsAbiertaModule).HasColumnName("IS_ABIERTA_MODULE");
            entity.Property(e => e.IsAsignacionTemporal).HasColumnName("IS_ASIGNACION_TEMPORAL");
            entity.Property(e => e.IsBbAbiertas).HasColumnName("IS_BB_ABIERTAS");
            entity.Property(e => e.IsBbCerradas).HasColumnName("IS_BB_CERRADAS");
            entity.Property(e => e.IsBbNuevas).HasColumnName("IS_BB_NUEVAS");
            entity.Property(e => e.IsBbPendientes).HasColumnName("IS_BB_PENDIENTES");
            entity.Property(e => e.IsCargaTrabajoTecnico).HasColumnName("IS_CARGA_TRABAJO_TECNICO");
            entity.Property(e => e.IsCerrada).HasColumnName("IS_CERRADA");
            entity.Property(e => e.IsCierreMasivo).HasColumnName("IS_CIERRE_MASIVO");
            entity.Property(e => e.IsControlModule).HasColumnName("IS_CONTROL_MODULE");
            entity.Property(e => e.IsDesviacion).HasColumnName("IS_DESVIACION");
            entity.Property(e => e.IsDesviacionDefault).HasColumnName("IS_DESVIACION_DEFAULT");
            entity.Property(e => e.IsDesviacionNeeded).HasColumnName("IS_DESVIACION_NEEDED");
            entity.Property(e => e.IsDesviacionTemporal).HasColumnName("IS_DESVIACION_TEMPORAL");
            entity.Property(e => e.IsFecGarantiaChange).HasColumnName("IS_FEC_GARANTIA_CHANGE");
            entity.Property(e => e.IsMovInvAllowed).HasColumnName("IS_MOV_INV_ALLOWED");
            entity.Property(e => e.IsPendiente).HasColumnName("IS_PENDIENTE");
            entity.Property(e => e.IsReasignacionTecnicoHorario).HasColumnName("IS_REASIGNACION_TECNICO_HORARIO");
            entity.Property(e => e.IsSearchModule).HasColumnName("IS_SEARCH_MODULE");
            entity.Property(e => e.IsSearchModuleChecked).HasColumnName("IS_SEARCH_MODULE_CHECKED");
            entity.Property(e => e.IsSolicitudAgendado).HasColumnName("IS_SOLICITUD_AGENDADO");
            entity.Property(e => e.IsSolicitudAlmacen).HasColumnName("IS_SOLICITUD_ALMACEN");
            entity.Property(e => e.IsSolicitudViaticos).HasColumnName("IS_SOLICITUD_VIATICOS");
            entity.Property(e => e.IsSoporteTecnico).HasColumnName("IS_SOPORTE_TECNICO");
            entity.Property(e => e.IsTableroAniejos).HasColumnName("IS_TABLERO_ANIEJOS");
            entity.Property(e => e.IsVisitaAgendado).HasColumnName("IS_VISITA_AGENDADO");
            entity.Property(e => e.Orden).HasColumnName("ORDEN");
            entity.Property(e => e.RequestStatus)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("request_status");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");

            entity.HasOne(d => d.IdTipoDowntimeTriggerNavigation).WithMany(p => p.CStatusArs)
                .HasForeignKey(d => d.IdTipoDowntimeTrigger)
                .HasConstraintName("FK_C_STATUS_AR_C_TIPO_DOWNTIME_TRIGGER");
        });

        modelBuilder.Entity<CStatusArEq>(entity =>
        {
            entity.HasKey(e => e.IdStatusArEq);

            entity.ToTable("C_STATUS_AR_EQ");

            entity.Property(e => e.IdStatusArEq).HasColumnName("ID_STATUS_AR_EQ");
            entity.Property(e => e.DescStatusArEq)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_STATUS_AR_EQ");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdStatusAr).HasColumnName("ID_STATUS_AR");

            entity.HasOne(d => d.IdStatusArNavigation).WithMany(p => p.CStatusArEqs)
                .HasForeignKey(d => d.IdStatusAr)
                .HasConstraintName("FK_C_STATUS_AR_EQ_C_STATUS_AR");
        });

        modelBuilder.Entity<CStatusCarga>(entity =>
        {
            entity.HasKey(e => e.IdStatusCarga).HasName("PK_C_STATUS_ARCHIVO");

            entity.ToTable("C_STATUS_CARGA");

            entity.Property(e => e.IdStatusCarga).HasColumnName("ID_STATUS_CARGA");
            entity.Property(e => e.DescStatusCarga)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_STATUS_CARGA");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CStatusCot3m>(entity =>
        {
            entity.HasKey(e => e.IdStatusCot);

            entity.ToTable("C_STATUS_COT_3M");

            entity.Property(e => e.IdStatusCot).HasColumnName("id_status_cot");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("DESCRIPCION");
        });

        modelBuilder.Entity<CStatusCurso>(entity =>
        {
            entity.HasKey(e => e.IdStatusCurso);

            entity.ToTable("C_STATUS_CURSO");

            entity.Property(e => e.IdStatusCurso).HasColumnName("ID_STATUS_CURSO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Status)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.StatusCurso)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("STATUS_CURSO");
        });

        modelBuilder.Entity<CStatusDoctosPrefacturacion>(entity =>
        {
            entity.HasKey(e => e.IdStatusDoctoPrefacturacion).HasName("PK_C_STATUS_DOCTOS_PREFACTURACION_OLD2");

            entity.ToTable("C_STATUS_DOCTOS_PREFACTURACION");

            entity.Property(e => e.IdStatusDoctoPrefacturacion).HasColumnName("ID_STATUS_DOCTO_PREFACTURACION");
            entity.Property(e => e.DescStatusDoctoPrefacturacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_STATUS_DOCTO_PREFACTURACION");
            entity.Property(e => e.IsClienteAssign).HasColumnName("IS_CLIENTE_ASSIGN");
            entity.Property(e => e.IsDoctoDigital).HasColumnName("IS_DOCTO_DIGITAL");
            entity.Property(e => e.IsDoctoFisico).HasColumnName("IS_DOCTO_FISICO");
            entity.Property(e => e.IsIngenieroAssign).HasColumnName("IS_INGENIERO_ASSIGN");
            entity.Property(e => e.IsModuleBusqueda).HasColumnName("IS_MODULE_BUSQUEDA");
            entity.Property(e => e.IsModulePrefacturacion).HasColumnName("IS_MODULE_PREFACTURACION");
            entity.Property(e => e.IsModuleReporte).HasColumnName("IS_MODULE_REPORTE");
            entity.Property(e => e.IsPartnerAssign).HasColumnName("IS_PARTNER_ASSIGN");
            entity.Property(e => e.IsPrefacturacionAssign).HasColumnName("IS_PREFACTURACION_ASSIGN");
            entity.Property(e => e.IsSupervisorAssign).HasColumnName("IS_SUPERVISOR_ASSIGN");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CStatusDoctosPrefacturacionArchivo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("C_STATUS_DOCTOS_PREFACTURACION_archivo");

            entity.Property(e => e.DescStatusDoctoPrefacturacion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_STATUS_DOCTO_PREFACTURACION");
            entity.Property(e => e.IdStatusDoctoPrefacturacion).HasColumnName("ID_STATUS_DOCTO_PREFACTURACION");
            entity.Property(e => e.IsClienteAssign).HasColumnName("IS_CLIENTE_ASSIGN");
            entity.Property(e => e.IsDoctoDigital).HasColumnName("IS_DOCTO_DIGITAL");
            entity.Property(e => e.IsDoctoFisico).HasColumnName("IS_DOCTO_FISICO");
            entity.Property(e => e.IsIngenieroAssign).HasColumnName("IS_INGENIERO_ASSIGN");
            entity.Property(e => e.IsModuleBusqueda).HasColumnName("IS_MODULE_BUSQUEDA");
            entity.Property(e => e.IsModulePrefacturacion).HasColumnName("IS_MODULE_PREFACTURACION");
            entity.Property(e => e.IsModuleReporte).HasColumnName("IS_MODULE_REPORTE");
            entity.Property(e => e.IsPartnerAssign).HasColumnName("IS_PARTNER_ASSIGN");
            entity.Property(e => e.IsPrefacturacionAssign).HasColumnName("IS_PREFACTURACION_ASSIGN");
            entity.Property(e => e.IsSupervisorAssign).HasColumnName("IS_SUPERVISOR_ASSIGN");
            entity.Property(e => e.Status)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CStatusEnvio>(entity =>
        {
            entity.HasKey(e => e.IdStatusEnvio);

            entity.ToTable("C_STATUS_ENVIO");

            entity.Property(e => e.IdStatusEnvio).HasColumnName("ID_STATUS_ENVIO");
            entity.Property(e => e.DescStatusEnvio)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_STATUS_ENVIO");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CStatusInsumo>(entity =>
        {
            entity.HasKey(e => e.IdStatusInsumo);

            entity.ToTable("C_STATUS_INSUMOS");

            entity.Property(e => e.IdStatusInsumo).HasColumnName("ID_STATUS_INSUMO");
            entity.Property(e => e.DescStatusInsumo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_STATUS_INSUMO");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CStatusItemsSolicitudAlmacen>(entity =>
        {
            entity.HasKey(e => e.IdStatusItemsSolicitudAlmacen).HasName("PK_C_STATUS_ITEM_SOLICITUD_ALMACEN");

            entity.ToTable("C_STATUS_ITEMS_SOLICITUD_ALMACEN");

            entity.Property(e => e.IdStatusItemsSolicitudAlmacen).HasColumnName("ID_STATUS_ITEMS_SOLICITUD_ALMACEN");
            entity.Property(e => e.DescStatusItemsSolicitudAlmacen)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_STATUS_ITEMS_SOLICITUD_ALMACEN");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CStatusJuntum>(entity =>
        {
            entity.HasKey(e => e.IdStatusJunta);

            entity.ToTable("C_STATUS_JUNTA");

            entity.Property(e => e.IdStatusJunta).HasColumnName("ID_STATUS_JUNTA");
            entity.Property(e => e.ColorRgb)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("COLOR_RGB");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.IsAuto).HasColumnName("IS_AUTO");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.StatusJunta)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("STATUS_JUNTA");
        });

        modelBuilder.Entity<CStatusModelo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("C_STATUS_MODELO");

            entity.Property(e => e.DescStatusModelo)
                .IsUnicode(false)
                .HasColumnName("DESC_STATUS_MODELO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdStatusModelo)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_STATUS_MODELO");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Status)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CStatusOrdenCompra>(entity =>
        {
            entity.HasKey(e => e.IdStatusOrdenCompra).HasName("PK__C_STATUS__72B86E1FAA32BA12");

            entity.ToTable("C_STATUS_ORDEN_COMPRA");

            entity.Property(e => e.IdStatusOrdenCompra).HasColumnName("ID_STATUS_ORDEN_COMPRA");
            entity.Property(e => e.DescStatus)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_STATUS");
            entity.Property(e => e.Status)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CStatusReasonCode>(entity =>
        {
            entity.HasKey(e => e.IdStatusReasonCodes);

            entity.ToTable("C_STATUS_REASON_CODES");

            entity.Property(e => e.IdStatusReasonCodes).HasColumnName("ID_STATUS_REASON_CODES");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("descripcion");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.StatusElavon)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("status_elavon");
            entity.Property(e => e.StatusReason)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("status_reason");
            entity.Property(e => e.StatusReasonCode)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("status_reason_code");
        });

        modelBuilder.Entity<CStatusReparacion>(entity =>
        {
            entity.HasKey(e => e.IdStatusReparacion);

            entity.ToTable("C_STATUS_REPARACION");

            entity.Property(e => e.IdStatusReparacion).HasColumnName("ID_STATUS_REPARACION");
            entity.Property(e => e.DescStatusReparacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_STATUS_REPARACION");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CStatusReporteCierre>(entity =>
        {
            entity.HasKey(e => e.IdStatusReporteCierre);

            entity.ToTable("C_STATUS_REPORTE_CIERRE");

            entity.Property(e => e.IdStatusReporteCierre).HasColumnName("ID_STATUS_REPORTE_CIERRE");
            entity.Property(e => e.DescStatusReporteCierre)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_STATUS_REPORTE_CIERRE");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CStatusSim>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("C_STATUS_SIM");

            entity.Property(e => e.DescStatusSim)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_STATUS_SIM");
            entity.Property(e => e.IdStatusSim)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_STATUS_SIM");
            entity.Property(e => e.Status)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CStatusSolicitudAlmacen>(entity =>
        {
            entity.HasKey(e => e.IdStatusSolicitudAlmacen);

            entity.ToTable("C_STATUS_SOLICITUD_ALMACEN");

            entity.Property(e => e.IdStatusSolicitudAlmacen).HasColumnName("ID_STATUS_SOLICITUD_ALMACEN");
            entity.Property(e => e.DescStatusSolicitudAlmacen)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_STATUS_SOLICITUD_ALMACEN");
            entity.Property(e => e.IsCancelado).HasColumnName("IS_CANCELADO");
            entity.Property(e => e.IsConfirmarEntrega).HasColumnName("IS_CONFIRMAR_ENTREGA");
            entity.Property(e => e.IsFlujoAlmacen)
                .HasDefaultValueSql("((0))")
                .HasColumnName("IS_FLUJO_ALMACEN");
            entity.Property(e => e.IsHabilitaConfirmar).HasColumnName("IS_HABILITA_CONFIRMAR");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CStatusSolicitudDevolucion>(entity =>
        {
            entity.HasKey(e => e.IdStatusSolicitudDevolucion);

            entity.ToTable("C_STATUS_SOLICITUD_DEVOLUCION");

            entity.Property(e => e.IdStatusSolicitudDevolucion).HasColumnName("ID_STATUS_SOLICITUD_DEVOLUCION");
            entity.Property(e => e.DescStatusSolicitudDevolucion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_STATUS_SOLICITUD_DEVOLUCION");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CStatusSolicitudRecoleccion>(entity =>
        {
            entity.HasKey(e => e.IdStatusSolicitudRecoleccion);

            entity.ToTable("C_STATUS_SOLICITUD_RECOLECCION");

            entity.Property(e => e.IdStatusSolicitudRecoleccion).HasColumnName("ID_STATUS_SOLICITUD_RECOLECCION");
            entity.Property(e => e.DescStatusSolicitudRecoleccion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_STATUS_SOLICITUD_RECOLECCION");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CStatusSolicitudViatico>(entity =>
        {
            entity.HasKey(e => e.IdStatusSolicitudViaticos);

            entity.ToTable("C_STATUS_SOLICITUD_VIATICOS");

            entity.Property(e => e.IdStatusSolicitudViaticos).HasColumnName("ID_STATUS_SOLICITUD_VIATICOS");
            entity.Property(e => e.DescStatusSolicitudViaticos)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_STATUS_SOLICITUD_VIATICOS");
            entity.Property(e => e.IsCancelarSolicitudViaticosAllowed).HasColumnName("IS_CANCELAR_SOLICITUD_VIATICOS_ALLOWED");
            entity.Property(e => e.IsCerrarSolicitudViaticos).HasColumnName("IS_CERRAR_SOLICITUD_VIATICOS");
            entity.Property(e => e.IsHabilitaAr).HasColumnName("IS_HABILITA_AR");
            entity.Property(e => e.IsModuleMisSolicitudes).HasColumnName("IS_MODULE_MIS_SOLICITUDES");
            entity.Property(e => e.IsSearchModuleChecked).HasColumnName("IS_SEARCH_MODULE_CHECKED");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CStatusUnidad>(entity =>
        {
            entity.HasKey(e => e.IdStatusUnidad);

            entity.ToTable("C_STATUS_UNIDAD");

            entity.Property(e => e.IdStatusUnidad).HasColumnName("ID_STATUS_UNIDAD");
            entity.Property(e => e.AssignmentNo)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("assignment_no");
            entity.Property(e => e.AssignmentNoDanada)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("assignment_no_danada");
            entity.Property(e => e.DescStatusUnidad)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_STATUS_UNIDAD");
            entity.Property(e => e.IsLab).HasColumnName("IS_LAB");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CStatusUsuario>(entity =>
        {
            entity.HasKey(e => e.IdStatusUsuario);

            entity.ToTable("C_STATUS_USUARIO");

            entity.Property(e => e.IdStatusUsuario).HasColumnName("ID_STATUS_USUARIO");
            entity.Property(e => e.DescStatusUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_STATUS_USUARIO");
            entity.Property(e => e.Envios).HasColumnName("ENVIOS");
            entity.Property(e => e.RequierePeriodo).HasColumnName("REQUIERE_PERIODO");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.Viaticos).HasColumnName("VIATICOS");
        });

        modelBuilder.Entity<CStatusValidacionPrefacturacion>(entity =>
        {
            entity.HasKey(e => e.IdStatusValidacionPrefacturacion);

            entity.ToTable("C_STATUS_VALIDACION_PREFACTURACION");

            entity.Property(e => e.IdStatusValidacionPrefacturacion).HasColumnName("ID_STATUS_VALIDACION_PREFACTURACION");
            entity.Property(e => e.DescStatusValidacionPrefacturacion)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("DESC_STATUS_VALIDACION_PREFACTURACION");
            entity.Property(e => e.IsAutomatica).HasColumnName("IS_AUTOMATICA");
            entity.Property(e => e.NextIdStatusAr).HasColumnName("NEXT_ID_STATUS_AR");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CSubAlmacene>(entity =>
        {
            entity.HasKey(e => e.IdCSubAlmacenes).HasName("PK__C_SUB_AL__10991DCE9D2AC00E");

            entity.ToTable("C_SUB_ALMACENES");

            entity.Property(e => e.IdCSubAlmacenes).HasColumnName("ID_C_SUB_ALMACENES");
            entity.Property(e => e.DescSubAlmacen)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_SUB_ALMACEN");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");
            entity.Property(e => e.IdParentAlmacen).HasColumnName("ID_PARENT_ALMACEN");
            entity.Property(e => e.IdResponsable).HasColumnName("ID_RESPONSABLE");
            entity.Property(e => e.IdZona).HasColumnName("ID_ZONA");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");

            entity.HasOne(d => d.IdParentAlmacenNavigation).WithMany(p => p.CSubAlmacenes)
                .HasForeignKey(d => d.IdParentAlmacen)
                .HasConstraintName("FK__C_SUB_ALM__ID_PA__29B0ECBB");
        });

        modelBuilder.Entity<CSubrechazo>(entity =>
        {
            entity.HasKey(e => e.IdSubrechazo);

            entity.ToTable("C_SUBRECHAZO");

            entity.HasIndex(e => e.Id, "IX_C_SUBRECHAZO");

            entity.Property(e => e.IdSubrechazo).HasColumnName("ID_SUBRECHAZO");
            entity.Property(e => e.FechaAlta)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ALTA");
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.IsProgramado).HasColumnName("IS_PROGRAMADO");
            entity.Property(e => e.Status)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.Subrechazo)
                .IsUnicode(false)
                .HasColumnName("SUBRECHAZO");
            entity.Property(e => e.UsuarioAlta).HasColumnName("USUARIO_ALTA");
        });

        modelBuilder.Entity<CTecnico>(entity =>
        {
            entity.HasKey(e => e.IdTecnico);

            entity.ToTable("C_TECNICOS");

            entity.Property(e => e.IdTecnico).HasColumnName("ID_TECNICO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Materno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MATERNO");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NOMBRE");
            entity.Property(e => e.Paterno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PATERNO");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CTiempo>(entity =>
        {
            entity.HasKey(e => e.IdTiempos);

            entity.ToTable("C_TIEMPOS");

            entity.Property(e => e.IdTiempos).HasColumnName("ID_TIEMPOS");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");
            entity.Property(e => e.Horas).HasColumnName("HORAS");
            entity.Property(e => e.MinTotales).HasColumnName("MIN_TOTALES");
            entity.Property(e => e.Minutos).HasColumnName("MINUTOS");
            entity.Property(e => e.Servicio).HasColumnName("SERVICIO");
            entity.Property(e => e.Traslado).HasColumnName("TRASLADO");
        });

        modelBuilder.Entity<CTiempoMedicion>(entity =>
        {
            entity.HasKey(e => e.IdTiempoMedicion);

            entity.ToTable("C_TIEMPO_MEDICION");

            entity.Property(e => e.IdTiempoMedicion).HasColumnName("ID_TIEMPO_MEDICION");
            entity.Property(e => e.DescTiempoMedicion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_TIEMPO_MEDICION");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CTiempoReferencium>(entity =>
        {
            entity.HasKey(e => e.IdTiempoReferencia);

            entity.ToTable("C_TIEMPO_REFERENCIA");

            entity.Property(e => e.IdTiempoReferencia).HasColumnName("ID_TIEMPO_REFERENCIA");
            entity.Property(e => e.DescTiempoReferencia)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_TIEMPO_REFERENCIA");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");
            entity.Property(e => e.Factor).HasColumnName("FACTOR");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CTiemposServiciosWincor>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("C_TIEMPOS_SERVICIOS_WINCOR");

            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.IdWincorTiempo)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_WINCOR_TIEMPO");
            entity.Property(e => e.Status)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.Tr).HasColumnName("TR");
            entity.Property(e => e.Ts).HasColumnName("TS");
        });

        modelBuilder.Entity<CTimestamp>(entity =>
        {
            entity.HasKey(e => e.IdTimestamp);

            entity.ToTable("C_TIMESTAMP");

            entity.Property(e => e.IdTimestamp).HasColumnName("ID_TIMESTAMP");
            entity.Property(e => e.DescTimestamp)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("DESC_TIMESTAMP");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.Timestamp)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("TIMESTAMP");
        });

        modelBuilder.Entity<CTipoAB>(entity =>
        {
            entity.HasKey(e => e.IdTipoAB).HasName("PK__C_TIPO_A__4B00D75F71A1E58A");

            entity.ToTable("C_TIPO_A_B");

            entity.Property(e => e.IdTipoAB).HasColumnName("ID_TIPO_A_B");
            entity.Property(e => e.DescTipoAB)
                .IsUnicode(false)
                .HasColumnName("DESC_TIPO_A_B");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Status)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CTipoArchivo>(entity =>
        {
            entity.HasKey(e => e.IdTipoArchivo);

            entity.ToTable("C_TIPO_ARCHIVO");

            entity.Property(e => e.IdTipoArchivo).HasColumnName("ID_TIPO_ARCHIVO");
            entity.Property(e => e.DescTipoArchivo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_TIPO_ARCHIVO");
            entity.Property(e => e.Extension)
                .IsRequired()
                .HasMaxLength(4)
                .IsFixedLength()
                .HasColumnName("EXTENSION");
            entity.Property(e => e.Imagen)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("IMAGEN");
        });

        modelBuilder.Entity<CTipoAuditorium>(entity =>
        {
            entity.HasKey(e => e.IdTipoAuditoria);

            entity.ToTable("C_TIPO_AUDITORIA");

            entity.Property(e => e.IdTipoAuditoria).HasColumnName("ID_TIPO_AUDITORIA");
            entity.Property(e => e.DescTipoAuditoria)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_TIPO_AUDITORIA");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CTipoCalculoUptime>(entity =>
        {
            entity.HasKey(e => e.IdTipoCalculoUptime).HasName("PK_C_TIPO_CALCULO_DOWNTME");

            entity.ToTable("C_TIPO_CALCULO_UPTIME");

            entity.Property(e => e.IdTipoCalculoUptime).HasColumnName("ID_TIPO_CALCULO_UPTIME");
            entity.Property(e => e.DescTipoCalculoUptime)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_TIPO_CALCULO_UPTIME");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CTipoCierreTarea>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("C_TIPO_CIERRE_TAREA");

            entity.Property(e => e.DescCierreTarea)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_CIERRE_TAREA");
            entity.Property(e => e.IdTipoCierreTarea).HasColumnName("ID_TIPO_CIERRE_TAREA");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CTipoCobro>(entity =>
        {
            entity.HasKey(e => e.IdTipoCobro);

            entity.ToTable("C_TIPO_COBRO");

            entity.Property(e => e.IdTipoCobro).HasColumnName("ID_TIPO_COBRO");
            entity.Property(e => e.DescTipoCobro)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_TIPO_COBRO");
            entity.Property(e => e.IsCobrable).HasColumnName("IS_COBRABLE");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CTipoCobroNegocio>(entity =>
        {
            entity.HasKey(e => e.IdTipoCobroNegocio);

            entity.ToTable("C_TIPO_COBRO_NEGOCIO");

            entity.Property(e => e.IdTipoCobroNegocio).HasColumnName("ID_TIPO_COBRO_NEGOCIO");
            entity.Property(e => e.DescTipoCobroNegocio)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("DESC_TIPO_COBRO_NEGOCIO");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CTipoDowntimeTrigger>(entity =>
        {
            entity.HasKey(e => e.IdTipoDowntimeTrigger);

            entity.ToTable("C_TIPO_DOWNTIME_TRIGGER");

            entity.Property(e => e.IdTipoDowntimeTrigger).HasColumnName("ID_TIPO_DOWNTIME_TRIGGER");
            entity.Property(e => e.DescTipoDowntimeTrigger)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_TIPO_DOWNTIME_TRIGGER");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CTipoFalla>(entity =>
        {
            entity.HasKey(e => e.IdTipoFalla);

            entity.ToTable("C_TIPO_FALLA");

            entity.Property(e => e.IdTipoFalla).HasColumnName("ID_TIPO_FALLA");
            entity.Property(e => e.DescTipoFalla)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_TIPO_FALLA");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IsCobrable).HasColumnName("IS_COBRABLE");
            entity.Property(e => e.IsEspecial).HasColumnName("IS_ESPECIAL");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CTipoFallaSegmento>(entity =>
        {
            entity.HasKey(e => e.IdTipoFallaSegmento);

            entity.ToTable("C_TIPO_FALLA_SEGMENTO");

            entity.Property(e => e.IdTipoFallaSegmento).HasColumnName("ID_TIPO_FALLA_SEGMENTO");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdSegmento).HasColumnName("ID_SEGMENTO");
            entity.Property(e => e.IdTipoFalla).HasColumnName("ID_TIPO_FALLA");
        });

        modelBuilder.Entity<CTipoInsumo>(entity =>
        {
            entity.HasKey(e => e.IdTipoInsumo);

            entity.ToTable("C_TIPO_INSUMO");

            entity.Property(e => e.IdTipoInsumo).HasColumnName("ID_TIPO_INSUMO");
            entity.Property(e => e.DescTipoInsumo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_TIPO_INSUMO");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CTipoInventario>(entity =>
        {
            entity.HasKey(e => e.IdTipoInventario);

            entity.ToTable("C_TIPO_INVENTARIO");

            entity.Property(e => e.IdTipoInventario).HasColumnName("ID_TIPO_INVENTARIO");
            entity.Property(e => e.DescTipoInventario)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_TIPO_INVENTARIO");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CTipoItemOrdenCompra>(entity =>
        {
            entity.HasKey(e => e.IdTipoItemOrdenCompra).HasName("PK__C_TIPO_I__EB726181FB5A492B");

            entity.ToTable("C_TIPO_ITEM_ORDEN_COMPRA");

            entity.Property(e => e.IdTipoItemOrdenCompra).HasColumnName("ID_TIPO_ITEM_ORDEN_COMPRA");
            entity.Property(e => e.DescTipoItemOrdenCompra)
                .IsUnicode(false)
                .HasColumnName("DESC_TIPO_ITEM_ORDEN_COMPRA");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CTipoItemSolicitudAlmacen>(entity =>
        {
            entity.HasKey(e => e.IdTipoItemSolicitudAlmacen);

            entity.ToTable("C_TIPO_ITEM_SOLICITUD_ALMACEN");

            entity.Property(e => e.IdTipoItemSolicitudAlmacen).HasColumnName("ID_TIPO_ITEM_SOLICITUD_ALMACEN");
            entity.Property(e => e.DescTipoItemSolicitudAlmacen)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_TIPO_ITEM_SOLICITUD_ALMACEN");
            entity.Property(e => e.IdStatusArNew).HasColumnName("ID_STATUS_AR_NEW");
            entity.Property(e => e.IdTipoProducto).HasColumnName("ID_TIPO_PRODUCTO");
            entity.Property(e => e.IsIndividuallyControlled).HasColumnName("IS_INDIVIDUALLY_CONTROLLED");
            entity.Property(e => e.IsUnidadGrupoClientes)
                .HasDefaultValueSql("((0))")
                .HasColumnName("IS_UNIDAD_GRUPO_CLIENTES");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CTipoLocalidad>(entity =>
        {
            entity.HasKey(e => e.IdTipoLocalidad).HasName("PK_C_LOCALIDAD");

            entity.ToTable("C_TIPO_LOCALIDAD");

            entity.Property(e => e.IdTipoLocalidad).HasColumnName("ID_TIPO_LOCALIDAD");
            entity.Property(e => e.DescLocalidad)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("DESC_LOCALIDAD");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CTipoOutboxSantander>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("C_TIPO_OUTBOX_SANTANDER");

            entity.Property(e => e.DescTipo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_TIPO");
            entity.Property(e => e.IdTipoOutboxSantander)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_TIPO_OUTBOX_SANTANDER");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CTipoPart>(entity =>
        {
            entity.HasKey(e => e.IdTipoPart);

            entity.ToTable("C_TIPO_PART");

            entity.Property(e => e.IdTipoPart).HasColumnName("ID_TIPO_PART");
            entity.Property(e => e.DescTipoPart)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_TIPO_PART");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CTipoPlaza>(entity =>
        {
            entity.HasKey(e => e.IdTipoPlaza);

            entity.ToTable("C_TIPO_PLAZA");

            entity.Property(e => e.IdTipoPlaza).HasColumnName("ID_TIPO_PLAZA");
            entity.Property(e => e.DescTipoPlaza)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_TIPO_PLAZA");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CTipoPlazaCliente>(entity =>
        {
            entity.HasKey(e => e.IdTipoPlazaCliente);

            entity.ToTable("C_TIPO_PLAZA_CLIENTE");

            entity.Property(e => e.IdTipoPlazaCliente).HasColumnName("ID_TIPO_PLAZA_CLIENTE");
            entity.Property(e => e.DescTipoPlazaCliente)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_TIPO_PLAZA_CLIENTE");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");
            entity.Property(e => e.Dias).HasColumnName("DIAS");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.IsDefault).HasColumnName("IS_DEFAULT");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CTipoPlazaNegocio>(entity =>
        {
            entity.HasKey(e => e.IdTipoPlazaNegocio);

            entity.ToTable("C_TIPO_PLAZA_NEGOCIO");

            entity.Property(e => e.IdTipoPlazaNegocio).HasColumnName("ID_TIPO_PLAZA_NEGOCIO");
            entity.Property(e => e.DescTipoPlazaNegocio)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_TIPO_PLAZA_NEGOCIO");
        });

        modelBuilder.Entity<CTipoPrecio>(entity =>
        {
            entity.HasKey(e => e.IdTipoPrecio);

            entity.ToTable("C_TIPO_PRECIO");

            entity.Property(e => e.IdTipoPrecio).HasColumnName("ID_TIPO_PRECIO");
            entity.Property(e => e.DescTipoPrecio)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_TIPO_PRECIO");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CTipoProducto>(entity =>
        {
            entity.HasKey(e => e.IdTipoProducto);

            entity.ToTable("C_TIPO_PRODUCTO");

            entity.Property(e => e.IdTipoProducto).HasColumnName("ID_TIPO_PRODUCTO");
            entity.Property(e => e.DescTipoProducto)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_TIPO_PRODUCTO");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CTipoReparacion>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("C_TIPO_REPARACION");

            entity.Property(e => e.DescTipoReparacion)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("DESC_TIPO_REPARACION");
            entity.Property(e => e.DescTipoReparacion3m)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESC_TIPO_REPARACION_3M");
            entity.Property(e => e.IdTipoReparacion)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_TIPO_REPARACION");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CTipoResponsable>(entity =>
        {
            entity.HasKey(e => e.IdTipoResponsable).HasName("PK_C_TIPO_RESP");

            entity.ToTable("C_TIPO_RESPONSABLE");

            entity.Property(e => e.IdTipoResponsable).HasColumnName("ID_TIPO_RESPONSABLE");
            entity.Property(e => e.DescTipoResponsable)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_TIPO_RESPONSABLE");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CTipoResponsablePrefacturacion>(entity =>
        {
            entity.HasKey(e => e.IdTipoResponsablePrefacturacion).HasName("PK_C_RESPONSABLES_PREFACTURACION");

            entity.ToTable("C_TIPO_RESPONSABLE_PREFACTURACION");

            entity.Property(e => e.IdTipoResponsablePrefacturacion).HasColumnName("ID_TIPO_RESPONSABLE_PREFACTURACION");
            entity.Property(e => e.DescTipoResponsablePrefacturacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_TIPO_RESPONSABLE_PREFACTURACION");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CTipoServicio>(entity =>
        {
            entity.HasKey(e => e.IdTipoServicio);

            entity.ToTable("C_TIPO_SERVICIO");

            entity.Property(e => e.IdTipoServicio).HasColumnName("ID_TIPO_SERVICIO");
            entity.Property(e => e.DescTipoServicio)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_TIPO_SERVICIO");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CTipoServicioSolicitudAlmacen>(entity =>
        {
            entity.HasKey(e => e.IdTipoServicioSolicitudAlmacen);

            entity.ToTable("C_TIPO_SERVICIO_SOLICITUD_ALMACEN");

            entity.Property(e => e.IdTipoServicioSolicitudAlmacen).HasColumnName("ID_TIPO_SERVICIO_SOLICITUD_ALMACEN");
            entity.Property(e => e.DescTipoServicioSolicitudAlmacen)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_TIPO_SERVICIO_SOLICITUD_ALMACEN");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CTipoSolicitudAlmacen>(entity =>
        {
            entity.HasKey(e => e.IdTipoSolicitudAlmacen);

            entity.ToTable("C_TIPO_SOLICITUD_ALMACEN");

            entity.Property(e => e.IdTipoSolicitudAlmacen).HasColumnName("ID_TIPO_SOLICITUD_ALMACEN");
            entity.Property(e => e.DescTipoSolicitudAlmacen)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_TIPO_SOLICITUD_ALMACEN");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CTipoSoporteTecnico>(entity =>
        {
            entity.HasKey(e => e.IdTipoSoporteTecnico);

            entity.ToTable("C_TIPO_SOPORTE_TECNICO");

            entity.Property(e => e.IdTipoSoporteTecnico).HasColumnName("ID_TIPO_SOPORTE_TECNICO");
            entity.Property(e => e.DescTipoSoporteTecnico)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_TIPO_SOPORTE_TECNICO");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CTipoSparePart>(entity =>
        {
            entity.HasKey(e => e.IdTipoSparePart);

            entity.ToTable("C_TIPO_SPARE_PART");

            entity.Property(e => e.IdTipoSparePart).HasColumnName("ID_TIPO_SPARE_PART");
            entity.Property(e => e.DescTipoSparePart)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_TIPO_SPARE_PART");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CTipoTracking>(entity =>
        {
            entity.HasKey(e => e.IdTipoTracking).HasName("PK__C_TIPO_T__A65386713A0DD087");

            entity.ToTable("C_TIPO_TRACKING");

            entity.Property(e => e.IdTipoTracking).HasColumnName("ID_TIPO_TRACKING");
            entity.Property(e => e.DescTipoTracking)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_TIPO_TRACKING");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
        });

        modelBuilder.Entity<CTipoUsuario>(entity =>
        {
            entity.HasKey(e => e.IdTipoUsuario);

            entity.ToTable("C_TIPO_USUARIO");

            entity.HasIndex(e => e.DescTipoUsuario, "IX_C_TIPO_USUARIO");

            entity.HasIndex(e => e.Status, "IX_C_TIPO_USUARIO_1");

            entity.Property(e => e.IdTipoUsuario).HasColumnName("ID_TIPO_USUARIO");
            entity.Property(e => e.DescTipoUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_TIPO_USUARIO");
            entity.Property(e => e.IsAutoAssignTechnicians).HasColumnName("IS_AUTO_ASSIGN_TECHNICIANS");
            entity.Property(e => e.IsChangeUnitStock).HasColumnName("IS_CHANGE_UNIT_STOCK");
            entity.Property(e => e.IsEditFiscal).HasColumnName("IS_EDIT_FISCAL");
            entity.Property(e => e.IsSoporte).HasColumnName("IS_SOPORTE");
            entity.Property(e => e.IsSysAdmin).HasColumnName("IS_SYS_ADMIN");
            entity.Property(e => e.IsTargetChangeSent).HasColumnName("IS_TARGET_CHANGE_SENT");
            entity.Property(e => e.IsTechniciansAssignedOnly).HasColumnName("IS_TECHNICIANS_ASSIGNED_ONLY");
            entity.Property(e => e.IsTecnico).HasColumnName("IS_TECNICO");
            entity.Property(e => e.IsViewAllServicios).HasColumnName("IS_VIEW_ALL_SERVICIOS");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CTipoZonaOld>(entity =>
        {
            entity.HasKey(e => e.IdTipoZona).HasName("PK_C_TIPO_ZONA");

            entity.ToTable("C_TIPO_ZONA_OLD");

            entity.Property(e => e.IdTipoZona).HasColumnName("ID_TIPO_ZONA");
            entity.Property(e => e.DescTipoZona)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_TIPO_ZONA");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CTiposDocumentosSalesforce>(entity =>
        {
            entity.HasKey(e => e.IdTipoDocumentoSalesforce).HasName("PK__C_TIPOS___91E37DDE332F457E");

            entity.ToTable("C_TIPOS_DOCUMENTOS_SALESFORCE");

            entity.Property(e => e.IdTipoDocumentoSalesforce).HasColumnName("ID_TIPO_DOCUMENTO_SALESFORCE");
            entity.Property(e => e.DescTipoDocumento)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_TIPO_DOCUMENTO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Status)
                .HasDefaultValueSql("((1))")
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CTiposPlantilla>(entity =>
        {
            entity.HasKey(e => e.IdTipoPlantilla).HasName("PK__C_TIPOS___AD2CB7EDE69F78DE");

            entity.ToTable("C_TIPOS_PLANTILLA");

            entity.Property(e => e.IdTipoPlantilla).HasColumnName("ID_TIPO_PLANTILLA");
            entity.Property(e => e.DescTipoPlantilla)
                .IsUnicode(false)
                .HasColumnName("DESC_TIPO_PLANTILLA");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Status).HasColumnName("STATUS");
        });

        modelBuilder.Entity<CUnidadMensajerium>(entity =>
        {
            entity.HasKey(e => e.IdUnidadMensajeria);

            entity.ToTable("C_UNIDAD_MENSAJERIA");

            entity.Property(e => e.IdUnidadMensajeria).HasColumnName("ID_UNIDAD_MENSAJERIA");
            entity.Property(e => e.DescUnidadMensajeria)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("DESC_UNIDAD_MENSAJERIA");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdServicioMensajeria).HasColumnName("ID_SERVICIO_MENSAJERIA");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CUpdateTablasBb>(entity =>
        {
            entity.HasKey(e => e.IdUpdateTablasBb);

            entity.ToTable("C_UPDATE_TABLAS_BB");

            entity.Property(e => e.IdUpdateTablasBb).HasColumnName("ID_UPDATE_TABLAS_BB");
            entity.Property(e => e.DescTablaUpdate)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_TABLA_UPDATE");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.FecUpdate)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_UPDATE");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.IdUsuarioUpdate).HasColumnName("ID_USUARIO_UPDATE");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.TablaUpdate)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TABLA_UPDATE");
        });

        modelBuilder.Entity<CUrgenciaEnvio>(entity =>
        {
            entity.HasKey(e => e.IdUrgenciaEnvio);

            entity.ToTable("C_URGENCIA_ENVIO");

            entity.Property(e => e.IdUrgenciaEnvio).HasColumnName("ID_URGENCIA_ENVIO");
            entity.Property(e => e.DescUrgenciaEnvio)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_URGENCIA_ENVIO");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CUrgenciaSolicitudAlmacen>(entity =>
        {
            entity.HasKey(e => e.IdUrgenciaSolicitudAlmacen);

            entity.ToTable("C_URGENCIA_SOLICITUD_ALMACEN");

            entity.Property(e => e.IdUrgenciaSolicitudAlmacen).HasColumnName("ID_URGENCIA_SOLICITUD_ALMACEN");
            entity.Property(e => e.DescUrgenciaSolicitudAlmacen)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_URGENCIA_SOLICITUD_ALMACEN");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CUsuario>(entity =>
        {
            entity.HasKey(e => e.IdUsuario);

            entity.ToTable("C_USUARIOS");

            entity.HasIndex(e => e.IdProveedor, "IX_C_USUARIOS");

            entity.HasIndex(e => new { e.Nombre, e.Paterno, e.Materno }, "IX_C_USUARIOS_1");

            entity.HasIndex(e => e.IdTipoUsuario, "IX_C_USUARIOS_ID_TIPO_USUARIO");

            entity.HasIndex(e => new { e.IdTipoUsuario, e.Status }, "IX_C_USUARIOS_ID_TIPO_USUARIO, STATUS");

            entity.HasIndex(e => new { e.IdTipoUsuario, e.Status, e.IsFollowerDispatch }, "IX_C_USUARIOS_ID_TIPO_USUARIO, STATUS, IS_FOLLOWER_DISPATCH");

            entity.HasIndex(e => new { e.IdTipoUsuario, e.Status }, "IX_C_USUARIOS_ID_TIPO_USUARIO_STATUS");

            entity.HasIndex(e => new { e.Status, e.IdUsuario }, "IX_C_USUARIOS_STATUS_ID_USUARIO");

            entity.HasIndex(e => e.Status, "IX_MI_C_USUARIOS_10556_10555");

            entity.HasIndex(e => new { e.IdZona, e.Status }, "IX_MI_C_USUARIOS_10616_10615");

            entity.HasIndex(e => new { e.IdZona, e.Status, e.IdPuesto }, "IX_MI_C_USUARIOS_10677_10676");

            entity.HasIndex(e => e.Status, "IX_MI_C_USUARIOS_111_110");

            entity.HasIndex(e => e.IsPda, "IX_MI_C_USUARIOS_12072_12071");

            entity.HasIndex(e => e.Status, "IX_MI_C_USUARIOS_12087_12086");

            entity.HasIndex(e => e.Status, "IX_MI_C_USUARIOS_149_148");

            entity.HasIndex(e => new { e.IdTipoUsuario, e.Status }, "IX_MI_C_USUARIOS_153999_153998");

            entity.HasIndex(e => new { e.IdTipoUsuario, e.Status }, "IX_MI_C_USUARIOS_154001_154000");

            entity.HasIndex(e => e.Nombre, "IX_MI_C_USUARIOS_15_14");

            entity.HasIndex(e => new { e.IdTipoUsuario, e.Status }, "IX_MI_C_USUARIOS_17_16");

            entity.HasIndex(e => e.Status, "IX_MI_C_USUARIOS_1924_1923");

            entity.HasIndex(e => new { e.Status, e.IdPuesto }, "IX_MI_C_USUARIOS_25194_25193");

            entity.HasIndex(e => e.Status, "IX_MI_C_USUARIOS_2561_2560");

            entity.HasIndex(e => e.Status, "IX_MI_C_USUARIOS_28400_28399");

            entity.HasIndex(e => e.IsPda, "IX_MI_C_USUARIOS_2_1");

            entity.HasIndex(e => new { e.IdTipoUsuario, e.Status }, "IX_MI_C_USUARIOS_312_311");

            entity.HasIndex(e => e.Credencial, "IX_MI_C_USUARIOS_3464_3463");

            entity.HasIndex(e => e.Status, "IX_MI_C_USUARIOS_399_398");

            entity.HasIndex(e => e.Username, "IX_MI_C_USUARIOS_46_45");

            entity.HasIndex(e => new { e.Status, e.IdUsuario }, "IX_MI_C_USUARIOS_48_47");

            entity.HasIndex(e => e.Status, "IX_MI_C_USUARIOS_5108_5107");

            entity.HasIndex(e => e.Status, "IX_MI_C_USUARIOS_5114_5113");

            entity.HasIndex(e => e.Status, "IX_MI_C_USUARIOS_57_56");

            entity.HasIndex(e => new { e.IdTipoUsuario, e.Status }, "IX_MI_C_USUARIOS_634_633");

            entity.HasIndex(e => new { e.Username, e.Status }, "IX_MI_C_USUARIOS_75_74");

            entity.HasIndex(e => e.Status, "IX_MI_C_USUARIOS_8109_8108");

            entity.HasIndex(e => new { e.IdTipoUsuario, e.Status }, "IX_MI_C_USUARIOS_83_82");

            entity.HasIndex(e => new { e.Status, e.IdUsuario }, "IX_MI_C_USUARIOS_8782_8781");

            entity.HasIndex(e => new { e.IdTipoUsuario, e.IdProveedor, e.Status }, "missing_index_11962_11961");

            entity.HasIndex(e => new { e.IdTipoUsuario, e.Status, e.IdProveedor }, "missing_index_1881420_1881419");

            entity.HasIndex(e => e.Status, "missing_index_3576836_3576835");

            entity.HasIndex(e => new { e.IdTipoUsuario, e.Status, e.IdProveedor }, "missing_index_4281247_4281246");

            entity.HasIndex(e => new { e.IdTipoUsuario, e.Status }, "missing_index_4443916_4443915");

            entity.HasIndex(e => new { e.IdTipoUsuario, e.Status }, "missing_index_4509886_4509885");

            entity.HasIndex(e => new { e.IdProveedor, e.Status }, "missing_index_4570393_4570392");

            entity.HasIndex(e => new { e.IdTipoUsuario, e.Status, e.IdProveedor }, "missing_index_4579_4578");

            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.Celular)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CELULAR");
            entity.Property(e => e.ComentariosOki).HasColumnName("COMENTARIOS_OKI");
            entity.Property(e => e.Credencial)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("CREDENCIAL");
            entity.Property(e => e.Curp)
                .HasMaxLength(18)
                .IsUnicode(false)
                .HasColumnName("CURP");
            entity.Property(e => e.DiasVacaciones).HasColumnName("DIAS_VACACIONES");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("EMAIL");
            entity.Property(e => e.EmailServiceClose).HasColumnName("EMAIL_SERVICE_CLOSE");
            entity.Property(e => e.ExcelUltimoMov).HasColumnName("EXCEL_ULTIMO_MOV");
            entity.Property(e => e.ExcelUsuarioCierre).HasColumnName("EXCEL_USUARIO_CIERRE");
            entity.Property(e => e.FecAccesoPda)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ACCESO_PDA");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.FecBaja)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_BAJA");
            entity.Property(e => e.FecExp)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_EXP");
            entity.Property(e => e.FecIngreso)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_INGRESO");
            entity.Property(e => e.FecNac)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_NAC");
            entity.Property(e => e.FecReingreso)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_REINGRESO");
            entity.Property(e => e.FecStatus)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_STATUS");
            entity.Property(e => e.Frase)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("FRASE");
            entity.Property(e => e.HrefFoto)
                .HasMaxLength(75)
                .IsUnicode(false)
                .HasColumnName("HREF_FOTO");
            entity.Property(e => e.IdAlmacenOld).HasColumnName("ID_ALMACEN_OLD");
            entity.Property(e => e.IdArea).HasColumnName("ID_AREA");
            entity.Property(e => e.IdDatosFiscales).HasColumnName("ID_DATOS_FISCALES");
            entity.Property(e => e.IdDirecciones).HasColumnName("ID_DIRECCIONES");
            entity.Property(e => e.IdEdoNac).HasColumnName("ID_EDO_NAC");
            entity.Property(e => e.IdHorario).HasColumnName("ID_HORARIO");
            entity.Property(e => e.IdJefe).HasColumnName("ID_JEFE");
            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");
            entity.Property(e => e.IdPuesto).HasColumnName("ID_PUESTO");
            entity.Property(e => e.IdTipoUsuario).HasColumnName("ID_TIPO_USUARIO");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.IdUsuarioStatus).HasColumnName("ID_USUARIO_STATUS");
            entity.Property(e => e.IdZona).HasColumnName("ID_ZONA");
            entity.Property(e => e.IsActualizacionMasivaCoordenadasNegocio).HasColumnName("IS_ACTUALIZACION_MASIVA_COORDENADAS_NEGOCIO");
            entity.Property(e => e.IsActualizarAgregarMasivoNegocios).HasColumnName("IS_ACTUALIZAR_AGREGAR_MASIVO_NEGOCIOS");
            entity.Property(e => e.IsAddReplicate).HasColumnName("IS_ADD_REPLICATE");
            entity.Property(e => e.IsAdiministrarUsuarios).HasColumnName("IS_ADIMINISTRAR_USUARIOS");
            entity.Property(e => e.IsAllCliente).HasColumnName("IS_ALL_CLIENTE");
            entity.Property(e => e.IsAltaMasivaNegocios).HasColumnName("IS_ALTA_MASIVA_NEGOCIOS");
            entity.Property(e => e.IsAltaMasivaNegociosOtrosClientes).HasColumnName("IS_ALTA_MASIVA_NEGOCIOS_OTROS_CLIENTES");
            entity.Property(e => e.IsAltaMasivaViaticos).HasColumnName("IS_ALTA_MASIVA_VIATICOS");
            entity.Property(e => e.IsAutorizaVacaciones).HasColumnName("IS_AUTORIZA_VACACIONES");
            entity.Property(e => e.IsCache).HasColumnName("IS_CACHE");
            entity.Property(e => e.IsCallCenterContacto).HasColumnName("IS_CALL_CENTER_CONTACTO");
            entity.Property(e => e.IsCambioStatusUnidadInstaladas).HasColumnName("IS_CAMBIO_STATUS_UNIDAD_INSTALADAS");
            entity.Property(e => e.IsCambioStatusUnidadReglaDisponibleUsado).HasColumnName("IS_CAMBIO_STATUS_UNIDAD_REGLA_DISPONIBLE_USADO");
            entity.Property(e => e.IsCambioStatusUnidadReglaDisponibleUsuado).HasColumnName("IS_CAMBIO_STATUS_UNIDAD_REGLA_DISPONIBLE_USUADO");
            entity.Property(e => e.IsConsultaUnidad).HasColumnName("IS_CONSULTA_UNIDAD");
            entity.Property(e => e.IsDaniadaUsuario).HasColumnName("IS_DANIADA_USUARIO");
            entity.Property(e => e.IsDeleteDrive).HasColumnName("IS_DELETE_DRIVE");
            entity.Property(e => e.IsDispatchProgramados).HasColumnName("IS_DISPATCH_PROGRAMADOS");
            entity.Property(e => e.IsEditaNegocios).HasColumnName("IS_EDITA_NEGOCIOS");
            entity.Property(e => e.IsEditarAlmacen).HasColumnName("IS_EDITAR_ALMACEN");
            entity.Property(e => e.IsEditarEspecificacionesServicio).HasColumnName("IS_EDITAR_ESPECIFICACIONES_SERVICIO");
            entity.Property(e => e.IsElavon).HasColumnName("IS_ELAVON");
            entity.Property(e => e.IsEligeVacaciones).HasColumnName("IS_ELIGE_VACACIONES");
            entity.Property(e => e.IsEmailServiceCharge).HasColumnName("IS_EMAIL_SERVICE_CHARGE");
            entity.Property(e => e.IsExlsNegocios).HasColumnName("IS_EXLS_NEGOCIOS");
            entity.Property(e => e.IsFecGarantiaChange).HasColumnName("IS_FEC_GARANTIA_CHANGE");
            entity.Property(e => e.IsFollowerDispatch).HasColumnName("IS_FOLLOWER_DISPATCH");
            entity.Property(e => e.IsModCUsuarios).HasColumnName("is_mod_c_usuarios");
            entity.Property(e => e.IsModificaMensajeria).HasColumnName("IS_MODIFICA_MENSAJERIA");
            entity.Property(e => e.IsModifiedAr).HasColumnName("IS_MODIFIED_AR");
            entity.Property(e => e.IsNotificacionInfoUsuario).HasColumnName("IS_NOTIFICACION_INFO_USUARIO");
            entity.Property(e => e.IsNotificacionLimiteUsuarios).HasColumnName("IS_NOTIFICACION_LIMITE_USUARIOS");
            entity.Property(e => e.IsPadronIngenieros).HasColumnName("IS_PADRON_INGENIEROS");
            entity.Property(e => e.IsPda).HasColumnName("IS_PDA");
            entity.Property(e => e.IsReabrirAuditoria).HasColumnName("IS_REABRIR_AUDITORIA");
            entity.Property(e => e.IsRecoverPassword).HasColumnName("IS_RECOVER_PASSWORD");
            entity.Property(e => e.IsRedireccionEnvio).HasColumnName("IS_REDIRECCION_ENVIO");
            entity.Property(e => e.IsReporteDesviacion).HasColumnName("IS_REPORTE_DESVIACION");
            entity.Property(e => e.IsReporteLicenciasDhl).HasColumnName("IS_REPORTE_LICENCIAS_DHL");
            entity.Property(e => e.IsReporteUnidadesApi).HasColumnName("IS_REPORTE_UNIDADES_API");
            entity.Property(e => e.IsStatusCambioAbiertas).HasColumnName("is_status_cambio_abiertas");
            entity.Property(e => e.IsStolenUnit).HasColumnName("IS_STOLEN_UNIT");
            entity.Property(e => e.IsUpdatePosicionInventario).HasColumnName("IS_UPDATE_POSICION_INVENTARIO");
            entity.Property(e => e.Materno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MATERNO");
            entity.Property(e => e.ModificaMUnidad).HasColumnName("MODIFICA_M_UNIDAD");
            entity.Property(e => e.NoIdNextel)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("NO_ID_NEXTEL");
            entity.Property(e => e.NoTelNextel)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("NO_TEL_NEXTEL");
            entity.Property(e => e.Nombre)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NOMBRE");
            entity.Property(e => e.Password)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("PASSWORD");
            entity.Property(e => e.Paterno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PATERNO");
            entity.Property(e => e.Sexo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SEXO");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.Telefono)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");
            entity.Property(e => e.TelefonoCasa)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TELEFONO_CASA");
            entity.Property(e => e.TelefonoOficina)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TELEFONO_OFICINA");
            entity.Property(e => e.TelefonoOficinaExt)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("TELEFONO_OFICINA_EXT");
            entity.Property(e => e.Username)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("USERNAME");

            entity.HasOne(d => d.IdTipoUsuarioNavigation).WithMany(p => p.CUsuarios)
                .HasForeignKey(d => d.IdTipoUsuario)
                .HasConstraintName("FK_C_USUARIOS_C_TIPO_USUARIO");
        });

        modelBuilder.Entity<CUsuariosCorporativo>(entity =>
        {
            entity.HasKey(e => e.IdUsuarioCorp);

            entity.ToTable("C_USUARIOS_CORPORATIVO");

            entity.HasIndex(e => e.IdUsuario, "IX_C_USUARIOS_CORPORATIVO");

            entity.Property(e => e.IdUsuarioCorp).HasColumnName("ID_USUARIO_CORP");
            entity.Property(e => e.IdRegion).HasColumnName("ID_REGION");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CUsuariosPrueba>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("C_USUARIOS_PRUEBA");

            entity.Property(e => e.Celular)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CELULAR");
            entity.Property(e => e.ComentariosOki).HasColumnName("COMENTARIOS_OKI");
            entity.Property(e => e.Credencial)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("CREDENCIAL");
            entity.Property(e => e.Curp)
                .HasMaxLength(18)
                .IsUnicode(false)
                .HasColumnName("CURP");
            entity.Property(e => e.DiasVacaciones).HasColumnName("DIAS_VACACIONES");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("EMAIL");
            entity.Property(e => e.EmailServiceClose).HasColumnName("EMAIL_SERVICE_CLOSE");
            entity.Property(e => e.ExcelUltimoMov).HasColumnName("EXCEL_ULTIMO_MOV");
            entity.Property(e => e.ExcelUsuarioCierre).HasColumnName("EXCEL_USUARIO_CIERRE");
            entity.Property(e => e.FecAccesoPda)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ACCESO_PDA");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.FecBaja)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_BAJA");
            entity.Property(e => e.FecExp)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_EXP");
            entity.Property(e => e.FecIngreso)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_INGRESO");
            entity.Property(e => e.FecNac)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_NAC");
            entity.Property(e => e.FecReingreso)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_REINGRESO");
            entity.Property(e => e.FecStatus)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_STATUS");
            entity.Property(e => e.Frase)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("FRASE");
            entity.Property(e => e.HrefFoto)
                .HasMaxLength(75)
                .IsUnicode(false)
                .HasColumnName("HREF_FOTO");
            entity.Property(e => e.IdAlmacenOld).HasColumnName("ID_ALMACEN_OLD");
            entity.Property(e => e.IdArea).HasColumnName("ID_AREA");
            entity.Property(e => e.IdDatosFiscales).HasColumnName("ID_DATOS_FISCALES");
            entity.Property(e => e.IdDirecciones).HasColumnName("ID_DIRECCIONES");
            entity.Property(e => e.IdEdoNac).HasColumnName("ID_EDO_NAC");
            entity.Property(e => e.IdHorario).HasColumnName("ID_HORARIO");
            entity.Property(e => e.IdJefe).HasColumnName("ID_JEFE");
            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");
            entity.Property(e => e.IdPuesto).HasColumnName("ID_PUESTO");
            entity.Property(e => e.IdTipoUsuario).HasColumnName("ID_TIPO_USUARIO");
            entity.Property(e => e.IdUsuario)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_USUARIO");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.IdUsuarioStatus).HasColumnName("ID_USUARIO_STATUS");
            entity.Property(e => e.IdZona).HasColumnName("ID_ZONA");
            entity.Property(e => e.IsActualizacionMasivaCoordenadasNegocio).HasColumnName("IS_ACTUALIZACION_MASIVA_COORDENADAS_NEGOCIO");
            entity.Property(e => e.IsAddReplicate).HasColumnName("IS_ADD_REPLICATE");
            entity.Property(e => e.IsAdiministrarUsuarios).HasColumnName("IS_ADIMINISTRAR_USUARIOS");
            entity.Property(e => e.IsAllCliente).HasColumnName("IS_ALL_CLIENTE");
            entity.Property(e => e.IsAltaMasivaNegocios).HasColumnName("IS_ALTA_MASIVA_NEGOCIOS");
            entity.Property(e => e.IsAltaMasivaViaticos).HasColumnName("IS_ALTA_MASIVA_VIATICOS");
            entity.Property(e => e.IsAutorizaVacaciones).HasColumnName("IS_AUTORIZA_VACACIONES");
            entity.Property(e => e.IsCache).HasColumnName("IS_CACHE");
            entity.Property(e => e.IsCallCenterContacto).HasColumnName("IS_CALL_CENTER_CONTACTO");
            entity.Property(e => e.IsCambioStatusUnidadInstaladas).HasColumnName("IS_CAMBIO_STATUS_UNIDAD_INSTALADAS");
            entity.Property(e => e.IsCambioStatusUnidadReglaDisponibleUsado).HasColumnName("IS_CAMBIO_STATUS_UNIDAD_REGLA_DISPONIBLE_USADO");
            entity.Property(e => e.IsCambioStatusUnidadReglaDisponibleUsuado).HasColumnName("IS_CAMBIO_STATUS_UNIDAD_REGLA_DISPONIBLE_USUADO");
            entity.Property(e => e.IsConsultaUnidad).HasColumnName("IS_CONSULTA_UNIDAD");
            entity.Property(e => e.IsDaniadaUsuario).HasColumnName("IS_DANIADA_USUARIO");
            entity.Property(e => e.IsDeleteDrive).HasColumnName("IS_DELETE_DRIVE");
            entity.Property(e => e.IsDispatchProgramados).HasColumnName("IS_DISPATCH_PROGRAMADOS");
            entity.Property(e => e.IsEditaNegocios).HasColumnName("IS_EDITA_NEGOCIOS");
            entity.Property(e => e.IsEditarAlmacen).HasColumnName("IS_EDITAR_ALMACEN");
            entity.Property(e => e.IsEditarEspecificacionesServicio).HasColumnName("IS_EDITAR_ESPECIFICACIONES_SERVICIO");
            entity.Property(e => e.IsElavon).HasColumnName("IS_ELAVON");
            entity.Property(e => e.IsEligeVacaciones).HasColumnName("IS_ELIGE_VACACIONES");
            entity.Property(e => e.IsEmailServiceCharge).HasColumnName("IS_EMAIL_SERVICE_CHARGE");
            entity.Property(e => e.IsExlsNegocios).HasColumnName("IS_EXLS_NEGOCIOS");
            entity.Property(e => e.IsFecGarantiaChange).HasColumnName("IS_FEC_GARANTIA_CHANGE");
            entity.Property(e => e.IsFollowerDispatch).HasColumnName("IS_FOLLOWER_DISPATCH");
            entity.Property(e => e.IsModCUsuarios).HasColumnName("is_mod_c_usuarios");
            entity.Property(e => e.IsModificaMensajeria).HasColumnName("IS_MODIFICA_MENSAJERIA");
            entity.Property(e => e.IsModifiedAr).HasColumnName("IS_MODIFIED_AR");
            entity.Property(e => e.IsNotificacionInfoUsuario).HasColumnName("IS_NOTIFICACION_INFO_USUARIO");
            entity.Property(e => e.IsNotificacionLimiteUsuarios).HasColumnName("IS_NOTIFICACION_LIMITE_USUARIOS");
            entity.Property(e => e.IsPadronIngenieros).HasColumnName("IS_PADRON_INGENIEROS");
            entity.Property(e => e.IsPda).HasColumnName("IS_PDA");
            entity.Property(e => e.IsReabrirAuditoria).HasColumnName("IS_REABRIR_AUDITORIA");
            entity.Property(e => e.IsRecoverPassword).HasColumnName("IS_RECOVER_PASSWORD");
            entity.Property(e => e.IsRedireccionEnvio).HasColumnName("IS_REDIRECCION_ENVIO");
            entity.Property(e => e.IsReporteDesviacion).HasColumnName("IS_REPORTE_DESVIACION");
            entity.Property(e => e.IsReporteLicenciasDhl).HasColumnName("IS_REPORTE_LICENCIAS_DHL");
            entity.Property(e => e.IsReporteUnidadesApi).HasColumnName("IS_REPORTE_UNIDADES_API");
            entity.Property(e => e.IsStatusCambioAbiertas).HasColumnName("is_status_cambio_abiertas");
            entity.Property(e => e.IsStolenUnit).HasColumnName("IS_STOLEN_UNIT");
            entity.Property(e => e.IsUpdatePosicionInventario).HasColumnName("IS_UPDATE_POSICION_INVENTARIO");
            entity.Property(e => e.Materno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MATERNO");
            entity.Property(e => e.ModificaMUnidad).HasColumnName("MODIFICA_M_UNIDAD");
            entity.Property(e => e.NoIdNextel)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("NO_ID_NEXTEL");
            entity.Property(e => e.NoTelNextel)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("NO_TEL_NEXTEL");
            entity.Property(e => e.Nombre)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NOMBRE");
            entity.Property(e => e.Password)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("PASSWORD");
            entity.Property(e => e.Paterno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PATERNO");
            entity.Property(e => e.Sexo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SEXO");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.Telefono)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");
            entity.Property(e => e.TelefonoCasa)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TELEFONO_CASA");
            entity.Property(e => e.TelefonoOficina)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TELEFONO_OFICINA");
            entity.Property(e => e.TelefonoOficinaExt)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("TELEFONO_OFICINA_EXT");
            entity.Property(e => e.Username)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("USERNAME");
        });

        modelBuilder.Entity<CVendedore>(entity =>
        {
            entity.HasKey(e => e.IdVendedor).HasName("PK__C_VENDED__4E11DBE6D6FA9F54");

            entity.ToTable("C_VENDEDORES");

            entity.Property(e => e.IdVendedor).HasColumnName("ID_VENDEDOR");
            entity.Property(e => e.ArcherVendorId).HasColumnName("ARCHER_VENDOR_ID");
            entity.Property(e => e.Ciudad)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CIUDAD");
            entity.Property(e => e.Colonia)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("COLONIA");
            entity.Property(e => e.Cp)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CP");
            entity.Property(e => e.DescVendedor)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_VENDEDOR");
            entity.Property(e => e.Direccion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");
            entity.Property(e => e.Estado)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ESTADO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Rfc)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RFC");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CViatico>(entity =>
        {
            entity.HasKey(e => e.IdViatico);

            entity.ToTable("C_VIATICOS");

            entity.Property(e => e.IdViatico).HasColumnName("ID_VIATICO");
            entity.Property(e => e.DescViatico)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_VIATICO");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.IsAr).HasColumnName("IS_AR");
            entity.Property(e => e.IsNotAr).HasColumnName("IS_NOT_AR");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CViaticosPmo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("C_VIATICOS_PMO");

            entity.Property(e => e.DescViatico)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_VIATICO");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdConceptoPmo).HasColumnName("ID_CONCEPTO_PMO");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.IdViatico)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_VIATICO");
            entity.Property(e => e.IsAr).HasColumnName("IS_AR");
            entity.Property(e => e.IsNotAr).HasColumnName("IS_NOT_AR");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CVistasEscalamiento>(entity =>
        {
            entity.HasKey(e => e.IdVistaEscalamiento);

            entity.ToTable("C_VISTAS_ESCALAMIENTO");

            entity.Property(e => e.IdVistaEscalamiento).HasColumnName("ID_VISTA_ESCALAMIENTO");
            entity.Property(e => e.DescVistaEscalamiento)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_VISTA_ESCALAMIENTO");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CWeekDay>(entity =>
        {
            entity.HasKey(e => e.IdWeekDays);

            entity.ToTable("C_WEEK_DAYS");

            entity.Property(e => e.IdWeekDays).HasColumnName("ID_WEEK_DAYS");
            entity.Property(e => e.WeekDay)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("WEEK_DAY");
        });

        modelBuilder.Entity<CWeekhour>(entity =>
        {
            entity.HasKey(e => e.IdWeekhour);

            entity.ToTable("C_WEEKHOURS");

            entity.Property(e => e.IdWeekhour).HasColumnName("ID_WEEKHOUR");
            entity.Property(e => e.DescWeekhour)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_WEEKHOUR");
            entity.Property(e => e.EndTime)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("END_TIME");
            entity.Property(e => e.StartTime)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("START_TIME");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.Weekday).HasColumnName("WEEKDAY");
        });

        modelBuilder.Entity<CWincorEquivalenciasSg>(entity =>
        {
            entity.HasKey(e => e.IdEquivalencia).HasName("PK__C_WINCOR__6AEAAC0100658DEB");

            entity.ToTable("C_WINCOR_EQUIVALENCIAS_SGS");

            entity.Property(e => e.IdEquivalencia).HasColumnName("ID_EQUIVALENCIA");
            entity.Property(e => e.DescStatusWincor)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("DESC_STATUS_WINCOR");
            entity.Property(e => e.IdStatusAr).HasColumnName("ID_STATUS_AR");
            entity.Property(e => e.IdStatusWincor).HasColumnName("ID_STATUS_WINCOR");

            entity.HasOne(d => d.IdStatusArNavigation).WithMany(p => p.CWincorEquivalenciasSgs)
                .HasForeignKey(d => d.IdStatusAr)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_STATUS_AR_WINCOR_EQUIV");
        });

        modelBuilder.Entity<CWincorMedidum>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("C_WINCOR_MEDIDA");

            entity.Property(e => e.ClaveMedida)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLAVE_MEDIDA");
            entity.Property(e => e.DescMedida)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESC_MEDIDA");
            entity.Property(e => e.IdMedida).HasColumnName("ID_MEDIDA");
            entity.Property(e => e.IdTipoMedida).HasColumnName("ID_TIPO_MEDIDA");
            entity.Property(e => e.ReportaInstalacion).HasColumnName("REPORTA_INSTALACION");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CWincorModulo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("C_WINCOR_MODULO");

            entity.Property(e => e.ClaveModulo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLAVE_MODULO");
            entity.Property(e => e.DescModulo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DESC_MODULO");
            entity.Property(e => e.IdModulo).HasColumnName("ID_MODULO");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CWincorSubmodulo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("C_WINCOR_SUBMODULO");

            entity.Property(e => e.ClaveSubmodulo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLAVE_SUBMODULO");
            entity.Property(e => e.DescSubmodulo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DESC_SUBMODULO");
            entity.Property(e => e.IdModulo).HasColumnName("ID_MODULO");
            entity.Property(e => e.IdSubmodulo).HasColumnName("ID_SUBMODULO");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CWincorTipoMedidum>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("C_WINCOR_TIPO_MEDIDA");

            entity.Property(e => e.DescTipoMedida)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DESC_TIPO_MEDIDA");
            entity.Property(e => e.IdTipoMedida).HasColumnName("ID_TIPO_MEDIDA");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CZona>(entity =>
        {
            entity.HasKey(e => e.IdZona).HasName("PK_C_OFICINAS");

            entity.ToTable("C_ZONAS");

            entity.Property(e => e.IdZona).HasColumnName("ID_ZONA");
            entity.Property(e => e.CadenaF11)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CADENA_F11");
            entity.Property(e => e.DescZona)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_ZONA");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.Frontera).HasColumnName("FRONTERA");
            entity.Property(e => e.IdRegion).HasColumnName("ID_REGION");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.IsAsignacionAuto).HasColumnName("IS_ASIGNACION_AUTO");
            entity.Property(e => e.IsTravelProcess).HasColumnName("IS_TRAVEL_PROCESS");
            entity.Property(e => e.OrdenF11).HasColumnName("ORDEN_F11");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");

            entity.HasOne(d => d.IdRegionNavigation).WithMany(p => p.CZonas)
                .HasForeignKey(d => d.IdRegion)
                .HasConstraintName("FK_C_OFICINAS_C_REGIONES");
        });

        modelBuilder.Entity<CZonaAtencionSantander>(entity =>
        {
            entity.HasKey(e => e.IdZonaAtencion);

            entity.ToTable("C_ZONA_ATENCION_SANTANDER");

            entity.Property(e => e.IdZonaAtencion).HasColumnName("ID_ZONA_ATENCION");
            entity.Property(e => e.CentroServicio)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("CENTRO_SERVICIO");
            entity.Property(e => e.Estado)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("ESTADO");
            entity.Property(e => e.IdRegion).HasColumnName("ID_REGION");
            entity.Property(e => e.IdZona).HasColumnName("ID_ZONA");
            entity.Property(e => e.Region)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("REGION");
            entity.Property(e => e.Responsable)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("RESPONSABLE");
            entity.Property(e => e.ZonaMf).HasColumnName("ZONA_MF");
        });

        modelBuilder.Entity<CZonasAgenteCallCenter>(entity =>
        {
            entity.HasKey(e => e.IdZonaAgenteCallcenter);

            entity.ToTable("C_ZONAS_AGENTE_CALL_CENTER");

            entity.Property(e => e.IdZonaAgenteCallcenter).HasColumnName("ID_ZONA_AGENTE_CALLCENTER");
            entity.Property(e => e.IdAgente).HasColumnName("ID_AGENTE");
            entity.Property(e => e.IdZona).HasColumnName("ID_ZONA");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<CadenaEnvio>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("CADENA_ENVIOS");

            entity.Property(e => e.Afiliacion)
                .IsUnicode(false)
                .HasColumnName("AFILIACION");
            entity.Property(e => e.Aplicacion)
                .IsUnicode(false)
                .HasColumnName("APLICACION");
            entity.Property(e => e.Banco)
                .IsUnicode(false)
                .HasColumnName("BANCO");
            entity.Property(e => e.CadenaEnviada)
                .IsUnicode(false)
                .HasColumnName("CADENA_ENVIADA");
            entity.Property(e => e.CierreAutomatico)
                .IsUnicode(false)
                .HasColumnName("CIERRE_AUTOMATICO");
            entity.Property(e => e.ClaveDelCarrierTcpIp)
                .IsUnicode(false)
                .HasColumnName("CLAVE_DEL_CARRIER_TCP_IP");
            entity.Property(e => e.ClaveDelProtocoloTcpIp)
                .IsUnicode(false)
                .HasColumnName("CLAVE_DEL_PROTOCOLO_TCP_IP");
            entity.Property(e => e.ClaveMin)
                .IsUnicode(false)
                .HasColumnName("CLAVE_MIN");
            entity.Property(e => e.ConsecutivoComercio)
                .IsUnicode(false)
                .HasColumnName("CONSECUTIVO_COMERCIO");
            entity.Property(e => e.DevolucionId)
                .IsUnicode(false)
                .HasColumnName("DEVOLUCION_ID");
            entity.Property(e => e.FecEnvio)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ENVIO");
            entity.Property(e => e.FolioTir)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FOLIO_TIR");
            entity.Property(e => e.HoraFinCierreManual)
                .IsUnicode(false)
                .HasColumnName("HORA_FIN_CIERRE_MANUAL");
            entity.Property(e => e.HoraInicioCierreManual)
                .IsUnicode(false)
                .HasColumnName("HORA_INICIO_CIERRE_MANUAL");
            entity.Property(e => e.IdentificadorGetnet)
                .IsUnicode(false)
                .HasColumnName("IDENTIFICADOR_GETNET");
            entity.Property(e => e.IndicadorDeQps)
                .IsUnicode(false)
                .HasColumnName("INDICADOR_DE_QPS");
            entity.Property(e => e.IndicadoresAbmC4Subcampo6)
                .IsUnicode(false)
                .HasColumnName("INDICADORES_ABM_C4_SUBCAMPO_6");
            entity.Property(e => e.IndicadoresAbmC4Subcampo9)
                .IsUnicode(false)
                .HasColumnName("INDICADORES_ABM_C4_SUBCAMPO_9");
            entity.Property(e => e.Instalador)
                .IsUnicode(false)
                .HasColumnName("INSTALADOR");
            entity.Property(e => e.LimiteCashback)
                .IsUnicode(false)
                .HasColumnName("LIMITE_CASHBACK");
            entity.Property(e => e.LimiteDevolucion)
                .IsUnicode(false)
                .HasColumnName("LIMITE_DEVOLUCION");
            entity.Property(e => e.LimiteVenta)
                .IsUnicode(false)
                .HasColumnName("LIMITE_VENTA");
            entity.Property(e => e.Modelo)
                .IsUnicode(false)
                .HasColumnName("MODELO");
            entity.Property(e => e.Movimiento)
                .IsUnicode(false)
                .HasColumnName("MOVIMIENTO");
            entity.Property(e => e.NoAr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AR");
            entity.Property(e => e.NoArSf)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AR_SF");
            entity.Property(e => e.NumeroDeRegistro)
                .IsUnicode(false)
                .HasColumnName("NUMERO_DE_REGISTRO");
            entity.Property(e => e.Observaciones)
                .IsUnicode(false)
                .HasColumnName("OBSERVACIONES");
            entity.Property(e => e.Operativa)
                .IsUnicode(false)
                .HasColumnName("OPERATIVA");
            entity.Property(e => e.Plan)
                .IsUnicode(false)
                .HasColumnName("PLAN");
            entity.Property(e => e.Postpropina)
                .IsUnicode(false)
                .HasColumnName("POSTPROPINA");
            entity.Property(e => e.Prepropina)
                .IsUnicode(false)
                .HasColumnName("PREPROPINA");
            entity.Property(e => e.TerId)
                .IsUnicode(false)
                .HasColumnName("TER_ID");
            entity.Property(e => e.Ubicacion)
                .IsUnicode(false)
                .HasColumnName("UBICACION");
            entity.Property(e => e.Usuario)
                .IsUnicode(false)
                .HasColumnName("USUARIO");
            entity.Property(e => e.VentaForzada)
                .IsUnicode(false)
                .HasColumnName("VENTA_FORZADA");
        });

        modelBuilder.Entity<CadenaEnvios2>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("CADENA_ENVIOS_2");

            entity.Property(e => e.Afiliacion)
                .IsUnicode(false)
                .HasColumnName("AFILIACION");
            entity.Property(e => e.CadenaRecibida)
                .IsUnicode(false)
                .HasColumnName("CADENA_RECIBIDA");
            entity.Property(e => e.ClaveBanco)
                .IsUnicode(false)
                .HasColumnName("CLAVE_BANCO");
            entity.Property(e => e.Estatus)
                .IsUnicode(false)
                .HasColumnName("ESTATUS");
            entity.Property(e => e.FecRecibido)
                .HasColumnType("datetime")
                .HasColumnName("FEC_RECIBIDO");
            entity.Property(e => e.FolioDeTelecarga)
                .IsUnicode(false)
                .HasColumnName("FOLIO_DE_TELECARGA");
            entity.Property(e => e.FolioTir)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FOLIO_TIR");
            entity.Property(e => e.IdentificadorGetnet)
                .IsUnicode(false)
                .HasColumnName("IDENTIFICADOR_GETNET");
            entity.Property(e => e.MotivoDeRechazo)
                .IsUnicode(false)
                .HasColumnName("MOTIVO_DE_RECHAZO");
            entity.Property(e => e.Movimiento)
                .IsUnicode(false)
                .HasColumnName("MOVIMIENTO");
            entity.Property(e => e.NoAr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AR");
            entity.Property(e => e.NoArSf)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AR_SF");
            entity.Property(e => e.NumeroCaja)
                .IsUnicode(false)
                .HasColumnName("NUMERO_CAJA");
            entity.Property(e => e.TerminalId)
                .IsUnicode(false)
                .HasColumnName("TERMINAL_ID");
        });

        modelBuilder.Entity<CadenaNomina>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("CADENA_NOMINA");

            entity.Property(e => e.CadenaOriginal)
                .IsUnicode(false)
                .HasColumnName("CADENA_ORIGINAL");
            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID");
            entity.Property(e => e.Monto)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("MONTO");
            entity.Property(e => e.Nombre)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("NOMBRE");
            entity.Property(e => e.Url)
                .HasMaxLength(5000)
                .IsUnicode(false)
                .HasColumnName("URL");
        });

        modelBuilder.Entity<CalculoRollosActiva>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CALCULO_ROLLOS_ACTIVA");

            entity.Property(e => e.ApprovedcCount).HasColumnName("APPROVEDC_COUNT");
            entity.Property(e => e.Bloqueo).HasColumnName("BLOQUEO");
            entity.Property(e => e.Declinedcount).HasColumnName("DECLINEDCOUNT");
            entity.Property(e => e.EstatusUltServicio)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("ESTATUS_ULT_SERVICIO");
            entity.Property(e => e.FechaUltServ)
                .HasColumnType("date")
                .HasColumnName("FECHA_ULT_SERV");
            entity.Property(e => e.IdTransacciones).HasColumnName("ID_TRANSACCIONES");
            entity.Property(e => e.Mensaje)
                .IsRequired()
                .HasMaxLength(200)
                .IsFixedLength()
                .HasColumnName("MENSAJE");
            entity.Property(e => e.Month).HasColumnName("MONTH");
            entity.Property(e => e.NegocioExiste).HasColumnName("NEGOCIO_EXISTE");
            entity.Property(e => e.NoFiliacion).HasColumnName("NO_FILIACION");
            entity.Property(e => e.Proveedor)
                .IsRequired()
                .HasMaxLength(30)
                .IsFixedLength()
                .HasColumnName("PROVEEDOR");
            entity.Property(e => e.Rollos)
                .HasColumnType("decimal(26, 0)")
                .HasColumnName("ROLLOS");
            entity.Property(e => e.RollosConsumidos)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ROLLOS_CONSUMIDOS");
            entity.Property(e => e.RollosTab).HasColumnName("ROLLOS_TAB");
            entity.Property(e => e.Total)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("TOTAL");
            entity.Property(e => e.Year).HasColumnName("YEAR");
        });

        modelBuilder.Entity<CalculoRollosActiva2>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CALCULO_ROLLOS_ACTIVA_2");

            entity.Property(e => e.ApprovedcCount).HasColumnName("APPROVEDC_COUNT");
            entity.Property(e => e.Bloqueo).HasColumnName("BLOQUEO");
            entity.Property(e => e.CreaOdt)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("CREA_ODT");
            entity.Property(e => e.Declinedcount).HasColumnName("DECLINEDCOUNT");
            entity.Property(e => e.EstatusUltServicio)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("ESTATUS_ULT_SERVICIO");
            entity.Property(e => e.FechaUltServ)
                .HasColumnType("date")
                .HasColumnName("FECHA_ULT_SERV");
            entity.Property(e => e.IdTransacciones).HasColumnName("ID_TRANSACCIONES");
            entity.Property(e => e.Mensaje)
                .IsRequired()
                .HasMaxLength(200)
                .IsFixedLength()
                .HasColumnName("MENSAJE");
            entity.Property(e => e.Month).HasColumnName("MONTH");
            entity.Property(e => e.NegocioExiste).HasColumnName("NEGOCIO_EXISTE");
            entity.Property(e => e.NoFiliacion).HasColumnName("NO_FILIACION");
            entity.Property(e => e.Proveedor)
                .IsRequired()
                .HasMaxLength(30)
                .IsFixedLength()
                .HasColumnName("PROVEEDOR");
            entity.Property(e => e.Rollos)
                .HasColumnType("decimal(26, 0)")
                .HasColumnName("ROLLOS");
            entity.Property(e => e.RollosConsumidos)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ROLLOS_CONSUMIDOS");
            entity.Property(e => e.RollosMeses)
                .HasColumnType("decimal(38, 11)")
                .HasColumnName("ROLLOS_MESES");
            entity.Property(e => e.RollosTab).HasColumnName("ROLLOS_TAB");
            entity.Property(e => e.Total)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("TOTAL");
            entity.Property(e => e.Year).HasColumnName("YEAR");
        });

        modelBuilder.Entity<CalculoRollosActivaBk>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CALCULO_ROLLOS_ACTIVA_BK");

            entity.Property(e => e.ApprovedcCount).HasColumnName("APPROVEDC_COUNT");
            entity.Property(e => e.Bloqueo).HasColumnName("BLOQUEO");
            entity.Property(e => e.Declinedcount).HasColumnName("DECLINEDCOUNT");
            entity.Property(e => e.EstatusUltServicio)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ESTATUS_ULT_SERVICIO");
            entity.Property(e => e.IdTransacciones)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_TRANSACCIONES");
            entity.Property(e => e.Mensaje)
                .IsRequired()
                .HasMaxLength(200)
                .IsFixedLength()
                .HasColumnName("MENSAJE");
            entity.Property(e => e.MesesDeRollos).HasColumnName("MESES_DE_ROLLOS");
            entity.Property(e => e.Month).HasColumnName("MONTH");
            entity.Property(e => e.NegocioExiste).HasColumnName("NEGOCIO_EXISTE");
            entity.Property(e => e.NoFiliacion).HasColumnName("NO_FILIACION");
            entity.Property(e => e.Rollos)
                .HasColumnType("decimal(26, 0)")
                .HasColumnName("ROLLOS");
            entity.Property(e => e.RollosConsumidos)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ROLLOS_CONSUMIDOS");
            entity.Property(e => e.RollosTab).HasColumnName("ROLLOS_TAB");
            entity.Property(e => e.Total)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("TOTAL");
            entity.Property(e => e.Year).HasColumnName("YEAR");
        });

        modelBuilder.Entity<CambioIdSegmentoBanamexTnm>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("CAMBIO_ID_SEGMENTO_BANAMEX_TNM");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdSegmento).HasColumnName("ID_SEGMENTO");
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
        });

        modelBuilder.Entity<CambioMasivoBdUnidade>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.IdResponsable).HasColumnName("ID_RESPONSABLE");
            entity.Property(e => e.IdStatusUnidad).HasColumnName("ID_STATUS_UNIDAD");
            entity.Property(e => e.IdTipoResponsable).HasColumnName("ID_TIPO_RESPONSABLE");
            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");
        });

        modelBuilder.Entity<CambioMasivoBdUnidades2>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("CambioMasivoBdUnidades2");

            entity.Property(e => e.IdResponsable).HasColumnName("ID_RESPONSABLE");
            entity.Property(e => e.IdStatusUnidad).HasColumnName("ID_STATUS_UNIDAD");
            entity.Property(e => e.IdTipoResponsable).HasColumnName("ID_TIPO_RESPONSABLE");
            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");
        });

        modelBuilder.Entity<CantIsRegion>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CANT_IS_REGION");

            entity.Property(e => e.Cantidad).HasColumnName("CANTIDAD");
            entity.Property(e => e.Month).HasColumnName("MONTH");
            entity.Property(e => e.Region)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("REGION");
            entity.Property(e => e.Year).HasColumnName("YEAR");
        });

        modelBuilder.Entity<CantServProdRegion>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("CANT_SERV_PROD_REGION");

            entity.Property(e => e.CantServAtm).HasColumnName("CANT_SERV_ATM");
            entity.Property(e => e.CantServModem).HasColumnName("CANT_SERV_MODEM");
            entity.Property(e => e.CantServOtros).HasColumnName("CANT_SERV_OTROS");
            entity.Property(e => e.CantServSeguridad).HasColumnName("CANT_SERV_SEGURIDAD");
            entity.Property(e => e.CantServTnm).HasColumnName("CANT_SERV_TNM");
            entity.Property(e => e.CantServTpv).HasColumnName("CANT_SERV_TPV");
            entity.Property(e => e.CantServTresM).HasColumnName("CANT_SERV_TRES_M");
            entity.Property(e => e.DescRegion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_REGION");
        });

        modelBuilder.Entity<CantStaffRegion>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CANT_STAFF_REGION");

            entity.Property(e => e.Cantidad).HasColumnName("CANTIDAD");
            entity.Property(e => e.Month).HasColumnName("MONTH");
            entity.Property(e => e.Region)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("REGION");
            entity.Property(e => e.Year).HasColumnName("YEAR");
        });

        modelBuilder.Entity<CauthorizedServicesIntegration>(entity =>
        {
            entity.HasKey(e => e.AuthorizedServiceIntegrationId).HasName("PK__CAuthori__C44C9227F0C8EC8F");

            entity.ToTable("CAuthorizedServicesIntegration");

            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CdosysmailFailure>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("cdosysmail_failures");

            entity.Property(e => e.Body)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.CommentAboutFailure)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Comment about Failure");
            entity.Property(e => e.DateOfFailure)
                .HasColumnType("datetime")
                .HasColumnName("Date of Failure");
            entity.Property(e => e.DescriptionOfFailure)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("Description of Failure");
            entity.Property(e => e.From)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.IMsg).HasColumnName("iMsg");
            entity.Property(e => e.OutputFromFailure)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("Output from Failure");
            entity.Property(e => e.SourceOfFailure)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("Source of Failure");
            entity.Property(e => e.Subject)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.To)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CevidenceType>(entity =>
        {
            entity.HasKey(e => e.EvidenceTypeId).HasName("PK__CEvidenc__23E94FDE101E9F26");

            entity.ToTable("CEvidenceTypes");

            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.EvidenceDesc)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CgetnetSupportEmail>(entity =>
        {
            entity.HasKey(e => e.GetnetSupportEmailsId).HasName("PK__CGetnetS__C5E7C3991D19C9BF");

            entity.ToTable("CGetnetSupportEmails");
        });

        modelBuilder.Entity<CierresElavon>(entity =>
        {
            entity.HasKey(e => e.IdCierresElavon).HasName("PK__CIERRES___032023637A048D26");

            entity.ToTable("CIERRES_ELAVON");

            entity.Property(e => e.IdCierresElavon).HasColumnName("id_cierres_elavon");
            entity.Property(e => e.Error)
                .IsUnicode(false)
                .HasColumnName("ERROR");
            entity.Property(e => e.FechaCierre)
                .IsUnicode(false)
                .HasColumnName("FECHA_CIERRE");
            entity.Property(e => e.NombreUsuario)
                .IsUnicode(false)
                .HasColumnName("NOMBRE_USUARIO");
            entity.Property(e => e.Odtexterna)
                .IsUnicode(false)
                .HasColumnName("ODTEXTERNA");
            entity.Property(e => e.StatusMov)
                .IsUnicode(false)
                .HasColumnName("STATUS_MOV");
            entity.Property(e => e.TipoUsuario)
                .IsUnicode(false)
                .HasColumnName("TIPO_USUARIO");
        });

        modelBuilder.Entity<CinterfaceUser>(entity =>
        {
            entity.HasKey(e => e.InterfaceUserId).HasName("PK__CInterfa__178076762C3B2DEB");

            entity.ToTable("CInterfaceUsers");

            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.LockoutEnd).HasColumnType("datetime");
            entity.Property(e => e.ModifyDate).HasColumnType("datetime");
            entity.Property(e => e.PasswordHash)
                .HasMaxLength(256)
                .IsUnicode(false);
            entity.Property(e => e.Salt)
                .HasMaxLength(256)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.UserName)
                .HasMaxLength(256)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ClienteProd>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("CLIENTE_PROD");

            entity.Property(e => e.DescCliente)
                .HasMaxLength(15)
                .IsFixedLength()
                .HasColumnName("DESC_CLIENTE");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.Producto)
                .HasMaxLength(15)
                .IsFixedLength()
                .HasColumnName("PRODUCTO");
        });

        modelBuilder.Entity<CmailjetTemplateCatalog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CMailjet__3214EC07BE35110A");

            entity.ToTable("CMailjetTemplateCatalog");

            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(300)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ConsultaDeployment>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CONSULTA_DEPLOYMENT");

            entity.Property(e => e.AgregarDiasAtencion).HasColumnName("AGREGAR_DIAS_ATENCION");
            entity.Property(e => e.Atiende)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ATIENDE");
            entity.Property(e => e.AutorizadorRechazo)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("AUTORIZADOR_RECHAZO");
            entity.Property(e => e.Bitacora)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("BITACORA");
            entity.Property(e => e.CadenaCierre)
                .IsUnicode(false)
                .HasColumnName("CADENA_CIERRE");
            entity.Property(e => e.CadenaCierreEscrita)
                .HasMaxLength(3000)
                .IsUnicode(false)
                .HasColumnName("CADENA_CIERRE_ESCRITA");
            entity.Property(e => e.Caja)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("CAJA");
            entity.Property(e => e.CausaCancelacion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CAUSA_CANCELACION");
            entity.Property(e => e.CausaRechazo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CAUSA_RECHAZO");
            entity.Property(e => e.ClaveRechazo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CLAVE_RECHAZO");
            entity.Property(e => e.CodigoIntervencion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CODIGO_INTERVENCION");
            entity.Property(e => e.Colonia)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("COLONIA");
            entity.Property(e => e.Concepto)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CONCEPTO");
            entity.Property(e => e.CorreoEjecutivo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CORREO_EJECUTIVO");
            entity.Property(e => e.Cp)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("CP");
            entity.Property(e => e.DescCorta)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_CORTA");
            entity.Property(e => e.DescEquipo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_EQUIPO");
            entity.Property(e => e.DescNegocio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_NEGOCIO");
            entity.Property(e => e.DescripcionTrabajo)
                .HasMaxLength(3000)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_TRABAJO");
            entity.Property(e => e.DiasDespuesCierre).HasColumnName("DIAS_DESPUES_CIERRE");
            entity.Property(e => e.DigitoVerificador)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("DIGITO_VERIFICADOR");
            entity.Property(e => e.Direccion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");
            entity.Property(e => e.DireccionAlternaComercio)
                .IsUnicode(false)
                .HasColumnName("DIRECCION_ALTERNA_COMERCIO");
            entity.Property(e => e.DueBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("due_by");
            entity.Property(e => e.Duracion).HasColumnName("DURACION");
            entity.Property(e => e.Equipo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("EQUIPO");
            entity.Property(e => e.Estado)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ESTADO");
            entity.Property(e => e.FallaEncontrada)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("FALLA_ENCONTRADA");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.FecAltaHorasAtencion)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA_HORAS_ATENCION");
            entity.Property(e => e.FecAltaReglaStatusAr)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA_REGLA_STATUS_AR");
            entity.Property(e => e.FecAtencion)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ATENCION");
            entity.Property(e => e.FecAtencionOriginal)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ATENCION_ORIGINAL");
            entity.Property(e => e.FecCarga)
                .HasColumnType("datetime")
                .HasColumnName("FEC_CARGA");
            entity.Property(e => e.FecCierre)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_CIERRE");
            entity.Property(e => e.FecConvenio)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_CONVENIO");
            entity.Property(e => e.FecFinIngeniero)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_FIN_INGENIERO");
            entity.Property(e => e.FecGarantia)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_GARANTIA");
            entity.Property(e => e.FecIniIngeniero)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_INI_INGENIERO");
            entity.Property(e => e.FecInicio)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_INICIO");
            entity.Property(e => e.FecIntento1)
                .HasColumnType("datetime")
                .HasColumnName("FEC_INTENTO_1");
            entity.Property(e => e.FecIntento2)
                .HasColumnType("datetime")
                .HasColumnName("FEC_INTENTO_2");
            entity.Property(e => e.FecIntento3)
                .HasColumnType("datetime")
                .HasColumnName("FEC_INTENTO_3");
            entity.Property(e => e.FecIntento4)
                .HasColumnType("datetime")
                .HasColumnName("FEC_INTENTO_4");
            entity.Property(e => e.FecLlegada)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_LLEGADA");
            entity.Property(e => e.FecLlegadaTerceros)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_LLEGADA_TERCEROS");
            entity.Property(e => e.FecStatusAr)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_STATUS_AR");
            entity.Property(e => e.FolioServicio)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FOLIO_SERVICIO");
            entity.Property(e => e.FolioTas)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("FOLIO_TAS");
            entity.Property(e => e.FolioTelecarga).HasColumnName("FOLIO_TELECARGA");
            entity.Property(e => e.FolioTir)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FOLIO_TIR");
            entity.Property(e => e.FolioValidacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FOLIO_VALIDACION");
            entity.Property(e => e.HoraAtencionFin).HasColumnName("HORA_ATENCION_FIN");
            entity.Property(e => e.HoraAtencionIni).HasColumnName("HORA_ATENCION_INI");
            entity.Property(e => e.HorasAtencion).HasColumnName("HORAS_ATENCION");
            entity.Property(e => e.HorasAtencionWincor)
                .HasColumnType("numeric(18, 0)")
                .HasColumnName("HORAS_ATENCION_WINCOR");
            entity.Property(e => e.HorasGarantia).HasColumnName("HORAS_GARANTIA");
            entity.Property(e => e.HorasGarantiaWincor)
                .HasColumnType("numeric(18, 0)")
                .HasColumnName("HORAS_GARANTIA_WINCOR");
            entity.Property(e => e.IdAplicativo).HasColumnName("ID_APLICATIVO");
            entity.Property(e => e.IdAr)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_AR");
            entity.Property(e => e.IdAttach1).HasColumnName("ID_ATTACH1");
            entity.Property(e => e.IdAttach2).HasColumnName("ID_ATTACH2");
            entity.Property(e => e.IdCalificaContacto).HasColumnName("ID_CALIFICA_CONTACTO");
            entity.Property(e => e.IdCalificaIntento1).HasColumnName("ID_CALIFICA_INTENTO_1");
            entity.Property(e => e.IdCalificaIntento2).HasColumnName("ID_CALIFICA_INTENTO_2");
            entity.Property(e => e.IdCalificaIntento3).HasColumnName("ID_CALIFICA_INTENTO_3");
            entity.Property(e => e.IdCalificaIntento4).HasColumnName("ID_CALIFICA_INTENTO_4");
            entity.Property(e => e.IdCarga).HasColumnName("ID_CARGA");
            entity.Property(e => e.IdCausa).HasColumnName("ID_CAUSA");
            entity.Property(e => e.IdCausaRechazo).HasColumnName("ID_CAUSA_RECHAZO");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdConcepto).HasColumnName("ID_CONCEPTO");
            entity.Property(e => e.IdConectividad).HasColumnName("ID_CONECTIVIDAD");
            entity.Property(e => e.IdDescripcionTrabajo).HasColumnName("ID_DESCRIPCION_TRABAJO");
            entity.Property(e => e.IdDispatcher).HasColumnName("ID_DISPATCHER");
            entity.Property(e => e.IdEquipoCliente).HasColumnName("ID_EQUIPO_CLIENTE");
            entity.Property(e => e.IdEspecifTipoFalla).HasColumnName("ID_ESPECIF_TIPO_FALLA");
            entity.Property(e => e.IdEspecificaCausaRechazo).HasColumnName("ID_ESPECIFICA_CAUSA_RECHAZO");
            entity.Property(e => e.IdEstado).HasColumnName("ID_ESTADO");
            entity.Property(e => e.IdFalla).HasColumnName("ID_FALLA");
            entity.Property(e => e.IdModeloFalla).HasColumnName("ID_MODELO_FALLA");
            entity.Property(e => e.IdModeloReq).HasColumnName("ID_MODELO_REQ");
            entity.Property(e => e.IdMoneda).HasColumnName("ID_MONEDA");
            entity.Property(e => e.IdNegocio).HasColumnName("ID_NEGOCIO");
            entity.Property(e => e.IdPlaza).HasColumnName("ID_PLAZA");
            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");
            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");
            entity.Property(e => e.IdProyecto).HasColumnName("ID_PROYECTO");
            entity.Property(e => e.IdRegion).HasColumnName("ID_REGION");
            entity.Property(e => e.IdReglaStatusAr).HasColumnName("ID_REGLA_STATUS_AR");
            entity.Property(e => e.IdReporteCierre).HasColumnName("ID_REPORTE_CIERRE");
            entity.Property(e => e.IdResponsableCancelacionProgramado).HasColumnName("ID_RESPONSABLE_CANCELACION_PROGRAMADO");
            entity.Property(e => e.IdSegmento).HasColumnName("ID_SEGMENTO");
            entity.Property(e => e.IdServicio).HasColumnName("ID_SERVICIO");
            entity.Property(e => e.IdSolucion).HasColumnName("ID_SOLUCION");
            entity.Property(e => e.IdStatusAr).HasColumnName("ID_STATUS_AR");
            entity.Property(e => e.IdStatusReasonCodes).HasColumnName("ID_STATUS_REASON_CODES");
            entity.Property(e => e.IdStatusValidacionPrefacturacion).HasColumnName("ID_STATUS_VALIDACION_PREFACTURACION");
            entity.Property(e => e.IdTecnico).HasColumnName("ID_TECNICO");
            entity.Property(e => e.IdTipoCobro).HasColumnName("ID_TIPO_COBRO");
            entity.Property(e => e.IdTipoEquipo).HasColumnName("ID_TIPO_EQUIPO");
            entity.Property(e => e.IdTipoFallaEncontrada).HasColumnName("ID_TIPO_FALLA_ENCONTRADA");
            entity.Property(e => e.IdTipoPlaza).HasColumnName("ID_TIPO_PLAZA");
            entity.Property(e => e.IdTipoPrecio).HasColumnName("ID_TIPO_PRECIO");
            entity.Property(e => e.IdTipoServicio).HasColumnName("ID_TIPO_SERVICIO");
            entity.Property(e => e.IdUnidadAtendida).HasColumnName("ID_UNIDAD_ATENDIDA");
            entity.Property(e => e.IdUsuarioCierre).HasColumnName("ID_USUARIO_CIERRE");
            entity.Property(e => e.IdZona).HasColumnName("ID_ZONA");
            entity.Property(e => e.Insumos).HasColumnName("INSUMOS");
            entity.Property(e => e.IntensidadSenial)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("INTENSIDAD_SENIAL");
            entity.Property(e => e.IntentoContacto).HasColumnName("INTENTO_CONTACTO");
            entity.Property(e => e.IsActualizacion).HasColumnName("IS_ACTUALIZACION");
            entity.Property(e => e.IsBoletin).HasColumnName("IS_BOLETIN");
            entity.Property(e => e.IsCobrable).HasColumnName("IS_COBRABLE");
            entity.Property(e => e.IsDuplicada).HasColumnName("IS_DUPLICADA");
            entity.Property(e => e.IsExito).HasColumnName("IS_EXITO");
            entity.Property(e => e.IsFollowDispatch).HasColumnName("IS_FOLLOW_DISPATCH");
            entity.Property(e => e.IsGarantia).HasColumnName("IS_GARANTIA");
            entity.Property(e => e.IsIngresoManual).HasColumnName("IS_INGRESO_MANUAL");
            entity.Property(e => e.IsInstalacion).HasColumnName("IS_INSTALACION");
            entity.Property(e => e.IsInterfazBancomer).HasColumnName("IS_INTERFAZ_BANCOMER");
            entity.Property(e => e.IsLocal).HasColumnName("IS_LOCAL");
            entity.Property(e => e.IsPdf).HasColumnName("IS_PDF");
            entity.Property(e => e.IsProgramado).HasColumnName("IS_PROGRAMADO");
            entity.Property(e => e.IsRetipificado).HasColumnName("IS_RETIPIFICADO");
            entity.Property(e => e.IsRetiro).HasColumnName("IS_RETIRO");
            entity.Property(e => e.IsSimRemplazada).HasColumnName("IS_SIM_REMPLAZADA");
            entity.Property(e => e.IsSoporteCliente).HasColumnName("IS_SOPORTE_CLIENTE");
            entity.Property(e => e.IsSustitucion).HasColumnName("IS_SUSTITUCION");
            entity.Property(e => e.IsTecnicoForaneo).HasColumnName("IS_TECNICO_FORANEO");
            entity.Property(e => e.MinsDowntime).HasColumnName("MINS_DOWNTIME");
            entity.Property(e => e.MotivoCobro)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("MOTIVO_COBRO");
            entity.Property(e => e.MotivoRetipificado)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("MOTIVO_RETIPIFICADO");
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.NoAr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AR");
            entity.Property(e => e.NoDiasLiberacion).HasColumnName("NO_DIAS_LIBERACION");
            entity.Property(e => e.NoEquipo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_EQUIPO");
            entity.Property(e => e.NoInventario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_INVENTARIO");
            entity.Property(e => e.NoInventarioFalla)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_INVENTARIO_FALLA");
            entity.Property(e => e.NoReincidencias).HasColumnName("NO_REINCIDENCIAS");
            entity.Property(e => e.NoSerie)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");
            entity.Property(e => e.NoSerieFalla)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE_FALLA");
            entity.Property(e => e.NoSim)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SIM");
            entity.Property(e => e.NotViaticos).HasColumnName("NOT_VIATICOS");
            entity.Property(e => e.NotasRemedy)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NOTAS_REMEDY");
            entity.Property(e => e.OnSla).HasColumnName("ON_SLA");
            entity.Property(e => e.Origen)
                .HasMaxLength(152)
                .IsUnicode(false)
                .HasColumnName("ORIGEN");
            entity.Property(e => e.OtorganteSoporteCliente)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("OTORGANTE_SOPORTE_CLIENTE");
            entity.Property(e => e.OtorganteTas)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("OTORGANTE_TAS");
            entity.Property(e => e.OtorganteVobo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("OTORGANTE_VOBO");
            entity.Property(e => e.OtorganteVoboCliente)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("OTORGANTE_VOBO_CLIENTE");
            entity.Property(e => e.OtorganteVoboTerceros)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("OTORGANTE_VOBO_TERCEROS");
            entity.Property(e => e.PersonaAtenderaComercio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("PERSONA_ATENDERA_COMERCIO");
            entity.Property(e => e.Poblacion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("POBLACION");
            entity.Property(e => e.Precio)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("PRECIO");
            entity.Property(e => e.PrecioExito)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("PRECIO_EXITO");
            entity.Property(e => e.Proveedor)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("PROVEEDOR");
            entity.Property(e => e.ProveedorAtenderaComercio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("PROVEEDOR_ATENDERA_COMERCIO");
            entity.Property(e => e.RequiereSerie).HasColumnName("REQUIERE_SERIE");
            entity.Property(e => e.Responsable)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RESPONSABLE");
            entity.Property(e => e.Segmento).HasColumnName("SEGMENTO");
            entity.Property(e => e.Sintoma)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("SINTOMA");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.Telefono)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");
            entity.Property(e => e.TelefonoComercio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("TELEFONO_COMERCIO");
            entity.Property(e => e.TerminalAmex).HasColumnName("TERMINAL_AMEX");
            entity.Property(e => e.TipoFalla).HasColumnName("TIPO_FALLA");
            entity.Property(e => e.TipoServicio).HasColumnName("TIPO_SERVICIO");
            entity.Property(e => e.Traslado).HasColumnName("TRASLADO");
            entity.Property(e => e.VoltajeNeutro)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("VOLTAJE_NEUTRO");
            entity.Property(e => e.VoltajeTierra)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("VOLTAJE_TIERRA");
            entity.Property(e => e.VoltajeTierraNeutro)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("VOLTAJE_TIERRA_NEUTRO");
        });

        modelBuilder.Entity<ConsultaOdt>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CONSULTA_ODTS");

            entity.Property(e => e.Afiliacion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("AFILIACION");
            entity.Property(e => e.AfiliacionTerminalAmex)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AFILIACION_TERMINAL_AMEX");
            entity.Property(e => e.AgregarDias).HasColumnName("AGREGAR_DIAS");
            entity.Property(e => e.Bitacora)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("BITACORA");
            entity.Property(e => e.CadenaCierre)
                .IsUnicode(false)
                .HasColumnName("CADENA_CIERRE");
            entity.Property(e => e.Caja)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("CAJA");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");
            entity.Property(e => e.DescripcionTrabajo)
                .HasMaxLength(3000)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_TRABAJO");
            entity.Property(e => e.Direccion)
                .HasMaxLength(1077)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");
            entity.Property(e => e.DireccionAlternaComercio)
                .IsUnicode(false)
                .HasColumnName("DIRECCION_ALTERNA_COMERCIO");
            entity.Property(e => e.Domingo).HasColumnName("DOMINGO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.FecAtencion)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ATENCION");
            entity.Property(e => e.FecCierre)
                .HasColumnType("datetime")
                .HasColumnName("FEC_CIERRE");
            entity.Property(e => e.FecGarantia)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_GARANTIA");
            entity.Property(e => e.FecInicio)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_INICIO");
            entity.Property(e => e.FolioTelecarga)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FOLIO_TELECARGA");
            entity.Property(e => e.HoraAtencionFin).HasColumnName("HORA_ATENCION_FIN");
            entity.Property(e => e.HoraAtencionIni).HasColumnName("HORA_ATENCION_INI");
            entity.Property(e => e.IdAr)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_AR");
            entity.Property(e => e.IdTerminalAmex)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ID_TERMINAL_AMEX");
            entity.Property(e => e.IsProgramado).HasColumnName("IS_PROGRAMADO");
            entity.Property(e => e.Jueves).HasColumnName("JUEVES");
            entity.Property(e => e.Lunes).HasColumnName("LUNES");
            entity.Property(e => e.Martes).HasColumnName("MARTES");
            entity.Property(e => e.Miercoles).HasColumnName("MIERCOLES");
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.NoAr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AR");
            entity.Property(e => e.NoSerie)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");
            entity.Property(e => e.Odt)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ODT");
            entity.Property(e => e.PersonaAtenderaComercio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("PERSONA_ATENDERA_COMERCIO");
            entity.Property(e => e.Producto)
                .IsUnicode(false)
                .HasColumnName("PRODUCTO");
            entity.Property(e => e.Proveedor)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("PROVEEDOR");
            entity.Property(e => e.Responsable)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RESPONSABLE");
            entity.Property(e => e.RollosSolicitados).HasColumnName("ROLLOS_SOLICITADOS");
            entity.Property(e => e.Sabado).HasColumnName("SABADO");
            entity.Property(e => e.Segmento)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("segmento");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.SubTipoDeServicio)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("SUB_TIPO_DE_SERVICIO");
            entity.Property(e => e.Tecnico)
                .HasMaxLength(152)
                .IsUnicode(false)
                .HasColumnName("TECNICO");
            entity.Property(e => e.Telefono)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");
            entity.Property(e => e.TelefonoComercio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("TELEFONO_COMERCIO");
            entity.Property(e => e.TerminalAmex).HasColumnName("TERMINAL_AMEX");
            entity.Property(e => e.TipoCarga)
                .IsRequired()
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("TIPO_CARGA");
            entity.Property(e => e.TipoDeServicio)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("TIPO_DE_SERVICIO");
            entity.Property(e => e.TipoRechazo)
                .IsUnicode(false)
                .HasColumnName("TIPO_RECHAZO");
            entity.Property(e => e.UsuarioCierre)
                .IsRequired()
                .HasMaxLength(152)
                .IsUnicode(false)
                .HasColumnName("USUARIO_CIERRE");
            entity.Property(e => e.Viernes).HasColumnName("VIERNES");
            entity.Property(e => e.Zona)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZONA");
        });

        modelBuilder.Entity<CostoIngeniero>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("COSTO_INGENIERO");

            entity.Property(e => e.Atm).HasColumnName("ATM");
            entity.Property(e => e.Curp)
                .IsRequired()
                .HasMaxLength(40)
                .IsFixedLength()
                .HasColumnName("CURP");
            entity.Property(e => e.Envios).HasColumnName("ENVIOS");
            entity.Property(e => e.Fijo).HasColumnName("FIJO");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.IngServ3m).HasColumnName("ING_SERV_3M");
            entity.Property(e => e.IngServAtm).HasColumnName("ING_SERV_ATM");
            entity.Property(e => e.IngServModem).HasColumnName("ING_SERV_MODEM");
            entity.Property(e => e.IngServOtros).HasColumnName("ING_SERV_OTROS");
            entity.Property(e => e.IngServSeguridad).HasColumnName("ING_SERV_SEGURIDAD");
            entity.Property(e => e.IngServTnm).HasColumnName("ING_SERV_TNM");
            entity.Property(e => e.IngServTpv).HasColumnName("ING_SERV_TPV");
            entity.Property(e => e.Laboratorio).HasColumnName("LABORATORIO");
            entity.Property(e => e.ManttoVehiculo).HasColumnName("MANTTO_VEHICULO");
            entity.Property(e => e.Modem).HasColumnName("MODEM");
            entity.Property(e => e.Movil)
                .HasColumnType("numeric(5, 2)")
                .HasColumnName("MOVIL");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(60)
                .IsFixedLength()
                .HasColumnName("NOMBRE");
            entity.Property(e => e.Otros).HasColumnName("OTROS");
            entity.Property(e => e.Refacciones3m).HasColumnName("REFACCIONES_3M");
            entity.Property(e => e.RefaccionesAtm).HasColumnName("REFACCIONES_ATM");
            entity.Property(e => e.RefaccionesModems).HasColumnName("REFACCIONES_MODEMS");
            entity.Property(e => e.RefaccionesOtros).HasColumnName("REFACCIONES_OTROS");
            entity.Property(e => e.RefaccionesSeguridad).HasColumnName("REFACCIONES_SEGURIDAD");
            entity.Property(e => e.RefaccionesTpv).HasColumnName("REFACCIONES_TPV");
            entity.Property(e => e.RefaccionesTurnos).HasColumnName("REFACCIONES_TURNOS");
            entity.Property(e => e.Region)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("REGION");
            entity.Property(e => e.RentaVehiculo).HasColumnName("RENTA_VEHICULO");
            entity.Property(e => e.Seguridad).HasColumnName("SEGURIDAD");
            entity.Property(e => e.Staff).HasColumnName("STAFF");
            entity.Property(e => e.TotServicios).HasColumnName("TOT_SERVICIOS");
            entity.Property(e => e.Total).HasColumnName("TOTAL");
            entity.Property(e => e.Tpv).HasColumnName("TPV");
            entity.Property(e => e.Transporte).HasColumnName("TRANSPORTE");
            entity.Property(e => e.TresM).HasColumnName("TRES_M");
            entity.Property(e => e.Turnos).HasColumnName("TURNOS");
            entity.Property(e => e.Usadas).HasColumnName("USADAS");
            entity.Property(e => e.Usadas3m).HasColumnName("USADAS_3M");
            entity.Property(e => e.UsadasAtm).HasColumnName("USADAS_ATM");
            entity.Property(e => e.UsadasModems).HasColumnName("USADAS_MODEMS");
            entity.Property(e => e.UsadasOtros).HasColumnName("USADAS_OTROS");
            entity.Property(e => e.UsadasSeguridad).HasColumnName("USADAS_SEGURIDAD");
            entity.Property(e => e.UsadasTpv).HasColumnName("USADAS_TPV");
            entity.Property(e => e.UsadasTurnos).HasColumnName("USADAS_TURNOS");
            entity.Property(e => e.V3m)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("V_3M");
            entity.Property(e => e.VAtm)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("V_ATM");
            entity.Property(e => e.VAvion).HasColumnName("V_AVION");
            entity.Property(e => e.VGas).HasColumnName("V_GAS");
            entity.Property(e => e.VModems)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("V_MODEMS");
            entity.Property(e => e.VOtros)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("V_OTROS");
            entity.Property(e => e.VSeguridad)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("V_SEGURIDAD");
            entity.Property(e => e.VSinProducto)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("V_SIN_PRODUCTO");
            entity.Property(e => e.VTotal)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("V_TOTAL");
            entity.Property(e => e.VTpv)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("V_TPV");
            entity.Property(e => e.VTurnos)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("V_TURNOS");
            entity.Property(e => e.Variable).HasColumnName("VARIABLE");
            entity.Property(e => e.Vehiculo)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("VEHICULO");
            entity.Property(e => e.Zona)
                .HasMaxLength(60)
                .IsFixedLength()
                .HasColumnName("ZONA");
        });

        modelBuilder.Entity<CostoIngeniero201501>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("COSTO_INGENIERO_2015_01");

            entity.Property(e => e.Atm).HasColumnName("ATM");
            entity.Property(e => e.Corporativo).HasColumnName("CORPORATIVO");
            entity.Property(e => e.Curp)
                .IsRequired()
                .HasMaxLength(40)
                .IsFixedLength()
                .HasColumnName("CURP");
            entity.Property(e => e.Envios).HasColumnName("ENVIOS");
            entity.Property(e => e.Fijo).HasColumnName("FIJO");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.IngServ3m).HasColumnName("ING_SERV_3M");
            entity.Property(e => e.IngServAtm).HasColumnName("ING_SERV_ATM");
            entity.Property(e => e.IngServModem).HasColumnName("ING_SERV_MODEM");
            entity.Property(e => e.IngServOtros).HasColumnName("ING_SERV_OTROS");
            entity.Property(e => e.IngServSeguridad).HasColumnName("ING_SERV_SEGURIDAD");
            entity.Property(e => e.IngServTnm).HasColumnName("ING_SERV_TNM");
            entity.Property(e => e.IngServTpv).HasColumnName("ING_SERV_TPV");
            entity.Property(e => e.Laboratorio).HasColumnName("LABORATORIO");
            entity.Property(e => e.ManttoVehiculo).HasColumnName("MANTTO_VEHICULO");
            entity.Property(e => e.Modem).HasColumnName("MODEM");
            entity.Property(e => e.Movil)
                .HasColumnType("numeric(5, 2)")
                .HasColumnName("MOVIL");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(60)
                .IsFixedLength()
                .HasColumnName("NOMBRE");
            entity.Property(e => e.Otros).HasColumnName("OTROS");
            entity.Property(e => e.Refacciones3m).HasColumnName("REFACCIONES_3M");
            entity.Property(e => e.RefaccionesAtm).HasColumnName("REFACCIONES_ATM");
            entity.Property(e => e.RefaccionesModems).HasColumnName("REFACCIONES_MODEMS");
            entity.Property(e => e.RefaccionesOtros).HasColumnName("REFACCIONES_OTROS");
            entity.Property(e => e.RefaccionesSeguridad).HasColumnName("REFACCIONES_SEGURIDAD");
            entity.Property(e => e.RefaccionesTpv).HasColumnName("REFACCIONES_TPV");
            entity.Property(e => e.RefaccionesTurnos).HasColumnName("REFACCIONES_TURNOS");
            entity.Property(e => e.Region)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("REGION");
            entity.Property(e => e.RentaVehiculo).HasColumnName("RENTA_VEHICULO");
            entity.Property(e => e.Seguridad).HasColumnName("SEGURIDAD");
            entity.Property(e => e.Staff).HasColumnName("STAFF");
            entity.Property(e => e.TotServicios).HasColumnName("TOT_SERVICIOS");
            entity.Property(e => e.Total).HasColumnName("TOTAL");
            entity.Property(e => e.Tpv).HasColumnName("TPV");
            entity.Property(e => e.Transporte).HasColumnName("TRANSPORTE");
            entity.Property(e => e.TresM).HasColumnName("TRES_M");
            entity.Property(e => e.Turnos).HasColumnName("TURNOS");
            entity.Property(e => e.Usadas).HasColumnName("USADAS");
            entity.Property(e => e.Usadas3m).HasColumnName("USADAS_3M");
            entity.Property(e => e.UsadasAtm).HasColumnName("USADAS_ATM");
            entity.Property(e => e.UsadasModems).HasColumnName("USADAS_MODEMS");
            entity.Property(e => e.UsadasOtros).HasColumnName("USADAS_OTROS");
            entity.Property(e => e.UsadasSeguridad).HasColumnName("USADAS_SEGURIDAD");
            entity.Property(e => e.UsadasTpv).HasColumnName("USADAS_TPV");
            entity.Property(e => e.UsadasTurnos).HasColumnName("USADAS_TURNOS");
            entity.Property(e => e.V3m)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("V_3M");
            entity.Property(e => e.VAtm)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("V_ATM");
            entity.Property(e => e.VAvion).HasColumnName("V_AVION");
            entity.Property(e => e.VGas).HasColumnName("V_GAS");
            entity.Property(e => e.VModems)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("V_MODEMS");
            entity.Property(e => e.VOtros)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("V_OTROS");
            entity.Property(e => e.VSeguridad)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("V_SEGURIDAD");
            entity.Property(e => e.VSinProducto)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("V_SIN_PRODUCTO");
            entity.Property(e => e.VTotal)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("V_TOTAL");
            entity.Property(e => e.VTpv)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("V_TPV");
            entity.Property(e => e.VTurnos)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("V_TURNOS");
            entity.Property(e => e.Variable).HasColumnName("VARIABLE");
            entity.Property(e => e.Vehiculo)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("VEHICULO");
            entity.Property(e => e.Zona)
                .HasMaxLength(60)
                .IsFixedLength()
                .HasColumnName("ZONA");
        });

        modelBuilder.Entity<CostoIs201501>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("COSTO_IS_2015_01");

            entity.Property(e => e.Atm).HasColumnName("ATM");
            entity.Property(e => e.Corporativo).HasColumnName("CORPORATIVO");
            entity.Property(e => e.Curp)
                .HasMaxLength(18)
                .IsUnicode(false)
                .HasColumnName("CURP");
            entity.Property(e => e.DescRegion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_REGION");
            entity.Property(e => e.DescZona)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_ZONA");
            entity.Property(e => e.Envios).HasColumnName("ENVIOS");
            entity.Property(e => e.Fijo).HasColumnName("FIJO");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.IngServ3m).HasColumnName("ING_SERV_3M");
            entity.Property(e => e.IngServAtm).HasColumnName("ING_SERV_ATM");
            entity.Property(e => e.IngServModem).HasColumnName("ING_SERV_MODEM");
            entity.Property(e => e.IngServOtros).HasColumnName("ING_SERV_OTROS");
            entity.Property(e => e.IngServSeguridad).HasColumnName("ING_SERV_SEGURIDAD");
            entity.Property(e => e.IngServTnm).HasColumnName("ING_SERV_TNM");
            entity.Property(e => e.IngServTpv).HasColumnName("ING_SERV_TPV");
            entity.Property(e => e.Laboratorio).HasColumnName("LABORATORIO");
            entity.Property(e => e.ManttoVehiculo).HasColumnName("MANTTO_VEHICULO");
            entity.Property(e => e.Modem).HasColumnName("MODEM");
            entity.Property(e => e.Movil)
                .HasColumnType("numeric(5, 2)")
                .HasColumnName("MOVIL");
            entity.Property(e => e.Nombre)
                .HasMaxLength(152)
                .IsUnicode(false)
                .HasColumnName("NOMBRE");
            entity.Property(e => e.Otros).HasColumnName("OTROS");
            entity.Property(e => e.Refacciones3m).HasColumnName("REFACCIONES_3M");
            entity.Property(e => e.RefaccionesAtm).HasColumnName("REFACCIONES_ATM");
            entity.Property(e => e.RefaccionesModems).HasColumnName("REFACCIONES_MODEMS");
            entity.Property(e => e.RefaccionesOtros).HasColumnName("REFACCIONES_OTROS");
            entity.Property(e => e.RefaccionesSeguridad).HasColumnName("REFACCIONES_SEGURIDAD");
            entity.Property(e => e.RefaccionesTpv).HasColumnName("REFACCIONES_TPV");
            entity.Property(e => e.RefaccionesTurnos).HasColumnName("REFACCIONES_TURNOS");
            entity.Property(e => e.RentaVehiculo).HasColumnName("RENTA_VEHICULO");
            entity.Property(e => e.Seguridad).HasColumnName("SEGURIDAD");
            entity.Property(e => e.Staff).HasColumnName("STAFF");
            entity.Property(e => e.TotServicios).HasColumnName("TOT_SERVICIOS");
            entity.Property(e => e.Total).HasColumnName("TOTAL");
            entity.Property(e => e.Tpv).HasColumnName("TPV");
            entity.Property(e => e.Transporte).HasColumnName("TRANSPORTE");
            entity.Property(e => e.TresM).HasColumnName("TRES_M");
            entity.Property(e => e.Turnos).HasColumnName("TURNOS");
            entity.Property(e => e.Usadas).HasColumnName("USADAS");
            entity.Property(e => e.Usadas3m).HasColumnName("USADAS_3M");
            entity.Property(e => e.UsadasAtm).HasColumnName("USADAS_ATM");
            entity.Property(e => e.UsadasModems).HasColumnName("USADAS_MODEMS");
            entity.Property(e => e.UsadasOtros).HasColumnName("USADAS_OTROS");
            entity.Property(e => e.UsadasSeguridad).HasColumnName("USADAS_SEGURIDAD");
            entity.Property(e => e.UsadasTpv).HasColumnName("USADAS_TPV");
            entity.Property(e => e.UsadasTurnos).HasColumnName("USADAS_TURNOS");
            entity.Property(e => e.V3m)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("V_3M");
            entity.Property(e => e.VAtm)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("V_ATM");
            entity.Property(e => e.VAvion).HasColumnName("V_AVION");
            entity.Property(e => e.VGas).HasColumnName("V_GAS");
            entity.Property(e => e.VModems)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("V_MODEMS");
            entity.Property(e => e.VOtros)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("V_OTROS");
            entity.Property(e => e.VSeguridad)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("V_SEGURIDAD");
            entity.Property(e => e.VSinProducto)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("V_SIN_PRODUCTO");
            entity.Property(e => e.VTotal)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("V_TOTAL");
            entity.Property(e => e.VTpv)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("V_TPV");
            entity.Property(e => e.VTurnos)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("V_TURNOS");
            entity.Property(e => e.Variable).HasColumnName("VARIABLE");
            entity.Property(e => e.Vehiculo)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("VEHICULO");
        });

        modelBuilder.Entity<CostoIs201502>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("COSTO_IS_2015_02");

            entity.Property(e => e.Atm).HasColumnName("ATM");
            entity.Property(e => e.Corporativo).HasColumnName("CORPORATIVO");
            entity.Property(e => e.Curp)
                .HasMaxLength(18)
                .IsUnicode(false)
                .HasColumnName("CURP");
            entity.Property(e => e.DescRegion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_REGION");
            entity.Property(e => e.DescZona)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_ZONA");
            entity.Property(e => e.Envios).HasColumnName("ENVIOS");
            entity.Property(e => e.Fijo).HasColumnName("FIJO");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.IngServ3m).HasColumnName("ING_SERV_3M");
            entity.Property(e => e.IngServAtm).HasColumnName("ING_SERV_ATM");
            entity.Property(e => e.IngServModem).HasColumnName("ING_SERV_MODEM");
            entity.Property(e => e.IngServOtros).HasColumnName("ING_SERV_OTROS");
            entity.Property(e => e.IngServSeguridad).HasColumnName("ING_SERV_SEGURIDAD");
            entity.Property(e => e.IngServTnm).HasColumnName("ING_SERV_TNM");
            entity.Property(e => e.IngServTpv).HasColumnName("ING_SERV_TPV");
            entity.Property(e => e.Laboratorio).HasColumnName("LABORATORIO");
            entity.Property(e => e.ManttoVehiculo).HasColumnName("MANTTO_VEHICULO");
            entity.Property(e => e.Modem).HasColumnName("MODEM");
            entity.Property(e => e.Movil)
                .HasColumnType("numeric(5, 2)")
                .HasColumnName("MOVIL");
            entity.Property(e => e.Nombre)
                .HasMaxLength(152)
                .IsUnicode(false)
                .HasColumnName("NOMBRE");
            entity.Property(e => e.Otros).HasColumnName("OTROS");
            entity.Property(e => e.Refacciones3m).HasColumnName("REFACCIONES_3M");
            entity.Property(e => e.RefaccionesAtm).HasColumnName("REFACCIONES_ATM");
            entity.Property(e => e.RefaccionesModems).HasColumnName("REFACCIONES_MODEMS");
            entity.Property(e => e.RefaccionesOtros).HasColumnName("REFACCIONES_OTROS");
            entity.Property(e => e.RefaccionesSeguridad).HasColumnName("REFACCIONES_SEGURIDAD");
            entity.Property(e => e.RefaccionesTpv).HasColumnName("REFACCIONES_TPV");
            entity.Property(e => e.RefaccionesTurnos).HasColumnName("REFACCIONES_TURNOS");
            entity.Property(e => e.RentaVehiculo).HasColumnName("RENTA_VEHICULO");
            entity.Property(e => e.Seguridad).HasColumnName("SEGURIDAD");
            entity.Property(e => e.Staff).HasColumnName("STAFF");
            entity.Property(e => e.TotServicios).HasColumnName("TOT_SERVICIOS");
            entity.Property(e => e.Total).HasColumnName("TOTAL");
            entity.Property(e => e.Tpv).HasColumnName("TPV");
            entity.Property(e => e.Transporte).HasColumnName("TRANSPORTE");
            entity.Property(e => e.TresM).HasColumnName("TRES_M");
            entity.Property(e => e.Turnos).HasColumnName("TURNOS");
            entity.Property(e => e.Usadas).HasColumnName("USADAS");
            entity.Property(e => e.Usadas3m).HasColumnName("USADAS_3M");
            entity.Property(e => e.UsadasAtm).HasColumnName("USADAS_ATM");
            entity.Property(e => e.UsadasModems).HasColumnName("USADAS_MODEMS");
            entity.Property(e => e.UsadasOtros).HasColumnName("USADAS_OTROS");
            entity.Property(e => e.UsadasSeguridad).HasColumnName("USADAS_SEGURIDAD");
            entity.Property(e => e.UsadasTpv).HasColumnName("USADAS_TPV");
            entity.Property(e => e.UsadasTurnos).HasColumnName("USADAS_TURNOS");
            entity.Property(e => e.V3m)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("V_3M");
            entity.Property(e => e.VAtm)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("V_ATM");
            entity.Property(e => e.VAvion).HasColumnName("V_AVION");
            entity.Property(e => e.VGas).HasColumnName("V_GAS");
            entity.Property(e => e.VModems)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("V_MODEMS");
            entity.Property(e => e.VOtros)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("V_OTROS");
            entity.Property(e => e.VSeguridad)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("V_SEGURIDAD");
            entity.Property(e => e.VSinProducto)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("V_SIN_PRODUCTO");
            entity.Property(e => e.VTotal)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("V_TOTAL");
            entity.Property(e => e.VTpv)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("V_TPV");
            entity.Property(e => e.VTurnos)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("V_TURNOS");
            entity.Property(e => e.Variable).HasColumnName("VARIABLE");
            entity.Property(e => e.Vehiculo)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("VEHICULO");
        });

        modelBuilder.Entity<CostoIs201502Bi>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("COSTO_IS_2015_02_BIS");

            entity.Property(e => e.Atm).HasColumnName("ATM");
            entity.Property(e => e.Corporativo).HasColumnName("CORPORATIVO");
            entity.Property(e => e.Curp)
                .HasMaxLength(18)
                .IsUnicode(false)
                .HasColumnName("CURP");
            entity.Property(e => e.DescRegion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_REGION");
            entity.Property(e => e.DescZona)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_ZONA");
            entity.Property(e => e.Envios).HasColumnName("ENVIOS");
            entity.Property(e => e.Fijo).HasColumnName("FIJO");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.IngServ3m).HasColumnName("ING_SERV_3M");
            entity.Property(e => e.IngServAtm).HasColumnName("ING_SERV_ATM");
            entity.Property(e => e.IngServModem).HasColumnName("ING_SERV_MODEM");
            entity.Property(e => e.IngServOtros).HasColumnName("ING_SERV_OTROS");
            entity.Property(e => e.IngServSeguridad).HasColumnName("ING_SERV_SEGURIDAD");
            entity.Property(e => e.IngServTnm).HasColumnName("ING_SERV_TNM");
            entity.Property(e => e.IngServTpv).HasColumnName("ING_SERV_TPV");
            entity.Property(e => e.Ingreso3mRegion).HasColumnName("INGRESO_3M_REGION");
            entity.Property(e => e.IngresoAtmRegion).HasColumnName("INGRESO_ATM_REGION");
            entity.Property(e => e.IngresoModemRegion).HasColumnName("INGRESO_MODEM_REGION");
            entity.Property(e => e.IngresoOtrosRegion).HasColumnName("INGRESO_OTROS_REGION");
            entity.Property(e => e.IngresoSeguridadRegion).HasColumnName("INGRESO_SEGURIDAD_REGION");
            entity.Property(e => e.IngresoTnmRegion).HasColumnName("INGRESO_TNM_REGION");
            entity.Property(e => e.IngresoTpvRegion).HasColumnName("INGRESO_TPV_REGION");
            entity.Property(e => e.Laboratorio).HasColumnName("LABORATORIO");
            entity.Property(e => e.ManttoVehiculo).HasColumnName("MANTTO_VEHICULO");
            entity.Property(e => e.Modem).HasColumnName("MODEM");
            entity.Property(e => e.Movil)
                .HasColumnType("numeric(5, 2)")
                .HasColumnName("MOVIL");
            entity.Property(e => e.Nombre)
                .HasMaxLength(152)
                .IsUnicode(false)
                .HasColumnName("NOMBRE");
            entity.Property(e => e.Otros).HasColumnName("OTROS");
            entity.Property(e => e.Refacciones3m).HasColumnName("REFACCIONES_3M");
            entity.Property(e => e.RefaccionesAtm).HasColumnName("REFACCIONES_ATM");
            entity.Property(e => e.RefaccionesModems).HasColumnName("REFACCIONES_MODEMS");
            entity.Property(e => e.RefaccionesOtros).HasColumnName("REFACCIONES_OTROS");
            entity.Property(e => e.RefaccionesSeguridad).HasColumnName("REFACCIONES_SEGURIDAD");
            entity.Property(e => e.RefaccionesTpv).HasColumnName("REFACCIONES_TPV");
            entity.Property(e => e.RefaccionesTurnos).HasColumnName("REFACCIONES_TURNOS");
            entity.Property(e => e.RentaVehiculo).HasColumnName("RENTA_VEHICULO");
            entity.Property(e => e.Seguridad).HasColumnName("SEGURIDAD");
            entity.Property(e => e.Staff).HasColumnName("STAFF");
            entity.Property(e => e.TotServicios).HasColumnName("TOT_SERVICIOS");
            entity.Property(e => e.Total).HasColumnName("TOTAL");
            entity.Property(e => e.Tpv).HasColumnName("TPV");
            entity.Property(e => e.Transporte).HasColumnName("TRANSPORTE");
            entity.Property(e => e.TresM).HasColumnName("TRES_M");
            entity.Property(e => e.Turnos).HasColumnName("TURNOS");
            entity.Property(e => e.Usadas).HasColumnName("USADAS");
            entity.Property(e => e.Usadas3m).HasColumnName("USADAS_3M");
            entity.Property(e => e.UsadasAtm).HasColumnName("USADAS_ATM");
            entity.Property(e => e.UsadasModems).HasColumnName("USADAS_MODEMS");
            entity.Property(e => e.UsadasOtros).HasColumnName("USADAS_OTROS");
            entity.Property(e => e.UsadasSeguridad).HasColumnName("USADAS_SEGURIDAD");
            entity.Property(e => e.UsadasTpv).HasColumnName("USADAS_TPV");
            entity.Property(e => e.UsadasTurnos).HasColumnName("USADAS_TURNOS");
            entity.Property(e => e.V3m)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("V_3M");
            entity.Property(e => e.VAtm)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("V_ATM");
            entity.Property(e => e.VAvion).HasColumnName("V_AVION");
            entity.Property(e => e.VGas).HasColumnName("V_GAS");
            entity.Property(e => e.VModems)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("V_MODEMS");
            entity.Property(e => e.VOtros)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("V_OTROS");
            entity.Property(e => e.VSeguridad)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("V_SEGURIDAD");
            entity.Property(e => e.VSinProducto)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("V_SIN_PRODUCTO");
            entity.Property(e => e.VTotal)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("V_TOTAL");
            entity.Property(e => e.VTpv)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("V_TPV");
            entity.Property(e => e.VTurnos)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("V_TURNOS");
            entity.Property(e => e.Variable).HasColumnName("VARIABLE");
            entity.Property(e => e.Vehiculo)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("VEHICULO");
        });

        modelBuilder.Entity<CostoKgAdd>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("COSTO_KG_ADD");

            entity.Property(e => e.Costo)
                .HasColumnType("decimal(8, 2)")
                .HasColumnName("COSTO");
            entity.Property(e => e.IdCostoKgAdd)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_COSTO_KG_ADD");
            entity.Property(e => e.IdMensajeriasPrecio).HasColumnName("ID_MENSAJERIAS_PRECIO");
            entity.Property(e => e.IdTipoDeServicioCosto).HasColumnName("ID_TIPO_DE_SERVICIO_COSTO");
            entity.Property(e => e.MaxKgAplicable).HasColumnName("MAX_KG_APLICABLE");
            entity.Property(e => e.Zona).HasColumnName("ZONA");
        });

        modelBuilder.Entity<CostoRefM>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("costo_ref_ms");

            entity.Property(e => e.CostoUCompra).HasColumnName("COSTO_U_COMPRA");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(200)
                .IsFixedLength()
                .HasColumnName("DESCRIPCION");
            entity.Property(e => e.FechaUCompra)
                .HasColumnType("date")
                .HasColumnName("FECHA_U_COMPRA");
            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnName("id");
            entity.Property(e => e.Sku)
                .HasMaxLength(30)
                .IsFixedLength()
                .HasColumnName("SKU");
        });

        modelBuilder.Entity<CostoRefMicrosip>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("COSTO_REF_MICROSIP");

            entity.Property(e => e.CostoUCompra).HasColumnName("COSTO_U_COMPRA");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(200)
                .IsFixedLength()
                .HasColumnName("DESCRIPCION");
            entity.Property(e => e.FechaUCompra)
                .HasColumnType("date")
                .HasColumnName("FECHA_U_COMPRA");
            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnName("id");
            entity.Property(e => e.Sku)
                .HasMaxLength(30)
                .IsFixedLength()
                .HasColumnName("SKU");
        });

        modelBuilder.Entity<CpTipoPlazaSla>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CP_TIPO_PLAZA_SLA");

            entity.Property(e => e.Cp)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CP");
            entity.Property(e => e.DCiudad)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("d_ciudad");
            entity.Property(e => e.DescTipoPlazaCliente)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_TIPO_PLAZA_CLIENTE");
            entity.Property(e => e.IdTipoPlazaClienteCp).HasColumnName("ID_TIPO_PLAZA_CLIENTE_CP");
            entity.Property(e => e.Poblacion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("poblacion");
        });

        modelBuilder.Entity<CserviceConfigurationCdp>(entity =>
        {
            entity.HasKey(e => e.ServiceConfigurationCdpid).HasName("PK__CService__0AD691288AEC81B7");

            entity.ToTable("CServiceConfigurationCDP");

            entity.Property(e => e.ServiceConfigurationCdpid).HasColumnName("ServiceConfigurationCDPId");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<CservicesFailuresSendSuccessfulEmail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CService__3214EC075B1E861A");

            entity.ToTable("CServicesFailuresSendSuccessfulEmails");

            entity.Property(e => e.CreateDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Cumplimiento1erCitum>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CUMPLIMIENTO_1ER_CITA");

            entity.Property(e => e.Anio).HasColumnName("ANIO");
            entity.Property(e => e.Asignado)
                .HasColumnType("datetime")
                .HasColumnName("ASIGNADO");
            entity.Property(e => e.Cargado)
                .HasColumnType("datetime")
                .HasColumnName("CARGADO");
            entity.Property(e => e.DescCliente)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_CLIENTE");
            entity.Property(e => e.DescProducto)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_PRODUCTO");
            entity.Property(e => e.DescRegion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_REGION");
            entity.Property(e => e.DescTipoServicio)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_TIPO_SERVICIO");
            entity.Property(e => e.DescZona)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_ZONA");
            entity.Property(e => e.Dia).HasColumnName("DIA");
            entity.Property(e => e.EnSitio)
                .HasColumnType("datetime")
                .HasColumnName("EN_SITIO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");
            entity.Property(e => e.IdRegion).HasColumnName("ID_REGION");
            entity.Property(e => e.IdTipoServicio).HasColumnName("ID_TIPO_SERVICIO");
            entity.Property(e => e.IdZona).HasColumnName("ID_ZONA");
            entity.Property(e => e.Mes).HasColumnName("MES");
            entity.Property(e => e.PorAsignar)
                .HasColumnType("datetime")
                .HasColumnName("POR_ASIGNAR");
            entity.Property(e => e.TiempoAsignado).HasColumnName("TIEMPO_ASIGNADO");
            entity.Property(e => e.TiempoEnSitio).HasColumnName("TIEMPO_EN_SITIO");
            entity.Property(e => e.TiempoPorAsignar).HasColumnName("TIEMPO_POR_ASIGNAR");
        });

        modelBuilder.Entity<Dar>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("DAR");

            entity.Property(e => e.Almacen)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ALMACEN");
            entity.Property(e => e.Estado)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ESTADO");
            entity.Property(e => e.Region)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("REGION");
        });

        modelBuilder.Entity<DiferenciasUltima>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("DIFERENCIAS_ULTIMA");

            entity.Property(e => e.Cliente)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CLIENTE");
            entity.Property(e => e.FecAlta)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.FechaUltimoMovimiento)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("FECHA_ULTIMO_MOVIMIENTO");
            entity.Property(e => e.IdStatusUnidad).HasColumnName("ID_STATUS_UNIDAD");
            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");
            entity.Property(e => e.NoSerie)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");
            entity.Property(e => e.Producto)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("PRODUCTO");
            entity.Property(e => e.ResponsableActualUnidad)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("RESPONSABLE_ACTUAL_UNIDAD");
            entity.Property(e => e.ResponsableUltimoMovimiento)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("RESPONSABLE_ULTIMO_MOVIMIENTO");
            entity.Property(e => e.StatusActualUnidad)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("STATUS_ACTUAL_UNIDAD");
            entity.Property(e => e.StatusUltimoBitacoraUnidad)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("STATUS_ULTIMO_BITACORA_UNIDAD");
            entity.Property(e => e.UltimoUsuario)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("ULTIMO_USUARIO");
        });

        modelBuilder.Entity<Direccione>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("DIRECCIONES");

            entity.Property(e => e.Colonia)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("COLONIA");
            entity.Property(e => e.Cp).HasColumnName("CP");
            entity.Property(e => e.Direccion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");
            entity.Property(e => e.Estado)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("ESTADO");
            entity.Property(e => e.IdResponsable).HasColumnName("ID_RESPONSABLE");
            entity.Property(e => e.Latitud)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("LATITUD");
            entity.Property(e => e.Longitud)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("LONGITUD");
            entity.Property(e => e.Poblacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("POBLACION");
        });

        modelBuilder.Entity<DispersionNomina>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("DISPERSION_NOMINA");

            entity.Property(e => e.Atm).HasColumnName("ATM");
            entity.Property(e => e.Curp)
                .IsRequired()
                .HasMaxLength(40)
                .IsFixedLength()
                .HasColumnName("CURP");
            entity.Property(e => e.DescPuesto)
                .HasMaxLength(40)
                .IsFixedLength()
                .HasColumnName("DESC_PUESTO");
            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID");
            entity.Property(e => e.Modem).HasColumnName("MODEM");
            entity.Property(e => e.Month).HasColumnName("MONTH");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(60)
                .IsFixedLength()
                .HasColumnName("NOMBRE");
            entity.Property(e => e.Otros).HasColumnName("OTROS");
            entity.Property(e => e.Proyecto)
                .HasMaxLength(25)
                .IsFixedLength()
                .HasColumnName("PROYECTO");
            entity.Property(e => e.Region)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("REGION");
            entity.Property(e => e.Seguridad).HasColumnName("SEGURIDAD");
            entity.Property(e => e.TipoPuesto)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("TIPO_PUESTO");
            entity.Property(e => e.TipoRecurso)
                .HasMaxLength(25)
                .IsFixedLength()
                .HasColumnName("TIPO_RECURSO");
            entity.Property(e => e.Tnm).HasColumnName("TNM");
            entity.Property(e => e.Tpv).HasColumnName("TPV");
            entity.Property(e => e.TresM).HasColumnName("TRES_M");
            entity.Property(e => e.Year).HasColumnName("YEAR");
            entity.Property(e => e.Zona)
                .HasMaxLength(60)
                .IsFixedLength()
                .HasColumnName("ZONA");
        });

        modelBuilder.Entity<DispersionNominaCliente>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("DISPERSION_NOMINA_CLIENTE");

            entity.Property(e => e.Cliente)
                .HasMaxLength(60)
                .IsFixedLength()
                .HasColumnName("CLIENTE");
            entity.Property(e => e.Curp)
                .HasMaxLength(40)
                .IsFixedLength()
                .HasColumnName("CURP");
            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnName("id");
            entity.Property(e => e.Month).HasColumnName("MONTH");
            entity.Property(e => e.Participacion).HasColumnName("PARTICIPACION");
            entity.Property(e => e.Year).HasColumnName("YEAR");
        });

        modelBuilder.Entity<EdoResultado>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("EDO_RESULTADOS");

            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID");
            entity.Property(e => e.IdRegion).HasColumnName("id_region");
            entity.Property(e => e.IdRubro).HasColumnName("id_rubro");
            entity.Property(e => e.Importe).HasColumnName("importe");
            entity.Property(e => e.Month).HasColumnName("month");
            entity.Property(e => e.Year).HasColumnName("year");
        });

        modelBuilder.Entity<EdoResultadosRegion>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("EDO_RESULTADOS_REGION");

            entity.Property(e => e.Bajio).HasColumnName("BAJIO");
            entity.Property(e => e.Centro).HasColumnName("CENTRO");
            entity.Property(e => e.Chihuahua).HasColumnName("CHIHUAHUA");
            entity.Property(e => e.Concepto)
                .HasMaxLength(50)
                .IsFixedLength();
            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnName("id");
            entity.Property(e => e.Month).HasColumnName("MONTH");
            entity.Property(e => e.Noroeste).HasColumnName("NOROESTE");
            entity.Property(e => e.Norte).HasColumnName("NORTE");
            entity.Property(e => e.Pacifico).HasColumnName("PACIFICO");
            entity.Property(e => e.Sur).HasColumnName("SUR");
            entity.Property(e => e.Sureste).HasColumnName("SURESTE");
            entity.Property(e => e.Tipo)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("TIPO");
            entity.Property(e => e.Year).HasColumnName("YEAR");
        });

        modelBuilder.Entity<EdoResultadosRegionProducto>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("EDO_RESULTADOS_REGION_PRODUCTO");

            entity.Property(e => e.Bajio).HasColumnName("BAJIO");
            entity.Property(e => e.Centro).HasColumnName("CENTRO");
            entity.Property(e => e.Chihuahua).HasColumnName("CHIHUAHUA");
            entity.Property(e => e.Concepto)
                .HasMaxLength(40)
                .IsFixedLength()
                .HasColumnName("CONCEPTO");
            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnName("id");
            entity.Property(e => e.Month).HasColumnName("MONTH");
            entity.Property(e => e.Noroeste).HasColumnName("NOROESTE");
            entity.Property(e => e.Norte).HasColumnName("NORTE");
            entity.Property(e => e.Orden).HasColumnName("ORDEN");
            entity.Property(e => e.Pacifico).HasColumnName("PACIFICO");
            entity.Property(e => e.Producto)
                .HasMaxLength(40)
                .IsFixedLength()
                .HasColumnName("PRODUCTO");
            entity.Property(e => e.Sur).HasColumnName("SUR");
            entity.Property(e => e.Sureste).HasColumnName("SURESTE");
            entity.Property(e => e.Tipo)
                .HasMaxLength(40)
                .IsFixedLength()
                .HasColumnName("TIPO");
            entity.Property(e => e.TipoConcepto).HasColumnName("TIPO_CONCEPTO");
            entity.Property(e => e.Year).HasColumnName("YEAR");
        });

        modelBuilder.Entity<ElavonInbox>(entity =>
        {
            entity.HasKey(e => e.IdElavonInbox);

            entity.ToTable("ELAVON_INBOX");

            entity.Property(e => e.IdElavonInbox).HasColumnName("ID_ELAVON_INBOX");
            entity.Property(e => e.Address1)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("address1");
            entity.Property(e => e.Address2)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("address2");
            entity.Property(e => e.Address3)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("address3");
            entity.Property(e => e.AttentionWindow)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("attention_window");
            entity.Property(e => e.City)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("city");
            entity.Property(e => e.Colony)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("colony");
            entity.Property(e => e.Comments)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("comments");
            entity.Property(e => e.ConnectionType)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("connection_type");
            entity.Property(e => e.Contact)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("contact");
            entity.Property(e => e.Country)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("country");
            entity.Property(e => e.CountyDistrict)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("county_district");
            entity.Property(e => e.DeviceType)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("device_type");
            entity.Property(e => e.DeviceTypeCategory)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("device_type_category");
            entity.Property(e => e.DueBy)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("due_by");
            entity.Property(e => e.ExternalTid)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("external_tid");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdFalla).HasColumnName("ID_FALLA");
            entity.Property(e => e.IdProyecto).HasColumnName("ID_PROYECTO");
            entity.Property(e => e.IdRecepcionElavon).HasColumnName("ID_RECEPCION_ELAVON");
            entity.Property(e => e.IdServicio).HasColumnName("ID_SERVICIO");
            entity.Property(e => e.IsFollowDispatch).HasColumnName("IS_FOLLOW_DISPATCH");
            entity.Property(e => e.Mid)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("mid");
            entity.Property(e => e.Phone1)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("phone1");
            entity.Property(e => e.Phone2)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("phone2");
            entity.Property(e => e.PurchaseType)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("purchase_type");
            entity.Property(e => e.RequestId)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("request_id");
            entity.Property(e => e.RequestType)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("request_type");
            entity.Property(e => e.Serial)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("serial");
            entity.Property(e => e.SimCardCarrier)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("sim_card_carrier");
            entity.Property(e => e.StateProvince)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("state_province");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.Terminal3DigitNumber)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("terminal_3_digit_number");
            entity.Property(e => e.Tid)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("tid");
            entity.Property(e => e.Zip)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("zip");
        });

        modelBuilder.Entity<ElavonOutbox>(entity =>
        {
            entity.HasKey(e => e.IdElavonOutbox);

            entity.ToTable("ELAVON_OUTBOX");

            entity.Property(e => e.IdElavonOutbox).HasColumnName("ID_ELAVON_OUTBOX");
            entity.Property(e => e.AssignmentNo)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("assignment_no");
            entity.Property(e => e.AssignmentNoFrom)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("assignment_no_from");
            entity.Property(e => e.BookingDt)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("booking_dt");
            entity.Property(e => e.Cabecera)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("CABECERA");
            entity.Property(e => e.Comments)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("comments");
            entity.Property(e => e.DeviceType)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("device_type");
            entity.Property(e => e.DeviceTypeCategory)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("device_type_category");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IdEnvioElavon).HasColumnName("ID_ENVIO_ELAVON");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Mid)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("mid");
            entity.Property(e => e.Profile)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("profile");
            entity.Property(e => e.PurchaseOrderNo)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("purchase_order_no");
            entity.Property(e => e.RequestId)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("request_id");
            entity.Property(e => e.RequestStatus)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("request_status");
            entity.Property(e => e.Serial)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("serial");
            entity.Property(e => e.ServiceReceivedBy)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("service_received_by");
            entity.Property(e => e.Status)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.StatusReason)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("status_reason");
            entity.Property(e => e.StatusReasonCode)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("status_reason_code");
            entity.Property(e => e.Tid)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("tid");
        });

        modelBuilder.Entity<EnviosRegion>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ENVIOS_REGION");

            entity.Property(e => e.Fecha)
                .HasColumnType("date")
                .HasColumnName("FECHA");
            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID");
            entity.Property(e => e.Importe).HasColumnName("IMPORTE");
            entity.Property(e => e.Proveedor)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("PROVEEDOR");
            entity.Property(e => e.Region)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("REGION");
        });

        modelBuilder.Entity<Equipo>(entity =>
        {
            entity.HasKey(e => e.IdEquipo);

            entity.ToTable("EQUIPOS");

            entity.Property(e => e.IdEquipo).HasColumnName("ID_EQUIPO");
            entity.Property(e => e.Address).HasMaxLength(255);
            entity.Property(e => e.Afiliacion).HasMaxLength(255);
            entity.Property(e => e.Ar).HasColumnName("AR");
            entity.Property(e => e.City).HasMaxLength(255);
            entity.Property(e => e.CompanyId).HasColumnName("CompanyID");
            entity.Property(e => e.ContactName).HasMaxLength(255);
            entity.Property(e => e.CustomerName).HasMaxLength(255);
            entity.Property(e => e.Desc).HasMaxLength(255);
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.FechaIngreso).HasColumnType("datetime");
            entity.Property(e => e.Id).HasMaxLength(255);
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdLlave).HasColumnName("ID_LLAVE");
            entity.Property(e => e.IdMarca).HasColumnName("ID_MARCA");
            entity.Property(e => e.IdModelo).HasColumnName("ID_MODELO");
            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");
            entity.Property(e => e.IdResponsable)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("ID_RESPONSABLE");
            entity.Property(e => e.IdSim).HasColumnName("ID_SIM");
            entity.Property(e => e.IdSoftware).HasColumnName("ID_SOFTWARE");
            entity.Property(e => e.IdSolicitudRecoleccion).HasColumnName("ID_SOLICITUD_RECOLECCION");
            entity.Property(e => e.IdStatusUnidad).HasColumnName("ID_STATUS_UNIDAD");
            entity.Property(e => e.IdTipoResponsable).HasColumnName("ID_TIPO_RESPONSABLE");
            entity.Property(e => e.IdUsuario).HasMaxLength(255);
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Idequipo1).HasColumnName("IDEquipo");
            entity.Property(e => e.Idregional)
                .HasMaxLength(255)
                .HasColumnName("IDRegional");
            entity.Property(e => e.Idzona).HasColumnName("IDZona");
            entity.Property(e => e.Imei)
                .HasMaxLength(255)
                .HasColumnName("IMEI");
            entity.Property(e => e.Inventario).HasMaxLength(255);
            entity.Property(e => e.IsNueva).HasColumnName("IS_NUEVA");
            entity.Property(e => e.IsProcessed).HasColumnName("IS_PROCESSED");
            entity.Property(e => e.IsRetiro).HasColumnName("IS_RETIRO");
            entity.Property(e => e.MakeId)
                .HasMaxLength(255)
                .HasColumnName("MakeID");
            entity.Property(e => e.ModelId)
                .HasMaxLength(255)
                .HasColumnName("ModelID");
            entity.Property(e => e.NoEquipo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_EQUIPO");
            entity.Property(e => e.NoImei)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_IMEI");
            entity.Property(e => e.NoInventario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_INVENTARIO");
            entity.Property(e => e.NoSerie)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");
            entity.Property(e => e.NoSim)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SIM");
            entity.Property(e => e.Phone).HasMaxLength(255);
            entity.Property(e => e.PosicionInventario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("POSICION_INVENTARIO");
            entity.Property(e => e.PostCode).HasMaxLength(255);
            entity.Property(e => e.ReceivingLocId)
                .HasMaxLength(255)
                .HasColumnName("ReceivingLocID");
            entity.Property(e => e.SerialNumber).HasMaxLength(255);
            entity.Property(e => e.Simm)
                .HasMaxLength(255)
                .HasColumnName("SIMM");
            entity.Property(e => e.StateProv).HasMaxLength(255);
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<Errore>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ERRORES");

            entity.Property(e => e.Error)
                .IsUnicode(false)
                .HasColumnName("ERROR");
        });

        modelBuilder.Entity<ErroresArPrefacturacion>(entity =>
        {
            entity.HasKey(e => e.IdArError).HasName("PK__ERRORES___CB458F4DBA59FB62");

            entity.ToTable("ERRORES_AR_PREFACTURACION");

            entity.Property(e => e.IdArError).HasColumnName("ID_AR_ERROR");
            entity.Property(e => e.Error)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("ERROR");
            entity.Property(e => e.IdArPrefacturacion).HasColumnName("ID_AR_PREFACTURACION");
        });

        modelBuilder.Entity<ErroresPmo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ERRORES_PMO");

            entity.Property(e => e.Errorline).HasColumnName("ERRORLINE");
            entity.Property(e => e.Errormessage).HasColumnName("ERRORMESSAGE");
            entity.Property(e => e.Errornumber).HasColumnName("ERRORNUMBER");
            entity.Property(e => e.Errorprocedure).HasColumnName("ERRORPROCEDURE");
            entity.Property(e => e.Errorseverity).HasColumnName("ERRORSEVERITY");
            entity.Property(e => e.Errorstate).HasColumnName("ERRORSTATE");
            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");
            entity.Property(e => e.Modulo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MODULO");
            entity.Property(e => e.Parametro)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PARAMETRO");
        });

        modelBuilder.Entity<Existencia1Almacen>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("EXISTENCIA_1_ALMACEN");

            entity.Property(e => e.Cantidad).HasColumnName("CANTIDAD");
            entity.Property(e => e.CantidadSparePart).HasColumnName("CANTIDAD_SPARE_PART");
            entity.Property(e => e.Cliente)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CLIENTE");
            entity.Property(e => e.DescInsumo)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("DESC_INSUMO");
            entity.Property(e => e.DescMensajeria)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("DESC_MENSAJERIA");
            entity.Property(e => e.DescSparePart)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_SPARE_PART");
            entity.Property(e => e.EstatusEnvio)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ESTATUS_ENVIO");
            entity.Property(e => e.F2).HasColumnType("date");
            entity.Property(e => e.FechaEnvio)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA ENVIO");
            entity.Property(e => e.FechaRecepcion)
                .HasMaxLength(61)
                .IsUnicode(false)
                .HasColumnName("FECHA RECEPCION");
            entity.Property(e => e.IdEnvio).HasColumnName("ID ENVIO");
            entity.Property(e => e.IdEnvio1).HasColumnName("ID_ENVIO");
            entity.Property(e => e.IdResponsableDestino).HasColumnName("ID_RESPONSABLE_DESTINO");
            entity.Property(e => e.IdResponsableOrigen).HasColumnName("ID_RESPONSABLE_ORIGEN");
            entity.Property(e => e.IdSolicitudAlmacen).HasColumnName("ID_SOLICITUD_ALMACEN");
            entity.Property(e => e.IdStatusEnvio).HasColumnName("ID_STATUS_ENVIO");
            entity.Property(e => e.IdTipoResponsableDestino).HasColumnName("ID_TIPO_RESPONSABLE_DESTINO");
            entity.Property(e => e.NoGuia)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO GUIA");
            entity.Property(e => e.NoSerie)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");
            entity.Property(e => e.Orden)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ORDEN");
            entity.Property(e => e.RegionDestino)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("REGION DESTINO");
            entity.Property(e => e.RegionOrigen)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("REGION ORIGEN");
            entity.Property(e => e.ResponsableDestino)
                .HasMaxLength(152)
                .IsUnicode(false)
                .HasColumnName("RESPONSABLE DESTINO");
            entity.Property(e => e.ResponsableOrigen)
                .HasMaxLength(152)
                .IsUnicode(false)
                .HasColumnName("RESPONSABLE ORIGEN");
            entity.Property(e => e.TipoResponsableDestino)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TIPO RESPONSABLE DESTINO");
            entity.Property(e => e.TipoResponsableOrigen)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TIPO RESPONSABLE ORIGEN");
            entity.Property(e => e.ZonaDestino)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZONA DESTINO");
            entity.Property(e => e.ZonaOrigen)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZONA ORIGEN");
        });

        modelBuilder.Entity<Existencia2Almacen>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("EXISTENCIA_2_ALMACEN");

            entity.Property(e => e.Cliente)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CLIENTE");
            entity.Property(e => e.EstatusEnvio)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ESTATUS_ENVIO");
            entity.Property(e => e.IdEnvio).HasColumnName("ID ENVIO");
            entity.Property(e => e.IdSolicitudAlmacen).HasColumnName("ID_SOLICITUD_ALMACEN");
            entity.Property(e => e.NoGuia)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_GUIA");
            entity.Property(e => e.RegionDestino)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("REGION_DESTINO");
            entity.Property(e => e.RegionOrigen)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("REGION_ORIGEN");
            entity.Property(e => e.ResponsableDestino)
                .HasMaxLength(152)
                .IsUnicode(false)
                .HasColumnName("RESPONSABLE_DESTINO");
            entity.Property(e => e.ResponsableOrigen)
                .HasMaxLength(152)
                .IsUnicode(false)
                .HasColumnName("RESPONSABLE_ORIGEN");
        });

        modelBuilder.Entity<FillRate>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("FILL_RATE");

            entity.Property(e => e.Calificacion)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("CALIFICACION");
            entity.Property(e => e.ConsumoMinimo)
                .HasColumnType("numeric(14, 0)")
                .HasColumnName("Consumo_minimo");
            entity.Property(e => e.DescMarca)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_MARCA");
            entity.Property(e => e.DescModelo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_MODELO");
            entity.Property(e => e.DescRegion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_REGION");
            entity.Property(e => e.DescZona)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_ZONA");
            entity.Property(e => e.Disponibles).HasColumnName("DISPONIBLES");
            entity.Property(e => e.EnTransito).HasColumnName("EN_TRANSITO");
            entity.Property(e => e.IdCliente).HasColumnName("ID_cliente");
            entity.Property(e => e.IdMarca).HasColumnName("ID_MARCA");
            entity.Property(e => e.IdModelo).HasColumnName("ID_MODELO");
            entity.Property(e => e.Instaladas).HasColumnName("INSTALADAS");
            entity.Property(e => e.PorEnviar)
                .HasColumnType("numeric(15, 0)")
                .HasColumnName("POR_ENVIAR");
        });

        modelBuilder.Entity<FillRateElavon>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("FILL_RATE_ELAVON");

            entity.Property(e => e.Calificacion)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("CALIFICACION");
            entity.Property(e => e.ConsumoMinimo)
                .HasColumnType("numeric(14, 0)")
                .HasColumnName("Consumo_minimo");
            entity.Property(e => e.ConsumoMinimo2)
                .HasColumnType("numeric(14, 6)")
                .HasColumnName("Consumo_minimo2");
            entity.Property(e => e.DescMarca)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_MARCA");
            entity.Property(e => e.DescModelo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_MODELO");
            entity.Property(e => e.DescRegion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_REGION");
            entity.Property(e => e.DescZona)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_ZONA");
            entity.Property(e => e.Disponibles).HasColumnName("DISPONIBLES");
            entity.Property(e => e.EnTransito).HasColumnName("EN_TRANSITO");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdMarca).HasColumnName("ID_MARCA");
            entity.Property(e => e.IdModelo).HasColumnName("ID_MODELO");
            entity.Property(e => e.Instaladas).HasColumnName("INSTALADAS");
            entity.Property(e => e.PorEnviar)
                .HasColumnType("numeric(15, 0)")
                .HasColumnName("POR_ENVIAR");
        });

        modelBuilder.Entity<FillRateOtro>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("FILL_RATE_OTROS");

            entity.Property(e => e.Calificacion)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("CALIFICACION");
            entity.Property(e => e.ConsumoMinimo)
                .HasColumnType("decimal(10, 0)")
                .HasColumnName("Consumo_minimo");
            entity.Property(e => e.ConsumoMinimo2)
                .HasColumnType("decimal(12, 5)")
                .HasColumnName("Consumo_minimo2");
            entity.Property(e => e.DescMarca)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_MARCA");
            entity.Property(e => e.DescModelo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_MODELO");
            entity.Property(e => e.DescRegion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_REGION");
            entity.Property(e => e.DescZona)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_ZONA");
            entity.Property(e => e.Disponibles).HasColumnName("DISPONIBLES");
            entity.Property(e => e.EnTransito).HasColumnName("EN_TRANSITO");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdMarca).HasColumnName("ID_MARCA");
            entity.Property(e => e.IdModelo).HasColumnName("ID_MODELO");
            entity.Property(e => e.Instaladas).HasColumnName("INSTALADAS");
            entity.Property(e => e.PorEnviar)
                .HasColumnType("numeric(15, 0)")
                .HasColumnName("POR_ENVIAR");
        });

        modelBuilder.Entity<GasolinaAvion>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("GASOLINA_AVION");

            entity.Property(e => e.Curp)
                .HasMaxLength(50)
                .IsFixedLength()
                .HasColumnName("CURP");
            entity.Property(e => e.DescCliente)
                .HasMaxLength(40)
                .IsFixedLength()
                .HasColumnName("DESC_CLIENTE");
            entity.Property(e => e.DescViatico)
                .HasMaxLength(40)
                .IsFixedLength()
                .HasColumnName("DESC_VIATICO");
            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID");
            entity.Property(e => e.Importe).HasColumnName("IMPORTE");
            entity.Property(e => e.Month).HasColumnName("MONTH");
            entity.Property(e => e.Region)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("REGION");
            entity.Property(e => e.Year).HasColumnName("YEAR");
            entity.Property(e => e.Zona)
                .HasMaxLength(40)
                .IsFixedLength()
                .HasColumnName("ZONA");
        });

        modelBuilder.Entity<GeneralAr>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("GENERAL_AR");

            entity.Property(e => e.Anio).HasColumnName("ANIO");
            entity.Property(e => e.CodigoIntervencion)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CODIGO_INTERVENCION");
            entity.Property(e => e.DescCliente)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_CLIENTE");
            entity.Property(e => e.DescProducto)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_PRODUCTO");
            entity.Property(e => e.DescRegion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_REGION");
            entity.Property(e => e.DescTipoServicio)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_TIPO_SERVICIO");
            entity.Property(e => e.DescZona)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_ZONA");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.Garantia)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("GARANTIA");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");
            entity.Property(e => e.IdRegion).HasColumnName("ID_REGION");
            entity.Property(e => e.IdTipoServicio).HasColumnName("ID_TIPO_SERVICIO");
            entity.Property(e => e.IdZona).HasColumnName("ID_ZONA");
            entity.Property(e => e.Mes).HasColumnName("MES");
            entity.Property(e => e.PendienteRefaccion).HasColumnName("PENDIENTE_REFACCION");
            entity.Property(e => e.SinAccseso).HasColumnName("SIN_ACCSESO");
            entity.Property(e => e.SinCustodia).HasColumnName("SIN_CUSTODIA");
            entity.Property(e => e.SolicitudesNoCanceladas).HasColumnName("SOLICITUDES_NO_CANCELADAS");
            entity.Property(e => e.SoporteTecnico).HasColumnName("SOPORTE_TECNICO");
            entity.Property(e => e.TotalViaticos)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("TOTAL_VIATICOS");
            entity.Property(e => e.Visitas).HasColumnName("VISITAS");
        });

        modelBuilder.Entity<GuiasCosto>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("GUIAS_COSTO");

            entity.Property(e => e.CiudadDestino)
                .HasMaxLength(50)
                .IsFixedLength()
                .HasColumnName("CIUDAD_DESTINO");
            entity.Property(e => e.CiudadOrigen)
                .HasMaxLength(50)
                .IsFixedLength()
                .HasColumnName("CIUDAD_ORIGEN");
            entity.Property(e => e.Costo).HasColumnName("COSTO");
            entity.Property(e => e.DetallesEntrega)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("DETALLES_ENTREGA");
            entity.Property(e => e.FechaColeccion)
                .HasColumnType("date")
                .HasColumnName("FECHA_COLECCION");
            entity.Property(e => e.FechaEntrega)
                .HasColumnType("date")
                .HasColumnName("FECHA_ENTREGA");
            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID");
            entity.Property(e => e.Month).HasColumnName("MONTH");
            entity.Property(e => e.NoCuenta)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("NO_CUENTA");
            entity.Property(e => e.NoGuia)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("NO_GUIA");
            entity.Property(e => e.Peso).HasColumnName("PESO");
            entity.Property(e => e.Piezas).HasColumnName("PIEZAS");
            entity.Property(e => e.Producto)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("PRODUCTO");
            entity.Property(e => e.UltimoCheckpoint)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("ULTIMO_CHECKPOINT");
            entity.Property(e => e.Year).HasColumnName("YEAR");
        });

        modelBuilder.Entity<HistoricoBbva>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("HISTORICO_BBVA");

            entity.Property(e => e.FechaActualizacion)
                .HasColumnType("date")
                .HasColumnName("FECHA_ACTUALIZACION");
            entity.Property(e => e.IdHistorico)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_HISTORICO");
            entity.Property(e => e.NoSerieSale)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE_SALE");
        });

        modelBuilder.Entity<HistoricoDireccionNegocio>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("HISTORICO_DIRECCION_NEGOCIOS");

            entity.Property(e => e.Colonia)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("COLONIA");
            entity.Property(e => e.CorreoEjecutivo)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CORREO_EJECUTIVO");
            entity.Property(e => e.Cp)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("CP");
            entity.Property(e => e.DescNegocio)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_NEGOCIO");
            entity.Property(e => e.Direccion)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");
            entity.Property(e => e.Estado)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ESTADO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.NoAr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AR");
            entity.Property(e => e.Poblacion)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("POBLACION");
            entity.Property(e => e.Responsable)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RESPONSABLE");
            entity.Property(e => e.Telefono)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");
        });

        modelBuilder.Entity<HistoricoE>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("HISTORICO_E");

            entity.Property(e => e.ActReferencias)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("ACT_REFERENCIAS");
            entity.Property(e => e.Afiliacion)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("AFILIACION");
            entity.Property(e => e.AfiliacionAmex)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AFILIACION_AMEX");
            entity.Property(e => e.AfiliacionCierreAmex)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AFILIACION_CIERRE_AMEX");
            entity.Property(e => e.AtiendeComercio)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ATIENDE_COMERCIO");
            entity.Property(e => e.Base)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BASE");
            entity.Property(e => e.CableCorriente)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CABLE_CORRIENTE");
            entity.Property(e => e.Cargador)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CARGADOR");
            entity.Property(e => e.Ciudad)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CIUDAD");
            entity.Property(e => e.Codigo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CODIGO");
            entity.Property(e => e.Colonia)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("COLONIA");
            entity.Property(e => e.Comercio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("COMERCIO");
            entity.Property(e => e.Conclusiones)
                .HasColumnType("text")
                .HasColumnName("CONCLUSIONES");
            entity.Property(e => e.Conectividad)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("CONECTIVIDAD");
            entity.Property(e => e.Contacto1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CONTACTO_1");
            entity.Property(e => e.CorreoEjecutio)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CORREO_EJECUTIO");
            entity.Property(e => e.Cp)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CP");
            entity.Property(e => e.CriterioCambio)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CRITERIO_CAMBIO");
            entity.Property(e => e.Day).HasColumnName("DAY");
            entity.Property(e => e.Descripcion)
                .HasColumnType("text")
                .HasColumnName("DESCRIPCION");
            entity.Property(e => e.Direccion)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");
            entity.Property(e => e.Discover)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("DISCOVER");
            entity.Property(e => e.DomicilioAlterno)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DOMICILIO_ALTERNO");
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EMAIL");
            entity.Property(e => e.Error)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("ERROR");
            entity.Property(e => e.Estado)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ESTADO");
            entity.Property(e => e.EstatusServicio)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ESTATUS_SERVICIO");
            entity.Property(e => e.FechaAlta)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("FECHA_ALTA");
            entity.Property(e => e.FechaAltaSistema)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("FECHA_ALTA_SISTEMA");
            entity.Property(e => e.FechaAtencionProveedor)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("FECHA_ATENCION_PROVEEDOR");
            entity.Property(e => e.FechaCierreSistema)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("FECHA_CIERRE_SISTEMA");
            entity.Property(e => e.FechaVencimiento)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("FECHA_VENCIMIENTO");
            entity.Property(e => e.HorasEncidas)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("HORAS_ENCIDAS");
            entity.Property(e => e.IdAmex)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ID_AMEX");
            entity.Property(e => e.IdCaja)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ID_CAJA");
            entity.Property(e => e.IdCarga).HasColumnName("ID_CARGA");
            entity.Property(e => e.IdEquipo)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ID_EQUIPO");
            entity.Property(e => e.IdHistoricoElavonPaso)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_HISTORICO_ELAVON_PASO");
            entity.Property(e => e.IsError).HasColumnName("IS_ERROR");
            entity.Property(e => e.Modelo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MODELO");
            entity.Property(e => e.ModeloInstalado)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("MODELO_INSTALADO");
            entity.Property(e => e.ModeloTerminalSale)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("MODELO_TERMINAL_SALE");
            entity.Property(e => e.Month).HasColumnName("MONTH");
            entity.Property(e => e.MotivoCancelacion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("MOTIVO_CANCELACION");
            entity.Property(e => e.MotivoRechazo)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("MOTIVO_RECHAZO");
            entity.Property(e => e.Nivel)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("NIVEL");
            entity.Property(e => e.NoSerieEntra)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE_ENTRA");
            entity.Property(e => e.NoSerieMantto)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE_MANTTO");
            entity.Property(e => e.NoSerieSale)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE_SALE");
            entity.Property(e => e.NoSimEntra)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SIM_ENTRA");
            entity.Property(e => e.NoSimSale)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SIM_SALE");
            entity.Property(e => e.Observaciones)
                .HasColumnType("text")
                .HasColumnName("OBSERVACIONES");
            entity.Property(e => e.Odt)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ODT");
            entity.Property(e => e.Producto)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("PRODUCTO");
            entity.Property(e => e.Proveedor)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("PROVEEDOR");
            entity.Property(e => e.RazonSocial)
                .HasMaxLength(155)
                .IsUnicode(false)
                .HasColumnName("RAZON_SOCIAL");
            entity.Property(e => e.Rechazo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("RECHAZO");
            entity.Property(e => e.Rfc)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RFC");
            entity.Property(e => e.RolloInstalar).HasColumnName("ROLLO_INSTALAR");
            entity.Property(e => e.RollosEntregados)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ROLLOS_ENTREGADOS");
            entity.Property(e => e.SlaFijo).HasColumnName("SLA_FIJO");
            entity.Property(e => e.SubTipoServicio)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("SUB_TIPO_SERVICIO");
            entity.Property(e => e.Tecnico)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("TECNICO");
            entity.Property(e => e.Telefono)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");
            entity.Property(e => e.TelefonosCampo)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("TELEFONOS_CAMPO");
            entity.Property(e => e.TidAmexCierre)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TID_AMEX_CIERRE");
            entity.Property(e => e.TiempoAtencion)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("TIEMPO_ATENCION");
            entity.Property(e => e.TieneAmex)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("TIENE_AMEX");
            entity.Property(e => e.TipoAB)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("TIPO_A_B");
            entity.Property(e => e.TipoComercio)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("TIPO_COMERCIO");
            entity.Property(e => e.TipoServicio)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("TIPO_SERVICIO");
            entity.Property(e => e.VersionSw)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("VERSION_SW");
            entity.Property(e => e.Year).HasColumnName("YEAR");
            entity.Property(e => e.Zona)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("ZONA");
        });

        modelBuilder.Entity<HistoricoElavon>(entity =>
        {
            entity.HasKey(e => e.IdHistorico).HasName("PK_HOSTORICO_ELAVON");

            entity.ToTable("HISTORICO_ELAVON");

            entity.Property(e => e.IdHistorico).HasColumnName("ID_HISTORICO");
            entity.Property(e => e.ActReferencias)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("ACT_REFERENCIAS");
            entity.Property(e => e.Afiliacion)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("AFILIACION");
            entity.Property(e => e.AfiliacionAmex)
                .HasMaxLength(50)
                .IsFixedLength()
                .HasColumnName("AFILIACION_AMEX");
            entity.Property(e => e.AfiliacionCierreAmex)
                .HasMaxLength(50)
                .IsFixedLength()
                .HasColumnName("AFILIACION_CIERRE_AMEX");
            entity.Property(e => e.AtiendeComercio)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("ATIENDE_COMERCIO");
            entity.Property(e => e.Base)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("BASE");
            entity.Property(e => e.CableCorriente)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("CABLE_CORRIENTE");
            entity.Property(e => e.Cargador)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("CARGADOR");
            entity.Property(e => e.Ciudad)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("CIUDAD");
            entity.Property(e => e.Codigo)
                .HasMaxLength(50)
                .IsFixedLength()
                .HasColumnName("CODIGO");
            entity.Property(e => e.Colonia)
                .HasMaxLength(150)
                .IsFixedLength()
                .HasColumnName("COLONIA");
            entity.Property(e => e.Comercio)
                .HasMaxLength(255)
                .IsFixedLength()
                .HasColumnName("COMERCIO");
            entity.Property(e => e.Conclusiones)
                .HasColumnType("text")
                .HasColumnName("CONCLUSIONES");
            entity.Property(e => e.Conectividad)
                .HasMaxLength(30)
                .IsFixedLength()
                .HasColumnName("CONECTIVIDAD");
            entity.Property(e => e.Contacto1)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("CONTACTO_1");
            entity.Property(e => e.CorreoEjecutio)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("CORREO_EJECUTIO");
            entity.Property(e => e.Cp)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("CP");
            entity.Property(e => e.CriterioCambio)
                .HasMaxLength(50)
                .IsFixedLength()
                .HasColumnName("CRITERIO_CAMBIO");
            entity.Property(e => e.Descripcion)
                .HasColumnType("text")
                .HasColumnName("DESCRIPCION");
            entity.Property(e => e.Direccion)
                .HasMaxLength(150)
                .IsFixedLength()
                .HasColumnName("DIRECCION");
            entity.Property(e => e.Discover)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("DISCOVER");
            entity.Property(e => e.DomicilioAlterno)
                .HasMaxLength(255)
                .IsFixedLength()
                .HasColumnName("DOMICILIO_ALTERNO");
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("EMAIL");
            entity.Property(e => e.Estado)
                .HasMaxLength(50)
                .IsFixedLength()
                .HasColumnName("ESTADO");
            entity.Property(e => e.EstatusServicio)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("ESTATUS_SERVICIO");
            entity.Property(e => e.FechaAlta)
                .IsRequired()
                .HasMaxLength(25)
                .IsFixedLength()
                .HasColumnName("FECHA_ALTA");
            entity.Property(e => e.FechaAltaSistema)
                .HasMaxLength(25)
                .IsFixedLength()
                .HasColumnName("FECHA_ALTA_SISTEMA");
            entity.Property(e => e.FechaAtencionProveedor)
                .HasMaxLength(25)
                .IsFixedLength()
                .HasColumnName("FECHA_ATENCION_PROVEEDOR");
            entity.Property(e => e.FechaCierreSistema)
                .HasMaxLength(25)
                .IsFixedLength()
                .HasColumnName("FECHA_CIERRE_SISTEMA");
            entity.Property(e => e.FechaVencimiento)
                .HasMaxLength(25)
                .IsFixedLength()
                .HasColumnName("FECHA_VENCIMIENTO");
            entity.Property(e => e.HorasEncidas)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("HORAS_ENCIDAS");
            entity.Property(e => e.IdAmex)
                .HasMaxLength(50)
                .IsFixedLength()
                .HasColumnName("ID_AMEX");
            entity.Property(e => e.IdCaja)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("ID_CAJA");
            entity.Property(e => e.IdEquipo)
                .HasMaxLength(15)
                .IsFixedLength()
                .HasColumnName("ID_EQUIPO");
            entity.Property(e => e.Modelo)
                .HasMaxLength(50)
                .IsFixedLength()
                .HasColumnName("MODELO");
            entity.Property(e => e.ModeloInstalado)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("MODELO_INSTALADO");
            entity.Property(e => e.ModeloTerminalSale)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("MODELO_TERMINAL_SALE");
            entity.Property(e => e.MotivoCancelacion)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("MOTIVO_CANCELACION");
            entity.Property(e => e.MotivoRechazo)
                .HasMaxLength(150)
                .IsFixedLength()
                .HasColumnName("MOTIVO_RECHAZO");
            entity.Property(e => e.Nivel)
                .HasMaxLength(30)
                .IsFixedLength()
                .HasColumnName("NIVEL");
            entity.Property(e => e.NoSerieEntra)
                .HasMaxLength(50)
                .IsFixedLength()
                .HasColumnName("NO_SERIE_ENTRA");
            entity.Property(e => e.NoSerieMantto)
                .HasMaxLength(50)
                .IsFixedLength()
                .HasColumnName("NO_SERIE_MANTTO");
            entity.Property(e => e.NoSerieSale)
                .HasMaxLength(50)
                .IsFixedLength()
                .HasColumnName("NO_SERIE_SALE");
            entity.Property(e => e.NoSimEntra)
                .HasMaxLength(50)
                .IsFixedLength()
                .HasColumnName("NO_SIM_ENTRA");
            entity.Property(e => e.NoSimSale)
                .HasMaxLength(50)
                .IsFixedLength()
                .HasColumnName("NO_SIM_SALE");
            entity.Property(e => e.Observaciones)
                .HasColumnType("text")
                .HasColumnName("OBSERVACIONES");
            entity.Property(e => e.Odt)
                .IsRequired()
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("ODT");
            entity.Property(e => e.Producto)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("PRODUCTO");
            entity.Property(e => e.Proveedor)
                .HasMaxLength(30)
                .IsFixedLength()
                .HasColumnName("PROVEEDOR");
            entity.Property(e => e.RazonSocial)
                .HasMaxLength(155)
                .IsFixedLength()
                .HasColumnName("RAZON_SOCIAL");
            entity.Property(e => e.Rechazo)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("RECHAZO");
            entity.Property(e => e.Rfc)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("RFC");
            entity.Property(e => e.RolloInstalar).HasColumnName("ROLLO_INSTALAR");
            entity.Property(e => e.RollosEntregados)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("ROLLOS_ENTREGADOS");
            entity.Property(e => e.SlaFijo).HasColumnName("SLA_FIJO");
            entity.Property(e => e.SubTipoServicio)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("SUB_TIPO_SERVICIO");
            entity.Property(e => e.Tecnico)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("TECNICO");
            entity.Property(e => e.Telefono)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("TELEFONO");
            entity.Property(e => e.TelefonosCampo)
                .HasMaxLength(60)
                .IsFixedLength()
                .HasColumnName("TELEFONOS_CAMPO");
            entity.Property(e => e.TidAmexCierre)
                .HasMaxLength(50)
                .IsFixedLength()
                .HasColumnName("TID_AMEX_CIERRE");
            entity.Property(e => e.TiempoAtencion)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("TIEMPO_ATENCION");
            entity.Property(e => e.TieneAmex)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("TIENE_AMEX");
            entity.Property(e => e.TipoAB)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("TIPO_A_B");
            entity.Property(e => e.TipoComercio)
                .HasMaxLength(30)
                .IsFixedLength()
                .HasColumnName("TIPO_COMERCIO");
            entity.Property(e => e.TipoServicio)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("TIPO_SERVICIO");
            entity.Property(e => e.VersionSw)
                .HasMaxLength(80)
                .IsFixedLength()
                .HasColumnName("VERSION_SW");
            entity.Property(e => e.Zona)
                .HasMaxLength(30)
                .IsFixedLength()
                .HasColumnName("ZONA");
        });

        modelBuilder.Entity<HistoricoElavonPaso>(entity =>
        {
            entity.HasKey(e => e.IdHistoricoElavonPaso).HasName("PK__HISTORIC__C29EF394B9908975");

            entity.ToTable("HISTORICO_ELAVON_PASO");

            entity.HasIndex(e => e.Afiliacion, "missing_index_3915_3914");

            entity.HasIndex(e => e.Odt, "missing_index_3917_3916");

            entity.Property(e => e.IdHistoricoElavonPaso).HasColumnName("ID_HISTORICO_ELAVON_PASO");
            entity.Property(e => e.ActReferencias)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("ACT_REFERENCIAS");
            entity.Property(e => e.Afiliacion)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("AFILIACION");
            entity.Property(e => e.AfiliacionAmex)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AFILIACION_AMEX");
            entity.Property(e => e.AfiliacionCierreAmex)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AFILIACION_CIERRE_AMEX");
            entity.Property(e => e.AtiendeComercio)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ATIENDE_COMERCIO");
            entity.Property(e => e.Base)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BASE");
            entity.Property(e => e.CableCorriente)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CABLE_CORRIENTE");
            entity.Property(e => e.Cargador)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CARGADOR");
            entity.Property(e => e.Ciudad)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CIUDAD");
            entity.Property(e => e.Codigo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CODIGO");
            entity.Property(e => e.Colonia)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("COLONIA");
            entity.Property(e => e.Comercio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("COMERCIO");
            entity.Property(e => e.Conclusiones)
                .HasColumnType("text")
                .HasColumnName("CONCLUSIONES");
            entity.Property(e => e.Conectividad)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("CONECTIVIDAD");
            entity.Property(e => e.Contacto1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CONTACTO_1");
            entity.Property(e => e.CorreoEjecutio)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CORREO_EJECUTIO");
            entity.Property(e => e.Cp)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CP");
            entity.Property(e => e.CriterioCambio)
                .IsUnicode(false)
                .HasColumnName("CRITERIO_CAMBIO");
            entity.Property(e => e.Descripcion)
                .HasColumnType("text")
                .HasColumnName("DESCRIPCION");
            entity.Property(e => e.Direccion)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");
            entity.Property(e => e.Discover)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("DISCOVER");
            entity.Property(e => e.DomicilioAlterno)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DOMICILIO_ALTERNO");
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EMAIL");
            entity.Property(e => e.Error)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("ERROR");
            entity.Property(e => e.Estado)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ESTADO");
            entity.Property(e => e.EstatusServicio)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ESTATUS_SERVICIO");
            entity.Property(e => e.FechaAlta)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ALTA");
            entity.Property(e => e.FechaAltaSistema)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("FECHA_ALTA_SISTEMA");
            entity.Property(e => e.FechaAtencionProveedor)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("FECHA_ATENCION_PROVEEDOR");
            entity.Property(e => e.FechaCierreSistema)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("FECHA_CIERRE_SISTEMA");
            entity.Property(e => e.FechaVencimiento)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("FECHA_VENCIMIENTO");
            entity.Property(e => e.HorasEncidas)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("HORAS_ENCIDAS");
            entity.Property(e => e.IdAmex)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ID_AMEX");
            entity.Property(e => e.IdCaja)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ID_CAJA");
            entity.Property(e => e.IdCarga).HasColumnName("ID_CARGA");
            entity.Property(e => e.IdEquipo)
                .IsUnicode(false)
                .HasColumnName("ID_EQUIPO");
            entity.Property(e => e.IsError).HasColumnName("IS_ERROR");
            entity.Property(e => e.Modelo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MODELO");
            entity.Property(e => e.ModeloInstalado)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("MODELO_INSTALADO");
            entity.Property(e => e.ModeloTerminalSale)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("MODELO_TERMINAL_SALE");
            entity.Property(e => e.MotivoCancelacion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("MOTIVO_CANCELACION");
            entity.Property(e => e.MotivoRechazo)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("MOTIVO_RECHAZO");
            entity.Property(e => e.Nivel)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("NIVEL");
            entity.Property(e => e.NoSerieEntra)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE_ENTRA");
            entity.Property(e => e.NoSerieMantto)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE_MANTTO");
            entity.Property(e => e.NoSerieSale)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE_SALE");
            entity.Property(e => e.NoSimEntra)
                .IsUnicode(false)
                .HasColumnName("NO_SIM_ENTRA");
            entity.Property(e => e.NoSimSale)
                .IsUnicode(false)
                .HasColumnName("NO_SIM_SALE");
            entity.Property(e => e.Observaciones)
                .HasColumnType("text")
                .HasColumnName("OBSERVACIONES");
            entity.Property(e => e.Odt)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ODT");
            entity.Property(e => e.Producto)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("PRODUCTO");
            entity.Property(e => e.Proveedor)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("PROVEEDOR");
            entity.Property(e => e.RazonSocial)
                .HasMaxLength(155)
                .IsUnicode(false)
                .HasColumnName("RAZON_SOCIAL");
            entity.Property(e => e.Rechazo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("RECHAZO");
            entity.Property(e => e.Rfc)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RFC");
            entity.Property(e => e.RolloInstalar).HasColumnName("ROLLO_INSTALAR");
            entity.Property(e => e.RollosEntregados)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ROLLOS_ENTREGADOS");
            entity.Property(e => e.SlaFijo).HasColumnName("SLA_FIJO");
            entity.Property(e => e.SubTipoServicio)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("SUB_TIPO_SERVICIO");
            entity.Property(e => e.Tecnico)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("TECNICO");
            entity.Property(e => e.Telefono)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");
            entity.Property(e => e.TelefonosCampo)
                .IsUnicode(false)
                .HasColumnName("TELEFONOS_CAMPO");
            entity.Property(e => e.TidAmexCierre)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TID_AMEX_CIERRE");
            entity.Property(e => e.TiempoAtencion)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("TIEMPO_ATENCION");
            entity.Property(e => e.TieneAmex)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("TIENE_AMEX");
            entity.Property(e => e.TipoAB)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("TIPO_A_B");
            entity.Property(e => e.TipoComercio)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("TIPO_COMERCIO");
            entity.Property(e => e.TipoServicio)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("TIPO_SERVICIO");
            entity.Property(e => e.VersionSw)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("VERSION_SW");
            entity.Property(e => e.Zona)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("ZONA");
        });

        modelBuilder.Entity<Informe>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("INFORMES");

            entity.Property(e => e.AltaPor)
                .HasMaxLength(152)
                .IsUnicode(false)
                .HasColumnName("ALTA_POR");
            entity.Property(e => e.AreaCarga)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AREA_CARGA");
            entity.Property(e => e.CerradoPor)
                .HasMaxLength(152)
                .IsUnicode(false)
                .HasColumnName("CERRADO_POR");
            entity.Property(e => e.Estado)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ESTADO");
            entity.Property(e => e.EstatusServicio)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ESTATUS_SERVICIO");
            entity.Property(e => e.EstatusServicio1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ESTATUS SERVICIO");
            entity.Property(e => e.FechaAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_ALTA");
            entity.Property(e => e.FechaAltaSistema)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_ALTA_SISTEMA");
            entity.Property(e => e.FechaAtencionProveedor)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_ATENCION_PROVEEDOR");
            entity.Property(e => e.FechaCierreSistema)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_CIERRE_SISTEMA");
            entity.Property(e => e.FechaVencimiento)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_VENCIMIENTO");
            entity.Property(e => e.IdAr)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_AR");
            entity.Property(e => e.IdTecnico)
                .HasMaxLength(152)
                .IsUnicode(false)
                .HasColumnName("ID_TECNICO");
            entity.Property(e => e.Nivel)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("NIVEL");
            entity.Property(e => e.NivelSla)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("NIVEL_SLA");
            entity.Property(e => e.Odt)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ODT");
            entity.Property(e => e.Producto)
                .IsUnicode(false)
                .HasColumnName("PRODUCTO");
            entity.Property(e => e.Proveedor)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("PROVEEDOR");
            entity.Property(e => e.SlaFijo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SLA_FIJO");
            entity.Property(e => e.TieneAmex)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("TIENE_AMEX");
            entity.Property(e => e.TipoCarga)
                .IsRequired()
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("TIPO_CARGA");
            entity.Property(e => e.TipoComercio)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("TIPO_COMERCIO");
            entity.Property(e => e.TipoComercio2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TIPO_COMERCIO_2");
            entity.Property(e => e.TipoServicio)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("TIPO_SERVICIO");
            entity.Property(e => e.Zona)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZONA");
        });

        modelBuilder.Entity<Ingreso>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("INGRESOS");

            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnName("id");
            entity.Property(e => e.Ingreso1).HasColumnName("INGRESO");
            entity.Property(e => e.Month).HasColumnName("MONTH");
            entity.Property(e => e.Producto)
                .HasMaxLength(15)
                .IsFixedLength()
                .HasColumnName("PRODUCTO");
            entity.Property(e => e.Year).HasColumnName("YEAR");
        });

        modelBuilder.Entity<LayoutMasivo>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("LAYOUT_MASIVO");

            entity.Property(e => e.ActReferencias)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ACT_REFERENCIAS");
            entity.Property(e => e.Afiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AFILIACION");
            entity.Property(e => e.AfiliacionAmex)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AFILIACION_AMEX");
            entity.Property(e => e.AfiliacionAmexCierre)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AFILIACION_AMEX_CIERRE");
            entity.Property(e => e.AltaPor)
                .HasMaxLength(152)
                .IsUnicode(false)
                .HasColumnName("ALTA_POR");
            entity.Property(e => e.AreaCarga)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AREA_CARGA");
            entity.Property(e => e.AtiendeEnComercio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ATIENDE_EN_COMERCIO");
            entity.Property(e => e.Base)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BASE");
            entity.Property(e => e.CableCorriente)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CABLE_CORRIENTE");
            entity.Property(e => e.Caja)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("CAJA");
            entity.Property(e => e.CantidadArchivos).HasColumnName("CANTIDAD_ARCHIVOS");
            entity.Property(e => e.Cargador)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CARGADOR");
            entity.Property(e => e.CerradoPor)
                .HasMaxLength(152)
                .IsUnicode(false)
                .HasColumnName("CERRADO_POR");
            entity.Property(e => e.Codigo)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CODIGO");
            entity.Property(e => e.CodigoPostal)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("CODIGO_POSTAL");
            entity.Property(e => e.Colonia)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("COLONIA");
            entity.Property(e => e.Comercio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("COMERCIO");
            entity.Property(e => e.Conclusiones)
                .HasMaxLength(3000)
                .IsUnicode(false)
                .HasColumnName("CONCLUSIONES");
            entity.Property(e => e.Conectividad)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CONECTIVIDAD");
            entity.Property(e => e.Contacto1)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CONTACTO1");
            entity.Property(e => e.CorreoEjecutivo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CORREO_EJECUTIVO");
            entity.Property(e => e.CriterioCambio)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CRITERIO_CAMBIO");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");
            entity.Property(e => e.DiasSlaAdmin)
                .HasColumnType("decimal(14, 6)")
                .HasColumnName("DIAS_SLA_ADMIN");
            entity.Property(e => e.DiasSlaGlobal)
                .HasColumnType("decimal(14, 6)")
                .HasColumnName("DIAS_SLA_GLOBAL");
            entity.Property(e => e.Direccion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");
            entity.Property(e => e.DireccionAlternaComercio)
                .IsUnicode(false)
                .HasColumnName("DIRECCION_ALTERNA_COMERCIO");
            entity.Property(e => e.Discover)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("DISCOVER");
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EMAIL");
            entity.Property(e => e.Equipo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("EQUIPO");
            entity.Property(e => e.Estado)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ESTADO");
            entity.Property(e => e.EstatusServicio)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ESTATUS_SERVICIO");
            entity.Property(e => e.EstatusServicio1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ESTATUS SERVICIO");
            entity.Property(e => e.FechaAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_ALTA");
            entity.Property(e => e.FechaAltaSistema)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_ALTA_SISTEMA");
            entity.Property(e => e.FechaAtencionProveedor)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_ATENCION_PROVEEDOR");
            entity.Property(e => e.FechaCierreSistema)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_CIERRE_SISTEMA");
            entity.Property(e => e.FechaInicioSlaInv)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_INICIO_SLA_INV");
            entity.Property(e => e.FechaMovInventario)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_MOV_INVENTARIO");
            entity.Property(e => e.FechaVencimiento)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_VENCIMIENTO");
            entity.Property(e => e.HorasVencidas)
                .IsRequired()
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("HORAS_VENCIDAS");
            entity.Property(e => e.IdAr)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_AR");
            entity.Property(e => e.IdTecnico)
                .HasMaxLength(152)
                .IsUnicode(false)
                .HasColumnName("ID_TECNICO");
            entity.Property(e => e.Idamex)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IDAMEX");
            entity.Property(e => e.Modelo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("MODELO");
            entity.Property(e => e.ModeloInstalado)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("MODELO_INSTALADO");
            entity.Property(e => e.ModeloTerminalSale)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("MODELO_TERMINAL_SALE");
            entity.Property(e => e.MotivoCancelacion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("MOTIVO_CANCELACION");
            entity.Property(e => e.MotivoRechazo)
                .IsUnicode(false)
                .HasColumnName("MOTIVO_RECHAZO");
            entity.Property(e => e.Nivel)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("NIVEL");
            entity.Property(e => e.NivelSla)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("NIVEL_SLA");
            entity.Property(e => e.NivelSlaInventario)
                .IsRequired()
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("NIVEL_SLA_INVENTARIO");
            entity.Property(e => e.NumSerieSimEntra)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("NUM_SERIE_SIM_ENTRA");
            entity.Property(e => e.NumSerieSimSale)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("NUM_SERIE_SIM_SALE");
            entity.Property(e => e.NumSerieTerminalEntra)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NUM_SERIE_TERMINAL_ENTRA");
            entity.Property(e => e.NumSerieTerminalMto)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("NUM_SERIE_TERMINAL_MTO");
            entity.Property(e => e.NumSerieTerminalSale)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NUM_SERIE_TERMINAL_SALE");
            entity.Property(e => e.Observaciones)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("OBSERVACIONES");
            entity.Property(e => e.Odt)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ODT");
            entity.Property(e => e.Poblacion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("POBLACION");
            entity.Property(e => e.Producto)
                .IsUnicode(false)
                .HasColumnName("PRODUCTO");
            entity.Property(e => e.Proveedor)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("PROVEEDOR");
            entity.Property(e => e.RazonSocial)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RAZON_SOCIAL");
            entity.Property(e => e.Rechazo)
                .IsUnicode(false)
                .HasColumnName("RECHAZO");
            entity.Property(e => e.Rfc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RFC");
            entity.Property(e => e.RolloEntregados)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ROLLO_ENTREGADOS");
            entity.Property(e => e.RollosAInstalar).HasColumnName("ROLLOS_A_INSTALAR");
            entity.Property(e => e.SlaFijo).HasColumnName("SLA_FIJO");
            entity.Property(e => e.SubTipoServicio)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("SUB_TIPO_SERVICIO");
            entity.Property(e => e.Telefono)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");
            entity.Property(e => e.TelefonosEnCampo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TELEFONOS_EN_CAMPO");
            entity.Property(e => e.TidAmexCierre)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TID_AMEX_CIERRE");
            entity.Property(e => e.TiempoEnAtender)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("TIEMPO_EN_ATENDER");
            entity.Property(e => e.TieneAmex)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("TIENE_AMEX");
            entity.Property(e => e.TipoAB)
                .IsUnicode(false)
                .HasColumnName("TIPO_A_B");
            entity.Property(e => e.TipoCarga)
                .IsRequired()
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("TIPO_CARGA");
            entity.Property(e => e.TipoComercio)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("TIPO_COMERCIO");
            entity.Property(e => e.TipoComercio2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TIPO_COMERCIO_2");
            entity.Property(e => e.TipoServicio)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("TIPO_SERVICIO");
            entity.Property(e => e.Versionsw)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("VERSIONSW");
            entity.Property(e => e.VoltajeNeutro)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("VOLTAJE_NEUTRO");
            entity.Property(e => e.Zona)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZONA");
        });

        modelBuilder.Entity<LayoutMasivo05082019>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("LAYOUT_MASIVO_05082019");

            entity.Property(e => e.ActReferencias)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ACT_REFERENCIAS");
            entity.Property(e => e.Afiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AFILIACION");
            entity.Property(e => e.AfiliacionAmex)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AFILIACION_AMEX");
            entity.Property(e => e.AfiliacionAmexCierre)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AFILIACION_AMEX_CIERRE");
            entity.Property(e => e.AltaPor)
                .HasMaxLength(152)
                .IsUnicode(false)
                .HasColumnName("ALTA_POR");
            entity.Property(e => e.AreaCarga)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AREA_CARGA");
            entity.Property(e => e.AtiendeEnComercio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ATIENDE_EN_COMERCIO");
            entity.Property(e => e.Base)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BASE");
            entity.Property(e => e.CableCorriente)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CABLE_CORRIENTE");
            entity.Property(e => e.Caja)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("CAJA");
            entity.Property(e => e.CantidadArchivos).HasColumnName("CANTIDAD_ARCHIVOS");
            entity.Property(e => e.Cargador)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CARGADOR");
            entity.Property(e => e.CerradoPor)
                .HasMaxLength(152)
                .IsUnicode(false)
                .HasColumnName("CERRADO_POR");
            entity.Property(e => e.Codigo)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CODIGO");
            entity.Property(e => e.CodigoPostal)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("CODIGO_POSTAL");
            entity.Property(e => e.Colonia)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("COLONIA");
            entity.Property(e => e.Comercio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("COMERCIO");
            entity.Property(e => e.Conclusiones)
                .HasMaxLength(3000)
                .IsUnicode(false)
                .HasColumnName("CONCLUSIONES");
            entity.Property(e => e.Conectividad)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CONECTIVIDAD");
            entity.Property(e => e.Contacto1)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CONTACTO1");
            entity.Property(e => e.CorreoEjecutivo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CORREO_EJECUTIVO");
            entity.Property(e => e.CriterioCambio)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CRITERIO_CAMBIO");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");
            entity.Property(e => e.DiasSlaAdmin)
                .HasColumnType("decimal(14, 6)")
                .HasColumnName("DIAS_SLA_ADMIN");
            entity.Property(e => e.DiasSlaGlobal)
                .HasColumnType("decimal(14, 6)")
                .HasColumnName("DIAS_SLA_GLOBAL");
            entity.Property(e => e.Direccion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");
            entity.Property(e => e.DireccionAlternaComercio)
                .IsUnicode(false)
                .HasColumnName("DIRECCION_ALTERNA_COMERCIO");
            entity.Property(e => e.Discover)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("DISCOVER");
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EMAIL");
            entity.Property(e => e.Equipo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("EQUIPO");
            entity.Property(e => e.Estado)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ESTADO");
            entity.Property(e => e.EstatusServicio)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ESTATUS_SERVICIO");
            entity.Property(e => e.EstatusServicio1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ESTATUS SERVICIO");
            entity.Property(e => e.FechaAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_ALTA");
            entity.Property(e => e.FechaAltaSistema)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_ALTA_SISTEMA");
            entity.Property(e => e.FechaAtencionProveedor)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_ATENCION_PROVEEDOR");
            entity.Property(e => e.FechaCierreSistema)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_CIERRE_SISTEMA");
            entity.Property(e => e.FechaInicioSlaInv)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_INICIO_SLA_INV");
            entity.Property(e => e.FechaMovInventario)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_MOV_INVENTARIO");
            entity.Property(e => e.FechaVencimiento)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_VENCIMIENTO");
            entity.Property(e => e.HorasVencidas)
                .IsRequired()
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("HORAS_VENCIDAS");
            entity.Property(e => e.IdAr)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_AR");
            entity.Property(e => e.IdTecnico)
                .HasMaxLength(152)
                .IsUnicode(false)
                .HasColumnName("ID_TECNICO");
            entity.Property(e => e.Idamex)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IDAMEX");
            entity.Property(e => e.Modelo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("MODELO");
            entity.Property(e => e.ModeloInstalado)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("MODELO_INSTALADO");
            entity.Property(e => e.ModeloTerminalSale)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("MODELO_TERMINAL_SALE");
            entity.Property(e => e.MotivoCancelacion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("MOTIVO_CANCELACION");
            entity.Property(e => e.MotivoRechazo)
                .IsUnicode(false)
                .HasColumnName("MOTIVO_RECHAZO");
            entity.Property(e => e.Nivel)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("NIVEL");
            entity.Property(e => e.NivelSla)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("NIVEL_SLA");
            entity.Property(e => e.NivelSlaInventario)
                .IsRequired()
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("NIVEL_SLA_INVENTARIO");
            entity.Property(e => e.NumSerieSimEntra)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("NUM_SERIE_SIM_ENTRA");
            entity.Property(e => e.NumSerieSimSale)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("NUM_SERIE_SIM_SALE");
            entity.Property(e => e.NumSerieTerminalEntra)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NUM_SERIE_TERMINAL_ENTRA");
            entity.Property(e => e.NumSerieTerminalMto)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("NUM_SERIE_TERMINAL_MTO");
            entity.Property(e => e.NumSerieTerminalSale)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NUM_SERIE_TERMINAL_SALE");
            entity.Property(e => e.Observaciones)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("OBSERVACIONES");
            entity.Property(e => e.Odt)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ODT");
            entity.Property(e => e.Poblacion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("POBLACION");
            entity.Property(e => e.Producto)
                .IsUnicode(false)
                .HasColumnName("PRODUCTO");
            entity.Property(e => e.Proveedor)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("PROVEEDOR");
            entity.Property(e => e.RazonSocial)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RAZON_SOCIAL");
            entity.Property(e => e.Rechazo)
                .IsUnicode(false)
                .HasColumnName("RECHAZO");
            entity.Property(e => e.Rfc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RFC");
            entity.Property(e => e.RolloEntregados)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ROLLO_ENTREGADOS");
            entity.Property(e => e.RollosAInstalar).HasColumnName("ROLLOS_A_INSTALAR");
            entity.Property(e => e.SlaFijo).HasColumnName("SLA_FIJO");
            entity.Property(e => e.SubTipoServicio)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("SUB_TIPO_SERVICIO");
            entity.Property(e => e.Telefono)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");
            entity.Property(e => e.TelefonosEnCampo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TELEFONOS_EN_CAMPO");
            entity.Property(e => e.TidAmexCierre)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TID_AMEX_CIERRE");
            entity.Property(e => e.TiempoEnAtender)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("TIEMPO_EN_ATENDER");
            entity.Property(e => e.TieneAmex)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("TIENE_AMEX");
            entity.Property(e => e.TipoAB)
                .IsUnicode(false)
                .HasColumnName("TIPO_A_B");
            entity.Property(e => e.TipoCarga)
                .IsRequired()
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("TIPO_CARGA");
            entity.Property(e => e.TipoComercio)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("TIPO_COMERCIO");
            entity.Property(e => e.TipoComercio2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TIPO_COMERCIO_2");
            entity.Property(e => e.TipoServicio)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("TIPO_SERVICIO");
            entity.Property(e => e.Versionsw)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("VERSIONSW");
            entity.Property(e => e.VoltajeNeutro)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("VOLTAJE_NEUTRO");
            entity.Property(e => e.Zona)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZONA");
        });

        modelBuilder.Entity<LayoutMasivo11062019>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("LAYOUT_MASIVO_11062019");

            entity.Property(e => e.ActReferencias)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ACT_REFERENCIAS");
            entity.Property(e => e.Afiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AFILIACION");
            entity.Property(e => e.AfiliacionAmex)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AFILIACION_AMEX");
            entity.Property(e => e.AfiliacionAmexCierre)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("AFILIACION_AMEX_CIERRE");
            entity.Property(e => e.AltaPor)
                .HasMaxLength(152)
                .IsUnicode(false)
                .HasColumnName("ALTA_POR");
            entity.Property(e => e.AreaCarga)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AREA_CARGA");
            entity.Property(e => e.AtiendeEnComercio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ATIENDE_EN_COMERCIO");
            entity.Property(e => e.Base)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BASE");
            entity.Property(e => e.CableCorriente)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CABLE_CORRIENTE");
            entity.Property(e => e.Caja)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("CAJA");
            entity.Property(e => e.CantidadArchivos).HasColumnName("CANTIDAD_ARCHIVOS");
            entity.Property(e => e.Cargador)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CARGADOR");
            entity.Property(e => e.CerradoPor)
                .HasMaxLength(152)
                .IsUnicode(false)
                .HasColumnName("CERRADO_POR");
            entity.Property(e => e.Codigo)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CODIGO");
            entity.Property(e => e.CodigoPostal)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("CODIGO_POSTAL");
            entity.Property(e => e.Colonia)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("COLONIA");
            entity.Property(e => e.Comercio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("COMERCIO");
            entity.Property(e => e.Conclusiones)
                .HasMaxLength(3000)
                .IsUnicode(false)
                .HasColumnName("CONCLUSIONES");
            entity.Property(e => e.Conectividad)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CONECTIVIDAD");
            entity.Property(e => e.Contacto1)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CONTACTO1");
            entity.Property(e => e.CorreoEjecutivo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CORREO_EJECUTIVO");
            entity.Property(e => e.CriterioCambio)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CRITERIO_CAMBIO");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");
            entity.Property(e => e.DiasSlaAdmin)
                .HasColumnType("decimal(14, 6)")
                .HasColumnName("DIAS_SLA_ADMIN");
            entity.Property(e => e.DiasSlaGlobal)
                .HasColumnType("decimal(14, 6)")
                .HasColumnName("DIAS_SLA_GLOBAL");
            entity.Property(e => e.Direccion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");
            entity.Property(e => e.DireccionAlternaComercio)
                .IsUnicode(false)
                .HasColumnName("DIRECCION_ALTERNA_COMERCIO");
            entity.Property(e => e.Discover)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("DISCOVER");
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EMAIL");
            entity.Property(e => e.Equipo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("EQUIPO");
            entity.Property(e => e.Estado)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ESTADO");
            entity.Property(e => e.EstatusServicio)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ESTATUS_SERVICIO");
            entity.Property(e => e.EstatusServicio1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ESTATUS SERVICIO");
            entity.Property(e => e.FechaAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_ALTA");
            entity.Property(e => e.FechaAltaSistema)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_ALTA_SISTEMA");
            entity.Property(e => e.FechaAtencionProveedor)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_ATENCION_PROVEEDOR");
            entity.Property(e => e.FechaCierreSistema)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_CIERRE_SISTEMA");
            entity.Property(e => e.FechaInicioSlaInv)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_INICIO_SLA_INV");
            entity.Property(e => e.FechaMovInventario)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_MOV_INVENTARIO");
            entity.Property(e => e.FechaVencimiento)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_VENCIMIENTO");
            entity.Property(e => e.HorasVencidas)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("HORAS_VENCIDAS");
            entity.Property(e => e.IdAr)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_AR");
            entity.Property(e => e.IdTecnico)
                .HasMaxLength(152)
                .IsUnicode(false)
                .HasColumnName("ID_TECNICO");
            entity.Property(e => e.Idamex)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IDAMEX");
            entity.Property(e => e.Modelo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("MODELO");
            entity.Property(e => e.ModeloInstalado)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("MODELO_INSTALADO");
            entity.Property(e => e.ModeloTerminalSale)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("MODELO_TERMINAL_SALE");
            entity.Property(e => e.MotivoCancelacion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("MOTIVO_CANCELACION");
            entity.Property(e => e.MotivoRechazo)
                .IsUnicode(false)
                .HasColumnName("MOTIVO_RECHAZO");
            entity.Property(e => e.Nivel)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("NIVEL");
            entity.Property(e => e.NivelSla)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("NIVEL_SLA");
            entity.Property(e => e.NivelSlaInventario)
                .IsRequired()
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("NIVEL_SLA_INVENTARIO");
            entity.Property(e => e.NumSerieSimEntra)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("NUM_SERIE_SIM_ENTRA");
            entity.Property(e => e.NumSerieSimSale)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("NUM_SERIE_SIM_SALE");
            entity.Property(e => e.NumSerieTerminalEntra)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("NUM_SERIE_TERMINAL_ENTRA");
            entity.Property(e => e.NumSerieTerminalMto)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("NUM_SERIE_TERMINAL_MTO");
            entity.Property(e => e.NumSerieTerminalSale)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("NUM_SERIE_TERMINAL_SALE");
            entity.Property(e => e.Observaciones)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("OBSERVACIONES");
            entity.Property(e => e.Odt)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ODT");
            entity.Property(e => e.Poblacion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("POBLACION");
            entity.Property(e => e.Producto)
                .IsUnicode(false)
                .HasColumnName("PRODUCTO");
            entity.Property(e => e.Proveedor)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("PROVEEDOR");
            entity.Property(e => e.RazonSocial)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RAZON_SOCIAL");
            entity.Property(e => e.Rechazo)
                .IsUnicode(false)
                .HasColumnName("RECHAZO");
            entity.Property(e => e.Rfc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RFC");
            entity.Property(e => e.RolloEntregados)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ROLLO_ENTREGADOS");
            entity.Property(e => e.RollosAInstalar).HasColumnName("ROLLOS_A_INSTALAR");
            entity.Property(e => e.SlaFijo).HasColumnName("SLA_FIJO");
            entity.Property(e => e.SubTipoServicio)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("SUB_TIPO_SERVICIO");
            entity.Property(e => e.Telefono)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");
            entity.Property(e => e.TelefonosEnCampo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TELEFONOS_EN_CAMPO");
            entity.Property(e => e.TidAmexCierre)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("TID_AMEX_CIERRE");
            entity.Property(e => e.TiempoEnAtender)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("TIEMPO_EN_ATENDER");
            entity.Property(e => e.TieneAmex)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("TIENE_AMEX");
            entity.Property(e => e.TipoAB)
                .IsUnicode(false)
                .HasColumnName("TIPO_A_B");
            entity.Property(e => e.TipoCarga)
                .IsRequired()
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("TIPO_CARGA");
            entity.Property(e => e.TipoComercio)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("TIPO_COMERCIO");
            entity.Property(e => e.TipoComercio2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TIPO_COMERCIO_2");
            entity.Property(e => e.TipoServicio)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("TIPO_SERVICIO");
            entity.Property(e => e.Versionsw)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("VERSIONSW");
            entity.Property(e => e.VoltajeNeutro)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("VOLTAJE_NEUTRO");
            entity.Property(e => e.Zona)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZONA");
        });

        modelBuilder.Entity<LayoutMasivoApi>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("LAYOUT_MASIVO_API");

            entity.Property(e => e.ActReferencias)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ACT_REFERENCIAS");
            entity.Property(e => e.Afiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AFILIACION");
            entity.Property(e => e.AfiliacionAmex)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AFILIACION_AMEX");
            entity.Property(e => e.AfiliacionAmexCierre)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AFILIACION_AMEX_CIERRE");
            entity.Property(e => e.AltaPor)
                .HasMaxLength(152)
                .IsUnicode(false)
                .HasColumnName("ALTA_POR");
            entity.Property(e => e.AreaCarga)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AREA_CARGA");
            entity.Property(e => e.AtiendeEnComercio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ATIENDE_EN_COMERCIO");
            entity.Property(e => e.Base)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BASE");
            entity.Property(e => e.CableCorriente)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CABLE_CORRIENTE");
            entity.Property(e => e.Caja)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("CAJA");
            entity.Property(e => e.CantidadArchivos).HasColumnName("CANTIDAD_ARCHIVOS");
            entity.Property(e => e.Cargador)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CARGADOR");
            entity.Property(e => e.CerradoPor)
                .HasMaxLength(152)
                .IsUnicode(false)
                .HasColumnName("CERRADO_POR");
            entity.Property(e => e.Codigo)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CODIGO");
            entity.Property(e => e.CodigoPostal)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("CODIGO_POSTAL");
            entity.Property(e => e.Colonia)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("COLONIA");
            entity.Property(e => e.Comercio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("COMERCIO");
            entity.Property(e => e.Conclusiones)
                .HasMaxLength(3000)
                .IsUnicode(false)
                .HasColumnName("CONCLUSIONES");
            entity.Property(e => e.Conectividad)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CONECTIVIDAD");
            entity.Property(e => e.Contacto1)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CONTACTO1");
            entity.Property(e => e.CorreoEjecutivo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CORREO_EJECUTIVO");
            entity.Property(e => e.CriterioCambio)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CRITERIO_CAMBIO");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");
            entity.Property(e => e.DiasSlaAdmin)
                .HasColumnType("decimal(14, 6)")
                .HasColumnName("DIAS_SLA_ADMIN");
            entity.Property(e => e.DiasSlaGlobal)
                .HasColumnType("decimal(14, 6)")
                .HasColumnName("DIAS_SLA_GLOBAL");
            entity.Property(e => e.Direccion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");
            entity.Property(e => e.DireccionAlternaComercio)
                .IsUnicode(false)
                .HasColumnName("DIRECCION_ALTERNA_COMERCIO");
            entity.Property(e => e.Discover)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("DISCOVER");
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EMAIL");
            entity.Property(e => e.Equipo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("EQUIPO");
            entity.Property(e => e.Estado)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ESTADO");
            entity.Property(e => e.EstatusServicio)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ESTATUS_SERVICIO");
            entity.Property(e => e.EstatusServicio1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ESTATUS SERVICIO");
            entity.Property(e => e.FechaAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_ALTA");
            entity.Property(e => e.FechaAltaSistema)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_ALTA_SISTEMA");
            entity.Property(e => e.FechaAtencionProveedor)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_ATENCION_PROVEEDOR");
            entity.Property(e => e.FechaCierreSistema)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_CIERRE_SISTEMA");
            entity.Property(e => e.FechaInicioSlaInv)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_INICIO_SLA_INV");
            entity.Property(e => e.FechaMovInventario)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_MOV_INVENTARIO");
            entity.Property(e => e.FechaVencimiento)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_VENCIMIENTO");
            entity.Property(e => e.HorasVencidas)
                .IsRequired()
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("HORAS_VENCIDAS");
            entity.Property(e => e.IdAr)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_AR");
            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");
            entity.Property(e => e.IdProyecto).HasColumnName("ID_PROYECTO");
            entity.Property(e => e.IdRegion).HasColumnName("ID_REGION");
            entity.Property(e => e.IdStatusAr).HasColumnName("ID_STATUS_AR");
            entity.Property(e => e.IdTecnico)
                .HasMaxLength(152)
                .IsUnicode(false)
                .HasColumnName("ID_TECNICO");
            entity.Property(e => e.Idamex)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IDAMEX");
            entity.Property(e => e.Modelo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("MODELO");
            entity.Property(e => e.ModeloInstalado)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("MODELO_INSTALADO");
            entity.Property(e => e.ModeloTerminalSale)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("MODELO_TERMINAL_SALE");
            entity.Property(e => e.MotivoCancelacion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("MOTIVO_CANCELACION");
            entity.Property(e => e.MotivoRechazo)
                .IsUnicode(false)
                .HasColumnName("MOTIVO_RECHAZO");
            entity.Property(e => e.Nivel)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("NIVEL");
            entity.Property(e => e.NivelSla)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("NIVEL_SLA");
            entity.Property(e => e.NivelSlaInventario)
                .IsRequired()
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("NIVEL_SLA_INVENTARIO");
            entity.Property(e => e.NumSerieSimEntra)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("NUM_SERIE_SIM_ENTRA");
            entity.Property(e => e.NumSerieSimSale)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("NUM_SERIE_SIM_SALE");
            entity.Property(e => e.NumSerieTerminalEntra)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NUM_SERIE_TERMINAL_ENTRA");
            entity.Property(e => e.NumSerieTerminalMto)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("NUM_SERIE_TERMINAL_MTO");
            entity.Property(e => e.NumSerieTerminalSale)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NUM_SERIE_TERMINAL_SALE");
            entity.Property(e => e.Observaciones)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("OBSERVACIONES");
            entity.Property(e => e.Odt)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ODT");
            entity.Property(e => e.Poblacion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("POBLACION");
            entity.Property(e => e.Producto)
                .IsUnicode(false)
                .HasColumnName("PRODUCTO");
            entity.Property(e => e.Proveedor)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("PROVEEDOR");
            entity.Property(e => e.RazonSocial)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RAZON_SOCIAL");
            entity.Property(e => e.Rechazo)
                .IsUnicode(false)
                .HasColumnName("RECHAZO");
            entity.Property(e => e.Rfc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RFC");
            entity.Property(e => e.RolloEntregados)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ROLLO_ENTREGADOS");
            entity.Property(e => e.RollosAInstalar).HasColumnName("ROLLOS_A_INSTALAR");
            entity.Property(e => e.SlaFijo).HasColumnName("SLA_FIJO");
            entity.Property(e => e.SubTipoServicio)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("SUB_TIPO_SERVICIO");
            entity.Property(e => e.Telefono)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");
            entity.Property(e => e.TelefonosEnCampo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TELEFONOS_EN_CAMPO");
            entity.Property(e => e.TidAmexCierre)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TID_AMEX_CIERRE");
            entity.Property(e => e.TiempoEnAtender)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("TIEMPO_EN_ATENDER");
            entity.Property(e => e.TieneAmex)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("TIENE_AMEX");
            entity.Property(e => e.TipoAB)
                .IsUnicode(false)
                .HasColumnName("TIPO_A_B");
            entity.Property(e => e.TipoCarga)
                .IsRequired()
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("TIPO_CARGA");
            entity.Property(e => e.TipoComercio)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("TIPO_COMERCIO");
            entity.Property(e => e.TipoComercio2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TIPO_COMERCIO_2");
            entity.Property(e => e.TipoServicio)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("TIPO_SERVICIO");
            entity.Property(e => e.Versionsw)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("VERSIONSW");
            entity.Property(e => e.VoltajeNeutro)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("VOLTAJE_NEUTRO");
            entity.Property(e => e.Zona)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZONA");
        });

        modelBuilder.Entity<LayoutMasivoCheck>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("LAYOUT_MASIVO_CHECK");

            entity.Property(e => e.ActReferencias)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ACT_REFERENCIAS");
            entity.Property(e => e.Afiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AFILIACION");
            entity.Property(e => e.AfiliacionAmex)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AFILIACION_AMEX");
            entity.Property(e => e.AfiliacionAmexCierre)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("AFILIACION_AMEX_CIERRE");
            entity.Property(e => e.AltaPor)
                .HasMaxLength(152)
                .IsUnicode(false)
                .HasColumnName("ALTA_POR");
            entity.Property(e => e.AreaCarga)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AREA_CARGA");
            entity.Property(e => e.AtiendeEnComercio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ATIENDE_EN_COMERCIO");
            entity.Property(e => e.Base)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BASE");
            entity.Property(e => e.CableCorriente)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CABLE_CORRIENTE");
            entity.Property(e => e.Caja)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("CAJA");
            entity.Property(e => e.CantidadArchivos).HasColumnName("CANTIDAD_ARCHIVOS");
            entity.Property(e => e.Cargador)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CARGADOR");
            entity.Property(e => e.Codigo)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CODIGO");
            entity.Property(e => e.CodigoPostal)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("CODIGO_POSTAL");
            entity.Property(e => e.Colonia)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("COLONIA");
            entity.Property(e => e.Comercio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("COMERCIO");
            entity.Property(e => e.Conclusiones)
                .HasMaxLength(3000)
                .IsUnicode(false)
                .HasColumnName("CONCLUSIONES");
            entity.Property(e => e.Conectividad)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("CONECTIVIDAD");
            entity.Property(e => e.Contacto1)
                .IsUnicode(false)
                .HasColumnName("CONTACTO1");
            entity.Property(e => e.CorreoEjecutivo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CORREO_EJECUTIVO");
            entity.Property(e => e.CriterioCambio)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("CRITERIO_CAMBIO");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");
            entity.Property(e => e.Direccion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");
            entity.Property(e => e.DireccionAlternaComercio)
                .IsUnicode(false)
                .HasColumnName("DIRECCION_ALTERNA_COMERCIO");
            entity.Property(e => e.Discover)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("DISCOVER");
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EMAIL");
            entity.Property(e => e.Equipo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("EQUIPO");
            entity.Property(e => e.Estado)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ESTADO");
            entity.Property(e => e.EstatusServicio)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ESTATUS SERVICIO");
            entity.Property(e => e.FechaAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_ALTA");
            entity.Property(e => e.FechaAltaSistema)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_ALTA_SISTEMA");
            entity.Property(e => e.FechaAtencionProveedor)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_ATENCION_PROVEEDOR");
            entity.Property(e => e.FechaCierreSistema)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_CIERRE_SISTEMA");
            entity.Property(e => e.FechaVencimiento)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_VENCIMIENTO");
            entity.Property(e => e.HorasVencidas)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("HORAS_VENCIDAS");
            entity.Property(e => e.IdAr)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_AR");
            entity.Property(e => e.IdTecnico)
                .HasMaxLength(152)
                .IsUnicode(false)
                .HasColumnName("ID_TECNICO");
            entity.Property(e => e.Idamex)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IDAMEX");
            entity.Property(e => e.Modelo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("MODELO");
            entity.Property(e => e.ModeloInstalado)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("MODELO_INSTALADO");
            entity.Property(e => e.ModeloTerminalSale)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("MODELO_TERMINAL_SALE");
            entity.Property(e => e.MotivoCancelacion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("MOTIVO_CANCELACION");
            entity.Property(e => e.MotivoRechazo)
                .IsUnicode(false)
                .HasColumnName("MOTIVO_RECHAZO");
            entity.Property(e => e.Nivel)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("NIVEL");
            entity.Property(e => e.NivelSla)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("NIVEL_SLA");
            entity.Property(e => e.NumSerieSimEntra)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("NUM_SERIE_SIM_ENTRA");
            entity.Property(e => e.NumSerieSimSale)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("NUM_SERIE_SIM_SALE");
            entity.Property(e => e.NumSerieTerminalEntra)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("NUM_SERIE_TERMINAL_ENTRA");
            entity.Property(e => e.NumSerieTerminalMto)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("NUM_SERIE_TERMINAL_MTO");
            entity.Property(e => e.NumSerieTerminalSale)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("NUM_SERIE_TERMINAL_SALE");
            entity.Property(e => e.Observaciones)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("OBSERVACIONES");
            entity.Property(e => e.Odt)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ODT");
            entity.Property(e => e.Poblacion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("POBLACION");
            entity.Property(e => e.Producto)
                .IsUnicode(false)
                .HasColumnName("PRODUCTO");
            entity.Property(e => e.Proveedor)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("PROVEEDOR");
            entity.Property(e => e.RazonSocial)
                .IsUnicode(false)
                .HasColumnName("RAZON_SOCIAL");
            entity.Property(e => e.Rechazo)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("RECHAZO");
            entity.Property(e => e.Rfc)
                .IsUnicode(false)
                .HasColumnName("RFC");
            entity.Property(e => e.RolloEntregados)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ROLLO_ENTREGADOS");
            entity.Property(e => e.RollosAInstalar).HasColumnName("ROLLOS_A_INSTALAR");
            entity.Property(e => e.SlaFijo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SLA_FIJO");
            entity.Property(e => e.SubTipoServicio)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("SUB_TIPO_SERVICIO");
            entity.Property(e => e.Telefono)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");
            entity.Property(e => e.TelefonosEnCampo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TELEFONOS_EN_CAMPO");
            entity.Property(e => e.TidAmexCierre)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("TID_AMEX_CIERRE");
            entity.Property(e => e.TiempoEnAtender)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("TIEMPO_EN_ATENDER");
            entity.Property(e => e.TieneAmex)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("TIENE_AMEX");
            entity.Property(e => e.TipoAB)
                .IsUnicode(false)
                .HasColumnName("TIPO_A_B");
            entity.Property(e => e.TipoCarga)
                .IsRequired()
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("TIPO_CARGA");
            entity.Property(e => e.TipoComercio)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("TIPO_COMERCIO");
            entity.Property(e => e.TipoComercio2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TIPO_COMERCIO_2");
            entity.Property(e => e.TipoServicio)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("TIPO_SERVICIO");
            entity.Property(e => e.Versionsw)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("VERSIONSW");
            entity.Property(e => e.Zona)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZONA");
        });

        modelBuilder.Entity<LayoutMasivoNew>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("LAYOUT_MASIVO_NEW");

            entity.Property(e => e.ActReferencias)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ACT_REFERENCIAS");
            entity.Property(e => e.Afiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AFILIACION");
            entity.Property(e => e.AfiliacionAmex)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AFILIACION_AMEX");
            entity.Property(e => e.AfiliacionAmexCierre)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AFILIACION_AMEX_CIERRE");
            entity.Property(e => e.AltaPor)
                .HasMaxLength(152)
                .IsUnicode(false)
                .HasColumnName("ALTA_POR");
            entity.Property(e => e.AreaCarga)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AREA_CARGA");
            entity.Property(e => e.AtiendeEnComercio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ATIENDE_EN_COMERCIO");
            entity.Property(e => e.Base)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BASE");
            entity.Property(e => e.CableCorriente)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CABLE_CORRIENTE");
            entity.Property(e => e.Caja)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("CAJA");
            entity.Property(e => e.CantidadArchivos).HasColumnName("CANTIDAD_ARCHIVOS");
            entity.Property(e => e.Cargador)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CARGADOR");
            entity.Property(e => e.CerradoPor)
                .HasMaxLength(152)
                .IsUnicode(false)
                .HasColumnName("CERRADO_POR");
            entity.Property(e => e.Codigo)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CODIGO");
            entity.Property(e => e.CodigoPostal)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("CODIGO_POSTAL");
            entity.Property(e => e.Colonia)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("COLONIA");
            entity.Property(e => e.Comercio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("COMERCIO");
            entity.Property(e => e.Conclusiones)
                .HasMaxLength(3000)
                .IsUnicode(false)
                .HasColumnName("CONCLUSIONES");
            entity.Property(e => e.Conectividad)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CONECTIVIDAD");
            entity.Property(e => e.Contacto1)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CONTACTO1");
            entity.Property(e => e.CorreoEjecutivo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CORREO_EJECUTIVO");
            entity.Property(e => e.CriterioCambio)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CRITERIO_CAMBIO");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");
            entity.Property(e => e.DiasSlaAdmin)
                .HasColumnType("decimal(14, 6)")
                .HasColumnName("DIAS_SLA_ADMIN");
            entity.Property(e => e.DiasSlaGlobal)
                .HasColumnType("decimal(14, 6)")
                .HasColumnName("DIAS_SLA_GLOBAL");
            entity.Property(e => e.Direccion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");
            entity.Property(e => e.DireccionAlternaComercio)
                .IsUnicode(false)
                .HasColumnName("DIRECCION_ALTERNA_COMERCIO");
            entity.Property(e => e.Discover)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("DISCOVER");
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EMAIL");
            entity.Property(e => e.Equipo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("EQUIPO");
            entity.Property(e => e.Estado)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ESTADO");
            entity.Property(e => e.EstatusServicio)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ESTATUS_SERVICIO");
            entity.Property(e => e.EstatusServicio1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ESTATUS SERVICIO");
            entity.Property(e => e.FechaAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_ALTA");
            entity.Property(e => e.FechaAltaSistema)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_ALTA_SISTEMA");
            entity.Property(e => e.FechaAtencionProveedor)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_ATENCION_PROVEEDOR");
            entity.Property(e => e.FechaCierreSistema)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_CIERRE_SISTEMA");
            entity.Property(e => e.FechaInicioSlaInv)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_INICIO_SLA_INV");
            entity.Property(e => e.FechaMovInventario)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_MOV_INVENTARIO");
            entity.Property(e => e.FechaVencimiento)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_VENCIMIENTO");
            entity.Property(e => e.HorasVencidas)
                .IsRequired()
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("HORAS_VENCIDAS");
            entity.Property(e => e.IdAr)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_AR");
            entity.Property(e => e.IdTecnico)
                .HasMaxLength(152)
                .IsUnicode(false)
                .HasColumnName("ID_TECNICO");
            entity.Property(e => e.Idamex)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IDAMEX");
            entity.Property(e => e.Modelo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("MODELO");
            entity.Property(e => e.ModeloInstalado)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("MODELO_INSTALADO");
            entity.Property(e => e.ModeloTerminalSale)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("MODELO_TERMINAL_SALE");
            entity.Property(e => e.MotivoCancelacion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("MOTIVO_CANCELACION");
            entity.Property(e => e.MotivoRechazo)
                .IsUnicode(false)
                .HasColumnName("MOTIVO_RECHAZO");
            entity.Property(e => e.Nivel)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("NIVEL");
            entity.Property(e => e.NivelSla)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("NIVEL_SLA");
            entity.Property(e => e.NivelSlaInventario)
                .IsRequired()
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("NIVEL_SLA_INVENTARIO");
            entity.Property(e => e.NumSerieSimEntra)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("NUM_SERIE_SIM_ENTRA");
            entity.Property(e => e.NumSerieSimSale)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("NUM_SERIE_SIM_SALE");
            entity.Property(e => e.NumSerieTerminalEntra)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NUM_SERIE_TERMINAL_ENTRA");
            entity.Property(e => e.NumSerieTerminalMto)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("NUM_SERIE_TERMINAL_MTO");
            entity.Property(e => e.NumSerieTerminalSale)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NUM_SERIE_TERMINAL_SALE");
            entity.Property(e => e.Observaciones)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("OBSERVACIONES");
            entity.Property(e => e.Odt)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ODT");
            entity.Property(e => e.Poblacion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("POBLACION");
            entity.Property(e => e.Producto)
                .IsUnicode(false)
                .HasColumnName("PRODUCTO");
            entity.Property(e => e.Proveedor)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("PROVEEDOR");
            entity.Property(e => e.RazonSocial)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RAZON_SOCIAL");
            entity.Property(e => e.Rechazo)
                .IsUnicode(false)
                .HasColumnName("RECHAZO");
            entity.Property(e => e.Rfc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RFC");
            entity.Property(e => e.RolloEntregados)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ROLLO_ENTREGADOS");
            entity.Property(e => e.RollosAInstalar).HasColumnName("ROLLOS_A_INSTALAR");
            entity.Property(e => e.SlaFijo).HasColumnName("SLA_FIJO");
            entity.Property(e => e.SubTipoServicio)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("SUB_TIPO_SERVICIO");
            entity.Property(e => e.Telefono)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");
            entity.Property(e => e.TelefonosEnCampo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TELEFONOS_EN_CAMPO");
            entity.Property(e => e.TidAmexCierre)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TID_AMEX_CIERRE");
            entity.Property(e => e.TiempoEnAtender)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("TIEMPO_EN_ATENDER");
            entity.Property(e => e.TieneAmex)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("TIENE_AMEX");
            entity.Property(e => e.TipoAB)
                .IsUnicode(false)
                .HasColumnName("TIPO_A_B");
            entity.Property(e => e.TipoCarga)
                .IsRequired()
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("TIPO_CARGA");
            entity.Property(e => e.TipoComercio)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("TIPO_COMERCIO");
            entity.Property(e => e.TipoComercio2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TIPO_COMERCIO_2");
            entity.Property(e => e.TipoServicio)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("TIPO_SERVICIO");
            entity.Property(e => e.Versionsw)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("VERSIONSW");
            entity.Property(e => e.VoltajeNeutro)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("VOLTAJE_NEUTRO");
            entity.Property(e => e.Zona)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZONA");
        });

        modelBuilder.Entity<LayoutMasivoNuevo>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("LAYOUT_MASIVO_NUEVO");

            entity.Property(e => e.ActReferencias)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ACT_REFERENCIAS");
            entity.Property(e => e.Afiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AFILIACION");
            entity.Property(e => e.AfiliacionAmex)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AFILIACION_AMEX");
            entity.Property(e => e.AfiliacionAmexCierre)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AFILIACION_AMEX_CIERRE");
            entity.Property(e => e.AltaPor)
                .HasMaxLength(152)
                .IsUnicode(false)
                .HasColumnName("ALTA_POR");
            entity.Property(e => e.AreaCarga)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AREA_CARGA");
            entity.Property(e => e.AtiendeEnComercio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ATIENDE_EN_COMERCIO");
            entity.Property(e => e.Base)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BASE");
            entity.Property(e => e.CableCorriente)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CABLE_CORRIENTE");
            entity.Property(e => e.Caja)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("CAJA");
            entity.Property(e => e.CantidadArchivos).HasColumnName("CANTIDAD_ARCHIVOS");
            entity.Property(e => e.Cargador)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CARGADOR");
            entity.Property(e => e.CerradoPor)
                .HasMaxLength(152)
                .IsUnicode(false)
                .HasColumnName("CERRADO_POR");
            entity.Property(e => e.Codigo)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CODIGO");
            entity.Property(e => e.CodigoPostal)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("CODIGO_POSTAL");
            entity.Property(e => e.Colonia)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("COLONIA");
            entity.Property(e => e.Comercio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("COMERCIO");
            entity.Property(e => e.Conclusiones)
                .HasMaxLength(3000)
                .IsUnicode(false)
                .HasColumnName("CONCLUSIONES");
            entity.Property(e => e.Conectividad)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CONECTIVIDAD");
            entity.Property(e => e.Contacto1)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CONTACTO1");
            entity.Property(e => e.CorreoEjecutivo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CORREO_EJECUTIVO");
            entity.Property(e => e.CriterioCambio)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CRITERIO_CAMBIO");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");
            entity.Property(e => e.DiasSlaAdmin)
                .HasColumnType("decimal(14, 6)")
                .HasColumnName("DIAS_SLA_ADMIN");
            entity.Property(e => e.DiasSlaGlobal)
                .HasColumnType("decimal(14, 6)")
                .HasColumnName("DIAS_SLA_GLOBAL");
            entity.Property(e => e.Direccion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");
            entity.Property(e => e.DireccionAlternaComercio)
                .IsUnicode(false)
                .HasColumnName("DIRECCION_ALTERNA_COMERCIO");
            entity.Property(e => e.Discover)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("DISCOVER");
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EMAIL");
            entity.Property(e => e.Equipo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("EQUIPO");
            entity.Property(e => e.Estado)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ESTADO");
            entity.Property(e => e.EstatusServicio)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ESTATUS_SERVICIO");
            entity.Property(e => e.EstatusServicio1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ESTATUS SERVICIO");
            entity.Property(e => e.FechaAlpraProveedor2)
                .HasColumnType("date")
                .HasColumnName("FECHA_ALPRA_PROVEEDOR_2");
            entity.Property(e => e.FechaAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_ALTA");
            entity.Property(e => e.FechaAlta2)
                .HasColumnType("date")
                .HasColumnName("FECHA_ALTA_2");
            entity.Property(e => e.FechaAltaSistema)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_ALTA_SISTEMA");
            entity.Property(e => e.FechaAtencionProveedor)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_ATENCION_PROVEEDOR");
            entity.Property(e => e.FechaCierreSistema)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_CIERRE_SISTEMA");
            entity.Property(e => e.FechaCierreSistema2)
                .HasColumnType("date")
                .HasColumnName("FECHA_CIERRE_SISTEMA_2");
            entity.Property(e => e.FechaInicioSlaInv)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_INICIO_SLA_INV");
            entity.Property(e => e.FechaMovInventario)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_MOV_INVENTARIO");
            entity.Property(e => e.FechaVencimiento)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_VENCIMIENTO");
            entity.Property(e => e.HorasVencidas)
                .IsRequired()
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("HORAS_VENCIDAS");
            entity.Property(e => e.IdAr)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_AR");
            entity.Property(e => e.IdTecnico)
                .HasMaxLength(152)
                .IsUnicode(false)
                .HasColumnName("ID_TECNICO");
            entity.Property(e => e.Idamex)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IDAMEX");
            entity.Property(e => e.Modelo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("MODELO");
            entity.Property(e => e.ModeloInstalado)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("MODELO_INSTALADO");
            entity.Property(e => e.ModeloTerminalSale)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("MODELO_TERMINAL_SALE");
            entity.Property(e => e.MotivoCancelacion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("MOTIVO_CANCELACION");
            entity.Property(e => e.MotivoRechazo)
                .IsUnicode(false)
                .HasColumnName("MOTIVO_RECHAZO");
            entity.Property(e => e.Nivel)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("NIVEL");
            entity.Property(e => e.NivelSla)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("NIVEL_SLA");
            entity.Property(e => e.NivelSlaInventario)
                .IsRequired()
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("NIVEL_SLA_INVENTARIO");
            entity.Property(e => e.NumSerieSimEntra)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("NUM_SERIE_SIM_ENTRA");
            entity.Property(e => e.NumSerieSimSale)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("NUM_SERIE_SIM_SALE");
            entity.Property(e => e.NumSerieTerminalEntra)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NUM_SERIE_TERMINAL_ENTRA");
            entity.Property(e => e.NumSerieTerminalMto)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("NUM_SERIE_TERMINAL_MTO");
            entity.Property(e => e.NumSerieTerminalSale)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NUM_SERIE_TERMINAL_SALE");
            entity.Property(e => e.Observaciones)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("OBSERVACIONES");
            entity.Property(e => e.Odt)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ODT");
            entity.Property(e => e.Poblacion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("POBLACION");
            entity.Property(e => e.Producto)
                .IsUnicode(false)
                .HasColumnName("PRODUCTO");
            entity.Property(e => e.Proveedor)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("PROVEEDOR");
            entity.Property(e => e.RazonSocial)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RAZON_SOCIAL");
            entity.Property(e => e.Rechazo)
                .IsUnicode(false)
                .HasColumnName("RECHAZO");
            entity.Property(e => e.Rfc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RFC");
            entity.Property(e => e.RolloEntregados)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ROLLO_ENTREGADOS");
            entity.Property(e => e.RollosAInstalar).HasColumnName("ROLLOS_A_INSTALAR");
            entity.Property(e => e.SlaFijo).HasColumnName("SLA_FIJO");
            entity.Property(e => e.SubTipoServicio)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("SUB_TIPO_SERVICIO");
            entity.Property(e => e.Telefono)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");
            entity.Property(e => e.TelefonosEnCampo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TELEFONOS_EN_CAMPO");
            entity.Property(e => e.TidAmexCierre)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TID_AMEX_CIERRE");
            entity.Property(e => e.TiempoEnAtender)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("TIEMPO_EN_ATENDER");
            entity.Property(e => e.TieneAmex)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("TIENE_AMEX");
            entity.Property(e => e.TipoAB)
                .IsUnicode(false)
                .HasColumnName("TIPO_A_B");
            entity.Property(e => e.TipoCarga)
                .IsRequired()
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("TIPO_CARGA");
            entity.Property(e => e.TipoComercio)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("TIPO_COMERCIO");
            entity.Property(e => e.TipoComercio2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TIPO_COMERCIO_2");
            entity.Property(e => e.TipoServicio)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("TIPO_SERVICIO");
            entity.Property(e => e.Versionsw)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("VERSIONSW");
            entity.Property(e => e.VoltajeNeutro)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("VOLTAJE_NEUTRO");
            entity.Property(e => e.Zona)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZONA");
        });

        modelBuilder.Entity<LayoutMasivoOdt>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("LAYOUT_MASIVO_ODT");

            entity.Property(e => e.ActReferencias)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ACT_REFERENCIAS");
            entity.Property(e => e.AfiliacionAmex)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AFILIACION_AMEX");
            entity.Property(e => e.AfiliacionAmexCierre)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("AFILIACION_AMEX_CIERRE");
            entity.Property(e => e.AltaPor)
                .IsRequired()
                .HasMaxLength(152)
                .IsUnicode(false)
                .HasColumnName("ALTA_POR");
            entity.Property(e => e.AreaCarga)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AREA_CARGA");
            entity.Property(e => e.Atiende)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ATIENDE");
            entity.Property(e => e.Base)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("BASE");
            entity.Property(e => e.Bitacora)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("BITACORA");
            entity.Property(e => e.CableCorriente)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("CABLE_CORRIENTE");
            entity.Property(e => e.Caja)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("CAJA");
            entity.Property(e => e.CantidadArchivos).HasColumnName("CANTIDAD_ARCHIVOS");
            entity.Property(e => e.Cargador)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("CARGADOR");
            entity.Property(e => e.Codigo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CODIGO");
            entity.Property(e => e.CodigoPostal)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("CODIGO POSTAL");
            entity.Property(e => e.Colonia)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("COLONIA");
            entity.Property(e => e.Conclusiones)
                .IsUnicode(false)
                .HasColumnName("CONCLUSIONES");
            entity.Property(e => e.Conectividad)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("CONECTIVIDAD");
            entity.Property(e => e.Contacto1)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("CONTACTO_1");
            entity.Property(e => e.CorreoEjecutivo)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("CORREO_EJECUTIVO");
            entity.Property(e => e.CriterioCambio)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("CRITERIO_CAMBIO");
            entity.Property(e => e.DescNegocio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_NEGOCIO");
            entity.Property(e => e.Direccion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");
            entity.Property(e => e.DireccionAlternaComercio)
                .IsUnicode(false)
                .HasColumnName("DIRECCION_ALTERNA_COMERCIO");
            entity.Property(e => e.Discover)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("DISCOVER");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("EMAIL");
            entity.Property(e => e.Equipo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("EQUIPO");
            entity.Property(e => e.Estado)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ESTADO");
            entity.Property(e => e.EstatusServicio)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ESTATUS SERVICIO");
            entity.Property(e => e.FecGarantia)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_GARANTIA");
            entity.Property(e => e.FecInicio)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_INICIO");
            entity.Property(e => e.FechaAltaSistema)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_ALTA_SISTEMA");
            entity.Property(e => e.FechaAtencionProveedor)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_ATENCION_PROVEEDOR");
            entity.Property(e => e.FechaCierreSistema)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_CIERRE_SISTEMA");
            entity.Property(e => e.HorasVencidas)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("HORAS_VENCIDAS");
            entity.Property(e => e.IdAmex)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ID_AMEX");
            entity.Property(e => e.IdAr)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_AR");
            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");
            entity.Property(e => e.IdTecnico)
                .HasMaxLength(152)
                .IsUnicode(false)
                .HasColumnName("ID_TECNICO");
            entity.Property(e => e.Modelo)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("MODELO");
            entity.Property(e => e.ModeloInstalado)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("MODELO_INSTALADO");
            entity.Property(e => e.ModeloTerminalSale)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("MODELO_TERMINAL_SALE");
            entity.Property(e => e.MotivoCancelacion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("MOTIVO_CANCELACION");
            entity.Property(e => e.MotivoRechazo)
                .IsUnicode(false)
                .HasColumnName("MOTIVO_RECHAZO");
            entity.Property(e => e.Nivel1)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("NIVEL_1");
            entity.Property(e => e.NivelSla)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("NIVEL_SLA");
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.NoAr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AR");
            entity.Property(e => e.NumSerieSimEntra)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("NUM_SERIE_SIM_ENTRA");
            entity.Property(e => e.NumSerieSimSale)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("NUM_SERIE_SIM_SALE");
            entity.Property(e => e.NumSerieTerminalEntra)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("NUM_SERIE_TERMINAL_ENTRA");
            entity.Property(e => e.NumSerieTerminalMto)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("NUM_SERIE_TERMINAL_MTO");
            entity.Property(e => e.NumSerieTerminalSale)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("NUM_SERIE_TERMINAL_SALE");
            entity.Property(e => e.Poblacion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("POBLACION");
            entity.Property(e => e.Producto)
                .IsUnicode(false)
                .HasColumnName("PRODUCTO");
            entity.Property(e => e.Proveedor)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("PROVEEDOR");
            entity.Property(e => e.RazonSocial)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RAZON_SOCIAL");
            entity.Property(e => e.Rechazo)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("RECHAZO");
            entity.Property(e => e.Rfc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RFC");
            entity.Property(e => e.RolloEntregados)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ROLLO_ENTREGADOS");
            entity.Property(e => e.RollosAInstalar)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ROLLOS_A_INSTALAR");
            entity.Property(e => e.Sintoma)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("SINTOMA");
            entity.Property(e => e.SlaFijo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SLA_FIJO");
            entity.Property(e => e.SubTipoServicio)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("SUB_TIPO_SERVICIO");
            entity.Property(e => e.Telefono)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");
            entity.Property(e => e.TelefonosEnCampo)
                .HasMaxLength(306)
                .IsUnicode(false)
                .HasColumnName("TELEFONOS_EN_CAMPO");
            entity.Property(e => e.TidAmexCierre)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("TID_AMEX_CIERRE");
            entity.Property(e => e.TiempoEnAtender)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("TIEMPO_EN_ATENDER");
            entity.Property(e => e.TieneAmex)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("TIENE_AMEX");
            entity.Property(e => e.TipoAB)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("TIPO_A_B");
            entity.Property(e => e.TipoCarga)
                .IsRequired()
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("TIPO_CARGA");
            entity.Property(e => e.TipoComercio1)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("TIPO_COMERCIO_1");
            entity.Property(e => e.TipoComercio2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TIPO_COMERCIO_2");
            entity.Property(e => e.TipoServicio)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("TIPO_SERVICIO");
            entity.Property(e => e.Versionsw)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("VERSIONSW");
            entity.Property(e => e.Zona)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZONA");
        });

        modelBuilder.Entity<LayoutMasivoOdtNew>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("LAYOUT_MASIVO_ODT_NEW");

            entity.Property(e => e.ActReferencias)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ACT_REFERENCIAS");
            entity.Property(e => e.AfiliacionAmex)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AFILIACION_AMEX");
            entity.Property(e => e.AfiliacionAmexCierre)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("AFILIACION_AMEX_CIERRE");
            entity.Property(e => e.AltaPor)
                .IsRequired()
                .HasMaxLength(152)
                .IsUnicode(false)
                .HasColumnName("ALTA_POR");
            entity.Property(e => e.AreaCarga)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AREA_CARGA");
            entity.Property(e => e.Atiende)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ATIENDE");
            entity.Property(e => e.Base)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("BASE");
            entity.Property(e => e.Bitacora)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("BITACORA");
            entity.Property(e => e.CableCorriente)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("CABLE_CORRIENTE");
            entity.Property(e => e.Caja)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("CAJA");
            entity.Property(e => e.CantidadArchivos).HasColumnName("CANTIDAD_ARCHIVOS");
            entity.Property(e => e.Cargador)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("CARGADOR");
            entity.Property(e => e.Codigo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CODIGO");
            entity.Property(e => e.CodigoPostal)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("CODIGO POSTAL");
            entity.Property(e => e.Colonia)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("COLONIA");
            entity.Property(e => e.Conclusiones)
                .IsUnicode(false)
                .HasColumnName("CONCLUSIONES");
            entity.Property(e => e.Conectividad)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("CONECTIVIDAD");
            entity.Property(e => e.Contacto1)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("CONTACTO_1");
            entity.Property(e => e.CorreoEjecutivo)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("CORREO_EJECUTIVO");
            entity.Property(e => e.CriterioCambio)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("CRITERIO_CAMBIO");
            entity.Property(e => e.DescNegocio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_NEGOCIO");
            entity.Property(e => e.Direccion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");
            entity.Property(e => e.DireccionAlternaComercio)
                .IsUnicode(false)
                .HasColumnName("DIRECCION_ALTERNA_COMERCIO");
            entity.Property(e => e.Discover)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("DISCOVER");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("EMAIL");
            entity.Property(e => e.Equipo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("EQUIPO");
            entity.Property(e => e.Estado)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ESTADO");
            entity.Property(e => e.EstatusServicio)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ESTATUS SERVICIO");
            entity.Property(e => e.FecGarantia)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_GARANTIA");
            entity.Property(e => e.FecInicio)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_INICIO");
            entity.Property(e => e.FechaAltaProveedor)
                .HasColumnType("date")
                .HasColumnName("FECHA_ALTA_PROVEEDOR");
            entity.Property(e => e.FechaAltaSistema)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_ALTA_SISTEMA");
            entity.Property(e => e.FechaAltaSistema2)
                .HasColumnType("date")
                .HasColumnName("FECHA_ALTA_SISTEMA_2");
            entity.Property(e => e.FechaAtencionProveedor)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_ATENCION_PROVEEDOR");
            entity.Property(e => e.FechaCierreSistema)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_CIERRE_SISTEMA");
            entity.Property(e => e.FechaCierreSistema2)
                .HasColumnType("date")
                .HasColumnName("FECHA_CIERRE_SISTEMA_2");
            entity.Property(e => e.HorasVencidas)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("HORAS_VENCIDAS");
            entity.Property(e => e.IdAmex)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ID_AMEX");
            entity.Property(e => e.IdAr)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_AR");
            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");
            entity.Property(e => e.IdTecnico)
                .HasMaxLength(152)
                .IsUnicode(false)
                .HasColumnName("ID_TECNICO");
            entity.Property(e => e.Modelo)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("MODELO");
            entity.Property(e => e.ModeloInstalado)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("MODELO_INSTALADO");
            entity.Property(e => e.ModeloTerminalSale)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("MODELO_TERMINAL_SALE");
            entity.Property(e => e.MotivoCancelacion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("MOTIVO_CANCELACION");
            entity.Property(e => e.MotivoRechazo)
                .IsUnicode(false)
                .HasColumnName("MOTIVO_RECHAZO");
            entity.Property(e => e.Nivel1)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("NIVEL_1");
            entity.Property(e => e.NivelSla)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("NIVEL_SLA");
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.NoAr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AR");
            entity.Property(e => e.NumSerieSimEntra)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("NUM_SERIE_SIM_ENTRA");
            entity.Property(e => e.NumSerieSimSale)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("NUM_SERIE_SIM_SALE");
            entity.Property(e => e.NumSerieTerminalEntra)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("NUM_SERIE_TERMINAL_ENTRA");
            entity.Property(e => e.NumSerieTerminalMto)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("NUM_SERIE_TERMINAL_MTO");
            entity.Property(e => e.NumSerieTerminalSale)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("NUM_SERIE_TERMINAL_SALE");
            entity.Property(e => e.Poblacion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("POBLACION");
            entity.Property(e => e.Producto)
                .IsUnicode(false)
                .HasColumnName("PRODUCTO");
            entity.Property(e => e.Proveedor)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("PROVEEDOR");
            entity.Property(e => e.RazonSocial)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RAZON_SOCIAL");
            entity.Property(e => e.Rechazo)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("RECHAZO");
            entity.Property(e => e.Rfc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RFC");
            entity.Property(e => e.RolloEntregados)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ROLLO_ENTREGADOS");
            entity.Property(e => e.RollosAInstalar)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ROLLOS_A_INSTALAR");
            entity.Property(e => e.Sintoma)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("SINTOMA");
            entity.Property(e => e.SlaFijo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SLA_FIJO");
            entity.Property(e => e.SubTipoServicio)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("SUB_TIPO_SERVICIO");
            entity.Property(e => e.Telefono)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");
            entity.Property(e => e.TelefonosEnCampo)
                .HasMaxLength(306)
                .IsUnicode(false)
                .HasColumnName("TELEFONOS_EN_CAMPO");
            entity.Property(e => e.TidAmexCierre)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("TID_AMEX_CIERRE");
            entity.Property(e => e.TiempoEnAtender)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("TIEMPO_EN_ATENDER");
            entity.Property(e => e.TieneAmex)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("TIENE_AMEX");
            entity.Property(e => e.TipoAB)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("TIPO_A_B");
            entity.Property(e => e.TipoCarga)
                .IsRequired()
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("TIPO_CARGA");
            entity.Property(e => e.TipoComercio1)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("TIPO_COMERCIO_1");
            entity.Property(e => e.TipoComercio2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TIPO_COMERCIO_2");
            entity.Property(e => e.TipoServicio)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("TIPO_SERVICIO");
            entity.Property(e => e.Versionsw)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("VERSIONSW");
            entity.Property(e => e.Zona)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZONA");
        });

        modelBuilder.Entity<LayoutMasivoValidaSla>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("LAYOUT_MASIVO_VALIDA_SLA");

            entity.Property(e => e.ActReferencias)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ACT_REFERENCIAS");
            entity.Property(e => e.Afiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AFILIACION");
            entity.Property(e => e.AfiliacionAmex)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AFILIACION_AMEX");
            entity.Property(e => e.AfiliacionAmexCierre)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("AFILIACION_AMEX_CIERRE");
            entity.Property(e => e.AltaPor)
                .HasMaxLength(152)
                .IsUnicode(false)
                .HasColumnName("ALTA_POR");
            entity.Property(e => e.AreaCarga)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AREA_CARGA");
            entity.Property(e => e.AtiendeEnComercio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ATIENDE_EN_COMERCIO");
            entity.Property(e => e.Base)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BASE");
            entity.Property(e => e.CableCorriente)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CABLE_CORRIENTE");
            entity.Property(e => e.Caja)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("CAJA");
            entity.Property(e => e.CantidadArchivos).HasColumnName("CANTIDAD_ARCHIVOS");
            entity.Property(e => e.Cargador)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CARGADOR");
            entity.Property(e => e.CerradoPor)
                .HasMaxLength(152)
                .IsUnicode(false)
                .HasColumnName("CERRADO_POR");
            entity.Property(e => e.Codigo)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CODIGO");
            entity.Property(e => e.CodigoPostal)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("CODIGO_POSTAL");
            entity.Property(e => e.Colonia)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("COLONIA");
            entity.Property(e => e.Comercio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("COMERCIO");
            entity.Property(e => e.Conclusiones)
                .HasMaxLength(3000)
                .IsUnicode(false)
                .HasColumnName("CONCLUSIONES");
            entity.Property(e => e.Conectividad)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CONECTIVIDAD");
            entity.Property(e => e.Contacto1)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CONTACTO1");
            entity.Property(e => e.CorreoEjecutivo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CORREO_EJECUTIVO");
            entity.Property(e => e.CriterioCambio)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CRITERIO_CAMBIO");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");
            entity.Property(e => e.DiasSlaAdmin)
                .HasColumnType("decimal(14, 6)")
                .HasColumnName("DIAS_SLA_ADMIN");
            entity.Property(e => e.DiasSlaGlobal)
                .HasColumnType("decimal(14, 6)")
                .HasColumnName("DIAS_SLA_GLOBAL");
            entity.Property(e => e.Direccion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");
            entity.Property(e => e.DireccionAlternaComercio)
                .IsUnicode(false)
                .HasColumnName("DIRECCION_ALTERNA_COMERCIO");
            entity.Property(e => e.Discover)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("DISCOVER");
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EMAIL");
            entity.Property(e => e.Equipo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("EQUIPO");
            entity.Property(e => e.Estado)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ESTADO");
            entity.Property(e => e.EstatusServicio)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ESTATUS_SERVICIO");
            entity.Property(e => e.EstatusServicio1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ESTATUS SERVICIO");
            entity.Property(e => e.FechaAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_ALTA");
            entity.Property(e => e.FechaAltaSistema)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_ALTA_SISTEMA");
            entity.Property(e => e.FechaAtencionProveedor)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_ATENCION_PROVEEDOR");
            entity.Property(e => e.FechaCierreSistema)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_CIERRE_SISTEMA");
            entity.Property(e => e.FechaInicioSlaInv)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_INICIO_SLA_INV");
            entity.Property(e => e.FechaMovInventario)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_MOV_INVENTARIO");
            entity.Property(e => e.FechaVencimiento)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_VENCIMIENTO");
            entity.Property(e => e.HorasVencidas)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("HORAS_VENCIDAS");
            entity.Property(e => e.IdAr)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_AR");
            entity.Property(e => e.IdTecnico)
                .HasMaxLength(152)
                .IsUnicode(false)
                .HasColumnName("ID_TECNICO");
            entity.Property(e => e.Idamex)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IDAMEX");
            entity.Property(e => e.Modelo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("MODELO");
            entity.Property(e => e.ModeloInstalado)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("MODELO_INSTALADO");
            entity.Property(e => e.ModeloTerminalSale)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("MODELO_TERMINAL_SALE");
            entity.Property(e => e.MotivoCancelacion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("MOTIVO_CANCELACION");
            entity.Property(e => e.MotivoRechazo)
                .IsUnicode(false)
                .HasColumnName("MOTIVO_RECHAZO");
            entity.Property(e => e.Nivel)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("NIVEL");
            entity.Property(e => e.NivelSla)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("NIVEL_SLA");
            entity.Property(e => e.NivelSlaInventario)
                .IsRequired()
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("NIVEL_SLA_INVENTARIO");
            entity.Property(e => e.NumSerieSimEntra)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("NUM_SERIE_SIM_ENTRA");
            entity.Property(e => e.NumSerieSimSale)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("NUM_SERIE_SIM_SALE");
            entity.Property(e => e.NumSerieTerminalEntra)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("NUM_SERIE_TERMINAL_ENTRA");
            entity.Property(e => e.NumSerieTerminalMto)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("NUM_SERIE_TERMINAL_MTO");
            entity.Property(e => e.NumSerieTerminalSale)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("NUM_SERIE_TERMINAL_SALE");
            entity.Property(e => e.Observaciones)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("OBSERVACIONES");
            entity.Property(e => e.Odt)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ODT");
            entity.Property(e => e.Poblacion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("POBLACION");
            entity.Property(e => e.Producto)
                .IsUnicode(false)
                .HasColumnName("PRODUCTO");
            entity.Property(e => e.Proveedor)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("PROVEEDOR");
            entity.Property(e => e.RazonSocial)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RAZON_SOCIAL");
            entity.Property(e => e.Rechazo)
                .IsUnicode(false)
                .HasColumnName("RECHAZO");
            entity.Property(e => e.Rfc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RFC");
            entity.Property(e => e.RolloEntregados)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ROLLO_ENTREGADOS");
            entity.Property(e => e.RollosAInstalar).HasColumnName("ROLLOS_A_INSTALAR");
            entity.Property(e => e.SlaFijo).HasColumnName("SLA_FIJO");
            entity.Property(e => e.SubTipoServicio)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("SUB_TIPO_SERVICIO");
            entity.Property(e => e.Telefono)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");
            entity.Property(e => e.TelefonosEnCampo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TELEFONOS_EN_CAMPO");
            entity.Property(e => e.TidAmexCierre)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("TID_AMEX_CIERRE");
            entity.Property(e => e.TiempoEnAtender)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("TIEMPO_EN_ATENDER");
            entity.Property(e => e.TieneAmex)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("TIENE_AMEX");
            entity.Property(e => e.TipoAB)
                .IsUnicode(false)
                .HasColumnName("TIPO_A_B");
            entity.Property(e => e.TipoCarga)
                .IsRequired()
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("TIPO_CARGA");
            entity.Property(e => e.TipoComercio)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("TIPO_COMERCIO");
            entity.Property(e => e.TipoComercio2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TIPO_COMERCIO_2");
            entity.Property(e => e.TipoServicio)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("TIPO_SERVICIO");
            entity.Property(e => e.Versionsw)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("VERSIONSW");
            entity.Property(e => e.VoltajeNeutro)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("VOLTAJE_NEUTRO");
            entity.Property(e => e.Zona)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZONA");
        });

        modelBuilder.Entity<LayoutNuevoOdt>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("LAYOUT_NUEVO_ODT");

            entity.Property(e => e.ActReferencias)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ACT_REFERENCIAS");
            entity.Property(e => e.Afiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AFILIACION");
            entity.Property(e => e.AfiliacionAmex)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AFILIACION_AMEX");
            entity.Property(e => e.AfiliacionAmexCierre)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("AFILIACION_AMEX_CIERRE");
            entity.Property(e => e.AltaPor)
                .HasMaxLength(152)
                .IsUnicode(false)
                .HasColumnName("ALTA_POR");
            entity.Property(e => e.AreaCarga)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AREA_CARGA");
            entity.Property(e => e.AtiendeEnComercio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ATIENDE_EN_COMERCIO");
            entity.Property(e => e.Base)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BASE");
            entity.Property(e => e.CableCorriente)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CABLE_CORRIENTE");
            entity.Property(e => e.Caja)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("CAJA");
            entity.Property(e => e.CantidadArchivos).HasColumnName("CANTIDAD_ARCHIVOS");
            entity.Property(e => e.Cargador)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CARGADOR");
            entity.Property(e => e.Codigo)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CODIGO");
            entity.Property(e => e.CodigoPostal)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("CODIGO_POSTAL");
            entity.Property(e => e.Colonia)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("COLONIA");
            entity.Property(e => e.Comercio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("COMERCIO");
            entity.Property(e => e.Conclusiones)
                .HasMaxLength(3000)
                .IsUnicode(false)
                .HasColumnName("CONCLUSIONES");
            entity.Property(e => e.Conectividad)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CONECTIVIDAD");
            entity.Property(e => e.Contacto1)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CONTACTO1");
            entity.Property(e => e.CorreoEjecutivo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CORREO_EJECUTIVO");
            entity.Property(e => e.CriterioCambio)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("CRITERIO_CAMBIO");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");
            entity.Property(e => e.Direccion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");
            entity.Property(e => e.DireccionAlternaComercio)
                .IsUnicode(false)
                .HasColumnName("DIRECCION_ALTERNA_COMERCIO");
            entity.Property(e => e.Discover)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("DISCOVER");
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EMAIL");
            entity.Property(e => e.Equipo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("EQUIPO");
            entity.Property(e => e.Estado)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ESTADO");
            entity.Property(e => e.EstatusServicio)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ESTATUS_SERVICIO");
            entity.Property(e => e.EstatusServicio1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ESTATUS SERVICIO");
            entity.Property(e => e.FechaAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_ALTA");
            entity.Property(e => e.FechaAltaSistema)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_ALTA_SISTEMA");
            entity.Property(e => e.FechaAtencionProveedor)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_ATENCION_PROVEEDOR");
            entity.Property(e => e.FechaCierreSistema)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_CIERRE_SISTEMA");
            entity.Property(e => e.FechaVencimiento)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_VENCIMIENTO");
            entity.Property(e => e.HorasVencidas)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("HORAS_VENCIDAS");
            entity.Property(e => e.IdAr)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_AR");
            entity.Property(e => e.IdTecnico)
                .HasMaxLength(152)
                .IsUnicode(false)
                .HasColumnName("ID_TECNICO");
            entity.Property(e => e.Idamex)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IDAMEX");
            entity.Property(e => e.Modelo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("MODELO");
            entity.Property(e => e.ModeloInstalado)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("MODELO_INSTALADO");
            entity.Property(e => e.ModeloTerminalSale)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("MODELO_TERMINAL_SALE");
            entity.Property(e => e.MotivoCancelacion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("MOTIVO_CANCELACION");
            entity.Property(e => e.MotivoRechazo)
                .IsUnicode(false)
                .HasColumnName("MOTIVO_RECHAZO");
            entity.Property(e => e.Nivel)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("NIVEL");
            entity.Property(e => e.NivelSla)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("NIVEL_SLA");
            entity.Property(e => e.NumSerieSimEntra)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("NUM_SERIE_SIM_ENTRA");
            entity.Property(e => e.NumSerieSimSale)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("NUM_SERIE_SIM_SALE");
            entity.Property(e => e.NumSerieTerminalEntra)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("NUM_SERIE_TERMINAL_ENTRA");
            entity.Property(e => e.NumSerieTerminalMto)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("NUM_SERIE_TERMINAL_MTO");
            entity.Property(e => e.NumSerieTerminalSale)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("NUM_SERIE_TERMINAL_SALE");
            entity.Property(e => e.Observaciones)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("OBSERVACIONES");
            entity.Property(e => e.Odt)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ODT");
            entity.Property(e => e.Poblacion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("POBLACION");
            entity.Property(e => e.Producto)
                .IsUnicode(false)
                .HasColumnName("PRODUCTO");
            entity.Property(e => e.Proveedor)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("PROVEEDOR");
            entity.Property(e => e.RazonSocial)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RAZON_SOCIAL");
            entity.Property(e => e.Rechazo)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("RECHAZO");
            entity.Property(e => e.Rfc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RFC");
            entity.Property(e => e.RolloEntregados)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ROLLO_ENTREGADOS");
            entity.Property(e => e.RollosAInstalar).HasColumnName("ROLLOS_A_INSTALAR");
            entity.Property(e => e.SlaFijo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SLA_FIJO");
            entity.Property(e => e.SubTipoServicio)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("SUB_TIPO_SERVICIO");
            entity.Property(e => e.Telefono)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");
            entity.Property(e => e.TelefonosEnCampo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TELEFONOS_EN_CAMPO");
            entity.Property(e => e.TidAmexCierre)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("TID_AMEX_CIERRE");
            entity.Property(e => e.TiempoEnAtender)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("TIEMPO_EN_ATENDER");
            entity.Property(e => e.TieneAmex)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("TIENE_AMEX");
            entity.Property(e => e.TipoAB)
                .IsUnicode(false)
                .HasColumnName("TIPO_A_B");
            entity.Property(e => e.TipoCarga)
                .IsRequired()
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("TIPO_CARGA");
            entity.Property(e => e.TipoComercio)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("TIPO_COMERCIO");
            entity.Property(e => e.TipoComercio2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TIPO_COMERCIO_2");
            entity.Property(e => e.TipoServicio)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("TIPO_SERVICIO");
            entity.Property(e => e.Versionsw)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("VERSIONSW");
            entity.Property(e => e.Zona)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZONA");
        });

        modelBuilder.Entity<LayoutReplicasRechazo>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("LAYOUT_REPLICAS_RECHAZOS");

            entity.Property(e => e.Afiliacion)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("AFILIACION");
            entity.Property(e => e.CausaRechazo)
                .IsUnicode(false)
                .HasColumnName("CAUSA_RECHAZO");
            entity.Property(e => e.Conclusiones)
                .HasMaxLength(3000)
                .IsUnicode(false)
                .HasColumnName("CONCLUSIONES");
            entity.Property(e => e.DiasSinInstalar).HasColumnName("DIAS_SIN_INSTALAR");
            entity.Property(e => e.EjecutivoKa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("EJECUTIVO_KA");
            entity.Property(e => e.Estatus)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ESTATUS");
            entity.Property(e => e.FechaAlta)
                .HasColumnType("date")
                .HasColumnName("FECHA_ALTA");
            entity.Property(e => e.FechaGeneracion)
                .HasColumnType("date")
                .HasColumnName("FECHA_GENERACION");
            entity.Property(e => e.IdCaja)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ID_CAJA");
            entity.Property(e => e.IdEquipo)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ID_EQUIPO");
            entity.Property(e => e.Odt)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ODT");
            entity.Property(e => e.SubRechazo)
                .IsUnicode(false)
                .HasColumnName("SUB_RECHAZO");
            entity.Property(e => e.SubTipoServicio)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("SUB_TIPO_SERVICIO");
            entity.Property(e => e.Zona)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZONA");
        });

        modelBuilder.Entity<LogBdNegocio>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("log_bd_negocios");

            entity.Property(e => e.Aproximado).HasColumnName("APROXIMADO");
            entity.Property(e => e.CalleNumFiscal)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("CALLE_NUM_FISCAL");
            entity.Property(e => e.Colonia)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("COLONIA");
            entity.Property(e => e.ColoniaFiscal)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("COLONIA_FISCAL");
            entity.Property(e => e.CorreoEjecutivo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CORREO_EJECUTIVO");
            entity.Property(e => e.Cp)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("CP");
            entity.Property(e => e.CpFiscal)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("CP_FISCAL");
            entity.Property(e => e.DescNegocio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_NEGOCIO");
            entity.Property(e => e.Direccion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");
            entity.Property(e => e.Estado)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ESTADO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.FecAltaIguala)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA_IGUALA");
            entity.Property(e => e.FecBajaIguala)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_BAJA_IGUALA");
            entity.Property(e => e.FecUpdate)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_UPDATE");
            entity.Property(e => e.GradoError)
                .HasColumnType("numeric(20, 10)")
                .HasColumnName("GRADO_ERROR");
            entity.Property(e => e.IdCargaAlta).HasColumnName("ID_CARGA_ALTA");
            entity.Property(e => e.IdCargaStatus).HasColumnName("ID_CARGA_STATUS");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdEstado).HasColumnName("ID_ESTADO");
            entity.Property(e => e.IdEstadoFiscal)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("ID_ESTADO_FISCAL");
            entity.Property(e => e.IdHorarioAcceso).HasColumnName("ID_HORARIO_ACCESO");
            entity.Property(e => e.IdHorarioUptime).HasColumnName("ID_HORARIO_UPTIME");
            entity.Property(e => e.IdMoneda).HasColumnName("ID_MONEDA");
            entity.Property(e => e.IdNegocio)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_NEGOCIO");
            entity.Property(e => e.IdRegion).HasColumnName("ID_REGION");
            entity.Property(e => e.IdSegmento).HasColumnName("ID_SEGMENTO");
            entity.Property(e => e.IdTipoCobroNegocio).HasColumnName("ID_TIPO_COBRO_NEGOCIO");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.IdUsuarioUpdate).HasColumnName("ID_USUARIO_UPDATE");
            entity.Property(e => e.IdZona).HasColumnName("ID_ZONA");
            entity.Property(e => e.Latitud)
                .HasColumnType("numeric(20, 15)")
                .HasColumnName("LATITUD");
            entity.Property(e => e.Longitud)
                .HasColumnType("numeric(20, 15)")
                .HasColumnName("LONGITUD");
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.NombreFiscal)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("NOMBRE_FISCAL");
            entity.Property(e => e.Poblacion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("POBLACION");
            entity.Property(e => e.PoblacionFiscal)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("POBLACION_FISCAL");
            entity.Property(e => e.Precio)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("PRECIO");
            entity.Property(e => e.RazonSocial)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RAZON_SOCIAL");
            entity.Property(e => e.RfcFiscal)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RFC_FISCAL");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.Telefono)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");
        });

        modelBuilder.Entity<LogBdNegocios2>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("log_bd_negocios_2");

            entity.Property(e => e.Aproximado).HasColumnName("APROXIMADO");
            entity.Property(e => e.CalleNumFiscal)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("CALLE_NUM_FISCAL");
            entity.Property(e => e.Colonia)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("COLONIA");
            entity.Property(e => e.ColoniaFiscal)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("COLONIA_FISCAL");
            entity.Property(e => e.CorreoEjecutivo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CORREO_EJECUTIVO");
            entity.Property(e => e.Cp)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("CP");
            entity.Property(e => e.CpFiscal)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("CP_FISCAL");
            entity.Property(e => e.DescNegocio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_NEGOCIO");
            entity.Property(e => e.Direccion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");
            entity.Property(e => e.Estado)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ESTADO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.FecAltaIguala)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA_IGUALA");
            entity.Property(e => e.FecBajaIguala)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_BAJA_IGUALA");
            entity.Property(e => e.FecUpdate)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_UPDATE");
            entity.Property(e => e.GradoError)
                .HasColumnType("numeric(20, 10)")
                .HasColumnName("GRADO_ERROR");
            entity.Property(e => e.IdCargaAlta).HasColumnName("ID_CARGA_ALTA");
            entity.Property(e => e.IdCargaStatus).HasColumnName("ID_CARGA_STATUS");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdEstado).HasColumnName("ID_ESTADO");
            entity.Property(e => e.IdEstadoFiscal)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("ID_ESTADO_FISCAL");
            entity.Property(e => e.IdHorarioAcceso).HasColumnName("ID_HORARIO_ACCESO");
            entity.Property(e => e.IdHorarioUptime).HasColumnName("ID_HORARIO_UPTIME");
            entity.Property(e => e.IdMoneda).HasColumnName("ID_MONEDA");
            entity.Property(e => e.IdNegocio)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_NEGOCIO");
            entity.Property(e => e.IdRegion).HasColumnName("ID_REGION");
            entity.Property(e => e.IdSegmento).HasColumnName("ID_SEGMENTO");
            entity.Property(e => e.IdTipoCobroNegocio).HasColumnName("ID_TIPO_COBRO_NEGOCIO");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.IdUsuarioUpdate).HasColumnName("ID_USUARIO_UPDATE");
            entity.Property(e => e.IdZona).HasColumnName("ID_ZONA");
            entity.Property(e => e.Latitud)
                .HasColumnType("numeric(20, 15)")
                .HasColumnName("LATITUD");
            entity.Property(e => e.Longitud)
                .HasColumnType("numeric(20, 15)")
                .HasColumnName("LONGITUD");
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.NombreFiscal)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("NOMBRE_FISCAL");
            entity.Property(e => e.Poblacion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("POBLACION");
            entity.Property(e => e.PoblacionFiscal)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("POBLACION_FISCAL");
            entity.Property(e => e.Precio)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("PRECIO");
            entity.Property(e => e.RazonSocial)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RAZON_SOCIAL");
            entity.Property(e => e.RfcFiscal)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RFC_FISCAL");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.Telefono)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");
        });

        modelBuilder.Entity<LogBdNegocios3>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("log_bd_negocios_3");

            entity.Property(e => e.Aproximado).HasColumnName("APROXIMADO");
            entity.Property(e => e.CalleNumFiscal)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("CALLE_NUM_FISCAL");
            entity.Property(e => e.Colonia)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("COLONIA");
            entity.Property(e => e.ColoniaFiscal)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("COLONIA_FISCAL");
            entity.Property(e => e.CorreoEjecutivo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CORREO_EJECUTIVO");
            entity.Property(e => e.Cp)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("CP");
            entity.Property(e => e.CpFiscal)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("CP_FISCAL");
            entity.Property(e => e.DescNegocio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_NEGOCIO");
            entity.Property(e => e.Direccion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");
            entity.Property(e => e.Estado)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ESTADO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.FecAltaIguala)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA_IGUALA");
            entity.Property(e => e.FecBajaIguala)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_BAJA_IGUALA");
            entity.Property(e => e.FecUpdate)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_UPDATE");
            entity.Property(e => e.GradoError)
                .HasColumnType("numeric(20, 10)")
                .HasColumnName("GRADO_ERROR");
            entity.Property(e => e.IdCargaAlta).HasColumnName("ID_CARGA_ALTA");
            entity.Property(e => e.IdCargaStatus).HasColumnName("ID_CARGA_STATUS");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdEstado).HasColumnName("ID_ESTADO");
            entity.Property(e => e.IdEstadoFiscal)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("ID_ESTADO_FISCAL");
            entity.Property(e => e.IdHorarioAcceso).HasColumnName("ID_HORARIO_ACCESO");
            entity.Property(e => e.IdHorarioUptime).HasColumnName("ID_HORARIO_UPTIME");
            entity.Property(e => e.IdMoneda).HasColumnName("ID_MONEDA");
            entity.Property(e => e.IdNegocio)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_NEGOCIO");
            entity.Property(e => e.IdRegion).HasColumnName("ID_REGION");
            entity.Property(e => e.IdSegmento).HasColumnName("ID_SEGMENTO");
            entity.Property(e => e.IdTipoCobroNegocio).HasColumnName("ID_TIPO_COBRO_NEGOCIO");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.IdUsuarioUpdate).HasColumnName("ID_USUARIO_UPDATE");
            entity.Property(e => e.IdZona).HasColumnName("ID_ZONA");
            entity.Property(e => e.Latitud)
                .HasColumnType("numeric(20, 15)")
                .HasColumnName("LATITUD");
            entity.Property(e => e.Longitud)
                .HasColumnType("numeric(20, 15)")
                .HasColumnName("LONGITUD");
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.NombreFiscal)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("NOMBRE_FISCAL");
            entity.Property(e => e.Poblacion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("POBLACION");
            entity.Property(e => e.PoblacionFiscal)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("POBLACION_FISCAL");
            entity.Property(e => e.Precio)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("PRECIO");
            entity.Property(e => e.RazonSocial)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RAZON_SOCIAL");
            entity.Property(e => e.RfcFiscal)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RFC_FISCAL");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.Telefono)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");
        });

        modelBuilder.Entity<MfDispersionIngenierium>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MF_DISPERSION_INGENIERIA");

            entity.Property(e => e.Curp)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CURP");
            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdTecnico).HasColumnName("ID_TECNICO");
            entity.Property(e => e.Month).HasColumnName("MONTH");
            entity.Property(e => e.Prorrateo).HasColumnName("PRORRATEO");
            entity.Property(e => e.Year).HasColumnName("YEAR");
        });

        modelBuilder.Entity<ModeloConect>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MODELO_CONECT");

            entity.Property(e => e.Conectividad)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("CONECTIVIDAD");
            entity.Property(e => e.IdModelo).HasColumnName("id_modelo");
        });

        modelBuilder.Entity<NegociosBanamex>(entity =>
        {
            entity.ToTable("NEGOCIOS_BANAMEX");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Colonia)
                .HasMaxLength(255)
                .HasColumnName("COLONIA");
            entity.Property(e => e.Cp).HasColumnName("CP");
            entity.Property(e => e.DescNegocio)
                .HasMaxLength(255)
                .HasColumnName("DESC_NEGOCIO");
            entity.Property(e => e.Direccion)
                .HasMaxLength(255)
                .HasColumnName("DIRECCION");
            entity.Property(e => e.Estado)
                .HasMaxLength(255)
                .HasColumnName("ESTADO");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdEstado).HasColumnName("ID_ESTADO");
            entity.Property(e => e.IdRegion).HasColumnName("ID_REGION");
            entity.Property(e => e.IdSegmento).HasColumnName("ID_SEGMENTO");
            entity.Property(e => e.IdZona).HasColumnName("ID_ZONA");
            entity.Property(e => e.IsDuplicated).HasColumnName("IS_DUPLICATED");
            entity.Property(e => e.NoAfiliacion).HasColumnName("NO_AFILIACION");
            entity.Property(e => e.Poblacion)
                .HasMaxLength(255)
                .HasColumnName("POBLACION");
            entity.Property(e => e.Telefono).HasColumnName("TELEFONO");
        });

        modelBuilder.Entity<NegociosBansefi>(entity =>
        {
            entity.ToTable("NEGOCIOS_BANSEFI");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Colonia)
                .HasMaxLength(255)
                .HasColumnName("COLONIA");
            entity.Property(e => e.Cp)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("CP");
            entity.Property(e => e.DescNegocio)
                .HasMaxLength(255)
                .HasColumnName("DESC_NEGOCIO");
            entity.Property(e => e.Direccion)
                .HasMaxLength(255)
                .HasColumnName("DIRECCION");
            entity.Property(e => e.Estado)
                .HasMaxLength(255)
                .HasColumnName("ESTADO");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdEstado).HasColumnName("ID_ESTADO");
            entity.Property(e => e.IdHorarioAcceso).HasColumnName("ID_HORARIO_ACCESO");
            entity.Property(e => e.IdHorarioUptime).HasColumnName("ID_HORARIO_UPTIME");
            entity.Property(e => e.IdRegion).HasColumnName("ID_REGION");
            entity.Property(e => e.IdSegmento).HasColumnName("ID_SEGMENTO");
            entity.Property(e => e.IdZona).HasColumnName("ID_ZONA");
            entity.Property(e => e.IsDuplicated).HasColumnName("IS_DUPLICATED");
            entity.Property(e => e.IsProcesada).HasColumnName("IS_PROCESADA");
            entity.Property(e => e.IsSystemDuplicated).HasColumnName("IS_SYSTEM_DUPLICATED");
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.Poblacion)
                .HasMaxLength(255)
                .HasColumnName("POBLACION");
            entity.Property(e => e.Telefono)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");
        });

        modelBuilder.Entity<NegociosBbva>(entity =>
        {
            entity.ToTable("NEGOCIOS_BBVA");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Colonia)
                .HasMaxLength(255)
                .HasColumnName("COLONIA");
            entity.Property(e => e.Cp)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("CP");
            entity.Property(e => e.DescNegocio)
                .HasMaxLength(255)
                .HasColumnName("DESC_NEGOCIO");
            entity.Property(e => e.Direccion)
                .HasMaxLength(255)
                .HasColumnName("DIRECCION");
            entity.Property(e => e.Estado)
                .HasMaxLength(255)
                .HasColumnName("ESTADO");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdEstado).HasColumnName("ID_ESTADO");
            entity.Property(e => e.IdRegion).HasColumnName("ID_REGION");
            entity.Property(e => e.IdSegmento).HasColumnName("ID_SEGMENTO");
            entity.Property(e => e.IdZona).HasColumnName("ID_ZONA");
            entity.Property(e => e.IsDuplicated).HasColumnName("IS_DUPLICATED");
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.Poblacion)
                .HasMaxLength(255)
                .HasColumnName("POBLACION");
            entity.Property(e => e.Telefono)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");
        });

        modelBuilder.Entity<NegociosBbvaWincor>(entity =>
        {
            entity.ToTable("NEGOCIOS_BBVA_WINCOR");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Colonia)
                .HasMaxLength(255)
                .HasColumnName("COLONIA");
            entity.Property(e => e.Cp)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("CP");
            entity.Property(e => e.DescNegocio)
                .HasMaxLength(255)
                .HasColumnName("DESC_NEGOCIO");
            entity.Property(e => e.Direccion)
                .HasMaxLength(255)
                .HasColumnName("DIRECCION");
            entity.Property(e => e.Estado)
                .HasMaxLength(255)
                .HasColumnName("ESTADO");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdEstado).HasColumnName("ID_ESTADO");
            entity.Property(e => e.IdRegion).HasColumnName("ID_REGION");
            entity.Property(e => e.IdSegmento).HasColumnName("ID_SEGMENTO");
            entity.Property(e => e.IdZona).HasColumnName("ID_ZONA");
            entity.Property(e => e.IsDuplicated).HasColumnName("IS_DUPLICATED");
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.Poblacion)
                .HasMaxLength(255)
                .HasColumnName("POBLACION");
            entity.Property(e => e.Telefono)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");
        });

        modelBuilder.Entity<NegociosBmxAtm>(entity =>
        {
            entity.ToTable("NEGOCIOS_BMX_ATM");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Colonia)
                .HasMaxLength(255)
                .HasColumnName("COLONIA");
            entity.Property(e => e.Cp)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("CP");
            entity.Property(e => e.DescNegocio)
                .HasMaxLength(255)
                .HasColumnName("DESC_NEGOCIO");
            entity.Property(e => e.Direccion)
                .HasMaxLength(255)
                .HasColumnName("DIRECCION");
            entity.Property(e => e.Estado)
                .HasMaxLength(255)
                .HasColumnName("ESTADO");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdEstado).HasColumnName("ID_ESTADO");
            entity.Property(e => e.IdHorarioAcceso).HasColumnName("ID_HORARIO_ACCESO");
            entity.Property(e => e.IdHorarioUptime).HasColumnName("ID_HORARIO_UPTIME");
            entity.Property(e => e.IdRegion).HasColumnName("ID_REGION");
            entity.Property(e => e.IdSegmento).HasColumnName("ID_SEGMENTO");
            entity.Property(e => e.IdZona).HasColumnName("ID_ZONA");
            entity.Property(e => e.IsDuplicated).HasColumnName("IS_DUPLICATED");
            entity.Property(e => e.IsProcesada).HasColumnName("IS_PROCESADA");
            entity.Property(e => e.IsSystemDuplicated).HasColumnName("IS_SYSTEM_DUPLICATED");
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.Poblacion)
                .HasMaxLength(255)
                .HasColumnName("POBLACION");
            entity.Property(e => e.Telefono)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");
        });

        modelBuilder.Entity<NegociosBmxpl>(entity =>
        {
            entity.ToTable("NEGOCIOS_BMXPL");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Colonia)
                .HasMaxLength(255)
                .HasColumnName("COLONIA");
            entity.Property(e => e.Cp)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("CP");
            entity.Property(e => e.DescNegocio)
                .HasMaxLength(255)
                .HasColumnName("DESC_NEGOCIO");
            entity.Property(e => e.Direccion)
                .HasMaxLength(255)
                .HasColumnName("DIRECCION");
            entity.Property(e => e.Estado)
                .HasMaxLength(255)
                .HasColumnName("ESTADO");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdEstado).HasColumnName("ID_ESTADO");
            entity.Property(e => e.IdHorarioAcceso).HasColumnName("ID_HORARIO_ACCESO");
            entity.Property(e => e.IdHorarioUptime).HasColumnName("ID_HORARIO_UPTIME");
            entity.Property(e => e.IdRegion).HasColumnName("ID_REGION");
            entity.Property(e => e.IdSegmento).HasColumnName("ID_SEGMENTO");
            entity.Property(e => e.IdZona).HasColumnName("ID_ZONA");
            entity.Property(e => e.IsDuplicated).HasColumnName("IS_DUPLICATED");
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.Poblacion)
                .HasMaxLength(255)
                .HasColumnName("POBLACION");
            entity.Property(e => e.Telefono)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");
        });

        modelBuilder.Entity<NegociosBmxtnm>(entity =>
        {
            entity.ToTable("NEGOCIOS_BMXTNM");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Colonia)
                .HasMaxLength(255)
                .HasColumnName("COLONIA");
            entity.Property(e => e.Cp).HasColumnName("CP");
            entity.Property(e => e.DescNegocio)
                .HasMaxLength(255)
                .HasColumnName("DESC_NEGOCIO");
            entity.Property(e => e.Direccion)
                .HasMaxLength(255)
                .HasColumnName("DIRECCION");
            entity.Property(e => e.Estado)
                .HasMaxLength(255)
                .HasColumnName("ESTADO");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdEstado).HasColumnName("ID_ESTADO");
            entity.Property(e => e.IdRegion).HasColumnName("ID_REGION");
            entity.Property(e => e.IdSegmento).HasColumnName("ID_SEGMENTO");
            entity.Property(e => e.IdZona).HasColumnName("ID_ZONA");
            entity.Property(e => e.IsDuplicated).HasColumnName("IS_DUPLICATED");
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(50)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.Poblacion)
                .HasMaxLength(255)
                .HasColumnName("POBLACION");
            entity.Property(e => e.Telefono).HasColumnName("TELEFONO");
        });

        modelBuilder.Entity<NegociosFujitsuBajio>(entity =>
        {
            entity.ToTable("NEGOCIOS_FUJITSU_BAJIO");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Colonia)
                .HasMaxLength(255)
                .HasColumnName("COLONIA");
            entity.Property(e => e.Cp)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("CP");
            entity.Property(e => e.DescNegocio)
                .HasMaxLength(255)
                .HasColumnName("DESC_NEGOCIO");
            entity.Property(e => e.Direccion)
                .HasMaxLength(255)
                .HasColumnName("DIRECCION");
            entity.Property(e => e.Estado)
                .HasMaxLength(255)
                .HasColumnName("ESTADO");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdEstado).HasColumnName("ID_ESTADO");
            entity.Property(e => e.IdRegion).HasColumnName("ID_REGION");
            entity.Property(e => e.IdSegmento).HasColumnName("ID_SEGMENTO");
            entity.Property(e => e.IdZona).HasColumnName("ID_ZONA");
            entity.Property(e => e.IsDuplicated).HasColumnName("IS_DUPLICATED");
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.Poblacion)
                .HasMaxLength(255)
                .HasColumnName("POBLACION");
            entity.Property(e => e.Telefono)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");
        });

        modelBuilder.Entity<NegociosFujitsuBanjercito>(entity =>
        {
            entity.ToTable("NEGOCIOS_FUJITSU_BANJERCITO");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Colonia)
                .HasMaxLength(255)
                .HasColumnName("COLONIA");
            entity.Property(e => e.Cp)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("CP");
            entity.Property(e => e.DescNegocio)
                .HasMaxLength(255)
                .HasColumnName("DESC_NEGOCIO");
            entity.Property(e => e.Direccion)
                .HasMaxLength(255)
                .HasColumnName("DIRECCION");
            entity.Property(e => e.Estado)
                .HasMaxLength(255)
                .HasColumnName("ESTADO");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdEstado).HasColumnName("ID_ESTADO");
            entity.Property(e => e.IdRegion).HasColumnName("ID_REGION");
            entity.Property(e => e.IdSegmento).HasColumnName("ID_SEGMENTO");
            entity.Property(e => e.IdZona).HasColumnName("ID_ZONA");
            entity.Property(e => e.IsDuplicated).HasColumnName("IS_DUPLICATED");
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.Poblacion)
                .HasMaxLength(255)
                .HasColumnName("POBLACION");
            entity.Property(e => e.Telefono)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");
        });

        modelBuilder.Entity<NegociosFujitsuHsbc>(entity =>
        {
            entity.ToTable("NEGOCIOS_FUJITSU_HSBC");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Colonia)
                .HasMaxLength(255)
                .HasColumnName("COLONIA");
            entity.Property(e => e.Cp)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("CP");
            entity.Property(e => e.DescNegocio)
                .HasMaxLength(255)
                .HasColumnName("DESC_NEGOCIO");
            entity.Property(e => e.Direccion)
                .HasMaxLength(255)
                .HasColumnName("DIRECCION");
            entity.Property(e => e.Estado)
                .HasMaxLength(255)
                .HasColumnName("ESTADO");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdEstado).HasColumnName("ID_ESTADO");
            entity.Property(e => e.IdRegion).HasColumnName("ID_REGION");
            entity.Property(e => e.IdSegmento).HasColumnName("ID_SEGMENTO");
            entity.Property(e => e.IdZona).HasColumnName("ID_ZONA");
            entity.Property(e => e.IsDuplicated).HasColumnName("IS_DUPLICATED");
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.Poblacion)
                .HasMaxLength(255)
                .HasColumnName("POBLACION");
            entity.Property(e => e.Telefono)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");
        });

        modelBuilder.Entity<NegociosFujitsuInd>(entity =>
        {
            entity.ToTable("NEGOCIOS_FUJITSU_IND");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Colonia)
                .HasMaxLength(255)
                .HasColumnName("COLONIA");
            entity.Property(e => e.Cp)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("CP");
            entity.Property(e => e.DescNegocio)
                .HasMaxLength(255)
                .HasColumnName("DESC_NEGOCIO");
            entity.Property(e => e.Direccion)
                .HasMaxLength(255)
                .HasColumnName("DIRECCION");
            entity.Property(e => e.Estado)
                .HasMaxLength(255)
                .HasColumnName("ESTADO");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdEstado).HasColumnName("ID_ESTADO");
            entity.Property(e => e.IdRegion).HasColumnName("ID_REGION");
            entity.Property(e => e.IdSegmento).HasColumnName("ID_SEGMENTO");
            entity.Property(e => e.IdZona).HasColumnName("ID_ZONA");
            entity.Property(e => e.IsDuplicated).HasColumnName("IS_DUPLICATED");
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.Poblacion)
                .HasMaxLength(255)
                .HasColumnName("POBLACION");
            entity.Property(e => e.Telefono)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");
        });

        modelBuilder.Entity<NegociosGnp>(entity =>
        {
            entity.ToTable("NEGOCIOS_GNP");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Colonia)
                .HasMaxLength(255)
                .HasColumnName("COLONIA");
            entity.Property(e => e.Cp).HasColumnName("CP");
            entity.Property(e => e.DescNegocio)
                .HasMaxLength(255)
                .HasColumnName("DESC_NEGOCIO");
            entity.Property(e => e.Direccion)
                .HasMaxLength(255)
                .HasColumnName("DIRECCION");
            entity.Property(e => e.Estado)
                .HasMaxLength(255)
                .HasColumnName("ESTADO");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdEstado).HasColumnName("ID_ESTADO");
            entity.Property(e => e.IdRegion).HasColumnName("ID_REGION");
            entity.Property(e => e.IdSegmento).HasColumnName("ID_SEGMENTO");
            entity.Property(e => e.IdZona).HasColumnName("ID_ZONA");
            entity.Property(e => e.IsDuplicated).HasColumnName("IS_DUPLICATED");
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(50)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.Poblacion)
                .HasMaxLength(255)
                .HasColumnName("POBLACION");
            entity.Property(e => e.Telefono).HasColumnName("TELEFONO");
        });

        modelBuilder.Entity<NegociosHsbc>(entity =>
        {
            entity.ToTable("NEGOCIOS_HSBC");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Colonia)
                .HasMaxLength(255)
                .HasColumnName("COLONIA");
            entity.Property(e => e.Cp).HasColumnName("CP");
            entity.Property(e => e.DescNegocio)
                .HasMaxLength(255)
                .HasColumnName("DESC_NEGOCIO");
            entity.Property(e => e.Direccion)
                .HasMaxLength(255)
                .HasColumnName("DIRECCION");
            entity.Property(e => e.Estado)
                .HasMaxLength(255)
                .HasColumnName("ESTADO");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdEstado).HasColumnName("ID_ESTADO");
            entity.Property(e => e.IdRegion).HasColumnName("ID_REGION");
            entity.Property(e => e.IdSegmento).HasColumnName("ID_SEGMENTO");
            entity.Property(e => e.IdZona).HasColumnName("ID_ZONA");
            entity.Property(e => e.IsDuplicated).HasColumnName("IS_DUPLICATED");
            entity.Property(e => e.NoAfiliacion).HasColumnName("NO_AFILIACION");
            entity.Property(e => e.Poblacion)
                .HasMaxLength(255)
                .HasColumnName("POBLACION");
            entity.Property(e => e.Telefono)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");
            entity.Property(e => e.Vip)
                .HasMaxLength(255)
                .HasColumnName("VIP");
        });

        modelBuilder.Entity<NegociosHsbcFujitsu>(entity =>
        {
            entity.ToTable("NEGOCIOS_HSBC_FUJITSU");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Colonia)
                .HasMaxLength(255)
                .HasColumnName("COLONIA");
            entity.Property(e => e.Cp)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("CP");
            entity.Property(e => e.DescNegocio)
                .HasMaxLength(255)
                .HasColumnName("DESC_NEGOCIO");
            entity.Property(e => e.Direccion)
                .HasMaxLength(255)
                .HasColumnName("DIRECCION");
            entity.Property(e => e.Estado)
                .HasMaxLength(255)
                .HasColumnName("ESTADO");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdEstado).HasColumnName("ID_ESTADO");
            entity.Property(e => e.IdHorarioAcceso).HasColumnName("ID_HORARIO_ACCESO");
            entity.Property(e => e.IdHorarioUptime).HasColumnName("ID_HORARIO_UPTIME");
            entity.Property(e => e.IdRegion).HasColumnName("ID_REGION");
            entity.Property(e => e.IdSegmento).HasColumnName("ID_SEGMENTO");
            entity.Property(e => e.IdZona).HasColumnName("ID_ZONA");
            entity.Property(e => e.IsDuplicated).HasColumnName("IS_DUPLICATED");
            entity.Property(e => e.IsProcesada).HasColumnName("IS_PROCESADA");
            entity.Property(e => e.IsSystemDuplicated).HasColumnName("IS_SYSTEM_DUPLICATED");
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.Poblacion)
                .HasMaxLength(255)
                .HasColumnName("POBLACION");
            entity.Property(e => e.Telefono)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");
        });

        modelBuilder.Entity<NegociosHsbcWincor>(entity =>
        {
            entity.ToTable("NEGOCIOS_HSBC_WINCOR");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Colonia)
                .HasMaxLength(255)
                .HasColumnName("COLONIA");
            entity.Property(e => e.Cp)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("CP");
            entity.Property(e => e.DescNegocio)
                .HasMaxLength(255)
                .HasColumnName("DESC_NEGOCIO");
            entity.Property(e => e.Direccion)
                .HasMaxLength(255)
                .HasColumnName("DIRECCION");
            entity.Property(e => e.Estado)
                .HasMaxLength(255)
                .HasColumnName("ESTADO");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdEstado).HasColumnName("ID_ESTADO");
            entity.Property(e => e.IdRegion).HasColumnName("ID_REGION");
            entity.Property(e => e.IdSegmento).HasColumnName("ID_SEGMENTO");
            entity.Property(e => e.IdZona).HasColumnName("ID_ZONA");
            entity.Property(e => e.IsDuplicated).HasColumnName("IS_DUPLICATED");
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.Poblacion)
                .HasMaxLength(255)
                .HasColumnName("POBLACION");
            entity.Property(e => e.Telefono)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");
        });

        modelBuilder.Entity<NegociosMontepio>(entity =>
        {
            entity.ToTable("NEGOCIOS_MONTEPIO");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Colonia)
                .HasMaxLength(255)
                .HasColumnName("COLONIA");
            entity.Property(e => e.Cp).HasColumnName("CP");
            entity.Property(e => e.DescNegocio)
                .HasMaxLength(255)
                .HasColumnName("DESC_NEGOCIO");
            entity.Property(e => e.Direccion)
                .HasMaxLength(255)
                .HasColumnName("DIRECCION");
            entity.Property(e => e.Estado)
                .HasMaxLength(255)
                .HasColumnName("ESTADO");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdEstado).HasColumnName("ID_ESTADO");
            entity.Property(e => e.IdRegion).HasColumnName("ID_REGION");
            entity.Property(e => e.IdSegmento).HasColumnName("ID_SEGMENTO");
            entity.Property(e => e.IdZona).HasColumnName("ID_ZONA");
            entity.Property(e => e.IsDuplicated).HasColumnName("IS_DUPLICATED");
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(50)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.Poblacion)
                .HasMaxLength(255)
                .HasColumnName("POBLACION");
            entity.Property(e => e.Telefono).HasColumnName("TELEFONO");
        });

        modelBuilder.Entity<NegociosSantander>(entity =>
        {
            entity.ToTable("NEGOCIOS_SANTANDER");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Colonia)
                .HasMaxLength(255)
                .HasColumnName("COLONIA");
            entity.Property(e => e.Cp)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("CP");
            entity.Property(e => e.DescNegocio)
                .HasMaxLength(255)
                .HasColumnName("DESC_NEGOCIO");
            entity.Property(e => e.Direccion)
                .HasMaxLength(255)
                .HasColumnName("DIRECCION");
            entity.Property(e => e.Estado)
                .HasMaxLength(255)
                .HasColumnName("ESTADO");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdEstado).HasColumnName("ID_ESTADO");
            entity.Property(e => e.IdRegion).HasColumnName("ID_REGION");
            entity.Property(e => e.IdSegmento).HasColumnName("ID_SEGMENTO");
            entity.Property(e => e.IdZona).HasColumnName("ID_ZONA");
            entity.Property(e => e.IsDuplicated).HasColumnName("IS_DUPLICATED");
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.Poblacion)
                .HasMaxLength(255)
                .HasColumnName("POBLACION");
            entity.Property(e => e.Telefono)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");
        });

        modelBuilder.Entity<NegociosSantanderWincor>(entity =>
        {
            entity.ToTable("NEGOCIOS_SANTANDER_WINCOR");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Colonia)
                .HasMaxLength(255)
                .HasColumnName("COLONIA");
            entity.Property(e => e.Cp)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("CP");
            entity.Property(e => e.DescNegocio)
                .HasMaxLength(255)
                .HasColumnName("DESC_NEGOCIO");
            entity.Property(e => e.Direccion)
                .HasMaxLength(255)
                .HasColumnName("DIRECCION");
            entity.Property(e => e.Estado)
                .HasMaxLength(255)
                .HasColumnName("ESTADO");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdEstado).HasColumnName("ID_ESTADO");
            entity.Property(e => e.IdRegion).HasColumnName("ID_REGION");
            entity.Property(e => e.IdSegmento).HasColumnName("ID_SEGMENTO");
            entity.Property(e => e.IdZona).HasColumnName("ID_ZONA");
            entity.Property(e => e.IsDuplicated).HasColumnName("IS_DUPLICATED");
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.Poblacion)
                .HasMaxLength(255)
                .HasColumnName("POBLACION");
            entity.Property(e => e.Telefono)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");
        });

        modelBuilder.Entity<NegociosSat>(entity =>
        {
            entity.ToTable("NEGOCIOS_SAT");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Colonia)
                .HasMaxLength(255)
                .HasColumnName("COLONIA");
            entity.Property(e => e.Cp)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("CP");
            entity.Property(e => e.DescNegocio)
                .HasMaxLength(255)
                .HasColumnName("DESC_NEGOCIO");
            entity.Property(e => e.Direccion)
                .HasMaxLength(255)
                .HasColumnName("DIRECCION");
            entity.Property(e => e.Estado)
                .HasMaxLength(255)
                .HasColumnName("ESTADO");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdEstado).HasColumnName("ID_ESTADO");
            entity.Property(e => e.IdHorarioAcceso).HasColumnName("ID_HORARIO_ACCESO");
            entity.Property(e => e.IdHorarioUptime).HasColumnName("ID_HORARIO_UPTIME");
            entity.Property(e => e.IdRegion).HasColumnName("ID_REGION");
            entity.Property(e => e.IdSegmento).HasColumnName("ID_SEGMENTO");
            entity.Property(e => e.IdZona).HasColumnName("ID_ZONA");
            entity.Property(e => e.IsDuplicated).HasColumnName("IS_DUPLICATED");
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.Poblacion)
                .HasMaxLength(255)
                .HasColumnName("POBLACION");
            entity.Property(e => e.Telefono)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");
        });

        modelBuilder.Entity<NegociosSoftel>(entity =>
        {
            entity.ToTable("NEGOCIOS_SOFTEL");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Colonia)
                .HasMaxLength(255)
                .HasColumnName("COLONIA");
            entity.Property(e => e.Cp)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("CP");
            entity.Property(e => e.DescNegocio)
                .HasMaxLength(255)
                .HasColumnName("DESC_NEGOCIO");
            entity.Property(e => e.Direccion)
                .HasMaxLength(255)
                .HasColumnName("DIRECCION");
            entity.Property(e => e.Estado)
                .HasMaxLength(255)
                .HasColumnName("ESTADO");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdEstado).HasColumnName("ID_ESTADO");
            entity.Property(e => e.IdHorarioAcceso).HasColumnName("ID_HORARIO_ACCESO");
            entity.Property(e => e.IdHorarioUptime).HasColumnName("ID_HORARIO_UPTIME");
            entity.Property(e => e.IdRegion).HasColumnName("ID_REGION");
            entity.Property(e => e.IdSegmento).HasColumnName("ID_SEGMENTO");
            entity.Property(e => e.IdZona).HasColumnName("ID_ZONA");
            entity.Property(e => e.IsDuplicated).HasColumnName("IS_DUPLICATED");
            entity.Property(e => e.IsProcesada).HasColumnName("IS_PROCESADA");
            entity.Property(e => e.IsSystemDuplicated).HasColumnName("IS_SYSTEM_DUPLICATED");
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(50)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.Poblacion)
                .HasMaxLength(255)
                .HasColumnName("POBLACION");
            entity.Property(e => e.Telefono).HasColumnName("TELEFONO");
        });

        modelBuilder.Entity<NegociosTelefonica>(entity =>
        {
            entity.ToTable("NEGOCIOS_TELEFONICA");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Colonia)
                .HasMaxLength(255)
                .HasColumnName("COLONIA");
            entity.Property(e => e.Cp)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("CP");
            entity.Property(e => e.DescNegocio)
                .HasMaxLength(255)
                .HasColumnName("DESC_NEGOCIO");
            entity.Property(e => e.Direccion)
                .HasMaxLength(255)
                .HasColumnName("DIRECCION");
            entity.Property(e => e.Estado)
                .HasMaxLength(255)
                .HasColumnName("ESTADO");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdEstado).HasColumnName("ID_ESTADO");
            entity.Property(e => e.IdRegion).HasColumnName("ID_REGION");
            entity.Property(e => e.IdSegmento).HasColumnName("ID_SEGMENTO");
            entity.Property(e => e.IdZona).HasColumnName("ID_ZONA");
            entity.Property(e => e.IsDuplicated).HasColumnName("IS_DUPLICATED");
            entity.Property(e => e.IsHorarioAcceso).HasColumnName("IS_HORARIO_ACCESO");
            entity.Property(e => e.IsHorarioUptime).HasColumnName("IS_HORARIO_UPTIME");
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.Poblacion)
                .HasMaxLength(255)
                .HasColumnName("POBLACION");
            entity.Property(e => e.Telefono)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");
        });

        modelBuilder.Entity<NoSeriesFaltante>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("NO_SERIES_FALTANTES");

            entity.Property(e => e.IdNoSeriesFaltantes)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_NO_SERIES_FALTANTES");
            entity.Property(e => e.NoSerie)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");
            entity.Property(e => e.SinInstalacionRetiro).HasColumnName("SIN_INSTALACION_RETIRO");
        });

        modelBuilder.Entity<Nomina>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("NOMINA");

            entity.Property(e => e.Curp)
                .IsRequired()
                .HasMaxLength(60)
                .IsFixedLength()
                .HasColumnName("CURP");
            entity.Property(e => e.FecAntiguedad)
                .HasColumnType("date")
                .HasColumnName("FEC_ANTIGUEDAD");
            entity.Property(e => e.FecBaja)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("FEC_BAJA");
            entity.Property(e => e.Fijo).HasColumnName("FIJO");
            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnName("id");
            entity.Property(e => e.Month).HasColumnName("MONTH");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(60)
                .IsFixedLength()
                .HasColumnName("NOMBRE");
            entity.Property(e => e.NumEmpleado).HasColumnName("NUM_EMPLEADO");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(1)
                .IsFixedLength()
                .HasColumnName("STATUS");
            entity.Property(e => e.Total).HasColumnName("TOTAL");
            entity.Property(e => e.Transporte).HasColumnName("TRANSPORTE");
            entity.Property(e => e.Variable).HasColumnName("VARIABLE");
            entity.Property(e => e.Year).HasColumnName("YEAR");
        });

        modelBuilder.Entity<Odt>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ODT");

            entity.Property(e => e.Ar)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AR");
        });

        modelBuilder.Entity<OdtTemporal>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ODT_TEMPORAL");

            entity.Property(e => e.AgregarDiasAtencion).HasColumnName("AGREGAR_DIAS_ATENCION");
            entity.Property(e => e.Atiende)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ATIENDE");
            entity.Property(e => e.AutorizadorRechazo)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("AUTORIZADOR_RECHAZO");
            entity.Property(e => e.Bitacora)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("BITACORA");
            entity.Property(e => e.CadenaCierre)
                .IsUnicode(false)
                .HasColumnName("CADENA_CIERRE");
            entity.Property(e => e.CadenaCierreEscrita)
                .HasMaxLength(3000)
                .IsUnicode(false)
                .HasColumnName("CADENA_CIERRE_ESCRITA");
            entity.Property(e => e.Caja)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("CAJA");
            entity.Property(e => e.CausaCancelacion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CAUSA_CANCELACION");
            entity.Property(e => e.CausaRechazo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CAUSA_RECHAZO");
            entity.Property(e => e.ClaveRechazo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CLAVE_RECHAZO");
            entity.Property(e => e.CodigoIntervencion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CODIGO_INTERVENCION");
            entity.Property(e => e.Colonia)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("COLONIA");
            entity.Property(e => e.Concepto)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CONCEPTO");
            entity.Property(e => e.CorreoEjecutivo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CORREO_EJECUTIVO");
            entity.Property(e => e.Cp)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("CP");
            entity.Property(e => e.DescCorta)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_CORTA");
            entity.Property(e => e.DescEquipo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_EQUIPO");
            entity.Property(e => e.DescNegocio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_NEGOCIO");
            entity.Property(e => e.DescripcionTrabajo)
                .HasMaxLength(3000)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_TRABAJO");
            entity.Property(e => e.DigitoVerificador)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("DIGITO_VERIFICADOR");
            entity.Property(e => e.Direccion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");
            entity.Property(e => e.DireccionAlternaComercio)
                .IsUnicode(false)
                .HasColumnName("DIRECCION_ALTERNA_COMERCIO");
            entity.Property(e => e.DueBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("due_by");
            entity.Property(e => e.Duracion).HasColumnName("DURACION");
            entity.Property(e => e.Equipo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("EQUIPO");
            entity.Property(e => e.Estado)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ESTADO");
            entity.Property(e => e.FallaEncontrada)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("FALLA_ENCONTRADA");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.FecAltaHorasAtencion)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA_HORAS_ATENCION");
            entity.Property(e => e.FecAltaReglaStatusAr)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA_REGLA_STATUS_AR");
            entity.Property(e => e.FecAtencion)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ATENCION");
            entity.Property(e => e.FecAtencionOriginal)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ATENCION_ORIGINAL");
            entity.Property(e => e.FecCarga)
                .HasColumnType("datetime")
                .HasColumnName("FEC_CARGA");
            entity.Property(e => e.FecCierre)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_CIERRE");
            entity.Property(e => e.FecConvenio)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_CONVENIO");
            entity.Property(e => e.FecFinIngeniero)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_FIN_INGENIERO");
            entity.Property(e => e.FecGarantia)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_GARANTIA");
            entity.Property(e => e.FecIniIngeniero)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_INI_INGENIERO");
            entity.Property(e => e.FecInicio)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_INICIO");
            entity.Property(e => e.FecIntento1)
                .HasColumnType("datetime")
                .HasColumnName("FEC_INTENTO_1");
            entity.Property(e => e.FecIntento2)
                .HasColumnType("datetime")
                .HasColumnName("FEC_INTENTO_2");
            entity.Property(e => e.FecIntento3)
                .HasColumnType("datetime")
                .HasColumnName("FEC_INTENTO_3");
            entity.Property(e => e.FecIntento4)
                .HasColumnType("datetime")
                .HasColumnName("FEC_INTENTO_4");
            entity.Property(e => e.FecLlegada)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_LLEGADA");
            entity.Property(e => e.FecLlegadaTerceros)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_LLEGADA_TERCEROS");
            entity.Property(e => e.FecStatusAr)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_STATUS_AR");
            entity.Property(e => e.FolioServicio)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FOLIO_SERVICIO");
            entity.Property(e => e.FolioTas)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("FOLIO_TAS");
            entity.Property(e => e.FolioTelecarga).HasColumnName("FOLIO_TELECARGA");
            entity.Property(e => e.FolioTir)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FOLIO_TIR");
            entity.Property(e => e.FolioValidacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FOLIO_VALIDACION");
            entity.Property(e => e.HoraAtencionFin).HasColumnName("HORA_ATENCION_FIN");
            entity.Property(e => e.HoraAtencionIni).HasColumnName("HORA_ATENCION_INI");
            entity.Property(e => e.HorasAtencion).HasColumnName("HORAS_ATENCION");
            entity.Property(e => e.HorasAtencionWincor)
                .HasColumnType("numeric(18, 0)")
                .HasColumnName("HORAS_ATENCION_WINCOR");
            entity.Property(e => e.HorasGarantia).HasColumnName("HORAS_GARANTIA");
            entity.Property(e => e.HorasGarantiaWincor)
                .HasColumnType("numeric(18, 0)")
                .HasColumnName("HORAS_GARANTIA_WINCOR");
            entity.Property(e => e.IdAplicativo).HasColumnName("ID_APLICATIVO");
            entity.Property(e => e.IdAr)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_AR");
            entity.Property(e => e.IdAttach1).HasColumnName("ID_ATTACH1");
            entity.Property(e => e.IdAttach2).HasColumnName("ID_ATTACH2");
            entity.Property(e => e.IdCalificaContacto).HasColumnName("ID_CALIFICA_CONTACTO");
            entity.Property(e => e.IdCalificaIntento1).HasColumnName("ID_CALIFICA_INTENTO_1");
            entity.Property(e => e.IdCalificaIntento2).HasColumnName("ID_CALIFICA_INTENTO_2");
            entity.Property(e => e.IdCalificaIntento3).HasColumnName("ID_CALIFICA_INTENTO_3");
            entity.Property(e => e.IdCalificaIntento4).HasColumnName("ID_CALIFICA_INTENTO_4");
            entity.Property(e => e.IdCarga).HasColumnName("ID_CARGA");
            entity.Property(e => e.IdCausa).HasColumnName("ID_CAUSA");
            entity.Property(e => e.IdCausaRechazo).HasColumnName("ID_CAUSA_RECHAZO");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdConcepto).HasColumnName("ID_CONCEPTO");
            entity.Property(e => e.IdConectividad).HasColumnName("ID_CONECTIVIDAD");
            entity.Property(e => e.IdDescripcionTrabajo).HasColumnName("ID_DESCRIPCION_TRABAJO");
            entity.Property(e => e.IdDispatcher).HasColumnName("ID_DISPATCHER");
            entity.Property(e => e.IdEquipoCliente).HasColumnName("ID_EQUIPO_CLIENTE");
            entity.Property(e => e.IdEspecifTipoFalla).HasColumnName("ID_ESPECIF_TIPO_FALLA");
            entity.Property(e => e.IdEspecificaCausaRechazo).HasColumnName("ID_ESPECIFICA_CAUSA_RECHAZO");
            entity.Property(e => e.IdEstado).HasColumnName("ID_ESTADO");
            entity.Property(e => e.IdFalla).HasColumnName("ID_FALLA");
            entity.Property(e => e.IdModeloFalla).HasColumnName("ID_MODELO_FALLA");
            entity.Property(e => e.IdModeloReq).HasColumnName("ID_MODELO_REQ");
            entity.Property(e => e.IdMoneda).HasColumnName("ID_MONEDA");
            entity.Property(e => e.IdNegocio).HasColumnName("ID_NEGOCIO");
            entity.Property(e => e.IdPlaza).HasColumnName("ID_PLAZA");
            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");
            entity.Property(e => e.IdProyecto).HasColumnName("ID_PROYECTO");
            entity.Property(e => e.IdRegion).HasColumnName("ID_REGION");
            entity.Property(e => e.IdReglaStatusAr).HasColumnName("ID_REGLA_STATUS_AR");
            entity.Property(e => e.IdReporteCierre).HasColumnName("ID_REPORTE_CIERRE");
            entity.Property(e => e.IdResponsableCancelacionProgramado).HasColumnName("ID_RESPONSABLE_CANCELACION_PROGRAMADO");
            entity.Property(e => e.IdSegmento).HasColumnName("ID_SEGMENTO");
            entity.Property(e => e.IdServicio).HasColumnName("ID_SERVICIO");
            entity.Property(e => e.IdSolucion).HasColumnName("ID_SOLUCION");
            entity.Property(e => e.IdStatusAr).HasColumnName("ID_STATUS_AR");
            entity.Property(e => e.IdStatusReasonCodes).HasColumnName("ID_STATUS_REASON_CODES");
            entity.Property(e => e.IdStatusValidacionPrefacturacion).HasColumnName("ID_STATUS_VALIDACION_PREFACTURACION");
            entity.Property(e => e.IdTecnico).HasColumnName("ID_TECNICO");
            entity.Property(e => e.IdTipoCobro).HasColumnName("ID_TIPO_COBRO");
            entity.Property(e => e.IdTipoEquipo).HasColumnName("ID_TIPO_EQUIPO");
            entity.Property(e => e.IdTipoFallaEncontrada).HasColumnName("ID_TIPO_FALLA_ENCONTRADA");
            entity.Property(e => e.IdTipoPlaza).HasColumnName("ID_TIPO_PLAZA");
            entity.Property(e => e.IdTipoPrecio).HasColumnName("ID_TIPO_PRECIO");
            entity.Property(e => e.IdTipoServicio).HasColumnName("ID_TIPO_SERVICIO");
            entity.Property(e => e.IdUnidadAtendida).HasColumnName("ID_UNIDAD_ATENDIDA");
            entity.Property(e => e.IdUsuarioCierre).HasColumnName("ID_USUARIO_CIERRE");
            entity.Property(e => e.IdZona).HasColumnName("ID_ZONA");
            entity.Property(e => e.Insumos).HasColumnName("INSUMOS");
            entity.Property(e => e.IntensidadSenial)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("INTENSIDAD_SENIAL");
            entity.Property(e => e.IntentoContacto).HasColumnName("INTENTO_CONTACTO");
            entity.Property(e => e.IsActualizacion).HasColumnName("IS_ACTUALIZACION");
            entity.Property(e => e.IsBoletin).HasColumnName("IS_BOLETIN");
            entity.Property(e => e.IsCobrable).HasColumnName("IS_COBRABLE");
            entity.Property(e => e.IsDuplicada).HasColumnName("IS_DUPLICADA");
            entity.Property(e => e.IsExito).HasColumnName("IS_EXITO");
            entity.Property(e => e.IsFollowDispatch).HasColumnName("IS_FOLLOW_DISPATCH");
            entity.Property(e => e.IsGarantia).HasColumnName("IS_GARANTIA");
            entity.Property(e => e.IsIngresoManual).HasColumnName("IS_INGRESO_MANUAL");
            entity.Property(e => e.IsInstalacion).HasColumnName("IS_INSTALACION");
            entity.Property(e => e.IsInterfazBancomer).HasColumnName("IS_INTERFAZ_BANCOMER");
            entity.Property(e => e.IsLocal).HasColumnName("IS_LOCAL");
            entity.Property(e => e.IsPdf).HasColumnName("IS_PDF");
            entity.Property(e => e.IsProgramado).HasColumnName("IS_PROGRAMADO");
            entity.Property(e => e.IsRetipificado).HasColumnName("IS_RETIPIFICADO");
            entity.Property(e => e.IsRetiro).HasColumnName("IS_RETIRO");
            entity.Property(e => e.IsSimRemplazada).HasColumnName("IS_SIM_REMPLAZADA");
            entity.Property(e => e.IsSoporteCliente).HasColumnName("IS_SOPORTE_CLIENTE");
            entity.Property(e => e.IsSustitucion).HasColumnName("IS_SUSTITUCION");
            entity.Property(e => e.IsTecnicoForaneo).HasColumnName("IS_TECNICO_FORANEO");
            entity.Property(e => e.MinsDowntime).HasColumnName("MINS_DOWNTIME");
            entity.Property(e => e.MotivoCobro)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("MOTIVO_COBRO");
            entity.Property(e => e.MotivoRetipificado)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("MOTIVO_RETIPIFICADO");
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.NoAr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AR");
            entity.Property(e => e.NoDiasLiberacion).HasColumnName("NO_DIAS_LIBERACION");
            entity.Property(e => e.NoEquipo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_EQUIPO");
            entity.Property(e => e.NoInventario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_INVENTARIO");
            entity.Property(e => e.NoInventarioFalla)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_INVENTARIO_FALLA");
            entity.Property(e => e.NoReincidencias).HasColumnName("NO_REINCIDENCIAS");
            entity.Property(e => e.NoSerie)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");
            entity.Property(e => e.NoSerieFalla)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE_FALLA");
            entity.Property(e => e.NoSim)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SIM");
            entity.Property(e => e.NotViaticos).HasColumnName("NOT_VIATICOS");
            entity.Property(e => e.NotasRemedy)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NOTAS_REMEDY");
            entity.Property(e => e.OtorganteSoporteCliente)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("OTORGANTE_SOPORTE_CLIENTE");
            entity.Property(e => e.OtorganteTas)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("OTORGANTE_TAS");
            entity.Property(e => e.OtorganteVobo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("OTORGANTE_VOBO");
            entity.Property(e => e.OtorganteVoboCliente)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("OTORGANTE_VOBO_CLIENTE");
            entity.Property(e => e.OtorganteVoboTerceros)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("OTORGANTE_VOBO_TERCEROS");
            entity.Property(e => e.PersonaAtenderaComercio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("PERSONA_ATENDERA_COMERCIO");
            entity.Property(e => e.Poblacion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("POBLACION");
            entity.Property(e => e.Precio)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("PRECIO");
            entity.Property(e => e.PrecioExito)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("PRECIO_EXITO");
            entity.Property(e => e.ProveedorAtenderaComercio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("PROVEEDOR_ATENDERA_COMERCIO");
            entity.Property(e => e.Responsable)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RESPONSABLE");
            entity.Property(e => e.Segmento).HasColumnName("SEGMENTO");
            entity.Property(e => e.Sintoma)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("SINTOMA");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.Telefono)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");
            entity.Property(e => e.TelefonoComercio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("TELEFONO_COMERCIO");
            entity.Property(e => e.TerminalAmex).HasColumnName("TERMINAL_AMEX");
            entity.Property(e => e.TipoFalla).HasColumnName("TIPO_FALLA");
            entity.Property(e => e.TipoServicio).HasColumnName("TIPO_SERVICIO");
            entity.Property(e => e.Traslado).HasColumnName("TRASLADO");
            entity.Property(e => e.VoltajeNeutro)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("VOLTAJE_NEUTRO");
            entity.Property(e => e.VoltajeTierra)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("VOLTAJE_TIERRA");
            entity.Property(e => e.VoltajeTierraNeutro)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("VOLTAJE_TIERRA_NEUTRO");
        });

        modelBuilder.Entity<Paso>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PASO");

            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.Ta).HasColumnName("TA");
            entity.Property(e => e.Tr).HasColumnName("TR");
            entity.Property(e => e.Ts).HasColumnName("TS");
        });

        modelBuilder.Entity<PendientesXRefacción>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("PENDIENTES_X_REFACCIÓN");

            entity.Property(e => e.Almacen)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ALMACEN");
            entity.Property(e => e.Anio).HasColumnName("ANIO");
            entity.Property(e => e.DescCliente)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_CLIENTE");
            entity.Property(e => e.DescProducto)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_PRODUCTO");
            entity.Property(e => e.DescTipoServicio)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_TIPO_SERVICIO");
            entity.Property(e => e.Dia).HasColumnName("DIA");
            entity.Property(e => e.DuracionPendienteXInsumo).HasColumnName("DURACION_PENDIENTE_X_INSUMO");
            entity.Property(e => e.DuracionPendienteXRefaccion).HasColumnName("DURACION_PENDIENTE_X_REFACCION");
            entity.Property(e => e.DuracionPendienteXSp).HasColumnName("DURACION_PENDIENTE_X_SP");
            entity.Property(e => e.DuracionPendienteXTerminal).HasColumnName("DURACION_PENDIENTE_X_TERMINAL");
            entity.Property(e => e.IdAlmacen).HasColumnName("ID_ALMACEN");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");
            entity.Property(e => e.IdTipoServicio).HasColumnName("ID_TIPO_SERVICIO");
            entity.Property(e => e.Mes).HasColumnName("MES");
            entity.Property(e => e.VecesPendienteXInsumo).HasColumnName("VECES_PENDIENTE_X_INSUMO");
            entity.Property(e => e.VecesPendienteXRefaccion).HasColumnName("VECES_PENDIENTE_X_REFACCION");
            entity.Property(e => e.VecesPendienteXSp).HasColumnName("VECES_PENDIENTE_X_SP");
            entity.Property(e => e.VecesPendienteXTerminal).HasColumnName("VECES_PENDIENTE_X_TERMINAL");
        });

        modelBuilder.Entity<PresupuestosCubo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PRESUPUESTOS_CUBO");

            entity.Property(e => e.CostoTotal)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("COSTO_TOTAL");
            entity.Property(e => e.GastosIndirectos)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("GASTOS_INDIRECTOS");
            entity.Property(e => e.GastosOperacion)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("GASTOS_OPERACION");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.ManoObra)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("MANO_OBRA");
            entity.Property(e => e.MargenContribucion)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("MARGEN_CONTRIBUCION");
            entity.Property(e => e.Mes)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MES");
            entity.Property(e => e.Penalizaciones)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("PENALIZACIONES");
            entity.Property(e => e.Refacciones)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("REFACCIONES");
            entity.Property(e => e.Tipo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TIPO");
            entity.Property(e => e.Utilidad)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("UTILIDAD");
            entity.Property(e => e.VentasBrutas)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("VENTAS_BRUTAS");
            entity.Property(e => e.VentasNetas)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("VENTAS_NETAS");
            entity.Property(e => e.Year).HasColumnName("YEAR");
        });

        modelBuilder.Entity<PresupuestosCuboConcepto>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PRESUPUESTOS_CUBO_CONCEPTOS");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdConcepto).HasColumnName("ID_CONCEPTO");
            entity.Property(e => e.IdRegion).HasColumnName("ID_REGION");
            entity.Property(e => e.Importe)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("IMPORTE");
            entity.Property(e => e.Tipo)
                .HasMaxLength(50)
                .HasColumnName("TIPO");
            entity.Property(e => e.Year).HasColumnName("YEAR");
        });

        modelBuilder.Entity<PresupuestosCuboNew>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PRESUPUESTOS_CUBO_NEW");

            entity.Property(e => e.CostoTotal)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("COSTO_TOTAL");
            entity.Property(e => e.GastosIndirectos)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("GASTOS_INDIRECTOS");
            entity.Property(e => e.GastosOperacion)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("GASTOS_OPERACION");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.ManoObra)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("MANO_OBRA");
            entity.Property(e => e.MargenContribucion)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("MARGEN_CONTRIBUCION");
            entity.Property(e => e.Mes)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MES");
            entity.Property(e => e.Penalizaciones)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("PENALIZACIONES");
            entity.Property(e => e.Refacciones)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("REFACCIONES");
            entity.Property(e => e.Tipo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TIPO");
            entity.Property(e => e.Utilidad)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("UTILIDAD");
            entity.Property(e => e.VentasBrutas)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("VENTAS_BRUTAS");
            entity.Property(e => e.VentasNetas)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("VENTAS_NETAS");
            entity.Property(e => e.Year).HasColumnName("YEAR");
        });

        modelBuilder.Entity<PresupuestosCuboNewProducto>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PRESUPUESTOS_CUBO_NEW_PRODUCTO");

            entity.Property(e => e.CostoTotal)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("COSTO_TOTAL");
            entity.Property(e => e.GastosIndirectos)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("GASTOS_INDIRECTOS");
            entity.Property(e => e.GastosOperacion)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("GASTOS_OPERACION");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");
            entity.Property(e => e.ManoObra)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("MANO_OBRA");
            entity.Property(e => e.MargenContribucion)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("MARGEN_CONTRIBUCION");
            entity.Property(e => e.Mes)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MES");
            entity.Property(e => e.Penalizaciones)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("PENALIZACIONES");
            entity.Property(e => e.Refacciones)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("REFACCIONES");
            entity.Property(e => e.Tipo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TIPO");
            entity.Property(e => e.Utilidad)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("UTILIDAD");
            entity.Property(e => e.VentasBrutas)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("VENTAS_BRUTAS");
            entity.Property(e => e.VentasNetas)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("VENTAS_NETAS");
            entity.Property(e => e.Year).HasColumnName("YEAR");
        });

        modelBuilder.Entity<PresupuestosCuboProducto>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PRESUPUESTOS_CUBO_PRODUCTO");

            entity.Property(e => e.CostoTotal)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("COSTO_TOTAL");
            entity.Property(e => e.GastosIndirectos)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("GASTOS_INDIRECTOS");
            entity.Property(e => e.GastosOperacion)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("GASTOS_OPERACION");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");
            entity.Property(e => e.ManoObra)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("MANO_OBRA");
            entity.Property(e => e.MargenContribucion)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("MARGEN_CONTRIBUCION");
            entity.Property(e => e.Mes)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MES");
            entity.Property(e => e.Penalizaciones)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("PENALIZACIONES");
            entity.Property(e => e.Refacciones)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("REFACCIONES");
            entity.Property(e => e.Tipo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TIPO");
            entity.Property(e => e.Utilidad)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("UTILIDAD");
            entity.Property(e => e.VentasBrutas)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("VENTAS_BRUTAS");
            entity.Property(e => e.VentasNetas)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("VENTAS_NETAS");
            entity.Property(e => e.Year).HasColumnName("YEAR");
        });

        modelBuilder.Entity<PresupuestosCuboRegion>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PRESUPUESTOS_CUBO_REGION");

            entity.Property(e => e.CostoTotal)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("COSTO_TOTAL");
            entity.Property(e => e.GastosIndirectos)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("GASTOS_INDIRECTOS");
            entity.Property(e => e.GastosOperacion)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("GASTOS_OPERACION");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdRegion).HasColumnName("ID_REGION");
            entity.Property(e => e.ManoObra)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("MANO_OBRA");
            entity.Property(e => e.MargenContribucion)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("MARGEN_CONTRIBUCION");
            entity.Property(e => e.Penalizaciones)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("PENALIZACIONES");
            entity.Property(e => e.Refacciones)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("REFACCIONES");
            entity.Property(e => e.Tipo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TIPO");
            entity.Property(e => e.Utilidad)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("UTILIDAD");
            entity.Property(e => e.VentasBrutas)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("VENTAS_BRUTAS");
            entity.Property(e => e.VentasNetas)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("VENTAS_NETAS");
            entity.Property(e => e.Year).HasColumnName("YEAR");
        });

        modelBuilder.Entity<Producto>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PRODUCTOS");

            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID");
            entity.Property(e => e.Producto1)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("PRODUCTO");
        });

        modelBuilder.Entity<ProsaCorregido>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PROSA_CORREGIDO");

            entity.Property(e => e.Colonia)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("COLONIA");
            entity.Property(e => e.Cp)
                .HasMaxLength(5)
                .IsFixedLength()
                .HasColumnName("CP");
            entity.Property(e => e.Estado)
                .HasMaxLength(30)
                .IsFixedLength()
                .HasColumnName("ESTADO");
            entity.Property(e => e.EstadoAbreviado)
                .HasMaxLength(60)
                .HasColumnName("ESTADO_ABREVIADO");
            entity.Property(e => e.Estatus)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("ESTATUS");
            entity.Property(e => e.FechaCarga)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_CARGA");
            entity.Property(e => e.IdCpProsa)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_CP_PROSA");
            entity.Property(e => e.Municipio)
                .HasMaxLength(60)
                .IsFixedLength()
                .HasColumnName("MUNICIPIO");
            entity.Property(e => e.MunicipioSepomex)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("MUNICIPIO_SEPOMEX");
            entity.Property(e => e.Poblacion)
                .HasMaxLength(60)
                .HasColumnName("POBLACION");
            entity.Property(e => e.Zona).HasColumnName("ZONA");
        });

        modelBuilder.Entity<ProvisionIngresoRegionProd>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PROVISION_INGRESO_REGION_PROD");

            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID");
            entity.Property(e => e.Ingreso).HasColumnName("INGRESO");
            entity.Property(e => e.Month).HasColumnName("MONTH");
            entity.Property(e => e.Producto)
                .HasMaxLength(30)
                .IsFixedLength()
                .HasColumnName("PRODUCTO");
            entity.Property(e => e.Region)
                .HasMaxLength(30)
                .IsFixedLength()
                .HasColumnName("REGION");
            entity.Property(e => e.Year).HasColumnName("YEAR");
        });

        modelBuilder.Entity<PruebaBorrar>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("prueba_borrar");

            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID");
            entity.Property(e => e.IdMenu0).HasColumnName("ID_MENU0");
            entity.Property(e => e.IdMenu1).HasColumnName("ID_MENU1");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
        });

        modelBuilder.Entity<PruebaErrore>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PRUEBA_ERRORES");

            entity.Property(e => e.Caso).HasColumnName("CASO");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.Status)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<PruebaFecha>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PRUEBA_FECHA");

            entity.Property(e => e.AgregarDiasAtencion).HasColumnName("AGREGAR_DIAS_ATENCION");
            entity.Property(e => e.Atiende)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ATIENDE");
            entity.Property(e => e.AutorizadorRechazo)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("AUTORIZADOR_RECHAZO");
            entity.Property(e => e.Bitacora)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("BITACORA");
            entity.Property(e => e.CadenaCierre)
                .IsUnicode(false)
                .HasColumnName("CADENA_CIERRE");
            entity.Property(e => e.CadenaCierreEscrita)
                .HasMaxLength(3000)
                .IsUnicode(false)
                .HasColumnName("CADENA_CIERRE_ESCRITA");
            entity.Property(e => e.Caja)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CAJA");
            entity.Property(e => e.CausaCancelacion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CAUSA_CANCELACION");
            entity.Property(e => e.CausaRechazo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CAUSA_RECHAZO");
            entity.Property(e => e.ClaveRechazo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CLAVE_RECHAZO");
            entity.Property(e => e.CodigoIntervencion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CODIGO_INTERVENCION");
            entity.Property(e => e.Colonia)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("COLONIA");
            entity.Property(e => e.Concepto)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CONCEPTO");
            entity.Property(e => e.CorreoEjecutivo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CORREO_EJECUTIVO");
            entity.Property(e => e.Cp)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("CP");
            entity.Property(e => e.DescCorta)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_CORTA");
            entity.Property(e => e.DescEquipo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_EQUIPO");
            entity.Property(e => e.DescNegocio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_NEGOCIO");
            entity.Property(e => e.DescripcionTrabajo)
                .HasMaxLength(3000)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_TRABAJO");
            entity.Property(e => e.DigitoVerificador)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("DIGITO_VERIFICADOR");
            entity.Property(e => e.Direccion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");
            entity.Property(e => e.DireccionAlternaComercio)
                .IsUnicode(false)
                .HasColumnName("DIRECCION_ALTERNA_COMERCIO");
            entity.Property(e => e.DueBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("due_by");
            entity.Property(e => e.Duracion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DURACION");
            entity.Property(e => e.Equipo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("EQUIPO");
            entity.Property(e => e.Estado)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ESTADO");
            entity.Property(e => e.FallaEncontrada)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("FALLA_ENCONTRADA");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.FecAltaHorasAtencion)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA_HORAS_ATENCION");
            entity.Property(e => e.FecAltaReglaStatusAr)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA_REGLA_STATUS_AR");
            entity.Property(e => e.FecAtencion)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ATENCION");
            entity.Property(e => e.FecAtencionOriginal)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ATENCION_ORIGINAL");
            entity.Property(e => e.FecCarga)
                .HasColumnType("datetime")
                .HasColumnName("FEC_CARGA");
            entity.Property(e => e.FecCierre)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_CIERRE");
            entity.Property(e => e.FecConvenio)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_CONVENIO");
            entity.Property(e => e.FecFinIngeniero)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_FIN_INGENIERO");
            entity.Property(e => e.FecGarantia)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_GARANTIA");
            entity.Property(e => e.FecIniIngeniero)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_INI_INGENIERO");
            entity.Property(e => e.FecInicio)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_INICIO");
            entity.Property(e => e.FecIntento1)
                .HasColumnType("datetime")
                .HasColumnName("FEC_INTENTO_1");
            entity.Property(e => e.FecIntento2)
                .HasColumnType("datetime")
                .HasColumnName("FEC_INTENTO_2");
            entity.Property(e => e.FecIntento3)
                .HasColumnType("datetime")
                .HasColumnName("FEC_INTENTO_3");
            entity.Property(e => e.FecIntento4)
                .HasColumnType("datetime")
                .HasColumnName("FEC_INTENTO_4");
            entity.Property(e => e.FecLlegada)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_LLEGADA");
            entity.Property(e => e.FecLlegadaTerceros)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_LLEGADA_TERCEROS");
            entity.Property(e => e.FecStatusAr)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_STATUS_AR");
            entity.Property(e => e.FolioServicio)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FOLIO_SERVICIO");
            entity.Property(e => e.FolioTas)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("FOLIO_TAS");
            entity.Property(e => e.FolioTelecarga).HasColumnName("FOLIO_TELECARGA");
            entity.Property(e => e.FolioTir)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FOLIO_TIR");
            entity.Property(e => e.FolioValidacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FOLIO_VALIDACION");
            entity.Property(e => e.HoraAtencionFin).HasColumnName("HORA_ATENCION_FIN");
            entity.Property(e => e.HoraAtencionIni).HasColumnName("HORA_ATENCION_INI");
            entity.Property(e => e.HorasAtencion).HasColumnName("HORAS_ATENCION");
            entity.Property(e => e.HorasAtencionWincor)
                .HasColumnType("numeric(18, 0)")
                .HasColumnName("HORAS_ATENCION_WINCOR");
            entity.Property(e => e.HorasGarantia).HasColumnName("HORAS_GARANTIA");
            entity.Property(e => e.HorasGarantiaWincor)
                .HasColumnType("numeric(18, 0)")
                .HasColumnName("HORAS_GARANTIA_WINCOR");
            entity.Property(e => e.IdAplicativo).HasColumnName("ID_APLICATIVO");
            entity.Property(e => e.IdAr)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_AR");
            entity.Property(e => e.IdArOriginal).HasColumnName("ID_AR_ORIGINAL");
            entity.Property(e => e.IdAttach1).HasColumnName("ID_ATTACH1");
            entity.Property(e => e.IdAttach2).HasColumnName("ID_ATTACH2");
            entity.Property(e => e.IdCalificaContacto).HasColumnName("ID_CALIFICA_CONTACTO");
            entity.Property(e => e.IdCalificaIntento1).HasColumnName("ID_CALIFICA_INTENTO_1");
            entity.Property(e => e.IdCalificaIntento2).HasColumnName("ID_CALIFICA_INTENTO_2");
            entity.Property(e => e.IdCalificaIntento3).HasColumnName("ID_CALIFICA_INTENTO_3");
            entity.Property(e => e.IdCalificaIntento4).HasColumnName("ID_CALIFICA_INTENTO_4");
            entity.Property(e => e.IdCarga).HasColumnName("ID_CARGA");
            entity.Property(e => e.IdCausa).HasColumnName("ID_CAUSA");
            entity.Property(e => e.IdCausaRechazo).HasColumnName("ID_CAUSA_RECHAZO");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdConcepto).HasColumnName("ID_CONCEPTO");
            entity.Property(e => e.IdConectividad).HasColumnName("ID_CONECTIVIDAD");
            entity.Property(e => e.IdDescripcionTrabajo).HasColumnName("ID_DESCRIPCION_TRABAJO");
            entity.Property(e => e.IdDispatcher).HasColumnName("ID_DISPATCHER");
            entity.Property(e => e.IdEquipoCliente).HasColumnName("ID_EQUIPO_CLIENTE");
            entity.Property(e => e.IdEspecifTipoFalla).HasColumnName("ID_ESPECIF_TIPO_FALLA");
            entity.Property(e => e.IdEspecificaCausaRechazo).HasColumnName("ID_ESPECIFICA_CAUSA_RECHAZO");
            entity.Property(e => e.IdEstado).HasColumnName("ID_ESTADO");
            entity.Property(e => e.IdFalla).HasColumnName("ID_FALLA");
            entity.Property(e => e.IdModeloFalla).HasColumnName("ID_MODELO_FALLA");
            entity.Property(e => e.IdModeloReq).HasColumnName("ID_MODELO_REQ");
            entity.Property(e => e.IdMoneda).HasColumnName("ID_MONEDA");
            entity.Property(e => e.IdNegocio).HasColumnName("ID_NEGOCIO");
            entity.Property(e => e.IdPlaza).HasColumnName("ID_PLAZA");
            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");
            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");
            entity.Property(e => e.IdProyecto).HasColumnName("ID_PROYECTO");
            entity.Property(e => e.IdRegion).HasColumnName("ID_REGION");
            entity.Property(e => e.IdReglaStatusAr).HasColumnName("ID_REGLA_STATUS_AR");
            entity.Property(e => e.IdReporteCierre).HasColumnName("ID_REPORTE_CIERRE");
            entity.Property(e => e.IdResponsableCancelacionProgramado).HasColumnName("ID_RESPONSABLE_CANCELACION_PROGRAMADO");
            entity.Property(e => e.IdSegmento).HasColumnName("ID_SEGMENTO");
            entity.Property(e => e.IdServicio).HasColumnName("ID_SERVICIO");
            entity.Property(e => e.IdSolucion).HasColumnName("ID_SOLUCION");
            entity.Property(e => e.IdStatusAr).HasColumnName("ID_STATUS_AR");
            entity.Property(e => e.IdStatusReasonCodes).HasColumnName("ID_STATUS_REASON_CODES");
            entity.Property(e => e.IdStatusValidacionPrefacturacion).HasColumnName("ID_STATUS_VALIDACION_PREFACTURACION");
            entity.Property(e => e.IdTecnico).HasColumnName("ID_TECNICO");
            entity.Property(e => e.IdTipoCobro).HasColumnName("ID_TIPO_COBRO");
            entity.Property(e => e.IdTipoEquipo).HasColumnName("ID_TIPO_EQUIPO");
            entity.Property(e => e.IdTipoFallaEncontrada).HasColumnName("ID_TIPO_FALLA_ENCONTRADA");
            entity.Property(e => e.IdTipoPlaza).HasColumnName("ID_TIPO_PLAZA");
            entity.Property(e => e.IdTipoPrecio).HasColumnName("ID_TIPO_PRECIO");
            entity.Property(e => e.IdTipoServicio).HasColumnName("ID_TIPO_SERVICIO");
            entity.Property(e => e.IdUnidadAtendida).HasColumnName("ID_UNIDAD_ATENDIDA");
            entity.Property(e => e.IdUsuarioCierre).HasColumnName("ID_USUARIO_CIERRE");
            entity.Property(e => e.IdZona).HasColumnName("ID_ZONA");
            entity.Property(e => e.Insumos).HasColumnName("INSUMOS");
            entity.Property(e => e.IntensidadSenial)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("INTENSIDAD_SENIAL");
            entity.Property(e => e.IntentoContacto).HasColumnName("INTENTO_CONTACTO");
            entity.Property(e => e.IsActualizacion).HasColumnName("IS_ACTUALIZACION");
            entity.Property(e => e.IsBoletin).HasColumnName("IS_BOLETIN");
            entity.Property(e => e.IsCobrable).HasColumnName("IS_COBRABLE");
            entity.Property(e => e.IsDuplicada).HasColumnName("IS_DUPLICADA");
            entity.Property(e => e.IsExito).HasColumnName("IS_EXITO");
            entity.Property(e => e.IsFollowDispatch).HasColumnName("IS_FOLLOW_DISPATCH");
            entity.Property(e => e.IsGarantia).HasColumnName("IS_GARANTIA");
            entity.Property(e => e.IsIngresoManual).HasColumnName("IS_INGRESO_MANUAL");
            entity.Property(e => e.IsInstalacion).HasColumnName("IS_INSTALACION");
            entity.Property(e => e.IsInterfazBancomer).HasColumnName("IS_INTERFAZ_BANCOMER");
            entity.Property(e => e.IsLocal).HasColumnName("IS_LOCAL");
            entity.Property(e => e.IsPdf).HasColumnName("IS_PDF");
            entity.Property(e => e.IsProgramado).HasColumnName("IS_PROGRAMADO");
            entity.Property(e => e.IsRetipificado).HasColumnName("IS_RETIPIFICADO");
            entity.Property(e => e.IsRetiro).HasColumnName("IS_RETIRO");
            entity.Property(e => e.IsSimRemplazada)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("IS_SIM_REMPLAZADA");
            entity.Property(e => e.IsSoporteCliente).HasColumnName("IS_SOPORTE_CLIENTE");
            entity.Property(e => e.IsSustitucion).HasColumnName("IS_SUSTITUCION");
            entity.Property(e => e.IsTecnicoForaneo).HasColumnName("IS_TECNICO_FORANEO");
            entity.Property(e => e.MiComercio)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("MI_COMERCIO");
            entity.Property(e => e.MinsDowntime).HasColumnName("MINS_DOWNTIME");
            entity.Property(e => e.MotivoCobro)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("MOTIVO_COBRO");
            entity.Property(e => e.MotivoRetipificado)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("MOTIVO_RETIPIFICADO");
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.NoAr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AR");
            entity.Property(e => e.NoDiasLiberacion).HasColumnName("NO_DIAS_LIBERACION");
            entity.Property(e => e.NoEquipo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_EQUIPO");
            entity.Property(e => e.NoInventario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_INVENTARIO");
            entity.Property(e => e.NoInventarioFalla)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_INVENTARIO_FALLA");
            entity.Property(e => e.NoReincidencias).HasColumnName("NO_REINCIDENCIAS");
            entity.Property(e => e.NoSerie)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");
            entity.Property(e => e.NoSerieFalla)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE_FALLA");
            entity.Property(e => e.NoSim)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("NO_SIM");
            entity.Property(e => e.NotViaticos).HasColumnName("NOT_VIATICOS");
            entity.Property(e => e.NotasRemedy)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NOTAS_REMEDY");
            entity.Property(e => e.OtorganteSoporteCliente)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("OTORGANTE_SOPORTE_CLIENTE");
            entity.Property(e => e.OtorganteTas)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("OTORGANTE_TAS");
            entity.Property(e => e.OtorganteVobo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("OTORGANTE_VOBO");
            entity.Property(e => e.OtorganteVoboCliente)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("OTORGANTE_VOBO_CLIENTE");
            entity.Property(e => e.OtorganteVoboTerceros)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("OTORGANTE_VOBO_TERCEROS");
            entity.Property(e => e.PersonaAtenderaComercio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("PERSONA_ATENDERA_COMERCIO");
            entity.Property(e => e.Poblacion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("POBLACION");
            entity.Property(e => e.Precio)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PRECIO");
            entity.Property(e => e.PrecioExito)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("PRECIO_EXITO");
            entity.Property(e => e.ProveedorAtenderaComercio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("PROVEEDOR_ATENDERA_COMERCIO");
            entity.Property(e => e.Responsable)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RESPONSABLE");
            entity.Property(e => e.Rp).HasColumnName("RP");
            entity.Property(e => e.Rs).HasColumnName("RS");
            entity.Property(e => e.Segmento).HasColumnName("SEGMENTO");
            entity.Property(e => e.Sintoma)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("SINTOMA");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.Telefono)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");
            entity.Property(e => e.TelefonoComercio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("TELEFONO_COMERCIO");
            entity.Property(e => e.TerminalAmex).HasColumnName("TERMINAL_AMEX");
            entity.Property(e => e.TipoFalla).HasColumnName("TIPO_FALLA");
            entity.Property(e => e.TipoServicio).HasColumnName("TIPO_SERVICIO");
            entity.Property(e => e.Traslado).HasColumnName("TRASLADO");
            entity.Property(e => e.VoltajeNeutro)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("VOLTAJE_NEUTRO");
            entity.Property(e => e.VoltajeTierra)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("VOLTAJE_TIERRA");
            entity.Property(e => e.VoltajeTierraNeutro)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("VOLTAJE_TIERRA_NEUTRO");
        });

        modelBuilder.Entity<PruebaTest>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("prueba_test");

            entity.Property(e => e.Valor)
                .IsUnicode(false)
                .HasColumnName("valor");
        });

        modelBuilder.Entity<PruebasErrore>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("pruebas_errores");

            entity.Property(e => e.Campo1)
                .IsUnicode(false)
                .HasColumnName("campo1");
            entity.Property(e => e.Campo2)
                .IsUnicode(false)
                .HasColumnName("campo2");
            entity.Property(e => e.Campo3)
                .IsUnicode(false)
                .HasColumnName("campo3");
            entity.Property(e => e.Campo4)
                .IsUnicode(false)
                .HasColumnName("campo4");
            entity.Property(e => e.Campo5)
                .IsUnicode(false)
                .HasColumnName("campo5");
        });

        modelBuilder.Entity<Query>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Query");

            entity.Property(e => e.DescStatusDoctoPrefacturacion)
                .IsUnicode(false)
                .HasColumnName("DESC_STATUS_DOCTO_PREFACTURACION");
            entity.Property(e => e.IdStatusDoctoPrefacturacion).HasColumnName("ID_STATUS_DOCTO_PREFACTURACION");
            entity.Property(e => e.IsClienteAssign).HasColumnName("IS_CLIENTE_ASSIGN");
            entity.Property(e => e.IsDoctoDigital).HasColumnName("IS_DOCTO_DIGITAL");
            entity.Property(e => e.IsDoctoFisico).HasColumnName("IS_DOCTO_FISICO");
            entity.Property(e => e.IsIngenieroAssign).HasColumnName("IS_INGENIERO_ASSIGN");
            entity.Property(e => e.IsModuleBusqueda).HasColumnName("IS_MODULE_BUSQUEDA");
            entity.Property(e => e.IsModulePrefacturacion).HasColumnName("IS_MODULE_PREFACTURACION");
            entity.Property(e => e.IsModuleReporte).HasColumnName("IS_MODULE_REPORTE");
            entity.Property(e => e.IsPartnerAssign).HasColumnName("IS_PARTNER_ASSIGN");
            entity.Property(e => e.IsPrefacturacionAssign).HasColumnName("IS_PREFACTURACION_ASSIGN");
            entity.Property(e => e.IsSupervisorAssign).HasColumnName("IS_SUPERVISOR_ASSIGN");
            entity.Property(e => e.Status)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<RefaccInstalada>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("REFACC_INSTALADAS");

            entity.Property(e => e.Conectividad)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("CONECTIVIDAD");
            entity.Property(e => e.Costo)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("COSTO");
            entity.Property(e => e.CostoMicrosip).HasColumnName("costo_microsip");
            entity.Property(e => e.Curp)
                .HasMaxLength(18)
                .IsUnicode(false)
                .HasColumnName("CURP");
            entity.Property(e => e.DescCliente)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_CLIENTE");
            entity.Property(e => e.DescMarca)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_MARCA");
            entity.Property(e => e.DescModelo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_MODELO");
            entity.Property(e => e.DescNegocio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_NEGOCIO");
            entity.Property(e => e.DescProducto)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_PRODUCTO");
            entity.Property(e => e.DescRegion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_REGION");
            entity.Property(e => e.DescZona)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_ZONA");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.FecAltaUnidad)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA_UNIDAD");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdInstalacion).HasColumnName("ID_INSTALACION");
            entity.Property(e => e.IdMarca).HasColumnName("ID_MARCA");
            entity.Property(e => e.IdModelo).HasColumnName("ID_MODELO");
            entity.Property(e => e.IdMoneda).HasColumnName("ID_MONEDA");
            entity.Property(e => e.IdRegion).HasColumnName("ID_REGION");
            entity.Property(e => e.IdServicio).HasColumnName("ID_SERVICIO");
            entity.Property(e => e.IdTipoFallaEncontrada).HasColumnName("ID_TIPO_FALLA_ENCONTRADA");
            entity.Property(e => e.IdTipoServicio).HasColumnName("ID_TIPO_SERVICIO");
            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.IsNueva).HasColumnName("IS_NUEVA");
            entity.Property(e => e.IsPropiedadCliente).HasColumnName("IS_PROPIEDAD_CLIENTE");
            entity.Property(e => e.Month).HasColumnName("MONTH");
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.NoSerie)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");
            entity.Property(e => e.OrdenCompra)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ORDEN_COMPRA");
            entity.Property(e => e.Producto)
                .HasMaxLength(15)
                .IsFixedLength()
                .HasColumnName("PRODUCTO");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SKU");
            entity.Property(e => e.Tecnico)
                .HasMaxLength(152)
                .IsUnicode(false)
                .HasColumnName("TECNICO");
            entity.Property(e => e.UCompraMicrosip)
                .HasColumnType("date")
                .HasColumnName("u_compra_microsip");
            entity.Property(e => e.Year).HasColumnName("YEAR");
        });

        modelBuilder.Entity<RefaccInstaladas3>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("REFACC_INSTALADAS_3");

            entity.Property(e => e.Conectividad)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("CONECTIVIDAD");
            entity.Property(e => e.Costo)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("COSTO");
            entity.Property(e => e.CostoMicrosip).HasColumnName("costo_microsip");
            entity.Property(e => e.Cp)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("CP");
            entity.Property(e => e.Curp)
                .HasMaxLength(18)
                .IsUnicode(false)
                .HasColumnName("CURP");
            entity.Property(e => e.DescCliente)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_CLIENTE");
            entity.Property(e => e.DescMarca)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_MARCA");
            entity.Property(e => e.DescModelo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_MODELO");
            entity.Property(e => e.DescNegocio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_NEGOCIO");
            entity.Property(e => e.DescProducto)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_PRODUCTO");
            entity.Property(e => e.DescRegion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_REGION");
            entity.Property(e => e.DescZona)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_ZONA");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.FecAltaUnidad)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA_UNIDAD");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdInstalacion).HasColumnName("ID_INSTALACION");
            entity.Property(e => e.IdMarca).HasColumnName("ID_MARCA");
            entity.Property(e => e.IdModelo).HasColumnName("ID_MODELO");
            entity.Property(e => e.IdMoneda).HasColumnName("ID_MONEDA");
            entity.Property(e => e.IdServicio).HasColumnName("ID_SERVICIO");
            entity.Property(e => e.IdTipoFallaEncontrada).HasColumnName("ID_TIPO_FALLA_ENCONTRADA");
            entity.Property(e => e.IdTipoServicio).HasColumnName("ID_TIPO_SERVICIO");
            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.IsNueva).HasColumnName("IS_NUEVA");
            entity.Property(e => e.IsPropiedadCliente).HasColumnName("IS_PROPIEDAD_CLIENTE");
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.NoSerie)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");
            entity.Property(e => e.OrdenCompra)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ORDEN_COMPRA");
            entity.Property(e => e.Producto)
                .HasMaxLength(15)
                .IsFixedLength()
                .HasColumnName("PRODUCTO");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SKU");
            entity.Property(e => e.Tecnico)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("TECNICO");
            entity.Property(e => e.UCompraMicrosip)
                .HasColumnType("date")
                .HasColumnName("u_compra_microsip");
        });

        modelBuilder.Entity<RefaccRetirada>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("REFACC_RETIRADAS");

            entity.Property(e => e.Conectividad)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("CONECTIVIDAD");
            entity.Property(e => e.Costo)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("COSTO");
            entity.Property(e => e.CostoMicrosip).HasColumnName("costo_microsip");
            entity.Property(e => e.Curp)
                .HasMaxLength(18)
                .IsUnicode(false)
                .HasColumnName("CURP");
            entity.Property(e => e.DescCliente)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_CLIENTE");
            entity.Property(e => e.DescMarca)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_MARCA");
            entity.Property(e => e.DescModelo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_MODELO");
            entity.Property(e => e.DescNegocio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_NEGOCIO");
            entity.Property(e => e.DescProducto)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_PRODUCTO");
            entity.Property(e => e.DescRegion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_REGION");
            entity.Property(e => e.DescZona)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_ZONA");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.FecAltaUnidad)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA_UNIDAD");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdMarca).HasColumnName("ID_MARCA");
            entity.Property(e => e.IdModelo).HasColumnName("ID_MODELO");
            entity.Property(e => e.IdMoneda).HasColumnName("ID_MONEDA");
            entity.Property(e => e.IdRetiro).HasColumnName("ID_RETIRO");
            entity.Property(e => e.IdServicio).HasColumnName("ID_SERVICIO");
            entity.Property(e => e.IdTipoFallaEncontrada).HasColumnName("ID_TIPO_FALLA_ENCONTRADA");
            entity.Property(e => e.IdTipoServicio).HasColumnName("ID_TIPO_SERVICIO");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.IsNueva).HasColumnName("IS_NUEVA");
            entity.Property(e => e.IsPropiedadCliente).HasColumnName("IS_PROPIEDAD_CLIENTE");
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.NoSerie)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");
            entity.Property(e => e.OrdenCompra)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ORDEN_COMPRA");
            entity.Property(e => e.Producto)
                .HasMaxLength(15)
                .IsFixedLength()
                .HasColumnName("PRODUCTO");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SKU");
            entity.Property(e => e.Tecnico)
                .HasMaxLength(152)
                .IsUnicode(false)
                .HasColumnName("TECNICO");
            entity.Property(e => e.UCompraMicrosip)
                .HasColumnType("date")
                .HasColumnName("u_compra_microsip");
        });

        modelBuilder.Entity<RefaccRetiradas2>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("REFACC_RETIRADAS_2");

            entity.Property(e => e.Conectividad)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("CONECTIVIDAD");
            entity.Property(e => e.Costo)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("COSTO");
            entity.Property(e => e.CostoMicrosip).HasColumnName("costo_microsip");
            entity.Property(e => e.Cp)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("CP");
            entity.Property(e => e.Curp)
                .HasMaxLength(18)
                .IsUnicode(false)
                .HasColumnName("CURP");
            entity.Property(e => e.DescCliente)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_CLIENTE");
            entity.Property(e => e.DescMarca)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_MARCA");
            entity.Property(e => e.DescModelo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_MODELO");
            entity.Property(e => e.DescNegocio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_NEGOCIO");
            entity.Property(e => e.DescProducto)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_PRODUCTO");
            entity.Property(e => e.DescRegion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_REGION");
            entity.Property(e => e.DescZona)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_ZONA");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.FecAltaUnidad)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA_UNIDAD");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdMarca).HasColumnName("ID_MARCA");
            entity.Property(e => e.IdModelo).HasColumnName("ID_MODELO");
            entity.Property(e => e.IdMoneda).HasColumnName("ID_MONEDA");
            entity.Property(e => e.IdRetiro).HasColumnName("ID_RETIRO");
            entity.Property(e => e.IdServicio).HasColumnName("ID_SERVICIO");
            entity.Property(e => e.IdTipoFallaEncontrada).HasColumnName("ID_TIPO_FALLA_ENCONTRADA");
            entity.Property(e => e.IdTipoServicio).HasColumnName("ID_TIPO_SERVICIO");
            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.IsNueva).HasColumnName("IS_NUEVA");
            entity.Property(e => e.IsPropiedadCliente).HasColumnName("IS_PROPIEDAD_CLIENTE");
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.NoSerie)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");
            entity.Property(e => e.OrdenCompra)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ORDEN_COMPRA");
            entity.Property(e => e.Producto)
                .HasMaxLength(15)
                .IsFixedLength()
                .HasColumnName("PRODUCTO");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SKU");
            entity.Property(e => e.Tecnico)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("TECNICO");
            entity.Property(e => e.UCompraMicrosip)
                .HasColumnType("date")
                .HasColumnName("u_compra_microsip");
        });

        modelBuilder.Entity<RefaccionesInstalada>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("REFACCIONES_INSTALADAS");

            entity.Property(e => e.Fecha)
                .HasColumnType("date")
                .HasColumnName("FECHA");
            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnName("id");
            entity.Property(e => e.Importe).HasColumnName("IMPORTE");
            entity.Property(e => e.Producto)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("PRODUCTO");
            entity.Property(e => e.Region)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("REGION");
        });

        modelBuilder.Entity<RegistroArchivosComprimido>(entity =>
        {
            entity.HasKey(e => e.IdRegistroArchivoComprimido).HasName("PK__REGISTRO__8194179D572BAE71");

            entity.ToTable("REGISTRO_ARCHIVOS_COMPRIMIDOS");

            entity.Property(e => e.IdRegistroArchivoComprimido).HasColumnName("ID_REGISTRO_ARCHIVO_COMPRIMIDO");
            entity.Property(e => e.Carpeta)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CARPETA");
            entity.Property(e => e.FecRegistro)
                .HasColumnType("datetime")
                .HasColumnName("FEC_REGISTRO");
            entity.Property(e => e.Nombre)
                .IsUnicode(false)
                .HasColumnName("NOMBRE");
        });

        modelBuilder.Entity<RegistroArchivosOriginale>(entity =>
        {
            entity.HasKey(e => e.IdRegistroArchivoOriginal).HasName("PK__REGISTRO__91E1621F9D2CDF2F");

            entity.ToTable("REGISTRO_ARCHIVOS_ORIGINALES");

            entity.Property(e => e.IdRegistroArchivoOriginal).HasColumnName("ID_REGISTRO_ARCHIVO_ORIGINAL");
            entity.Property(e => e.Carpeta)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CARPETA");
            entity.Property(e => e.FecRegistro)
                .HasColumnType("datetime")
                .HasColumnName("FEC_REGISTRO");
            entity.Property(e => e.FecUltimaModificacion)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ULTIMA_MODIFICACION");
            entity.Property(e => e.Nombre)
                .IsUnicode(false)
                .HasColumnName("NOMBRE");
        });

        modelBuilder.Entity<Reincidente>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("REINCIDENTES");

            entity.Property(e => e.DescCliente)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_CLIENTE");
            entity.Property(e => e.DescNegocio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_NEGOCIO");
            entity.Property(e => e.DescProducto)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_PRODUCTO");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdNegocio).HasColumnName("ID_NEGOCIO");
            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.Tickets).HasColumnName("TICKETS");
            entity.Property(e => e.Viaticos)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("VIATICOS");
            entity.Property(e => e.Visitas).HasColumnName("VISITAS");
        });

        modelBuilder.Entity<ReporteF11>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("REPORTE_F11");

            entity.Property(e => e.AccessPoint)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("ACCESS POINT");
            entity.Property(e => e.BaseOptimumBluetoot)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("BASE OPTIMUM BLUETOOT");
            entity.Property(e => e.BaseOptimumD1100)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("BASE OPTIMUM D1100");
            entity.Property(e => e.BaseOptimumD2100)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("BASE OPTIMUM D2100");
            entity.Property(e => e.CadenaF11)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CADENA_F11");
            entity.Property(e => e.Elite770)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("ELITE 770");
            entity.Property(e => e.Fresia2000)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("FRESIA2000");
            entity.Property(e => e.Ice4000)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("ICE 4000");
            entity.Property(e => e.Ice5000)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("ICE 5000");
            entity.Property(e => e.Ien100)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("IEN-100");
            entity.Property(e => e.Ingenico5100)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("INGENICO 5100");
            entity.Property(e => e.Ingenico7780ConBase)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("INGENICO 7780 (con base)");
            entity.Property(e => e.Ingenico7910CSimm)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("INGENICO 7910 C/SIMM");
            entity.Property(e => e.Ingenico7910SSimm)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("INGENICO 7910 S/SIMM");
            entity.Property(e => e.Nac6a)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("NAC 6A");
            entity.Property(e => e.Omni3200)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("OMNI 3200");
            entity.Property(e => e.Omni3600)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("OMNI 3600");
            entity.Property(e => e.Omni3750)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("OMNI 3750");
            entity.Property(e => e.Omni395)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("OMNI 395");
            entity.Property(e => e.Omni395Lan)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("OMNI 395 LAN");
            entity.Property(e => e.Omni460)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("OMNI 460");
            entity.Property(e => e.Omni470)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("OMNI 470");
            entity.Property(e => e.Omni490)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("OMNI 490");
            entity.Property(e => e.OptimumM2100Bluetoot)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("OPTIMUM M2100 BLUETOOT");
            entity.Property(e => e.OptimumM2100CSim)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("OPTIMUM M2100 c/sim");
            entity.Property(e => e.OptimumM2100SSim)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("OPTIMUM M2100 s/sim");
            entity.Property(e => e.OptimumT2100)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("OPTIMUM T2100");
            entity.Property(e => e.OptimumT2100Gprs)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("OPTIMUM T2100 GPRS");
            entity.Property(e => e.OrdenF11).HasColumnName("ORDEN_F11");
            entity.Property(e => e.PinPad)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("PIN PAD");
            entity.Property(e => e.Plaza)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PLAZA");
            entity.Property(e => e.Print250)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("PRINT 250");
            entity.Property(e => e.Printpack)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("PRINTPACK");
            entity.Property(e => e.Remedy1)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("REMEDY1");
            entity.Property(e => e.Remedy2)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("REMEDY2");
            entity.Property(e => e.Remedy3)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("REMEDY3");
            entity.Property(e => e.T7Plus)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("T7 PLUS");
            entity.Property(e => e.T7p)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("T7P");
            entity.Property(e => e.Transcriptora)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("TRANSCRIPTORA");
            entity.Property(e => e.TranscriptoraDeTinta)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("TRANSCRIPTORA DE TINTA");
            entity.Property(e => e.TranscriptoraPortatil)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("TRANSCRIPTORA PORTATIL");
            entity.Property(e => e.Vx510Dial)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("Vx510 DIAL");
            entity.Property(e => e.Vx510Fimpe)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("Vx510 FIMPE");
            entity.Property(e => e.Vx510Lan)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("Vx510 LAN");
            entity.Property(e => e.Vx510Web)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("Vx510 WEB");
            entity.Property(e => e.Vx610Amex)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("Vx610 AMEX");
            entity.Property(e => e.Vx610CSim)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("Vx610 c/sim");
            entity.Property(e => e.Vx610Fimpe)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("Vx610 FIMPE");
            entity.Property(e => e.Vx610SSim)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("Vx610 s/sim");
            entity.Property(e => e.Vx610WiFi)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("Vx610 (Wi-Fi)");
            entity.Property(e => e.Vx610WiFiWeb)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("Vx610 (Wi-Fi) WEB");
        });

        modelBuilder.Entity<ReporteHojaServicio>(entity =>
        {
            entity.HasKey(e => e.IdReporteHojaServicio).HasName("PK__REPORTE___938FB86D46B8DA9A");

            entity.ToTable("REPORTE_HOJA_SERVICIOS");

            entity.Property(e => e.IdReporteHojaServicio).HasColumnName("ID_REPORTE_HOJA_SERVICIO");
            entity.Property(e => e.AbrevTecnico)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ABREV_TECNICO");
            entity.Property(e => e.Accesorios)
                .IsUnicode(false)
                .HasColumnName("ACCESORIOS");
            entity.Property(e => e.Cliente)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CLIENTE");
            entity.Property(e => e.Comentario)
                .IsUnicode(false)
                .HasColumnName("COMENTARIO");
            entity.Property(e => e.Empresa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("EMPRESA");
            entity.Property(e => e.EnviadoPor)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ENVIADO_POR");
            entity.Property(e => e.FallaReport)
                .IsUnicode(false)
                .HasColumnName("FALLA_REPORT");
            entity.Property(e => e.FechaRecepcion)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_RECEPCION");
            entity.Property(e => e.FolioTelmex)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("FOLIO_TELMEX");
            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");
            entity.Property(e => e.NoReporte)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NO_REPORTE");
            entity.Property(e => e.NoSerie)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");
            entity.Property(e => e.Nombre)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NOMBRE");
            entity.Property(e => e.Observaciones)
                .IsUnicode(false)
                .HasColumnName("OBSERVACIONES");
            entity.Property(e => e.Status)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.Svc).HasColumnName("SVC");

            entity.HasOne(d => d.IdUnidadNavigation).WithMany(p => p.ReporteHojaServicios)
                .HasForeignKey(d => d.IdUnidad)
                .HasConstraintName("FK_BD_UNIDADES");
        });

        modelBuilder.Entity<ResStatusBdArBorrar>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("RES_STATUS_BD_AR_BORRAR");

            entity.Property(e => e.AgregarDiasAtencion).HasColumnName("AGREGAR_DIAS_ATENCION");
            entity.Property(e => e.Atiende)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ATIENDE");
            entity.Property(e => e.AutorizadorRechazo)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("AUTORIZADOR_RECHAZO");
            entity.Property(e => e.Bitacora)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("BITACORA");
            entity.Property(e => e.CadenaCierre)
                .IsUnicode(false)
                .HasColumnName("CADENA_CIERRE");
            entity.Property(e => e.CadenaCierreEscrita)
                .HasMaxLength(3000)
                .IsUnicode(false)
                .HasColumnName("CADENA_CIERRE_ESCRITA");
            entity.Property(e => e.Caja)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("CAJA");
            entity.Property(e => e.CausaCancelacion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CAUSA_CANCELACION");
            entity.Property(e => e.CausaRechazo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CAUSA_RECHAZO");
            entity.Property(e => e.ClaveRechazo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CLAVE_RECHAZO");
            entity.Property(e => e.CodigoIntervencion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CODIGO_INTERVENCION");
            entity.Property(e => e.Colonia)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("COLONIA");
            entity.Property(e => e.Concepto)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CONCEPTO");
            entity.Property(e => e.CorreoEjecutivo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CORREO_EJECUTIVO");
            entity.Property(e => e.Cp)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("CP");
            entity.Property(e => e.DescCorta)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_CORTA");
            entity.Property(e => e.DescEquipo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_EQUIPO");
            entity.Property(e => e.DescNegocio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_NEGOCIO");
            entity.Property(e => e.DescripcionTrabajo)
                .HasMaxLength(3000)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_TRABAJO");
            entity.Property(e => e.DigitoVerificador)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("DIGITO_VERIFICADOR");
            entity.Property(e => e.Direccion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");
            entity.Property(e => e.DireccionAlternaComercio)
                .IsUnicode(false)
                .HasColumnName("DIRECCION_ALTERNA_COMERCIO");
            entity.Property(e => e.DueBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("due_by");
            entity.Property(e => e.Duracion).HasColumnName("DURACION");
            entity.Property(e => e.Equipo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("EQUIPO");
            entity.Property(e => e.Estado)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ESTADO");
            entity.Property(e => e.FallaEncontrada)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("FALLA_ENCONTRADA");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.FecAltaHorasAtencion)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA_HORAS_ATENCION");
            entity.Property(e => e.FecAltaReglaStatusAr)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA_REGLA_STATUS_AR");
            entity.Property(e => e.FecAtencion)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ATENCION");
            entity.Property(e => e.FecAtencionOriginal)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ATENCION_ORIGINAL");
            entity.Property(e => e.FecCarga)
                .HasColumnType("datetime")
                .HasColumnName("FEC_CARGA");
            entity.Property(e => e.FecCierre)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_CIERRE");
            entity.Property(e => e.FecConvenio)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_CONVENIO");
            entity.Property(e => e.FecFinIngeniero)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_FIN_INGENIERO");
            entity.Property(e => e.FecGarantia)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_GARANTIA");
            entity.Property(e => e.FecIniIngeniero)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_INI_INGENIERO");
            entity.Property(e => e.FecInicio)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_INICIO");
            entity.Property(e => e.FecIntento1)
                .HasColumnType("datetime")
                .HasColumnName("FEC_INTENTO_1");
            entity.Property(e => e.FecIntento2)
                .HasColumnType("datetime")
                .HasColumnName("FEC_INTENTO_2");
            entity.Property(e => e.FecIntento3)
                .HasColumnType("datetime")
                .HasColumnName("FEC_INTENTO_3");
            entity.Property(e => e.FecIntento4)
                .HasColumnType("datetime")
                .HasColumnName("FEC_INTENTO_4");
            entity.Property(e => e.FecLlegada)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_LLEGADA");
            entity.Property(e => e.FecLlegadaTerceros)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_LLEGADA_TERCEROS");
            entity.Property(e => e.FecStatusAr)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_STATUS_AR");
            entity.Property(e => e.FolioServicio)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FOLIO_SERVICIO");
            entity.Property(e => e.FolioTas)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("FOLIO_TAS");
            entity.Property(e => e.FolioTelecarga).HasColumnName("FOLIO_TELECARGA");
            entity.Property(e => e.FolioTir)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FOLIO_TIR");
            entity.Property(e => e.FolioValidacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FOLIO_VALIDACION");
            entity.Property(e => e.HoraAtencionFin).HasColumnName("HORA_ATENCION_FIN");
            entity.Property(e => e.HoraAtencionIni).HasColumnName("HORA_ATENCION_INI");
            entity.Property(e => e.HorasAtencion).HasColumnName("HORAS_ATENCION");
            entity.Property(e => e.HorasAtencionWincor)
                .HasColumnType("numeric(18, 0)")
                .HasColumnName("HORAS_ATENCION_WINCOR");
            entity.Property(e => e.HorasGarantia).HasColumnName("HORAS_GARANTIA");
            entity.Property(e => e.HorasGarantiaWincor)
                .HasColumnType("numeric(18, 0)")
                .HasColumnName("HORAS_GARANTIA_WINCOR");
            entity.Property(e => e.IdAplicativo).HasColumnName("ID_APLICATIVO");
            entity.Property(e => e.IdAr)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_AR");
            entity.Property(e => e.IdArOriginal).HasColumnName("ID_AR_ORIGINAL");
            entity.Property(e => e.IdAttach1).HasColumnName("ID_ATTACH1");
            entity.Property(e => e.IdAttach2).HasColumnName("ID_ATTACH2");
            entity.Property(e => e.IdCalificaContacto).HasColumnName("ID_CALIFICA_CONTACTO");
            entity.Property(e => e.IdCalificaIntento1).HasColumnName("ID_CALIFICA_INTENTO_1");
            entity.Property(e => e.IdCalificaIntento2).HasColumnName("ID_CALIFICA_INTENTO_2");
            entity.Property(e => e.IdCalificaIntento3).HasColumnName("ID_CALIFICA_INTENTO_3");
            entity.Property(e => e.IdCalificaIntento4).HasColumnName("ID_CALIFICA_INTENTO_4");
            entity.Property(e => e.IdCarga).HasColumnName("ID_CARGA");
            entity.Property(e => e.IdCausa).HasColumnName("ID_CAUSA");
            entity.Property(e => e.IdCausaRechazo).HasColumnName("ID_CAUSA_RECHAZO");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdConcepto).HasColumnName("ID_CONCEPTO");
            entity.Property(e => e.IdConectividad).HasColumnName("ID_CONECTIVIDAD");
            entity.Property(e => e.IdDescripcionTrabajo).HasColumnName("ID_DESCRIPCION_TRABAJO");
            entity.Property(e => e.IdDispatcher).HasColumnName("ID_DISPATCHER");
            entity.Property(e => e.IdEquipoCliente).HasColumnName("ID_EQUIPO_CLIENTE");
            entity.Property(e => e.IdEspecifTipoFalla).HasColumnName("ID_ESPECIF_TIPO_FALLA");
            entity.Property(e => e.IdEspecificaCausaRechazo).HasColumnName("ID_ESPECIFICA_CAUSA_RECHAZO");
            entity.Property(e => e.IdEstado).HasColumnName("ID_ESTADO");
            entity.Property(e => e.IdFalla).HasColumnName("ID_FALLA");
            entity.Property(e => e.IdModeloFalla).HasColumnName("ID_MODELO_FALLA");
            entity.Property(e => e.IdModeloReq).HasColumnName("ID_MODELO_REQ");
            entity.Property(e => e.IdMoneda).HasColumnName("ID_MONEDA");
            entity.Property(e => e.IdNegocio).HasColumnName("ID_NEGOCIO");
            entity.Property(e => e.IdPlaza).HasColumnName("ID_PLAZA");
            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");
            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");
            entity.Property(e => e.IdProyecto).HasColumnName("ID_PROYECTO");
            entity.Property(e => e.IdRegion).HasColumnName("ID_REGION");
            entity.Property(e => e.IdReglaStatusAr).HasColumnName("ID_REGLA_STATUS_AR");
            entity.Property(e => e.IdReporteCierre).HasColumnName("ID_REPORTE_CIERRE");
            entity.Property(e => e.IdResponsableCancelacionProgramado).HasColumnName("ID_RESPONSABLE_CANCELACION_PROGRAMADO");
            entity.Property(e => e.IdSegmento).HasColumnName("ID_SEGMENTO");
            entity.Property(e => e.IdServicio).HasColumnName("ID_SERVICIO");
            entity.Property(e => e.IdSolucion).HasColumnName("ID_SOLUCION");
            entity.Property(e => e.IdStatusAr).HasColumnName("ID_STATUS_AR");
            entity.Property(e => e.IdStatusReasonCodes).HasColumnName("ID_STATUS_REASON_CODES");
            entity.Property(e => e.IdStatusValidacionPrefacturacion).HasColumnName("ID_STATUS_VALIDACION_PREFACTURACION");
            entity.Property(e => e.IdTecnico).HasColumnName("ID_TECNICO");
            entity.Property(e => e.IdTipoCobro).HasColumnName("ID_TIPO_COBRO");
            entity.Property(e => e.IdTipoEquipo).HasColumnName("ID_TIPO_EQUIPO");
            entity.Property(e => e.IdTipoFallaEncontrada).HasColumnName("ID_TIPO_FALLA_ENCONTRADA");
            entity.Property(e => e.IdTipoPlaza).HasColumnName("ID_TIPO_PLAZA");
            entity.Property(e => e.IdTipoPrecio).HasColumnName("ID_TIPO_PRECIO");
            entity.Property(e => e.IdTipoServicio).HasColumnName("ID_TIPO_SERVICIO");
            entity.Property(e => e.IdUnidadAtendida).HasColumnName("ID_UNIDAD_ATENDIDA");
            entity.Property(e => e.IdUsuarioCierre).HasColumnName("ID_USUARIO_CIERRE");
            entity.Property(e => e.IdZona).HasColumnName("ID_ZONA");
            entity.Property(e => e.Insumos).HasColumnName("INSUMOS");
            entity.Property(e => e.IntensidadSenial)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("INTENSIDAD_SENIAL");
            entity.Property(e => e.IntentoContacto).HasColumnName("INTENTO_CONTACTO");
            entity.Property(e => e.IsActualizacion).HasColumnName("IS_ACTUALIZACION");
            entity.Property(e => e.IsBoletin).HasColumnName("IS_BOLETIN");
            entity.Property(e => e.IsCobrable).HasColumnName("IS_COBRABLE");
            entity.Property(e => e.IsDuplicada).HasColumnName("IS_DUPLICADA");
            entity.Property(e => e.IsExito).HasColumnName("IS_EXITO");
            entity.Property(e => e.IsFollowDispatch).HasColumnName("IS_FOLLOW_DISPATCH");
            entity.Property(e => e.IsGarantia).HasColumnName("IS_GARANTIA");
            entity.Property(e => e.IsIngresoManual).HasColumnName("IS_INGRESO_MANUAL");
            entity.Property(e => e.IsInstalacion).HasColumnName("IS_INSTALACION");
            entity.Property(e => e.IsInterfazBancomer).HasColumnName("IS_INTERFAZ_BANCOMER");
            entity.Property(e => e.IsLocal).HasColumnName("IS_LOCAL");
            entity.Property(e => e.IsPdf).HasColumnName("IS_PDF");
            entity.Property(e => e.IsProgramado).HasColumnName("IS_PROGRAMADO");
            entity.Property(e => e.IsRetipificado).HasColumnName("IS_RETIPIFICADO");
            entity.Property(e => e.IsRetiro).HasColumnName("IS_RETIRO");
            entity.Property(e => e.IsSimRemplazada).HasColumnName("IS_SIM_REMPLAZADA");
            entity.Property(e => e.IsSoporteCliente).HasColumnName("IS_SOPORTE_CLIENTE");
            entity.Property(e => e.IsSustitucion).HasColumnName("IS_SUSTITUCION");
            entity.Property(e => e.IsTecnicoForaneo).HasColumnName("IS_TECNICO_FORANEO");
            entity.Property(e => e.MiComercio)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("MI_COMERCIO");
            entity.Property(e => e.MinsDowntime).HasColumnName("MINS_DOWNTIME");
            entity.Property(e => e.MotivoCobro)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("MOTIVO_COBRO");
            entity.Property(e => e.MotivoRetipificado)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("MOTIVO_RETIPIFICADO");
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.NoAr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AR");
            entity.Property(e => e.NoDiasLiberacion).HasColumnName("NO_DIAS_LIBERACION");
            entity.Property(e => e.NoEquipo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_EQUIPO");
            entity.Property(e => e.NoInventario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_INVENTARIO");
            entity.Property(e => e.NoInventarioFalla)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_INVENTARIO_FALLA");
            entity.Property(e => e.NoReincidencias).HasColumnName("NO_REINCIDENCIAS");
            entity.Property(e => e.NoSerie)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");
            entity.Property(e => e.NoSerieFalla)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE_FALLA");
            entity.Property(e => e.NoSim)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SIM");
            entity.Property(e => e.NotViaticos).HasColumnName("NOT_VIATICOS");
            entity.Property(e => e.NotasRemedy)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NOTAS_REMEDY");
            entity.Property(e => e.OtorganteSoporteCliente)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("OTORGANTE_SOPORTE_CLIENTE");
            entity.Property(e => e.OtorganteTas)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("OTORGANTE_TAS");
            entity.Property(e => e.OtorganteVobo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("OTORGANTE_VOBO");
            entity.Property(e => e.OtorganteVoboCliente)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("OTORGANTE_VOBO_CLIENTE");
            entity.Property(e => e.OtorganteVoboTerceros)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("OTORGANTE_VOBO_TERCEROS");
            entity.Property(e => e.PersonaAtenderaComercio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("PERSONA_ATENDERA_COMERCIO");
            entity.Property(e => e.Poblacion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("POBLACION");
            entity.Property(e => e.Precio)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("PRECIO");
            entity.Property(e => e.PrecioExito)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("PRECIO_EXITO");
            entity.Property(e => e.ProveedorAtenderaComercio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("PROVEEDOR_ATENDERA_COMERCIO");
            entity.Property(e => e.Responsable)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RESPONSABLE");
            entity.Property(e => e.Rp).HasColumnName("RP");
            entity.Property(e => e.Rs).HasColumnName("RS");
            entity.Property(e => e.Segmento).HasColumnName("SEGMENTO");
            entity.Property(e => e.Sintoma)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("SINTOMA");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.Telefono)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");
            entity.Property(e => e.TelefonoComercio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("TELEFONO_COMERCIO");
            entity.Property(e => e.TerminalAmex).HasColumnName("TERMINAL_AMEX");
            entity.Property(e => e.TipoFalla).HasColumnName("TIPO_FALLA");
            entity.Property(e => e.TipoServicio).HasColumnName("TIPO_SERVICIO");
            entity.Property(e => e.Traslado).HasColumnName("TRASLADO");
            entity.Property(e => e.VoltajeNeutro)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("VOLTAJE_NEUTRO");
            entity.Property(e => e.VoltajeTierra)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("VOLTAJE_TIERRA");
            entity.Property(e => e.VoltajeTierraNeutro)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("VOLTAJE_TIERRA_NEUTRO");
        });

        modelBuilder.Entity<RespBdArStatus>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("RESP_BD_AR_STATUS");

            entity.Property(e => e.AgregarDiasAtencion).HasColumnName("AGREGAR_DIAS_ATENCION");
            entity.Property(e => e.Atiende)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ATIENDE");
            entity.Property(e => e.AutorizadorRechazo)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("AUTORIZADOR_RECHAZO");
            entity.Property(e => e.Bitacora)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("BITACORA");
            entity.Property(e => e.CadenaCierre)
                .IsUnicode(false)
                .HasColumnName("CADENA_CIERRE");
            entity.Property(e => e.CadenaCierreEscrita)
                .HasMaxLength(3000)
                .IsUnicode(false)
                .HasColumnName("CADENA_CIERRE_ESCRITA");
            entity.Property(e => e.Caja)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("CAJA");
            entity.Property(e => e.CausaCancelacion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CAUSA_CANCELACION");
            entity.Property(e => e.CausaRechazo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CAUSA_RECHAZO");
            entity.Property(e => e.ClaveRechazo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CLAVE_RECHAZO");
            entity.Property(e => e.CodigoIntervencion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CODIGO_INTERVENCION");
            entity.Property(e => e.Colonia)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("COLONIA");
            entity.Property(e => e.Concepto)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CONCEPTO");
            entity.Property(e => e.CorreoEjecutivo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CORREO_EJECUTIVO");
            entity.Property(e => e.Cp)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("CP");
            entity.Property(e => e.DescCorta)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_CORTA");
            entity.Property(e => e.DescEquipo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_EQUIPO");
            entity.Property(e => e.DescNegocio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_NEGOCIO");
            entity.Property(e => e.DescripcionTrabajo)
                .HasMaxLength(3000)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_TRABAJO");
            entity.Property(e => e.DigitoVerificador)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("DIGITO_VERIFICADOR");
            entity.Property(e => e.Direccion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");
            entity.Property(e => e.DireccionAlternaComercio)
                .IsUnicode(false)
                .HasColumnName("DIRECCION_ALTERNA_COMERCIO");
            entity.Property(e => e.DueBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("due_by");
            entity.Property(e => e.Duracion).HasColumnName("DURACION");
            entity.Property(e => e.Equipo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("EQUIPO");
            entity.Property(e => e.Estado)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ESTADO");
            entity.Property(e => e.FallaEncontrada)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("FALLA_ENCONTRADA");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.FecAltaHorasAtencion)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA_HORAS_ATENCION");
            entity.Property(e => e.FecAltaReglaStatusAr)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA_REGLA_STATUS_AR");
            entity.Property(e => e.FecAtencion)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ATENCION");
            entity.Property(e => e.FecAtencionOriginal)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ATENCION_ORIGINAL");
            entity.Property(e => e.FecCarga)
                .HasColumnType("datetime")
                .HasColumnName("FEC_CARGA");
            entity.Property(e => e.FecCierre)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_CIERRE");
            entity.Property(e => e.FecConvenio)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_CONVENIO");
            entity.Property(e => e.FecFinIngeniero)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_FIN_INGENIERO");
            entity.Property(e => e.FecGarantia)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_GARANTIA");
            entity.Property(e => e.FecIniIngeniero)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_INI_INGENIERO");
            entity.Property(e => e.FecInicio)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_INICIO");
            entity.Property(e => e.FecIntento1)
                .HasColumnType("datetime")
                .HasColumnName("FEC_INTENTO_1");
            entity.Property(e => e.FecIntento2)
                .HasColumnType("datetime")
                .HasColumnName("FEC_INTENTO_2");
            entity.Property(e => e.FecIntento3)
                .HasColumnType("datetime")
                .HasColumnName("FEC_INTENTO_3");
            entity.Property(e => e.FecIntento4)
                .HasColumnType("datetime")
                .HasColumnName("FEC_INTENTO_4");
            entity.Property(e => e.FecLlegada)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_LLEGADA");
            entity.Property(e => e.FecLlegadaTerceros)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_LLEGADA_TERCEROS");
            entity.Property(e => e.FecStatusAr)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_STATUS_AR");
            entity.Property(e => e.FolioServicio)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FOLIO_SERVICIO");
            entity.Property(e => e.FolioTas)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("FOLIO_TAS");
            entity.Property(e => e.FolioTelecarga).HasColumnName("FOLIO_TELECARGA");
            entity.Property(e => e.FolioTir)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FOLIO_TIR");
            entity.Property(e => e.FolioValidacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FOLIO_VALIDACION");
            entity.Property(e => e.HoraAtencionFin).HasColumnName("HORA_ATENCION_FIN");
            entity.Property(e => e.HoraAtencionIni).HasColumnName("HORA_ATENCION_INI");
            entity.Property(e => e.HorasAtencion).HasColumnName("HORAS_ATENCION");
            entity.Property(e => e.HorasAtencionWincor)
                .HasColumnType("numeric(18, 0)")
                .HasColumnName("HORAS_ATENCION_WINCOR");
            entity.Property(e => e.HorasGarantia).HasColumnName("HORAS_GARANTIA");
            entity.Property(e => e.HorasGarantiaWincor)
                .HasColumnType("numeric(18, 0)")
                .HasColumnName("HORAS_GARANTIA_WINCOR");
            entity.Property(e => e.IdAplicativo).HasColumnName("ID_APLICATIVO");
            entity.Property(e => e.IdAr)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_AR");
            entity.Property(e => e.IdArOriginal).HasColumnName("ID_AR_ORIGINAL");
            entity.Property(e => e.IdAttach1).HasColumnName("ID_ATTACH1");
            entity.Property(e => e.IdAttach2).HasColumnName("ID_ATTACH2");
            entity.Property(e => e.IdCalificaContacto).HasColumnName("ID_CALIFICA_CONTACTO");
            entity.Property(e => e.IdCalificaIntento1).HasColumnName("ID_CALIFICA_INTENTO_1");
            entity.Property(e => e.IdCalificaIntento2).HasColumnName("ID_CALIFICA_INTENTO_2");
            entity.Property(e => e.IdCalificaIntento3).HasColumnName("ID_CALIFICA_INTENTO_3");
            entity.Property(e => e.IdCalificaIntento4).HasColumnName("ID_CALIFICA_INTENTO_4");
            entity.Property(e => e.IdCarga).HasColumnName("ID_CARGA");
            entity.Property(e => e.IdCausa).HasColumnName("ID_CAUSA");
            entity.Property(e => e.IdCausaRechazo).HasColumnName("ID_CAUSA_RECHAZO");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdConcepto).HasColumnName("ID_CONCEPTO");
            entity.Property(e => e.IdConectividad).HasColumnName("ID_CONECTIVIDAD");
            entity.Property(e => e.IdDescripcionTrabajo).HasColumnName("ID_DESCRIPCION_TRABAJO");
            entity.Property(e => e.IdDispatcher).HasColumnName("ID_DISPATCHER");
            entity.Property(e => e.IdEquipoCliente).HasColumnName("ID_EQUIPO_CLIENTE");
            entity.Property(e => e.IdEspecifTipoFalla).HasColumnName("ID_ESPECIF_TIPO_FALLA");
            entity.Property(e => e.IdEspecificaCausaRechazo).HasColumnName("ID_ESPECIFICA_CAUSA_RECHAZO");
            entity.Property(e => e.IdEstado).HasColumnName("ID_ESTADO");
            entity.Property(e => e.IdFalla).HasColumnName("ID_FALLA");
            entity.Property(e => e.IdModeloFalla).HasColumnName("ID_MODELO_FALLA");
            entity.Property(e => e.IdModeloReq).HasColumnName("ID_MODELO_REQ");
            entity.Property(e => e.IdMoneda).HasColumnName("ID_MONEDA");
            entity.Property(e => e.IdNegocio).HasColumnName("ID_NEGOCIO");
            entity.Property(e => e.IdPlaza).HasColumnName("ID_PLAZA");
            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");
            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");
            entity.Property(e => e.IdProyecto).HasColumnName("ID_PROYECTO");
            entity.Property(e => e.IdRegion).HasColumnName("ID_REGION");
            entity.Property(e => e.IdReglaStatusAr).HasColumnName("ID_REGLA_STATUS_AR");
            entity.Property(e => e.IdReporteCierre).HasColumnName("ID_REPORTE_CIERRE");
            entity.Property(e => e.IdResponsableCancelacionProgramado).HasColumnName("ID_RESPONSABLE_CANCELACION_PROGRAMADO");
            entity.Property(e => e.IdSegmento).HasColumnName("ID_SEGMENTO");
            entity.Property(e => e.IdServicio).HasColumnName("ID_SERVICIO");
            entity.Property(e => e.IdSolucion).HasColumnName("ID_SOLUCION");
            entity.Property(e => e.IdStatusAr).HasColumnName("ID_STATUS_AR");
            entity.Property(e => e.IdStatusReasonCodes).HasColumnName("ID_STATUS_REASON_CODES");
            entity.Property(e => e.IdStatusValidacionPrefacturacion).HasColumnName("ID_STATUS_VALIDACION_PREFACTURACION");
            entity.Property(e => e.IdTecnico).HasColumnName("ID_TECNICO");
            entity.Property(e => e.IdTipoCobro).HasColumnName("ID_TIPO_COBRO");
            entity.Property(e => e.IdTipoEquipo).HasColumnName("ID_TIPO_EQUIPO");
            entity.Property(e => e.IdTipoFallaEncontrada).HasColumnName("ID_TIPO_FALLA_ENCONTRADA");
            entity.Property(e => e.IdTipoPlaza).HasColumnName("ID_TIPO_PLAZA");
            entity.Property(e => e.IdTipoPrecio).HasColumnName("ID_TIPO_PRECIO");
            entity.Property(e => e.IdTipoServicio).HasColumnName("ID_TIPO_SERVICIO");
            entity.Property(e => e.IdUnidadAtendida).HasColumnName("ID_UNIDAD_ATENDIDA");
            entity.Property(e => e.IdUsuarioCierre).HasColumnName("ID_USUARIO_CIERRE");
            entity.Property(e => e.IdZona).HasColumnName("ID_ZONA");
            entity.Property(e => e.Insumos).HasColumnName("INSUMOS");
            entity.Property(e => e.IntensidadSenial)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("INTENSIDAD_SENIAL");
            entity.Property(e => e.IntentoContacto).HasColumnName("INTENTO_CONTACTO");
            entity.Property(e => e.IsActualizacion).HasColumnName("IS_ACTUALIZACION");
            entity.Property(e => e.IsBoletin).HasColumnName("IS_BOLETIN");
            entity.Property(e => e.IsCobrable).HasColumnName("IS_COBRABLE");
            entity.Property(e => e.IsDuplicada).HasColumnName("IS_DUPLICADA");
            entity.Property(e => e.IsExito).HasColumnName("IS_EXITO");
            entity.Property(e => e.IsFollowDispatch).HasColumnName("IS_FOLLOW_DISPATCH");
            entity.Property(e => e.IsGarantia).HasColumnName("IS_GARANTIA");
            entity.Property(e => e.IsIngresoManual).HasColumnName("IS_INGRESO_MANUAL");
            entity.Property(e => e.IsInstalacion).HasColumnName("IS_INSTALACION");
            entity.Property(e => e.IsInterfazBancomer).HasColumnName("IS_INTERFAZ_BANCOMER");
            entity.Property(e => e.IsLocal).HasColumnName("IS_LOCAL");
            entity.Property(e => e.IsPdf).HasColumnName("IS_PDF");
            entity.Property(e => e.IsProgramado).HasColumnName("IS_PROGRAMADO");
            entity.Property(e => e.IsRetipificado).HasColumnName("IS_RETIPIFICADO");
            entity.Property(e => e.IsRetiro).HasColumnName("IS_RETIRO");
            entity.Property(e => e.IsSimRemplazada).HasColumnName("IS_SIM_REMPLAZADA");
            entity.Property(e => e.IsSoporteCliente).HasColumnName("IS_SOPORTE_CLIENTE");
            entity.Property(e => e.IsSustitucion).HasColumnName("IS_SUSTITUCION");
            entity.Property(e => e.IsTecnicoForaneo).HasColumnName("IS_TECNICO_FORANEO");
            entity.Property(e => e.MiComercio)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("MI_COMERCIO");
            entity.Property(e => e.MinsDowntime).HasColumnName("MINS_DOWNTIME");
            entity.Property(e => e.MotivoCobro)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("MOTIVO_COBRO");
            entity.Property(e => e.MotivoRetipificado)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("MOTIVO_RETIPIFICADO");
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.NoAr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AR");
            entity.Property(e => e.NoDiasLiberacion).HasColumnName("NO_DIAS_LIBERACION");
            entity.Property(e => e.NoEquipo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_EQUIPO");
            entity.Property(e => e.NoInventario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_INVENTARIO");
            entity.Property(e => e.NoInventarioFalla)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_INVENTARIO_FALLA");
            entity.Property(e => e.NoReincidencias).HasColumnName("NO_REINCIDENCIAS");
            entity.Property(e => e.NoSerie)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");
            entity.Property(e => e.NoSerieFalla)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE_FALLA");
            entity.Property(e => e.NoSim)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SIM");
            entity.Property(e => e.NotViaticos).HasColumnName("NOT_VIATICOS");
            entity.Property(e => e.NotasRemedy)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NOTAS_REMEDY");
            entity.Property(e => e.OtorganteSoporteCliente)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("OTORGANTE_SOPORTE_CLIENTE");
            entity.Property(e => e.OtorganteTas)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("OTORGANTE_TAS");
            entity.Property(e => e.OtorganteVobo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("OTORGANTE_VOBO");
            entity.Property(e => e.OtorganteVoboCliente)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("OTORGANTE_VOBO_CLIENTE");
            entity.Property(e => e.OtorganteVoboTerceros)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("OTORGANTE_VOBO_TERCEROS");
            entity.Property(e => e.PersonaAtenderaComercio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("PERSONA_ATENDERA_COMERCIO");
            entity.Property(e => e.Poblacion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("POBLACION");
            entity.Property(e => e.Precio)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("PRECIO");
            entity.Property(e => e.PrecioExito)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("PRECIO_EXITO");
            entity.Property(e => e.ProveedorAtenderaComercio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("PROVEEDOR_ATENDERA_COMERCIO");
            entity.Property(e => e.Responsable)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RESPONSABLE");
            entity.Property(e => e.Rp).HasColumnName("RP");
            entity.Property(e => e.Rs).HasColumnName("RS");
            entity.Property(e => e.Segmento).HasColumnName("SEGMENTO");
            entity.Property(e => e.Sintoma)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("SINTOMA");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.Telefono)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");
            entity.Property(e => e.TelefonoComercio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("TELEFONO_COMERCIO");
            entity.Property(e => e.TerminalAmex).HasColumnName("TERMINAL_AMEX");
            entity.Property(e => e.TipoFalla).HasColumnName("TIPO_FALLA");
            entity.Property(e => e.TipoServicio).HasColumnName("TIPO_SERVICIO");
            entity.Property(e => e.Traslado).HasColumnName("TRASLADO");
            entity.Property(e => e.VoltajeNeutro)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("VOLTAJE_NEUTRO");
            entity.Property(e => e.VoltajeTierra)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("VOLTAJE_TIERRA");
            entity.Property(e => e.VoltajeTierraNeutro)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("VOLTAJE_TIERRA_NEUTRO");
        });

        modelBuilder.Entity<Respaldo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("RESPALDO");

            entity.Property(e => e.Efectividad)
                .HasColumnType("decimal(8, 2)")
                .HasColumnName("EFECTIVIDAD");
            entity.Property(e => e.FechaAlta)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ALTA");
            entity.Property(e => e.IdAuditoria).HasColumnName("ID_AUDITORIA");
            entity.Property(e => e.IdAuditoriaReporte)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_AUDITORIA_REPORTE");
            entity.Property(e => e.IdResponsableInventario).HasColumnName("ID_RESPONSABLE_INVENTARIO");
            entity.Property(e => e.IdTipoInventario).HasColumnName("ID_TIPO_INVENTARIO");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.ItemsEnSistema).HasColumnName("ITEMS_EN_SISTEMA");
            entity.Property(e => e.ItemsReportados).HasColumnName("ITEMS_REPORTADOS");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.StatusAuditoria)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("STATUS_AUDITORIA");
        });

        modelBuilder.Entity<RespaldoActualizacionFecha>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("RESPALDO_ACTUALIZACION_FECHA");

            entity.Property(e => e.AgregarDiasAtencion).HasColumnName("AGREGAR_DIAS_ATENCION");
            entity.Property(e => e.Atiende)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ATIENDE");
            entity.Property(e => e.AutorizadorRechazo)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("AUTORIZADOR_RECHAZO");
            entity.Property(e => e.Bitacora)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("BITACORA");
            entity.Property(e => e.CadenaCierre)
                .IsUnicode(false)
                .HasColumnName("CADENA_CIERRE");
            entity.Property(e => e.CadenaCierreEscrita)
                .HasMaxLength(3000)
                .IsUnicode(false)
                .HasColumnName("CADENA_CIERRE_ESCRITA");
            entity.Property(e => e.Caja)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("CAJA");
            entity.Property(e => e.CausaCancelacion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CAUSA_CANCELACION");
            entity.Property(e => e.CausaRechazo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CAUSA_RECHAZO");
            entity.Property(e => e.ClaveRechazo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CLAVE_RECHAZO");
            entity.Property(e => e.CodigoIntervencion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CODIGO_INTERVENCION");
            entity.Property(e => e.Colonia)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("COLONIA");
            entity.Property(e => e.Concepto)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CONCEPTO");
            entity.Property(e => e.CorreoEjecutivo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CORREO_EJECUTIVO");
            entity.Property(e => e.Cp)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("CP");
            entity.Property(e => e.DescCorta)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_CORTA");
            entity.Property(e => e.DescEquipo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_EQUIPO");
            entity.Property(e => e.DescNegocio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_NEGOCIO");
            entity.Property(e => e.DescripcionTrabajo)
                .HasMaxLength(3000)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_TRABAJO");
            entity.Property(e => e.DigitoVerificador)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("DIGITO_VERIFICADOR");
            entity.Property(e => e.Direccion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");
            entity.Property(e => e.DireccionAlternaComercio)
                .IsUnicode(false)
                .HasColumnName("DIRECCION_ALTERNA_COMERCIO");
            entity.Property(e => e.DueBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("due_by");
            entity.Property(e => e.Duracion).HasColumnName("DURACION");
            entity.Property(e => e.Equipo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("EQUIPO");
            entity.Property(e => e.Estado)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ESTADO");
            entity.Property(e => e.FallaEncontrada)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("FALLA_ENCONTRADA");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.FecAltaHorasAtencion)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA_HORAS_ATENCION");
            entity.Property(e => e.FecAltaReglaStatusAr)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA_REGLA_STATUS_AR");
            entity.Property(e => e.FecAtencion)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ATENCION");
            entity.Property(e => e.FecAtencionOriginal)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ATENCION_ORIGINAL");
            entity.Property(e => e.FecCarga)
                .HasColumnType("datetime")
                .HasColumnName("FEC_CARGA");
            entity.Property(e => e.FecCierre)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_CIERRE");
            entity.Property(e => e.FecConvenio)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_CONVENIO");
            entity.Property(e => e.FecFinIngeniero)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_FIN_INGENIERO");
            entity.Property(e => e.FecGarantia)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_GARANTIA");
            entity.Property(e => e.FecIniIngeniero)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_INI_INGENIERO");
            entity.Property(e => e.FecInicio)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_INICIO");
            entity.Property(e => e.FecIntento1)
                .HasColumnType("datetime")
                .HasColumnName("FEC_INTENTO_1");
            entity.Property(e => e.FecIntento2)
                .HasColumnType("datetime")
                .HasColumnName("FEC_INTENTO_2");
            entity.Property(e => e.FecIntento3)
                .HasColumnType("datetime")
                .HasColumnName("FEC_INTENTO_3");
            entity.Property(e => e.FecIntento4)
                .HasColumnType("datetime")
                .HasColumnName("FEC_INTENTO_4");
            entity.Property(e => e.FecLlegada)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_LLEGADA");
            entity.Property(e => e.FecLlegadaTerceros)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_LLEGADA_TERCEROS");
            entity.Property(e => e.FecStatusAr)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_STATUS_AR");
            entity.Property(e => e.FolioServicio)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FOLIO_SERVICIO");
            entity.Property(e => e.FolioTas)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("FOLIO_TAS");
            entity.Property(e => e.FolioTelecarga).HasColumnName("FOLIO_TELECARGA");
            entity.Property(e => e.FolioTir)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FOLIO_TIR");
            entity.Property(e => e.FolioValidacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FOLIO_VALIDACION");
            entity.Property(e => e.HoraAtencionFin).HasColumnName("HORA_ATENCION_FIN");
            entity.Property(e => e.HoraAtencionIni).HasColumnName("HORA_ATENCION_INI");
            entity.Property(e => e.HorasAtencion).HasColumnName("HORAS_ATENCION");
            entity.Property(e => e.HorasAtencionWincor)
                .HasColumnType("numeric(18, 0)")
                .HasColumnName("HORAS_ATENCION_WINCOR");
            entity.Property(e => e.HorasGarantia).HasColumnName("HORAS_GARANTIA");
            entity.Property(e => e.HorasGarantiaWincor)
                .HasColumnType("numeric(18, 0)")
                .HasColumnName("HORAS_GARANTIA_WINCOR");
            entity.Property(e => e.IdAplicativo).HasColumnName("ID_APLICATIVO");
            entity.Property(e => e.IdAr)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_AR");
            entity.Property(e => e.IdArOriginal).HasColumnName("ID_AR_ORIGINAL");
            entity.Property(e => e.IdAttach1).HasColumnName("ID_ATTACH1");
            entity.Property(e => e.IdAttach2).HasColumnName("ID_ATTACH2");
            entity.Property(e => e.IdCalificaContacto).HasColumnName("ID_CALIFICA_CONTACTO");
            entity.Property(e => e.IdCalificaIntento1).HasColumnName("ID_CALIFICA_INTENTO_1");
            entity.Property(e => e.IdCalificaIntento2).HasColumnName("ID_CALIFICA_INTENTO_2");
            entity.Property(e => e.IdCalificaIntento3).HasColumnName("ID_CALIFICA_INTENTO_3");
            entity.Property(e => e.IdCalificaIntento4).HasColumnName("ID_CALIFICA_INTENTO_4");
            entity.Property(e => e.IdCarga).HasColumnName("ID_CARGA");
            entity.Property(e => e.IdCausa).HasColumnName("ID_CAUSA");
            entity.Property(e => e.IdCausaRechazo).HasColumnName("ID_CAUSA_RECHAZO");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdConcepto).HasColumnName("ID_CONCEPTO");
            entity.Property(e => e.IdConectividad).HasColumnName("ID_CONECTIVIDAD");
            entity.Property(e => e.IdDescripcionTrabajo).HasColumnName("ID_DESCRIPCION_TRABAJO");
            entity.Property(e => e.IdDispatcher).HasColumnName("ID_DISPATCHER");
            entity.Property(e => e.IdEquipoCliente).HasColumnName("ID_EQUIPO_CLIENTE");
            entity.Property(e => e.IdEspecifTipoFalla).HasColumnName("ID_ESPECIF_TIPO_FALLA");
            entity.Property(e => e.IdEspecificaCausaRechazo).HasColumnName("ID_ESPECIFICA_CAUSA_RECHAZO");
            entity.Property(e => e.IdEstado).HasColumnName("ID_ESTADO");
            entity.Property(e => e.IdFalla).HasColumnName("ID_FALLA");
            entity.Property(e => e.IdModeloFalla).HasColumnName("ID_MODELO_FALLA");
            entity.Property(e => e.IdModeloReq).HasColumnName("ID_MODELO_REQ");
            entity.Property(e => e.IdMoneda).HasColumnName("ID_MONEDA");
            entity.Property(e => e.IdNegocio).HasColumnName("ID_NEGOCIO");
            entity.Property(e => e.IdPlaza).HasColumnName("ID_PLAZA");
            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");
            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");
            entity.Property(e => e.IdProyecto).HasColumnName("ID_PROYECTO");
            entity.Property(e => e.IdRegion).HasColumnName("ID_REGION");
            entity.Property(e => e.IdReglaStatusAr).HasColumnName("ID_REGLA_STATUS_AR");
            entity.Property(e => e.IdReporteCierre).HasColumnName("ID_REPORTE_CIERRE");
            entity.Property(e => e.IdResponsableCancelacionProgramado).HasColumnName("ID_RESPONSABLE_CANCELACION_PROGRAMADO");
            entity.Property(e => e.IdSegmento).HasColumnName("ID_SEGMENTO");
            entity.Property(e => e.IdServicio).HasColumnName("ID_SERVICIO");
            entity.Property(e => e.IdSolucion).HasColumnName("ID_SOLUCION");
            entity.Property(e => e.IdStatusAr).HasColumnName("ID_STATUS_AR");
            entity.Property(e => e.IdStatusReasonCodes).HasColumnName("ID_STATUS_REASON_CODES");
            entity.Property(e => e.IdStatusValidacionPrefacturacion).HasColumnName("ID_STATUS_VALIDACION_PREFACTURACION");
            entity.Property(e => e.IdTecnico).HasColumnName("ID_TECNICO");
            entity.Property(e => e.IdTipoCobro).HasColumnName("ID_TIPO_COBRO");
            entity.Property(e => e.IdTipoEquipo).HasColumnName("ID_TIPO_EQUIPO");
            entity.Property(e => e.IdTipoFallaEncontrada).HasColumnName("ID_TIPO_FALLA_ENCONTRADA");
            entity.Property(e => e.IdTipoPlaza).HasColumnName("ID_TIPO_PLAZA");
            entity.Property(e => e.IdTipoPrecio).HasColumnName("ID_TIPO_PRECIO");
            entity.Property(e => e.IdTipoServicio).HasColumnName("ID_TIPO_SERVICIO");
            entity.Property(e => e.IdUnidadAtendida).HasColumnName("ID_UNIDAD_ATENDIDA");
            entity.Property(e => e.IdUsuarioCierre).HasColumnName("ID_USUARIO_CIERRE");
            entity.Property(e => e.IdZona).HasColumnName("ID_ZONA");
            entity.Property(e => e.Insumos).HasColumnName("INSUMOS");
            entity.Property(e => e.IntensidadSenial)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("INTENSIDAD_SENIAL");
            entity.Property(e => e.IntentoContacto).HasColumnName("INTENTO_CONTACTO");
            entity.Property(e => e.IsActualizacion).HasColumnName("IS_ACTUALIZACION");
            entity.Property(e => e.IsBoletin).HasColumnName("IS_BOLETIN");
            entity.Property(e => e.IsCobrable).HasColumnName("IS_COBRABLE");
            entity.Property(e => e.IsDuplicada).HasColumnName("IS_DUPLICADA");
            entity.Property(e => e.IsExito).HasColumnName("IS_EXITO");
            entity.Property(e => e.IsFollowDispatch).HasColumnName("IS_FOLLOW_DISPATCH");
            entity.Property(e => e.IsGarantia).HasColumnName("IS_GARANTIA");
            entity.Property(e => e.IsIngresoManual).HasColumnName("IS_INGRESO_MANUAL");
            entity.Property(e => e.IsInstalacion).HasColumnName("IS_INSTALACION");
            entity.Property(e => e.IsInterfazBancomer).HasColumnName("IS_INTERFAZ_BANCOMER");
            entity.Property(e => e.IsLocal).HasColumnName("IS_LOCAL");
            entity.Property(e => e.IsPdf).HasColumnName("IS_PDF");
            entity.Property(e => e.IsProgramado).HasColumnName("IS_PROGRAMADO");
            entity.Property(e => e.IsRetipificado).HasColumnName("IS_RETIPIFICADO");
            entity.Property(e => e.IsRetiro).HasColumnName("IS_RETIRO");
            entity.Property(e => e.IsSimRemplazada).HasColumnName("IS_SIM_REMPLAZADA");
            entity.Property(e => e.IsSoporteCliente).HasColumnName("IS_SOPORTE_CLIENTE");
            entity.Property(e => e.IsSustitucion).HasColumnName("IS_SUSTITUCION");
            entity.Property(e => e.IsTecnicoForaneo).HasColumnName("IS_TECNICO_FORANEO");
            entity.Property(e => e.MiComercio)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("MI_COMERCIO");
            entity.Property(e => e.MinsDowntime).HasColumnName("MINS_DOWNTIME");
            entity.Property(e => e.MotivoCobro)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("MOTIVO_COBRO");
            entity.Property(e => e.MotivoRetipificado)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("MOTIVO_RETIPIFICADO");
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.NoAr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AR");
            entity.Property(e => e.NoDiasLiberacion).HasColumnName("NO_DIAS_LIBERACION");
            entity.Property(e => e.NoEquipo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_EQUIPO");
            entity.Property(e => e.NoInventario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_INVENTARIO");
            entity.Property(e => e.NoInventarioFalla)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_INVENTARIO_FALLA");
            entity.Property(e => e.NoReincidencias).HasColumnName("NO_REINCIDENCIAS");
            entity.Property(e => e.NoSerie)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");
            entity.Property(e => e.NoSerieFalla)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE_FALLA");
            entity.Property(e => e.NoSim)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SIM");
            entity.Property(e => e.NotViaticos).HasColumnName("NOT_VIATICOS");
            entity.Property(e => e.NotasRemedy)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NOTAS_REMEDY");
            entity.Property(e => e.OtorganteSoporteCliente)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("OTORGANTE_SOPORTE_CLIENTE");
            entity.Property(e => e.OtorganteTas)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("OTORGANTE_TAS");
            entity.Property(e => e.OtorganteVobo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("OTORGANTE_VOBO");
            entity.Property(e => e.OtorganteVoboCliente)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("OTORGANTE_VOBO_CLIENTE");
            entity.Property(e => e.OtorganteVoboTerceros)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("OTORGANTE_VOBO_TERCEROS");
            entity.Property(e => e.PersonaAtenderaComercio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("PERSONA_ATENDERA_COMERCIO");
            entity.Property(e => e.Poblacion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("POBLACION");
            entity.Property(e => e.Precio)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("PRECIO");
            entity.Property(e => e.PrecioExito)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("PRECIO_EXITO");
            entity.Property(e => e.ProveedorAtenderaComercio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("PROVEEDOR_ATENDERA_COMERCIO");
            entity.Property(e => e.Responsable)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RESPONSABLE");
            entity.Property(e => e.Rp).HasColumnName("RP");
            entity.Property(e => e.Rs).HasColumnName("RS");
            entity.Property(e => e.Segmento).HasColumnName("SEGMENTO");
            entity.Property(e => e.Sintoma)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("SINTOMA");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.Telefono)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");
            entity.Property(e => e.TelefonoComercio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("TELEFONO_COMERCIO");
            entity.Property(e => e.TerminalAmex).HasColumnName("TERMINAL_AMEX");
            entity.Property(e => e.TipoFalla).HasColumnName("TIPO_FALLA");
            entity.Property(e => e.TipoServicio).HasColumnName("TIPO_SERVICIO");
            entity.Property(e => e.Traslado).HasColumnName("TRASLADO");
            entity.Property(e => e.VoltajeNeutro)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("VOLTAJE_NEUTRO");
            entity.Property(e => e.VoltajeTierra)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("VOLTAJE_TIERRA");
            entity.Property(e => e.VoltajeTierraNeutro)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("VOLTAJE_TIERRA_NEUTRO");
        });

        modelBuilder.Entity<RespaldoAdam>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("respaldo_adam");

            entity.Property(e => e.Aplicativo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APLICATIVO");
            entity.Property(e => e.Cliente)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("CLIENTE");
            entity.Property(e => e.Comentario)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("COMENTARIO");
            entity.Property(e => e.Conectividad)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CONECTIVIDAD");
            entity.Property(e => e.Daniada).HasColumnName("DANIADA");
            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");
            entity.Property(e => e.IdAuditoria).HasColumnName("ID_AUDITORIA");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdFisico).HasColumnName("ID_FISICO");
            entity.Property(e => e.IdModelo).HasColumnName("ID_MODELO");
            entity.Property(e => e.IdRazon).HasColumnName("ID_RAZON");
            entity.Property(e => e.IdStatusUnidad).HasColumnName("ID_STATUS_UNIDAD");
            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");
            entity.Property(e => e.IdUnidadPaso)
                .ValueGeneratedOnAdd()
                .HasColumnName("id_unidad_paso");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.IsConfirmacion).HasColumnName("IS_CONFIRMACION");
            entity.Property(e => e.IsNoConfirmacion).HasColumnName("IS_NO_CONFIRMACION");
            entity.Property(e => e.Marca)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MARCA");
            entity.Property(e => e.Modelo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MODELO");
            entity.Property(e => e.NoSerie)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");
            entity.Property(e => e.Producto)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PRODUCTO");
        });

        modelBuilder.Entity<RespaldoBdMenu>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("respaldo_bd_menu");

            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID");
            entity.Property(e => e.IdMenu0).HasColumnName("ID_MENU0");
            entity.Property(e => e.IdMenu1).HasColumnName("ID_MENU1");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
        });

        modelBuilder.Entity<RespaldoCProductosNegocio>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("RESPALDO_C_PRODUCTOS_NEGOCIOS");

            entity.Property(e => e.DescProductoNegocio)
                .IsUnicode(false)
                .HasColumnName("DESC_PRODUCTO_NEGOCIO");
            entity.Property(e => e.IdProductoNegocio)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_PRODUCTO_NEGOCIO");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<RespaldoFechaGarantium>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("respaldo_Fecha_garantia");

            entity.Property(e => e.AgregarDiasAtencion).HasColumnName("AGREGAR_DIAS_ATENCION");
            entity.Property(e => e.Atiende)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ATIENDE");
            entity.Property(e => e.AutorizadorRechazo)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("AUTORIZADOR_RECHAZO");
            entity.Property(e => e.Bitacora)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("BITACORA");
            entity.Property(e => e.CadenaCierre)
                .IsUnicode(false)
                .HasColumnName("CADENA_CIERRE");
            entity.Property(e => e.CadenaCierreEscrita)
                .HasMaxLength(3000)
                .IsUnicode(false)
                .HasColumnName("CADENA_CIERRE_ESCRITA");
            entity.Property(e => e.Caja)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CAJA");
            entity.Property(e => e.CausaCancelacion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CAUSA_CANCELACION");
            entity.Property(e => e.CausaRechazo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CAUSA_RECHAZO");
            entity.Property(e => e.ClaveRechazo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CLAVE_RECHAZO");
            entity.Property(e => e.CodigoIntervencion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CODIGO_INTERVENCION");
            entity.Property(e => e.Colonia)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("COLONIA");
            entity.Property(e => e.Concepto)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CONCEPTO");
            entity.Property(e => e.CorreoEjecutivo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CORREO_EJECUTIVO");
            entity.Property(e => e.Cp)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("CP");
            entity.Property(e => e.DescCorta)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_CORTA");
            entity.Property(e => e.DescEquipo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_EQUIPO");
            entity.Property(e => e.DescNegocio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_NEGOCIO");
            entity.Property(e => e.DescripcionTrabajo)
                .HasMaxLength(3000)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_TRABAJO");
            entity.Property(e => e.DigitoVerificador)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("DIGITO_VERIFICADOR");
            entity.Property(e => e.Direccion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");
            entity.Property(e => e.DireccionAlternaComercio)
                .IsUnicode(false)
                .HasColumnName("DIRECCION_ALTERNA_COMERCIO");
            entity.Property(e => e.DueBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("due_by");
            entity.Property(e => e.Duracion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DURACION");
            entity.Property(e => e.Equipo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("EQUIPO");
            entity.Property(e => e.Estado)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ESTADO");
            entity.Property(e => e.FallaEncontrada)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("FALLA_ENCONTRADA");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.FecAltaHorasAtencion)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA_HORAS_ATENCION");
            entity.Property(e => e.FecAltaReglaStatusAr)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA_REGLA_STATUS_AR");
            entity.Property(e => e.FecAtencion)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ATENCION");
            entity.Property(e => e.FecAtencionOriginal)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ATENCION_ORIGINAL");
            entity.Property(e => e.FecCarga)
                .HasColumnType("datetime")
                .HasColumnName("FEC_CARGA");
            entity.Property(e => e.FecCierre)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_CIERRE");
            entity.Property(e => e.FecConvenio)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_CONVENIO");
            entity.Property(e => e.FecFinIngeniero)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_FIN_INGENIERO");
            entity.Property(e => e.FecGarantia)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_GARANTIA");
            entity.Property(e => e.FecIniIngeniero)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_INI_INGENIERO");
            entity.Property(e => e.FecInicio)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_INICIO");
            entity.Property(e => e.FecIntento1)
                .HasColumnType("datetime")
                .HasColumnName("FEC_INTENTO_1");
            entity.Property(e => e.FecIntento2)
                .HasColumnType("datetime")
                .HasColumnName("FEC_INTENTO_2");
            entity.Property(e => e.FecIntento3)
                .HasColumnType("datetime")
                .HasColumnName("FEC_INTENTO_3");
            entity.Property(e => e.FecIntento4)
                .HasColumnType("datetime")
                .HasColumnName("FEC_INTENTO_4");
            entity.Property(e => e.FecLlegada)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_LLEGADA");
            entity.Property(e => e.FecLlegadaTerceros)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_LLEGADA_TERCEROS");
            entity.Property(e => e.FecStatusAr)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_STATUS_AR");
            entity.Property(e => e.FolioServicio)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FOLIO_SERVICIO");
            entity.Property(e => e.FolioTas)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("FOLIO_TAS");
            entity.Property(e => e.FolioTelecarga)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FOLIO_TELECARGA");
            entity.Property(e => e.FolioTir)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FOLIO_TIR");
            entity.Property(e => e.FolioValidacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FOLIO_VALIDACION");
            entity.Property(e => e.HoraAtencionFin).HasColumnName("HORA_ATENCION_FIN");
            entity.Property(e => e.HoraAtencionIni).HasColumnName("HORA_ATENCION_INI");
            entity.Property(e => e.HorasAtencion).HasColumnName("HORAS_ATENCION");
            entity.Property(e => e.HorasAtencionWincor)
                .HasColumnType("numeric(18, 0)")
                .HasColumnName("HORAS_ATENCION_WINCOR");
            entity.Property(e => e.HorasGarantia).HasColumnName("HORAS_GARANTIA");
            entity.Property(e => e.HorasGarantiaWincor)
                .HasColumnType("numeric(18, 0)")
                .HasColumnName("HORAS_GARANTIA_WINCOR");
            entity.Property(e => e.IdAplicativo).HasColumnName("ID_APLICATIVO");
            entity.Property(e => e.IdAr)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_AR");
            entity.Property(e => e.IdArOriginal).HasColumnName("ID_AR_ORIGINAL");
            entity.Property(e => e.IdAttach1).HasColumnName("ID_ATTACH1");
            entity.Property(e => e.IdAttach2).HasColumnName("ID_ATTACH2");
            entity.Property(e => e.IdCalificaContacto).HasColumnName("ID_CALIFICA_CONTACTO");
            entity.Property(e => e.IdCalificaIntento1).HasColumnName("ID_CALIFICA_INTENTO_1");
            entity.Property(e => e.IdCalificaIntento2).HasColumnName("ID_CALIFICA_INTENTO_2");
            entity.Property(e => e.IdCalificaIntento3).HasColumnName("ID_CALIFICA_INTENTO_3");
            entity.Property(e => e.IdCalificaIntento4).HasColumnName("ID_CALIFICA_INTENTO_4");
            entity.Property(e => e.IdCarga).HasColumnName("ID_CARGA");
            entity.Property(e => e.IdCausa).HasColumnName("ID_CAUSA");
            entity.Property(e => e.IdCausaRechazo).HasColumnName("ID_CAUSA_RECHAZO");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdConcepto).HasColumnName("ID_CONCEPTO");
            entity.Property(e => e.IdConectividad).HasColumnName("ID_CONECTIVIDAD");
            entity.Property(e => e.IdDescripcionTrabajo).HasColumnName("ID_DESCRIPCION_TRABAJO");
            entity.Property(e => e.IdDispatcher).HasColumnName("ID_DISPATCHER");
            entity.Property(e => e.IdEquipoCliente).HasColumnName("ID_EQUIPO_CLIENTE");
            entity.Property(e => e.IdEspecifTipoFalla).HasColumnName("ID_ESPECIF_TIPO_FALLA");
            entity.Property(e => e.IdEspecificaCausaRechazo).HasColumnName("ID_ESPECIFICA_CAUSA_RECHAZO");
            entity.Property(e => e.IdEstado).HasColumnName("ID_ESTADO");
            entity.Property(e => e.IdFalla).HasColumnName("ID_FALLA");
            entity.Property(e => e.IdModeloFalla).HasColumnName("ID_MODELO_FALLA");
            entity.Property(e => e.IdModeloReq).HasColumnName("ID_MODELO_REQ");
            entity.Property(e => e.IdMoneda).HasColumnName("ID_MONEDA");
            entity.Property(e => e.IdNegocio).HasColumnName("ID_NEGOCIO");
            entity.Property(e => e.IdPlaza).HasColumnName("ID_PLAZA");
            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");
            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");
            entity.Property(e => e.IdProyecto).HasColumnName("ID_PROYECTO");
            entity.Property(e => e.IdRegion).HasColumnName("ID_REGION");
            entity.Property(e => e.IdReglaStatusAr).HasColumnName("ID_REGLA_STATUS_AR");
            entity.Property(e => e.IdReporteCierre).HasColumnName("ID_REPORTE_CIERRE");
            entity.Property(e => e.IdResponsableCancelacionProgramado).HasColumnName("ID_RESPONSABLE_CANCELACION_PROGRAMADO");
            entity.Property(e => e.IdSegmento).HasColumnName("ID_SEGMENTO");
            entity.Property(e => e.IdServicio).HasColumnName("ID_SERVICIO");
            entity.Property(e => e.IdSolucion).HasColumnName("ID_SOLUCION");
            entity.Property(e => e.IdStatusAr).HasColumnName("ID_STATUS_AR");
            entity.Property(e => e.IdStatusReasonCodes).HasColumnName("ID_STATUS_REASON_CODES");
            entity.Property(e => e.IdStatusValidacionPrefacturacion).HasColumnName("ID_STATUS_VALIDACION_PREFACTURACION");
            entity.Property(e => e.IdTecnico).HasColumnName("ID_TECNICO");
            entity.Property(e => e.IdTipoCobro).HasColumnName("ID_TIPO_COBRO");
            entity.Property(e => e.IdTipoEquipo).HasColumnName("ID_TIPO_EQUIPO");
            entity.Property(e => e.IdTipoFallaEncontrada).HasColumnName("ID_TIPO_FALLA_ENCONTRADA");
            entity.Property(e => e.IdTipoPlaza).HasColumnName("ID_TIPO_PLAZA");
            entity.Property(e => e.IdTipoPrecio).HasColumnName("ID_TIPO_PRECIO");
            entity.Property(e => e.IdTipoServicio).HasColumnName("ID_TIPO_SERVICIO");
            entity.Property(e => e.IdUnidadAtendida).HasColumnName("ID_UNIDAD_ATENDIDA");
            entity.Property(e => e.IdUsuarioCierre).HasColumnName("ID_USUARIO_CIERRE");
            entity.Property(e => e.IdZona).HasColumnName("ID_ZONA");
            entity.Property(e => e.Insumos).HasColumnName("INSUMOS");
            entity.Property(e => e.IntensidadSenial)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("INTENSIDAD_SENIAL");
            entity.Property(e => e.IntentoContacto).HasColumnName("INTENTO_CONTACTO");
            entity.Property(e => e.IsActualizacion).HasColumnName("IS_ACTUALIZACION");
            entity.Property(e => e.IsBoletin).HasColumnName("IS_BOLETIN");
            entity.Property(e => e.IsCobrable).HasColumnName("IS_COBRABLE");
            entity.Property(e => e.IsDuplicada).HasColumnName("IS_DUPLICADA");
            entity.Property(e => e.IsExito).HasColumnName("IS_EXITO");
            entity.Property(e => e.IsFollowDispatch).HasColumnName("IS_FOLLOW_DISPATCH");
            entity.Property(e => e.IsGarantia).HasColumnName("IS_GARANTIA");
            entity.Property(e => e.IsIngresoManual).HasColumnName("IS_INGRESO_MANUAL");
            entity.Property(e => e.IsInstalacion).HasColumnName("IS_INSTALACION");
            entity.Property(e => e.IsInterfazBancomer).HasColumnName("IS_INTERFAZ_BANCOMER");
            entity.Property(e => e.IsLocal).HasColumnName("IS_LOCAL");
            entity.Property(e => e.IsPdf).HasColumnName("IS_PDF");
            entity.Property(e => e.IsProgramado).HasColumnName("IS_PROGRAMADO");
            entity.Property(e => e.IsRetipificado).HasColumnName("IS_RETIPIFICADO");
            entity.Property(e => e.IsRetiro).HasColumnName("IS_RETIRO");
            entity.Property(e => e.IsSimRemplazada)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("IS_SIM_REMPLAZADA");
            entity.Property(e => e.IsSoporteCliente).HasColumnName("IS_SOPORTE_CLIENTE");
            entity.Property(e => e.IsSustitucion).HasColumnName("IS_SUSTITUCION");
            entity.Property(e => e.IsTecnicoForaneo).HasColumnName("IS_TECNICO_FORANEO");
            entity.Property(e => e.MiComercio)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("MI_COMERCIO");
            entity.Property(e => e.MinsDowntime).HasColumnName("MINS_DOWNTIME");
            entity.Property(e => e.MotivoCobro)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("MOTIVO_COBRO");
            entity.Property(e => e.MotivoRetipificado)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("MOTIVO_RETIPIFICADO");
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.NoAr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AR");
            entity.Property(e => e.NoDiasLiberacion).HasColumnName("NO_DIAS_LIBERACION");
            entity.Property(e => e.NoEquipo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_EQUIPO");
            entity.Property(e => e.NoInventario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_INVENTARIO");
            entity.Property(e => e.NoInventarioFalla)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_INVENTARIO_FALLA");
            entity.Property(e => e.NoReincidencias).HasColumnName("NO_REINCIDENCIAS");
            entity.Property(e => e.NoSerie)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");
            entity.Property(e => e.NoSerieFalla)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE_FALLA");
            entity.Property(e => e.NoSim)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("NO_SIM");
            entity.Property(e => e.NotViaticos).HasColumnName("NOT_VIATICOS");
            entity.Property(e => e.NotasRemedy)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NOTAS_REMEDY");
            entity.Property(e => e.OtorganteSoporteCliente)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("OTORGANTE_SOPORTE_CLIENTE");
            entity.Property(e => e.OtorganteTas)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("OTORGANTE_TAS");
            entity.Property(e => e.OtorganteVobo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("OTORGANTE_VOBO");
            entity.Property(e => e.OtorganteVoboCliente)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("OTORGANTE_VOBO_CLIENTE");
            entity.Property(e => e.OtorganteVoboTerceros)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("OTORGANTE_VOBO_TERCEROS");
            entity.Property(e => e.PersonaAtenderaComercio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("PERSONA_ATENDERA_COMERCIO");
            entity.Property(e => e.Poblacion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("POBLACION");
            entity.Property(e => e.Precio)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PRECIO");
            entity.Property(e => e.PrecioExito)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("PRECIO_EXITO");
            entity.Property(e => e.ProveedorAtenderaComercio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("PROVEEDOR_ATENDERA_COMERCIO");
            entity.Property(e => e.Responsable)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RESPONSABLE");
            entity.Property(e => e.Rp).HasColumnName("RP");
            entity.Property(e => e.Rs).HasColumnName("RS");
            entity.Property(e => e.Segmento).HasColumnName("SEGMENTO");
            entity.Property(e => e.Sintoma)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("SINTOMA");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.Telefono)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");
            entity.Property(e => e.TelefonoComercio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("TELEFONO_COMERCIO");
            entity.Property(e => e.TerminalAmex).HasColumnName("TERMINAL_AMEX");
            entity.Property(e => e.TipoFalla).HasColumnName("TIPO_FALLA");
            entity.Property(e => e.TipoServicio).HasColumnName("TIPO_SERVICIO");
            entity.Property(e => e.Traslado).HasColumnName("TRASLADO");
            entity.Property(e => e.VoltajeNeutro)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("VOLTAJE_NEUTRO");
            entity.Property(e => e.VoltajeTierra)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("VOLTAJE_TIERRA");
            entity.Property(e => e.VoltajeTierraNeutro)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("VOLTAJE_TIERRA_NEUTRO");
        });

        modelBuilder.Entity<RespaldoLogBdIngenieroAsignacion>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("RESPALDO_LOG_BD_INGENIERO_ASIGNACION");

            entity.Property(e => e.IdFalla).HasColumnName("ID_FALLA");
            entity.Property(e => e.IdIngenieroAsignacion)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_INGENIERO_ASIGNACION");
            entity.Property(e => e.IdRegion).HasColumnName("ID_REGION");
            entity.Property(e => e.IdServicio).HasColumnName("ID_SERVICIO");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.Status)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<RespaldoMenu>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("RESPALDO_MENU");

            entity.Property(e => e.DesMenu)
                .HasMaxLength(50)
                .HasColumnName("DES_MENU");
            entity.Property(e => e.DesName)
                .HasMaxLength(75)
                .HasColumnName("DES_NAME");
            entity.Property(e => e.Href)
                .IsUnicode(false)
                .HasColumnName("HREF");
            entity.Property(e => e.HrefV3)
                .IsUnicode(false)
                .HasColumnName("HREF_V3");
            entity.Property(e => e.IdMenu)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_MENU");
            entity.Property(e => e.IdParent).HasColumnName("ID_PARENT");
            entity.Property(e => e.IdParentV3).HasColumnName("ID_PARENT_V3");
            entity.Property(e => e.Image)
                .HasMaxLength(50)
                .HasColumnName("IMAGE");
            entity.Property(e => e.IsV2).HasColumnName("IS_V2");
            entity.Property(e => e.IsV3).HasColumnName("IS_V3");
            entity.Property(e => e.Nivel).HasColumnName("NIVEL");
            entity.Property(e => e.NivelV3).HasColumnName("NIVEL_V3");
            entity.Property(e => e.Orden).HasColumnName("ORDEN");
            entity.Property(e => e.OrdenV3).HasColumnName("ORDEN_V3");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasColumnName("STATUS");
            entity.Property(e => e.Target)
                .HasMaxLength(50)
                .HasColumnName("TARGET");
            entity.Property(e => e.TargetV3)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TARGET_V3");
        });

        modelBuilder.Entity<RespaldoTabla>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("RESPALDO_TABLA");

            entity.Property(e => e.Aplicativo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APLICATIVO");
            entity.Property(e => e.ComentarioIncoformidad)
                .IsUnicode(false)
                .HasColumnName("COMENTARIO_INCOFORMIDAD");
            entity.Property(e => e.Conectividad)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CONECTIVIDAD");
            entity.Property(e => e.Daniada).HasColumnName("DANIADA");
            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");
            entity.Property(e => e.IdAuditoria).HasColumnName("ID_AUDITORIA");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdFisico).HasColumnName("ID_FISICO");
            entity.Property(e => e.IdModelo).HasColumnName("ID_MODELO");
            entity.Property(e => e.IdRazon).HasColumnName("ID_RAZON");
            entity.Property(e => e.IdReporteAuditoriaUnidad)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_REPORTE_AUDITORIA_UNIDAD");
            entity.Property(e => e.IdStatusUnidad).HasColumnName("ID_STATUS_UNIDAD");
            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.IsConfirmacion).HasColumnName("IS_CONFIRMACION");
            entity.Property(e => e.Marca)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MARCA");
            entity.Property(e => e.NoSerie)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");
            entity.Property(e => e.Producto)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PRODUCTO");
        });

        modelBuilder.Entity<ResultadoDiferencia>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("RESULTADO_DIFERENCIAS");

            entity.Property(e => e.Cliente)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CLIENTE");
            entity.Property(e => e.FecAlta)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.FechaUltimoMovimiento)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("FECHA_ULTIMO_MOVIMIENTO");
            entity.Property(e => e.IdStatusUnidad).HasColumnName("ID_STATUS_UNIDAD");
            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");
            entity.Property(e => e.NoSerie)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");
            entity.Property(e => e.Producto)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("PRODUCTO");
            entity.Property(e => e.ResponsableActualUnidad)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("RESPONSABLE_ACTUAL_UNIDAD");
            entity.Property(e => e.ResponsableUltimoMovimiento)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("RESPONSABLE_ULTIMO_MOVIMIENTO");
            entity.Property(e => e.StatusActualUnidad)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("STATUS_ACTUAL_UNIDAD");
            entity.Property(e => e.StatusUltimoBitacoraUnidad)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("STATUS_ULTIMO_BITACORA_UNIDAD");
            entity.Property(e => e.UltimoUsuario)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("ULTIMO_USUARIO");
        });

        modelBuilder.Entity<ResumenGeneralAr>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("RESUMEN_GENERAL_AR");

            entity.Property(e => e.Anio).HasColumnName("ANIO");
            entity.Property(e => e.Mes).HasColumnName("MES");
            entity.Property(e => e.TotalArs).HasColumnName("TOTAL_ARS");
            entity.Property(e => e.TotalPendienteRefaccion).HasColumnName("TOTAL_PENDIENTE_REFACCION");
            entity.Property(e => e.TotalSinAccseso).HasColumnName("TOTAL_SIN_ACCSESO");
            entity.Property(e => e.TotalSinCustodia).HasColumnName("TOTAL_SIN_CUSTODIA");
            entity.Property(e => e.TotalSolicitudesViaticos).HasColumnName("TOTAL_SOLICITUDES_VIATICOS");
            entity.Property(e => e.TotalSoporteTecnico).HasColumnName("TOTAL_SOPORTE_TECNICO");
            entity.Property(e => e.TotalViaticos)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("TOTAL_VIATICOS");
            entity.Property(e => e.TotalVisitas).HasColumnName("TOTAL_VISITAS");
        });

        modelBuilder.Entity<SantanderInboxTemp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SANTANDER_INBOX_TEMP");

            entity.Property(e => e.Afiliacion)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Aplicacion)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("aplicacion");
            entity.Property(e => e.Caja)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("caja");
            entity.Property(e => e.CantidadInsmos)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("cantidad insmos");
            entity.Property(e => e.Chqplaza)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("chqplaza");
            entity.Property(e => e.Ciudad)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("ciudad");
            entity.Property(e => e.ColFiscal)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("col_fiscal");
            entity.Property(e => e.Colonia)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("colonia");
            entity.Property(e => e.Comentarios)
                .HasMaxLength(3000)
                .IsUnicode(false);
            entity.Property(e => e.Cp)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("cp");
            entity.Property(e => e.CpFiscal)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("cp_fiscal");
            entity.Property(e => e.Descsic)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("descsic");
            entity.Property(e => e.DetalleServicio)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Detalle Servicio");
            entity.Property(e => e.Direccion)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("direccion");
            entity.Property(e => e.DomFiscal)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("dom_fiscal");
            entity.Property(e => e.EdoFiscal)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("edo_fiscal");
            entity.Property(e => e.Estado)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("estado");
            entity.Property(e => e.FechaDeCarga)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("fecha de carga");
            entity.Property(e => e.FechaDeVencimiento)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("fecha de vencimiento");
            entity.Property(e => e.FolioTelecarga)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Folio telecarga");
            entity.Property(e => e.HoraApertura)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("hora_apertura");
            entity.Property(e => e.HoraCierre)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("hora_cierre");
            entity.Property(e => e.HorarioAtencion)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("horario atencion");
            entity.Property(e => e.LdFiscal)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("ld_fiscal");
            entity.Property(e => e.NombreAfiliacion)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("nombre afiliacion");
            entity.Property(e => e.Odt)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("ODT");
            entity.Property(e => e.PobFiscal)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("pob_fiscal");
            entity.Property(e => e.Razonsocial)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("razonsocial");
            entity.Property(e => e.Responsable)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("responsable");
            entity.Property(e => e.Rfc)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("rfc");
            entity.Property(e => e.Sic)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("sic");
            entity.Property(e => e.TelFiscal)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("tel_fiscal");
            entity.Property(e => e.Telefono)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("telefono");
            entity.Property(e => e.Terminal)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("terminal");
            entity.Property(e => e.TipoServicio)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Tipo Servicio");
        });

        modelBuilder.Entity<SantanderOutbox>(entity =>
        {
            entity.HasKey(e => e.IdSantanderOutbox);

            entity.ToTable("SANTANDER_OUTBOX");

            entity.Property(e => e.IdSantanderOutbox).HasColumnName("ID_SANTANDER_OUTBOX");
            entity.Property(e => e.FechaEnvio)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ENVIO");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IdTipoOutboxSantander).HasColumnName("ID_TIPO_OUTBOX_SANTANDER");
            entity.Property(e => e.NameFile)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NAME_FILE");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<SantanderOutboxCierre>(entity =>
        {
            entity.HasKey(e => e.IdSantanderOutboxCierre);

            entity.ToTable("SANTANDER_OUTBOX_CIERRE");

            entity.Property(e => e.IdSantanderOutboxCierre).HasColumnName("ID_SANTANDER_OUTBOX_CIERRE");
            entity.Property(e => e.Afiliacion)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Aplicacion)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Atendio)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Caja)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ComentariosSolucion)
                .HasMaxLength(3000)
                .IsUnicode(false)
                .HasColumnName("Comentarios Solucion");
            entity.Property(e => e.Estatus)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("estatus");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IdResultado)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("id_resultado");
            entity.Property(e => e.InsumosEntregados)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("insumos entregados");
            entity.Property(e => e.Odt)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ODT");
            entity.Property(e => e.SerieBaseInstalada)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("Serie Base instalada");
            entity.Property(e => e.SerieBaseRetirada)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("serie base retirada");
            entity.Property(e => e.SerieInstalada)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("serie instalada");
            entity.Property(e => e.SerieRetirada)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("serie retirada");
            entity.Property(e => e.SimInstalado)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("Sim instalado");
            entity.Property(e => e.SimRetirado)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("sim retirado");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.Version)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Sepomex>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SEPOMEX__3214EC27529A5705");

            entity.ToTable("SEPOMEX");

            entity.HasIndex(e => e.Id, "IX_SEPOMEX").IsUnique();

            entity.HasIndex(e => new { e.DCp, e.DEstado, e.DMnpio, e.DCiudad, e.DAsenta }, "IX_SEPOMEX_1");

            entity.HasIndex(e => e.DCp, "IX_SEPOMEX_2");

            entity.HasIndex(e => new { e.DCp, e.DEstado }, "IX_SEPOMEX_3");

            entity.HasIndex(e => new { e.DCp, e.DMnpio }, "IX_SEPOMEX_4");

            entity.HasIndex(e => e.DEstado, "missing_index_1249_1248");

            entity.HasIndex(e => e.DEstado, "missing_index_208_207");

            entity.HasIndex(e => e.DEstado, "missing_index_225906_225905");

            entity.HasIndex(e => e.DEstado, "missing_index_225908_225907");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.DAsenta)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("d_asenta");
            entity.Property(e => e.DCiudad)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("d_ciudad");
            entity.Property(e => e.DCp)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("d_CP");
            entity.Property(e => e.DEstado).HasColumnName("d_estado");
            entity.Property(e => e.DMnpio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("d_mnpio");
            entity.Property(e => e.IdTipoLocalidad).HasColumnName("ID_TIPO_LOCALIDAD");
        });

        modelBuilder.Entity<SepomexAnterior>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SEPOMEX_ANTERIOR");

            entity.Property(e => e.DAsenta)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("d_asenta");
            entity.Property(e => e.DCiudad)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("d_ciudad");
            entity.Property(e => e.DCp)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("d_CP");
            entity.Property(e => e.DEstado).HasColumnName("d_estado");
            entity.Property(e => e.DMnpio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("d_mnpio");
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.IdTipoLocalidad).HasColumnName("ID_TIPO_LOCALIDAD");
        });

        modelBuilder.Entity<SepomexEstado>(entity =>
        {
            entity.HasKey(e => e.IdEstado);

            entity.ToTable("SEPOMEX_ESTADOS");

            entity.Property(e => e.IdEstado).HasColumnName("ID_ESTADO");
            entity.Property(e => e.Abreviatura)
                .HasMaxLength(4)
                .IsFixedLength()
                .HasColumnName("ABREVIATURA");
            entity.Property(e => e.Estado)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("ESTADO");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<SepomexOld>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_SEPOMEX");

            entity.ToTable("SEPOMEX_old");

            entity.HasIndex(e => e.DEstado, "IX_MI_SEPOMEX_6551_6550");

            entity.HasIndex(e => e.DCp, "IX_SEPOMEX_d_CP").HasFillFactor(80);

            entity.HasIndex(e => e.DEstado, "IX_SEPOMEX_d_estado").HasFillFactor(80);

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.DAsenta)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("d_asenta");
            entity.Property(e => e.DCiudad)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("d_ciudad");
            entity.Property(e => e.DCp)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("d_CP");
            entity.Property(e => e.DEstado).HasColumnName("d_estado");
            entity.Property(e => e.DMnpio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("d_mnpio");
            entity.Property(e => e.IdTipoLocalidad).HasColumnName("ID_TIPO_LOCALIDAD");
        });

        modelBuilder.Entity<ServTecClt>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SERV_TEC_CLT");

            entity.Property(e => e.Atm).HasColumnName("ATM");
            entity.Property(e => e.Capacitacion).HasColumnName("CAPACITACION");
            entity.Property(e => e.DescCliente)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_CLIENTE");
            entity.Property(e => e.Interno).HasColumnName("INTERNO");
            entity.Property(e => e.Mf).HasColumnName("MF");
            entity.Property(e => e.Modem).HasColumnName("MODEM");
            entity.Property(e => e.Otros).HasColumnName("OTROS");
            entity.Property(e => e.Seguridad).HasColumnName("SEGURIDAD");
            entity.Property(e => e.Tnm).HasColumnName("TNM");
            entity.Property(e => e.Tpv).HasColumnName("TPV");
            entity.Property(e => e.TresM).HasColumnName("TRES_M");
        });

        modelBuilder.Entity<ServTecClte>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SERV_TEC_CLTE");

            entity.Property(e => e.BajíoFujitsu).HasColumnName("BAJÍO FUJITSU");
            entity.Property(e => e.BanamexPrimeraLin).HasColumnName("BANAMEX (PRIMERA LIN");
            entity.Property(e => e.BanamexTnm).HasColumnName("BANAMEX (TNM)");
            entity.Property(e => e.BanamexTurnos).HasColumnName("BANAMEX TURNOS");
            entity.Property(e => e.BanjércitoFujitsu).HasColumnName("BANJÉRCITO FUJITSU");
            entity.Property(e => e.BodyShop).HasColumnName("BODY SHOP");
            entity.Property(e => e.EGlobalBancomer).HasColumnName("E-GLOBAL - BANCOMER");
            entity.Property(e => e.Gnp).HasColumnName("GNP");
            entity.Property(e => e.HsbcMicroformas).HasColumnName("HSBC MICROFORMAS");
            entity.Property(e => e.HsbcTpv).HasColumnName("HSBC (TPV)");
            entity.Property(e => e.HsbcWincor).HasColumnName("HSBC WINCOR");
            entity.Property(e => e.Independencia).HasColumnName("INDEPENDENCIA");
            entity.Property(e => e.Ingeniero).HasColumnName("INGENIERO");
            entity.Property(e => e.MicroformasTpv).HasColumnName("MICROFORMAS TPV");
            entity.Property(e => e.Montepío).HasColumnName("MONTEPÍO");
            entity.Property(e => e.SRE).HasColumnName("S.R.E.");
            entity.Property(e => e.Santander).HasColumnName("SANTANDER");
            entity.Property(e => e.SantanderWincor).HasColumnName("SANTANDER WINCOR");
            entity.Property(e => e.Sat).HasColumnName("SAT");
            entity.Property(e => e.Softel).HasColumnName("SOFTEL");
            entity.Property(e => e.Telefonica).HasColumnName("TELEFONICA");
        });

        modelBuilder.Entity<ServiciosCerradosMe>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SERVICIOS_CERRADOS_MES");

            entity.Property(e => e.CantAr).HasColumnName("CANT_AR");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdPlaza).HasColumnName("ID_PLAZA");
            entity.Property(e => e.IdRegion).HasColumnName("ID_REGION");
            entity.Property(e => e.IdTecnico).HasColumnName("ID_TECNICO");
            entity.Property(e => e.IdZona).HasColumnName("ID_ZONA");
            entity.Property(e => e.MonthFecCierre).HasColumnName("MONTH_FEC_CIERRE");
            entity.Property(e => e.MonthStatusAr).HasColumnName("MONTH_STATUS_AR");
            entity.Property(e => e.Producto)
                .HasMaxLength(15)
                .IsFixedLength()
                .HasColumnName("PRODUCTO");
            entity.Property(e => e.YearFecCierre).HasColumnName("YEAR_FEC_CIERRE");
            entity.Property(e => e.YearStatusAr).HasColumnName("YEAR_STATUS_AR");
        });

        modelBuilder.Entity<ServiciosEnero2015>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SERVICIOS_ENERO_2015");

            entity.Property(e => e.CostoRefacciones).HasColumnName("COSTO_REFACCIONES");
            entity.Property(e => e.Curp)
                .HasMaxLength(18)
                .IsUnicode(false)
                .HasColumnName("CURP");
            entity.Property(e => e.DescCausaRechazo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_CAUSA_RECHAZO");
            entity.Property(e => e.DescCliente)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_CLIENTE");
            entity.Property(e => e.DescLocalidad)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("DESC_LOCALIDAD");
            entity.Property(e => e.DescRegion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_REGION");
            entity.Property(e => e.DescServicio)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("DESC_SERVICIO");
            entity.Property(e => e.DescTipoServicio)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_TIPO_SERVICIO");
            entity.Property(e => e.DescZona)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_ZONA");
            entity.Property(e => e.Direccion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");
            entity.Property(e => e.Estado)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ESTADO");
            entity.Property(e => e.FecCierre)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_CIERRE");
            entity.Property(e => e.FecInicio)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_INICIO");
            entity.Property(e => e.Fijo).HasColumnName("FIJO");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.Ingeniero)
                .HasMaxLength(152)
                .IsUnicode(false)
                .HasColumnName("INGENIERO");
            entity.Property(e => e.IsExito).HasColumnName("IS_EXITO");
            entity.Property(e => e.ManttoVehiculo).HasColumnName("MANTTO_VEHICULO");
            entity.Property(e => e.Mes).HasColumnName("MES");
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.NoAr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AR");
            entity.Property(e => e.Poblacion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("POBLACION");
            entity.Property(e => e.Producto)
                .HasMaxLength(15)
                .IsFixedLength()
                .HasColumnName("PRODUCTO");
            entity.Property(e => e.RentaVehiculo).HasColumnName("RENTA_VEHICULO");
            entity.Property(e => e.TipoVehiculo)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("TIPO_VEHICULO");
            entity.Property(e => e.Variable).HasColumnName("VARIABLE");
        });

        modelBuilder.Entity<ServiciosFebrero2015>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SERVICIOS_FEBRERO_2015");

            entity.Property(e => e.CostoRefacciones).HasColumnName("COSTO_REFACCIONES");
            entity.Property(e => e.Curp)
                .HasMaxLength(18)
                .IsUnicode(false)
                .HasColumnName("CURP");
            entity.Property(e => e.DescCausaRechazo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_CAUSA_RECHAZO");
            entity.Property(e => e.DescCliente)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_CLIENTE");
            entity.Property(e => e.DescLocalidad)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("DESC_LOCALIDAD");
            entity.Property(e => e.DescRegion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_REGION");
            entity.Property(e => e.DescServicio)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("DESC_SERVICIO");
            entity.Property(e => e.DescTipoServicio)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_TIPO_SERVICIO");
            entity.Property(e => e.DescZona)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_ZONA");
            entity.Property(e => e.Direccion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");
            entity.Property(e => e.Estado)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ESTADO");
            entity.Property(e => e.FecCierre)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_CIERRE");
            entity.Property(e => e.FecInicio)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_INICIO");
            entity.Property(e => e.Fijo).HasColumnName("FIJO");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.Ingeniero)
                .HasMaxLength(152)
                .IsUnicode(false)
                .HasColumnName("INGENIERO");
            entity.Property(e => e.IsExito).HasColumnName("IS_EXITO");
            entity.Property(e => e.ManttoVehiculo).HasColumnName("MANTTO_VEHICULO");
            entity.Property(e => e.Mes).HasColumnName("MES");
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.NoAr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AR");
            entity.Property(e => e.Poblacion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("POBLACION");
            entity.Property(e => e.Producto)
                .HasMaxLength(15)
                .IsFixedLength()
                .HasColumnName("PRODUCTO");
            entity.Property(e => e.RentaVehiculo).HasColumnName("RENTA_VEHICULO");
            entity.Property(e => e.TipoVehiculo)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("TIPO_VEHICULO");
            entity.Property(e => e.Variable).HasColumnName("VARIABLE");
        });

        modelBuilder.Entity<SiBdLog>(entity =>
        {
            entity.HasKey(e => e.IdLog);

            entity.ToTable("SI_BD_LOG");

            entity.Property(e => e.IdLog).HasColumnName("ID_LOG");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(250)
                .IsFixedLength()
                .HasColumnName("DESCRIPCION");
            entity.Property(e => e.EstadoServicio)
                .HasMaxLength(60)
                .IsFixedLength()
                .HasColumnName("ESTADO_SERVICIO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdServicio).HasColumnName("ID_SERVICIO");
            entity.Property(e => e.Responsable)
                .HasMaxLength(60)
                .IsFixedLength()
                .HasColumnName("RESPONSABLE");
        });

        modelBuilder.Entity<SiCServicio>(entity =>
        {
            entity.HasKey(e => e.IdServicio);

            entity.ToTable("SI_C_SERVICIOS");

            entity.Property(e => e.IdServicio).HasColumnName("ID_SERVICIO");
            entity.Property(e => e.DescServicio)
                .HasMaxLength(60)
                .IsFixedLength()
                .HasColumnName("DESC_SERVICIO");
            entity.Property(e => e.IdResponsableTecnico).HasColumnName("ID_RESPONSABLE_TECNICO");
            entity.Property(e => e.IdTipoServicio).HasColumnName("ID_TIPO_SERVICIO");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<SiDashboard>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SI_DASHBOARD");

            entity.Property(e => e.DescServicio)
                .HasMaxLength(60)
                .IsFixedLength()
                .HasColumnName("DESC_SERVICIO");
            entity.Property(e => e.H0).HasMaxLength(60);
            entity.Property(e => e.H1).HasMaxLength(60);
            entity.Property(e => e.H2).HasMaxLength(60);
            entity.Property(e => e.H3).HasMaxLength(60);
            entity.Property(e => e.H4).HasMaxLength(60);
            entity.Property(e => e.H5).HasMaxLength(60);
            entity.Property(e => e.IdServicio)
                .ValueGeneratedOnAdd()
                .HasColumnName("id_servicio");
            entity.Property(e => e.IdTipoServicio).HasColumnName("ID_TIPO_SERVICIO");
        });

        modelBuilder.Entity<SlaTemp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SLA_TEMP");

            entity.Property(e => e.Califica)
                .IsRequired()
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("CALIFICA");
            entity.Property(e => e.Dentro).HasColumnName("DENTRO");
            entity.Property(e => e.DescEquipo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_EQUIPO");
            entity.Property(e => e.DescNegocio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_NEGOCIO");
            entity.Property(e => e.Dia).HasColumnName("DIA");
            entity.Property(e => e.FecAtencion)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ATENCION");
            entity.Property(e => e.FecCierre)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_CIERRE");
            entity.Property(e => e.FecGarantia)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_GARANTIA");
            entity.Property(e => e.FecInicio)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_INICIO");
            entity.Property(e => e.FecStatus)
                .HasColumnType("datetime")
                .HasColumnName("FEC_STATUS");
            entity.Property(e => e.FecStatusZh)
                .HasColumnType("datetime")
                .HasColumnName("FEC_STATUS_ZH");
            entity.Property(e => e.Fuera).HasColumnName("FUERA");
            entity.Property(e => e.IdAr)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_AR");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdRegion).HasColumnName("ID_REGION");
            entity.Property(e => e.IdSegmento).HasColumnName("ID_SEGMENTO");
            entity.Property(e => e.IdServicio).HasColumnName("ID_SERVICIO");
            entity.Property(e => e.IdStatusAr).HasColumnName("ID_STATUS_AR");
            entity.Property(e => e.IdTecnico).HasColumnName("ID_TECNICO");
            entity.Property(e => e.IdZona).HasColumnName("ID_ZONA");
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.NoAr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AR");
            entity.Property(e => e.Sintoma)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("SINTOMA");
            entity.Property(e => e.Sla).HasColumnName("SLA");
        });

        modelBuilder.Entity<SlaTemp2>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SLA_TEMP_2");

            entity.Property(e => e.Califica)
                .IsRequired()
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("CALIFICA");
            entity.Property(e => e.Dentro).HasColumnName("DENTRO");
            entity.Property(e => e.DescEquipo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_EQUIPO");
            entity.Property(e => e.DescNegocio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_NEGOCIO");
            entity.Property(e => e.Dia).HasColumnName("DIA");
            entity.Property(e => e.FecAtencion)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ATENCION");
            entity.Property(e => e.FecCierre)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_CIERRE");
            entity.Property(e => e.FecGarantia)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_GARANTIA");
            entity.Property(e => e.FecInicio)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_INICIO");
            entity.Property(e => e.FecStatus)
                .HasColumnType("datetime")
                .HasColumnName("FEC_STATUS");
            entity.Property(e => e.FecStatusOrg)
                .HasColumnType("datetime")
                .HasColumnName("FEC_STATUS_ORG");
            entity.Property(e => e.Fuera).HasColumnName("FUERA");
            entity.Property(e => e.IdAr)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_AR");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdRegion).HasColumnName("ID_REGION");
            entity.Property(e => e.IdSegmento).HasColumnName("ID_SEGMENTO");
            entity.Property(e => e.IdServicio).HasColumnName("ID_SERVICIO");
            entity.Property(e => e.IdStatusAr).HasColumnName("ID_STATUS_AR");
            entity.Property(e => e.IdTecnico).HasColumnName("ID_TECNICO");
            entity.Property(e => e.IdZona).HasColumnName("ID_ZONA");
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.NoAr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AR");
            entity.Property(e => e.Sintoma)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("SINTOMA");
            entity.Property(e => e.Sla).HasColumnName("SLA");
        });

        modelBuilder.Entity<Tabla>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__TABLA__3214EC27A500CC31");

            entity.ToTable("TABLA");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Dato)
                .IsUnicode(false)
                .HasColumnName("DATO");
        });

        modelBuilder.Entity<TablaBancoBbvaReporte>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TABLA_BANCO_BBVA_REPORTE");

            entity.Property(e => e.Almacen)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("ALMACEN");
            entity.Property(e => e.Articulo)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("ARTICULO");
            entity.Property(e => e.Estatus)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("ESTATUS");
            entity.Property(e => e.NoSerie)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");
            entity.Property(e => e.TipoSoftware)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("TIPO_SOFTWARE");
        });

        modelBuilder.Entity<TablaPruebaConsolidado>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tabla_prueba_consolidado");

            entity.Property(e => e.Consolidado).HasColumnName("CONSOLIDADO");
            entity.Property(e => e.Resultado)
                .IsUnicode(false)
                .HasColumnName("RESULTADO");
            entity.Property(e => e.Total).HasColumnName("TOTAL");
        });

        modelBuilder.Entity<TablaPruebaPaso>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TABLA_PRUEBA_PASO");

            entity.Property(e => e.Text0)
                .IsUnicode(false)
                .HasColumnName("TEXT0");
        });

        modelBuilder.Entity<TablaRemesaBbvaReporte>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TABLA_REMESA_BBVA_REPORTE");

            entity.Property(e => e.Afiliacion).HasColumnName("AFILIACION");
            entity.Property(e => e.Estatus)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("ESTATUS");
            entity.Property(e => e.Fecha)
                .HasColumnType("date")
                .HasColumnName("FECHA");
            entity.Property(e => e.NoSerie)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");
            entity.Property(e => e.Remesa)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("REMESA");
            entity.Property(e => e.Ticket).HasColumnName("TICKET");
        });

        modelBuilder.Entity<TablaTemporalPmo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TablaTemporalPMO");

            entity.Property(e => e.Cliente)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("CLIENTE");
            entity.Property(e => e.DescRegion)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("DESC_REGION");
            entity.Property(e => e.EventoSinPrecio).HasColumnName("EVENTO_SIN_PRECIO");
            entity.Property(e => e.EventosConCosto).HasColumnName("EVENTOS_CON_COSTO");
            entity.Property(e => e.EventosSinCosto).HasColumnName("EVENTOS_SIN_COSTO");
            entity.Property(e => e.EventosSinHojaCobrable).HasColumnName("EVENTOS_SIN_HOJA_COBRABLE");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdProdcuto).HasColumnName("ID_PRODCUTO");
            entity.Property(e => e.IdRegion).HasColumnName("ID_REGION");
            entity.Property(e => e.MontoEventosConCosto)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("MONTO_EVENTOS_CON_COSTO");
            entity.Property(e => e.MontoEventosSinCosto)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("MONTO_EVENTOS_SIN_COSTO");
            entity.Property(e => e.MontoEventosSinHojaCobrable)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("MONTO_EVENTOS_SIN_HOJA_COBRABLE");
            entity.Property(e => e.MontoTotalEventosSinHoja)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("MONTO_TOTAL_EVENTOS_SIN_HOJA");
            entity.Property(e => e.Producto)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("PRODUCTO");
            entity.Property(e => e.TotalEventos).HasColumnName("TOTAL_EVENTOS");
            entity.Property(e => e.TotalEventosSinHoja).HasColumnName("TOTAL_EVENTOS_SIN_HOJA");
        });

        modelBuilder.Entity<TablaTemporalRetiradum>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TABLA_TEMPORAL_RETIRADA");

            entity.Property(e => e.DescMarca)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_MARCA");
            entity.Property(e => e.DescModelo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_MODELO");
            entity.Property(e => e.EstatusEnCie)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ESTATUS_EN_CIE");
            entity.Property(e => e.FecActualizacion)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ACTUALIZACION");
            entity.Property(e => e.FechaEntregaFisica)
                .HasColumnType("smalldatetime")
                .HasColumnName("fecha_entrega_fisica");
            entity.Property(e => e.NoAr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("no_AR");
            entity.Property(e => e.NoSerie)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("no_serie");
            entity.Property(e => e.Observaciones)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("observaciones");
            entity.Property(e => e.Plaza)
                .IsRequired()
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("plaza");
            entity.Property(e => e.ProveedorRecive)
                .IsRequired()
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("PROVEEDOR_RECIVE");
            entity.Property(e => e.Remesa)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("remesa");
            entity.Property(e => e.Tecnico)
                .HasMaxLength(152)
                .IsUnicode(false)
                .HasColumnName("TECNICO");
        });

        modelBuilder.Entity<Tecnico>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("tecnicos");

            entity.Property(e => e.IdProveedor).HasColumnName("id_proveedor");
            entity.Property(e => e.IdUsuario)
                .ValueGeneratedOnAdd()
                .HasColumnName("id_usuario");
            entity.Property(e => e.NombreTecnico)
                .HasMaxLength(152)
                .IsUnicode(false)
                .HasColumnName("nombre_tecnico");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("status");
        });

        modelBuilder.Entity<TemReporteNegocio>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEM_REPORTE_NEGOCIOS");

            entity.Property(e => e.Colonia)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("COLONIA");
            entity.Property(e => e.Cp)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("CP");
            entity.Property(e => e.DescCliente)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_CLIENTE");
            entity.Property(e => e.DescLocalidad)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("DESC_LOCALIDAD");
            entity.Property(e => e.DescNegocio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_NEGOCIO");
            entity.Property(e => e.DescRegion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_REGION");
            entity.Property(e => e.DescZona)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_ZONA");
            entity.Property(e => e.Direccion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");
            entity.Property(e => e.IdNegocio).HasColumnName("ID_NEGOCIO");
            entity.Property(e => e.Latitud)
                .IsUnicode(false)
                .HasColumnName("LATITUD");
            entity.Property(e => e.Longitud)
                .IsUnicode(false)
                .HasColumnName("LONGITUD");
            entity.Property(e => e.Mapa)
                .IsUnicode(false)
                .HasColumnName("MAPA");
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.Poblacion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("POBLACION");
            entity.Property(e => e.RazonSocial)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RAZON_SOCIAL");
            entity.Property(e => e.Rfc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RFC");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.Telefono)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");
        });

        modelBuilder.Entity<TemRespaldoBdMensajeriaCosto>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEM_RESPALDO_BD_MENSAJERIA_COSTOS");

            entity.Property(e => e.Costo)
                .HasColumnType("decimal(8, 2)")
                .HasColumnName("COSTO");
            entity.Property(e => e.IdMensajeriasPrecio).HasColumnName("ID_MENSAJERIAS_PRECIO");
            entity.Property(e => e.IdTipoServicioCosto).HasColumnName("ID_TIPO_SERVICIO_COSTO");
            entity.Property(e => e.Kilos)
                .HasColumnType("decimal(8, 3)")
                .HasColumnName("KILOS");
            entity.Property(e => e.Zona).HasColumnName("ZONA");
        });

        modelBuilder.Entity<TemRespaldoCostoKgAdd>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEM_RESPALDO_COSTO_KG_ADD");

            entity.Property(e => e.Costo)
                .HasColumnType("decimal(8, 2)")
                .HasColumnName("COSTO");
            entity.Property(e => e.IdMensajeriasPrecio).HasColumnName("ID_MENSAJERIAS_PRECIO");
            entity.Property(e => e.IdTipoDeServicioCosto).HasColumnName("ID_TIPO_DE_SERVICIO_COSTO");
            entity.Property(e => e.MaxKgAplicable).HasColumnName("MAX_KG_APLICABLE");
            entity.Property(e => e.Zona).HasColumnName("ZONA");
        });

        modelBuilder.Entity<Temp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEMP");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdHorarioAcceso).HasColumnName("ID_HORARIO_ACCESO");
            entity.Property(e => e.IdHorarioUptime).HasColumnName("ID_HORARIO_UPTIME");
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
        });

        modelBuilder.Entity<Temp1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEMP1");

            entity.Property(e => e.Cybersource).HasColumnName("CYBERSOURCE");
            entity.Property(e => e.Inventarios).HasColumnName("INVENTARIOS");
            entity.Property(e => e.Microformas).HasColumnName("MICROFORMAS");
            entity.Property(e => e.Mit).HasColumnName("MIT");
            entity.Property(e => e.SinProveedor).HasColumnName("SIN PROVEEDOR");
            entity.Property(e => e.Sinttecom).HasColumnName("SINTTECOM");
            entity.Property(e => e.TipoUsuario)
                .IsRequired()
                .HasMaxLength(18)
                .IsUnicode(false)
                .HasColumnName("TIPO_USUARIO");
            entity.Property(e => e.TpvSolutions).HasColumnName("TPV SOLUTIONS");
        });

        modelBuilder.Entity<Temp2>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEMP2");

            entity.Property(e => e.Cybersource).HasColumnName("CYBERSOURCE");
            entity.Property(e => e.Inventarios).HasColumnName("INVENTARIOS");
            entity.Property(e => e.Microformas).HasColumnName("MICROFORMAS");
            entity.Property(e => e.Mit).HasColumnName("MIT");
            entity.Property(e => e.SinProveedor).HasColumnName("SIN PROVEEDOR");
            entity.Property(e => e.Sinttecom).HasColumnName("SINTTECOM");
            entity.Property(e => e.TipoUsuario)
                .IsRequired()
                .HasMaxLength(18)
                .IsUnicode(false)
                .HasColumnName("TIPO_USUARIO");
            entity.Property(e => e.Total).HasColumnName("TOTAL");
            entity.Property(e => e.TpvSolutions).HasColumnName("TPV SOLUTIONS");
        });

        modelBuilder.Entity<TempAdam>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("temp_adam");

            entity.Property(e => e.Almacen)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Danana)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("DANANA");
            entity.Property(e => e.Estado)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EstatusCmp)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("Estatus_CMP");
            entity.Property(e => e.EstatusMf)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Estatus_MF");
            entity.Property(e => e.Marca)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Modelo)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Region)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Serie)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TempAfiliacione>(entity =>
        {
            entity.HasKey(e => e.IdTempAfilacion);

            entity.ToTable("TEMP_AFILIACIONES");

            entity.Property(e => e.IdTempAfilacion).HasColumnName("ID_TEMP_AFILACION");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdResponsable)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("ID_RESPONSABLE");
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
        });

        modelBuilder.Entity<TempAfiliacionesTelefono>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEMP_AFILIACIONES_TELEFONO");

            entity.Property(e => e.Afiliacion)
                .IsUnicode(false)
                .HasColumnName("AFILIACION");
            entity.Property(e => e.DescSolucion)
                .IsUnicode(false)
                .HasColumnName("DESC_SOLUCION");
            entity.Property(e => e.DescTipoCarga)
                .IsUnicode(false)
                .HasColumnName("DESC_TIPO_CARGA");
            entity.Property(e => e.DescZona)
                .IsUnicode(false)
                .HasColumnName("DESC_ZONA");
            entity.Property(e => e.EstatusServicio)
                .IsUnicode(false)
                .HasColumnName("ESTATUS_SERVICIO");
            entity.Property(e => e.FechaAltaSistema)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ALTA_SISTEMA");
            entity.Property(e => e.FechaCierreSistema)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_CIERRE_SISTEMA");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IdServicio).HasColumnName("ID_SERVICIO");
            entity.Property(e => e.IdStatusAr).HasColumnName("ID_STATUS_AR");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.Odt)
                .IsUnicode(false)
                .HasColumnName("ODT");
            entity.Property(e => e.Telefono)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");
            entity.Property(e => e.TipoAtencion).HasColumnName("TIPO_ATENCION");
            entity.Property(e => e.TipoCarga).HasColumnName("TIPO_CARGA");
            entity.Property(e => e.TipoServicio)
                .IsUnicode(false)
                .HasColumnName("TIPO_SERVICIO");
            entity.Property(e => e.Zona).HasColumnName("ZONA");
        });

        modelBuilder.Entity<TempAreaCierre>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEMP_AREA_CIERRE");

            entity.Property(e => e.Abril).HasColumnName("ABRIL");
            entity.Property(e => e.Agosto).HasColumnName("AGOSTO");
            entity.Property(e => e.AreaCierre)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AREA_CIERRE");
            entity.Property(e => e.Diciembre).HasColumnName("DICIEMBRE");
            entity.Property(e => e.Enero).HasColumnName("ENERO");
            entity.Property(e => e.Febrero).HasColumnName("FEBRERO");
            entity.Property(e => e.Julio).HasColumnName("JULIO");
            entity.Property(e => e.Junio).HasColumnName("JUNIO");
            entity.Property(e => e.Marzo).HasColumnName("MARZO");
            entity.Property(e => e.Mayo).HasColumnName("MAYO");
            entity.Property(e => e.Noviembre).HasColumnName("NOVIEMBRE");
            entity.Property(e => e.Octubre).HasColumnName("OCTUBRE");
            entity.Property(e => e.Septiembre).HasColumnName("SEPTIEMBRE");
            entity.Property(e => e.Total).HasColumnName("TOTAL");
        });

        modelBuilder.Entity<TempAreaCierreProveedor>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEMP_AREA_CIERRE_PROVEEDOR");

            entity.Property(e => e.Abril).HasColumnName("ABRIL");
            entity.Property(e => e.Agosto).HasColumnName("AGOSTO");
            entity.Property(e => e.Diciembre).HasColumnName("DICIEMBRE");
            entity.Property(e => e.Enero).HasColumnName("ENERO");
            entity.Property(e => e.Febrero).HasColumnName("FEBRERO");
            entity.Property(e => e.Julio).HasColumnName("JULIO");
            entity.Property(e => e.Junio).HasColumnName("JUNIO");
            entity.Property(e => e.Marzo).HasColumnName("MARZO");
            entity.Property(e => e.Mayo).HasColumnName("MAYO");
            entity.Property(e => e.Noviembre).HasColumnName("NOVIEMBRE");
            entity.Property(e => e.Octubre).HasColumnName("OCTUBRE");
            entity.Property(e => e.Proveedor)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("PROVEEDOR");
            entity.Property(e => e.Septiembre).HasColumnName("SEPTIEMBRE");
            entity.Property(e => e.Total).HasColumnName("TOTAL");
        });

        modelBuilder.Entity<TempAreaCierreProveedorDetalle>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEMP_AREA_CIERRE_PROVEEDOR_DETALLE");

            entity.Property(e => e.Abril).HasColumnName("ABRIL");
            entity.Property(e => e.Agosto).HasColumnName("AGOSTO");
            entity.Property(e => e.AreaCierre)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AREA_CIERRE");
            entity.Property(e => e.Diciembre).HasColumnName("DICIEMBRE");
            entity.Property(e => e.Enero).HasColumnName("ENERO");
            entity.Property(e => e.Febrero).HasColumnName("FEBRERO");
            entity.Property(e => e.Julio).HasColumnName("JULIO");
            entity.Property(e => e.Junio).HasColumnName("JUNIO");
            entity.Property(e => e.Marzo).HasColumnName("MARZO");
            entity.Property(e => e.Mayo).HasColumnName("MAYO");
            entity.Property(e => e.Noviembre).HasColumnName("NOVIEMBRE");
            entity.Property(e => e.Octubre).HasColumnName("OCTUBRE");
            entity.Property(e => e.Septiembre).HasColumnName("SEPTIEMBRE");
        });

        modelBuilder.Entity<TempBdTelefono>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEMP_BD_TELEFONOS");

            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IdNegocio).HasColumnName("ID_NEGOCIO");
            entity.Property(e => e.NoAfiliacion)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.Telefono)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");
        });

        modelBuilder.Entity<TempBdTelefonosReporte>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEMP_BD_TELEFONOS_REPORTE");

            entity.Property(e => e.Afiliacion)
                .IsUnicode(false)
                .HasColumnName("AFILIACION");
            entity.Property(e => e.DescripcionNegocio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_NEGOCIO");
            entity.Property(e => e.FechaCierre)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_CIERRE");
            entity.Property(e => e.FechaCierreFormato)
                .IsUnicode(false)
                .HasColumnName("FECHA_CIERRE_FORMATO");
            entity.Property(e => e.Odt)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ODT");
            entity.Property(e => e.Rfc)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("RFC");
            entity.Property(e => e.SubtipoServicio)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("SUBTIPO_SERVICIO");
            entity.Property(e => e.Telefono)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");
            entity.Property(e => e.TipoServicio)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("TIPO_SERVICIO");
        });

        modelBuilder.Entity<TempCadenaProsa>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEMP_CADENA_PROSA");

            entity.Property(e => e.Cadena)
                .IsUnicode(false)
                .HasColumnName("CADENA");
            entity.Property(e => e.LongitudPermitida).HasColumnName("LONGITUD_PERMITIDA");
            entity.Property(e => e.Nombre)
                .IsUnicode(false)
                .HasColumnName("NOMBRE");
            entity.Property(e => e.Posicion).HasColumnName("POSICION");
            entity.Property(e => e.TipoCampo)
                .IsUnicode(false)
                .HasColumnName("TIPO_CAMPO");
            entity.Property(e => e.Validacion)
                .IsRequired()
                .HasMaxLength(84)
                .IsUnicode(false)
                .HasColumnName("VALIDACION");
        });

        modelBuilder.Entity<TempCambioConectividad>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEMP_CAMBIO_CONECTIVIDAD");

            entity.Property(e => e.Caja)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("CAJA");
            entity.Property(e => e.Comentarios)
                .IsUnicode(false)
                .HasColumnName("COMENTARIOS");
            entity.Property(e => e.Costo)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("COSTO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.FecInicio)
                .HasColumnType("datetime")
                .HasColumnName("FEC_INICIO");
            entity.Property(e => e.FechaVencimientoKernel)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_VENCIMIENTO_KERNEL");
            entity.Property(e => e.FolioTelmex)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("FOLIO_TELMEX");
            entity.Property(e => e.IdAplicativo).HasColumnName("ID_APLICATIVO");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdConectividad).HasColumnName("ID_CONECTIVIDAD");
            entity.Property(e => e.IdFabricante).HasColumnName("ID_FABRICANTE");
            entity.Property(e => e.IdItemsSolicitudAlmacen).HasColumnName("ID_ITEMS_SOLICITUD_ALMACEN");
            entity.Property(e => e.IdLlave).HasColumnName("ID_LLAVE");
            entity.Property(e => e.IdMarca).HasColumnName("ID_MARCA");
            entity.Property(e => e.IdModelo).HasColumnName("ID_MODELO");
            entity.Property(e => e.IdMoneda).HasColumnName("ID_MONEDA");
            entity.Property(e => e.IdNivelDiagnostico).HasColumnName("ID_NIVEL_DIAGNOSTICO");
            entity.Property(e => e.IdOrdenCompra).HasColumnName("ID_ORDEN_COMPRA");
            entity.Property(e => e.IdParent).HasColumnName("ID_PARENT");
            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");
            entity.Property(e => e.IdResponsable).HasColumnName("ID_RESPONSABLE");
            entity.Property(e => e.IdSim).HasColumnName("ID_SIM");
            entity.Property(e => e.IdSoftware).HasColumnName("ID_SOFTWARE");
            entity.Property(e => e.IdSolicitudRecoleccion).HasColumnName("ID_SOLICITUD_RECOLECCION");
            entity.Property(e => e.IdStatusUnidad).HasColumnName("ID_STATUS_UNIDAD");
            entity.Property(e => e.IdTecnicoEnviadaScrap).HasColumnName("ID_TECNICO_ENVIADA_SCRAP");
            entity.Property(e => e.IdTipoConexion).HasColumnName("ID_TIPO_CONEXION");
            entity.Property(e => e.IdTipoResponsable).HasColumnName("ID_TIPO_RESPONSABLE");
            entity.Property(e => e.IdTipoTerminal).HasColumnName("ID_TIPO_TERMINAL");
            entity.Property(e => e.IdUnidad)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_UNIDAD");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.IsDaniada).HasColumnName("IS_DANIADA");
            entity.Property(e => e.IsDato).HasColumnName("IS_DATO");
            entity.Property(e => e.IsDiagnosticada).HasColumnName("IS_DIAGNOSTICADA");
            entity.Property(e => e.IsFacturable).HasColumnName("IS_FACTURABLE");
            entity.Property(e => e.IsGarantia).HasColumnName("IS_GARANTIA");
            entity.Property(e => e.IsInternacional).HasColumnName("IS_INTERNACIONAL");
            entity.Property(e => e.IsNueva).HasColumnName("IS_NUEVA");
            entity.Property(e => e.IsPropiedadCliente).HasColumnName("IS_PROPIEDAD_CLIENTE");
            entity.Property(e => e.IsRetiro).HasColumnName("IS_RETIRO");
            entity.Property(e => e.IsVenta).HasColumnName("IS_VENTA");
            entity.Property(e => e.MotivoEnviadaScrap)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("MOTIVO_ENVIADA_SCRAP");
            entity.Property(e => e.NoEquipo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_EQUIPO");
            entity.Property(e => e.NoImei)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_IMEI");
            entity.Property(e => e.NoInventario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_INVENTARIO");
            entity.Property(e => e.NoSerie)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");
            entity.Property(e => e.NoSim)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SIM");
            entity.Property(e => e.NoTarima)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_TARIMA");
            entity.Property(e => e.OrdenCompra)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ORDEN_COMPRA");
            entity.Property(e => e.PosicionInventario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("POSICION_INVENTARIO");
            entity.Property(e => e.PurchaseOrderNo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("purchase_order_no");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.Version)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("VERSION");
            entity.Property(e => e.VersionKernel)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("VERSION_KERNEL");
            entity.Property(e => e.Vigencia)
                .HasColumnType("datetime")
                .HasColumnName("VIGENCIA");
        });

        modelBuilder.Entity<TempCancelarAr>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEMP_CANCELAR_AR");

            entity.Property(e => e.Comentario)
                .IsUnicode(false)
                .HasColumnName("COMENTARIO");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
        });

        modelBuilder.Entity<TempCargaUnidade>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("temp_Carga_unidades");

            entity.Property(e => e.Costo)
                .HasColumnType("decimal(8, 2)")
                .HasColumnName("COSTO");
            entity.Property(e => e.DescModelo)
                .IsUnicode(false)
                .HasColumnName("DESC_MODELO");
            entity.Property(e => e.DescripcionAplicativo)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_APLICATIVO");
            entity.Property(e => e.DescripcionConectividad)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CONECTIVIDAD");
            entity.Property(e => e.IdAplicativo).HasColumnName("ID_APLICATIVO");
            entity.Property(e => e.IdCarga).HasColumnName("ID_CARGA");
            entity.Property(e => e.IdCargaUnidades)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_Carga_unidades");
            entity.Property(e => e.IdConectividad).HasColumnName("ID_CONECTIVIDAD");
            entity.Property(e => e.IdModelo).HasColumnName("ID_MODELO");
            entity.Property(e => e.IdMoneda).HasColumnName("ID_MONEDA");
            entity.Property(e => e.IdResponsable).HasColumnName("ID_RESPONSABLE");
            entity.Property(e => e.IsNueva).HasColumnName("IS_NUEVA");
            entity.Property(e => e.NoInventario)
                .IsUnicode(false)
                .HasColumnName("NO_INVENTARIO");
            entity.Property(e => e.NoSerie)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");
            entity.Property(e => e.Status)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<TempConciliacionUniversoGetnet>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEMP_CONCILIACION_UNIVERSO_GETNET");

            entity.Property(e => e.Afiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AFILIACION");
            entity.Property(e => e.AplicativoInstalado)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APLICATIVO_INSTALADO");
            entity.Property(e => e.AplicativoRetirado)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APLICATIVO_RETIRADO");
            entity.Property(e => e.Caja)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CAJA");
            entity.Property(e => e.CarrierInstalado)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CARRIER_INSTALADO");
            entity.Property(e => e.Conclusiones)
                .HasMaxLength(3000)
                .IsUnicode(false)
                .HasColumnName("CONCLUSIONES");
            entity.Property(e => e.ConectividadInstalada)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CONECTIVIDAD_INSTALADA");
            entity.Property(e => e.ConectividadRetirada)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CONECTIVIDAD_RETIRADA");
            entity.Property(e => e.FechaCierreSistema)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_CIERRE_SISTEMA");
            entity.Property(e => e.ModeloInstalado)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("MODELO_INSTALADO");
            entity.Property(e => e.ModeloTerminalSale)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("MODELO_TERMINAL_SALE");
            entity.Property(e => e.NumSerieSimEntra)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NUM_SERIE_SIM_ENTRA");
            entity.Property(e => e.NumSerieSimSale)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NUM_SERIE_SIM_SALE");
            entity.Property(e => e.NumSerieTerminalEntra)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NUM_SERIE_TERMINAL_ENTRA");
            entity.Property(e => e.NumSerieTerminalSale)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NUM_SERIE_TERMINAL_SALE");
            entity.Property(e => e.Odt)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ODT");
            entity.Property(e => e.Producto)
                .IsUnicode(false)
                .HasColumnName("PRODUCTO");
            entity.Property(e => e.Proveedor)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("PROVEEDOR");
            entity.Property(e => e.TipoServicio)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("TIPO_SERVICIO");
            entity.Property(e => e.Versionsw)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("VERSIONSW");
        });

        modelBuilder.Entity<TempConsumoBancomer>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEMP_CONSUMO_BANCOMER");

            entity.Property(e => e.GprsConSim).HasColumnName("GPRS CON SIM");
            entity.Property(e => e.GprsSinSim).HasColumnName("GPRS SIN SIM");
            entity.Property(e => e.TotalGeneral).HasColumnName("TOTAL GENERAL");
            entity.Property(e => e.Wifi).HasColumnName("WIFI");
            entity.Property(e => e.Zona)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZONA");
        });

        modelBuilder.Entity<TempConsumoTrimestralBancomer>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEMP_CONSUMO_TRIMESTRAL_BANCOMER");

            entity.Property(e => e.GprsConSim).HasColumnName("GPRS CON SIM");
            entity.Property(e => e.GprsSinSim).HasColumnName("GPRS SIN SIM");
            entity.Property(e => e.TotalGeneral).HasColumnName("TOTAL GENERAL");
            entity.Property(e => e.Wifi).HasColumnName("WIFI");
            entity.Property(e => e.Zona)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZONA");
        });

        modelBuilder.Entity<TempContenidoEnvio>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEMP_CONTENIDO_ENVIO");

            entity.Property(e => e.Contenido)
                .IsUnicode(false)
                .HasColumnName("CONTENIDO");
        });

        modelBuilder.Entity<TempDhl>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEMP_DHL");

            entity.Property(e => e.CP).HasColumnName("C#P#");
            entity.Property(e => e.Calle)
                .HasMaxLength(1000)
                .HasColumnName("CALLE");
            entity.Property(e => e.CeCoActual).HasColumnName("CeCo_Actual");
            entity.Property(e => e.Ciudad)
                .HasMaxLength(1000)
                .HasColumnName("CIUDAD");
            entity.Property(e => e.Colonia)
                .HasMaxLength(1000)
                .HasColumnName("COLONIA");
            entity.Property(e => e.CuentaIbs).HasColumnName("# Cuenta IBS");
            entity.Property(e => e.DirecciónCompleta)
                .HasMaxLength(1000)
                .HasColumnName("DIRECCIÓN COMPLETA");
            entity.Property(e => e.Domestico)
                .HasColumnType("datetime")
                .HasColumnName("DOMESTICO");
            entity.Property(e => e.EntreCalles)
                .HasMaxLength(4000)
                .HasColumnName("ENTRE CALLES");
            entity.Property(e => e.Estado)
                .HasMaxLength(1000)
                .HasColumnName("ESTADO");
            entity.Property(e => e.Exterior).HasColumnName("EXTERIOR");
            entity.Property(e => e.Fax)
                .HasMaxLength(1000)
                .HasColumnName("FAX");
            entity.Property(e => e.HorarioComida)
                .HasMaxLength(1000)
                .HasColumnName("Horario _COMIDA");
            entity.Property(e => e.HorarioDíasFestivos)
                .HasMaxLength(1000)
                .HasColumnName("Horario_Días Festivos");
            entity.Property(e => e.HorarioSábados)
                .HasMaxLength(1000)
                .HasColumnName("Horario Sábados");
            entity.Property(e => e.HorariosLunesAViernes)
                .HasMaxLength(1000)
                .HasColumnName("Horarios _LUNES A VIERNES");
            entity.Property(e => e.Iata)
                .HasMaxLength(1000)
                .HasColumnName("IATA");
            entity.Property(e => e.Idox)
                .HasColumnType("datetime")
                .HasColumnName("IDOX");
            entity.Property(e => e.Interior).HasColumnName("INTERIOR");
            entity.Property(e => e.LlegadaOcurresDeLunesAViernes)
                .HasMaxLength(1000)
                .HasColumnName("LLEGADA OCURRES DE LUNES A VIERNES");
            entity.Property(e => e.LlegadaOcurresSabatino)
                .HasMaxLength(1000)
                .HasColumnName("LLEGADA OCURRES SABATINO");
            entity.Property(e => e.Nombre)
                .HasMaxLength(1000)
                .HasColumnName("NOMBRE");
            entity.Property(e => e.Paquete)
                .HasColumnType("datetime")
                .HasColumnName("PAQUETE");
            entity.Property(e => e.ReferenciasParaLlegarALaTienda)
                .HasMaxLength(1000)
                .HasColumnName("REFERENCIAS PARA LLEGAR A LA TIENDA");
            entity.Property(e => e.Tdd)
                .HasColumnType("datetime")
                .HasColumnName("TDD");
            entity.Property(e => e.Teléfonos)
                .HasMaxLength(1000)
                .HasColumnName("TELÉFONOS");
            entity.Property(e => e.TypeOfFacility)
                .HasMaxLength(1000)
                .HasColumnName("Type of Facility");
            entity.Property(e => e.Wpx)
                .HasColumnType("datetime")
                .HasColumnName("WPX");
        });

        modelBuilder.Entity<TempDiagnostico>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEMP_DIAGNOSTICO");

            entity.Property(e => e.Ar)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AR");
            entity.Property(e => e.Estatus)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ESTATUS");
            entity.Property(e => e.FechaActualizacion)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("FECHA_ACTUALIZACION");
            entity.Property(e => e.FechaDeCierre)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FECHA_DE_CIERRE");
            entity.Property(e => e.MarcSale)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MARC_SALE");
            entity.Property(e => e.ModeloSale)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MODELO_SALE");
            entity.Property(e => e.NoSerieSale)
                .IsRequired()
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE_SALE");
            entity.Property(e => e.Proveedor)
                .IsRequired()
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("PROVEEDOR");
            entity.Property(e => e.Tecnico)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("TECNICO");
            entity.Property(e => e.Zona)
                .HasMaxLength(62)
                .IsUnicode(false)
                .HasColumnName("ZONA");
        });

        modelBuilder.Entity<TempDir>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEMP_DIR");

            entity.Property(e => e.Direccion)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");
            entity.Property(e => e.IdDireccion).HasColumnName("ID_DIRECCION");
        });

        modelBuilder.Entity<TempDireccione>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEMP_DIRECCIONES");

            entity.Property(e => e.Direccion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");
            entity.Property(e => e.IdDireccion).HasColumnName("ID_DIRECCION");
        });

        modelBuilder.Entity<TempDisponibleBancomer>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEMP_DISPONIBLE_BANCOMER");

            entity.Property(e => e.GprsConSim).HasColumnName("GPRS_CON_SIM");
            entity.Property(e => e.GprsSinSim).HasColumnName("GPRS_SIN_SIM");
            entity.Property(e => e.TotalGeneral).HasColumnName("TOTAL_GENERAL");
            entity.Property(e => e.Wifi).HasColumnName("WIFI");
            entity.Property(e => e.Zona)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("ZONA");
        });

        modelBuilder.Entity<TempErroresCarga>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("temp_errores_carga");

            entity.Property(e => e.Comentario)
                .IsUnicode(false)
                .HasColumnName("comentario");
        });

        modelBuilder.Entity<TempF114>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEMP_F11_4");

            entity.Property(e => e.AccessPoint)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("ACCESS POINT");
            entity.Property(e => e.BaseOptimumBluetoot)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("BASE OPTIMUM BLUETOOT");
            entity.Property(e => e.BaseOptimumD1100)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("BASE OPTIMUM D1100");
            entity.Property(e => e.BaseOptimumD2100)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("BASE OPTIMUM D2100");
            entity.Property(e => e.CadenaF11)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CADENA_F11");
            entity.Property(e => e.Elite770)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("ELITE 770");
            entity.Property(e => e.Fresia2000)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("FRESIA2000");
            entity.Property(e => e.Ice4000)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("ICE 4000");
            entity.Property(e => e.Ice5000)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("ICE 5000");
            entity.Property(e => e.Ien100)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("IEN-100");
            entity.Property(e => e.Ingenico5100)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("INGENICO 5100");
            entity.Property(e => e.Ingenico7780ConBase)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("INGENICO 7780 (con base)");
            entity.Property(e => e.Ingenico7910CSimm)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("INGENICO 7910 C/SIMM");
            entity.Property(e => e.Ingenico7910SSimm)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("INGENICO 7910 S/SIMM");
            entity.Property(e => e.Nac6a)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("NAC 6A");
            entity.Property(e => e.Omni3200)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("OMNI 3200");
            entity.Property(e => e.Omni3600)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("OMNI 3600");
            entity.Property(e => e.Omni3750)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("OMNI 3750");
            entity.Property(e => e.Omni395)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("OMNI 395");
            entity.Property(e => e.Omni395Lan)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("OMNI 395 LAN");
            entity.Property(e => e.Omni460)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("OMNI 460");
            entity.Property(e => e.Omni470)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("OMNI 470");
            entity.Property(e => e.Omni490)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("OMNI 490");
            entity.Property(e => e.OptimumM2100Bluetoot)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("OPTIMUM M2100 BLUETOOT");
            entity.Property(e => e.OptimumM2100CSim)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("OPTIMUM M2100 c/sim");
            entity.Property(e => e.OptimumM2100SSim)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("OPTIMUM M2100 s/sim");
            entity.Property(e => e.OptimumT2100)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("OPTIMUM T2100");
            entity.Property(e => e.OptimumT2100Gprs)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("OPTIMUM T2100 GPRS");
            entity.Property(e => e.OrdenF11).HasColumnName("ORDEN_F11");
            entity.Property(e => e.PinPad)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("PIN PAD");
            entity.Property(e => e.Plaza)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PLAZA");
            entity.Property(e => e.Print250)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("PRINT 250");
            entity.Property(e => e.Printpack)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("PRINTPACK");
            entity.Property(e => e.Remedy1)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("REMEDY1");
            entity.Property(e => e.Remedy2)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("REMEDY2");
            entity.Property(e => e.Remedy3)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("REMEDY3");
            entity.Property(e => e.T7Plus)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("T7 PLUS");
            entity.Property(e => e.T7p)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("T7P");
            entity.Property(e => e.Transcriptora)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("TRANSCRIPTORA");
            entity.Property(e => e.TranscriptoraDeTinta)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("TRANSCRIPTORA DE TINTA");
            entity.Property(e => e.TranscriptoraPortatil)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("TRANSCRIPTORA PORTATIL");
            entity.Property(e => e.Vx510Dial)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("Vx510 DIAL");
            entity.Property(e => e.Vx510Fimpe)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("Vx510 FIMPE");
            entity.Property(e => e.Vx510Lan)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("Vx510 LAN");
            entity.Property(e => e.Vx510Web)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("Vx510 WEB");
            entity.Property(e => e.Vx610Amex)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("Vx610 AMEX");
            entity.Property(e => e.Vx610CSim)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("Vx610 c/sim");
            entity.Property(e => e.Vx610Fimpe)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("Vx610 FIMPE");
            entity.Property(e => e.Vx610SSim)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("Vx610 s/sim");
            entity.Property(e => e.Vx610WiFi)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("Vx610 (Wi-Fi)");
            entity.Property(e => e.Vx610WiFiWeb)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("Vx610 (Wi-Fi) WEB");
        });

        modelBuilder.Entity<TempFillRateBbva>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEMP_FILL_RATE_BBVA");

            entity.Property(e => e.GprsConSimConsumo).HasColumnName("GPRS_CON_SIM_CONSUMO");
            entity.Property(e => e.GprsConSimDisponible).HasColumnName("GPRS_CON_SIM_DISPONIBLE");
            entity.Property(e => e.GprsConSimNivelStock).HasColumnName("GPRS_CON_SIM_NIVEL_STOCK");
            entity.Property(e => e.GprsConSimSurtido).HasColumnName("GPRS_CON_SIM_SURTIDO");
            entity.Property(e => e.GprsSinSimConsumo).HasColumnName("GPRS_SIN_SIM_CONSUMO");
            entity.Property(e => e.GprsSinSimDisponible).HasColumnName("GPRS_SIN_SIM_DISPONIBLE");
            entity.Property(e => e.GprsSinSimNivelStock).HasColumnName("GPRS_SIN_SIM_NIVEL_STOCK");
            entity.Property(e => e.GprsSinSimSurtido).HasColumnName("GPRS_SIN_SIM_SURTIDO");
            entity.Property(e => e.TotalGeneralConsumo).HasColumnName("TOTAL_GENERAL_CONSUMO");
            entity.Property(e => e.TotalGeneralDisponible).HasColumnName("TOTAL_GENERAL_DISPONIBLE");
            entity.Property(e => e.TotalGeneralNivelStock).HasColumnName("TOTAL_GENERAL_NIVEL_STOCK");
            entity.Property(e => e.WifiConsumo).HasColumnName("WIFI_CONSUMO");
            entity.Property(e => e.WifiDisponible).HasColumnName("WIFI_DISPONIBLE");
            entity.Property(e => e.WifiNivelStock).HasColumnName("WIFI_NIVEL_STOCK");
            entity.Property(e => e.WifiSurtido).HasColumnName("WIFI_SURTIDO");
            entity.Property(e => e.ZonaConsumo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZONA_CONSUMO");
        });

        modelBuilder.Entity<TempHorario>(entity =>
        {
            entity.HasKey(e => e.IdHorarios);

            entity.ToTable("TEMP_HORARIOS");

            entity.Property(e => e.IdHorarios).HasColumnName("ID_HORARIOS");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdHorarioAcceso).HasColumnName("ID_HORARIO_ACCESO");
            entity.Property(e => e.IdHorarioUptime).HasColumnName("ID_HORARIO_UPTIME");
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
        });

        modelBuilder.Entity<TempHorariosSantander>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("temp_horarios_santander");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdHorarioAcceso).HasColumnName("ID_HORARIO_ACCESO");
            entity.Property(e => e.IdHorarioUptime).HasColumnName("ID_HORARIO_UPTIME");
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
        });

        modelBuilder.Entity<TempInsumosArTecnico>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEMP_INSUMOS_AR_TECNICO");

            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IdInsumo).HasColumnName("ID_INSUMO");
        });

        modelBuilder.Entity<TempLayoutReplicasRechazo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEMP_LAYOUT_REPLICAS_RECHAZOS");

            entity.Property(e => e.Afiliacion)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("AFILIACION");
            entity.Property(e => e.CausaRechazo)
                .IsUnicode(false)
                .HasColumnName("CAUSA_RECHAZO");
            entity.Property(e => e.Conclusiones)
                .HasMaxLength(3000)
                .IsUnicode(false)
                .HasColumnName("CONCLUSIONES");
            entity.Property(e => e.DiasSinInstalar).HasColumnName("DIAS_SIN_INSTALAR");
            entity.Property(e => e.EjecutivoKa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("EJECUTIVO_KA");
            entity.Property(e => e.Estatus)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ESTATUS");
            entity.Property(e => e.FechaAlta)
                .HasColumnType("date")
                .HasColumnName("FECHA_ALTA");
            entity.Property(e => e.FechaGeneracion)
                .HasColumnType("date")
                .HasColumnName("FECHA_GENERACION");
            entity.Property(e => e.IdCaja)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ID_CAJA");
            entity.Property(e => e.IdEquipo)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ID_EQUIPO");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.Odt)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ODT");
            entity.Property(e => e.SubRechazo)
                .IsUnicode(false)
                .HasColumnName("SUB_RECHAZO");
            entity.Property(e => e.SubTipoServicio)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("SUB_TIPO_SERVICIO");
            entity.Property(e => e.Zona)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZONA");
        });

        modelBuilder.Entity<TempLicenciasDhl>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("temp_licencias_dhl");

            entity.Property(e => e.Accesos)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ACCESOS");
            entity.Property(e => e.Aplicacion)
                .IsRequired()
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("APLICACION");
            entity.Property(e => e.CostoMensual)
                .IsUnicode(false)
                .HasColumnName("COSTO_MENSUAL");
            entity.Property(e => e.FecDeUltimoAcceso).HasColumnName("FEC_DE_ULTIMO_ACCESO");
            entity.Property(e => e.IdUsuario)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_USUARIO");
            entity.Property(e => e.Materno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MATERNO");
            entity.Property(e => e.Nombre)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NOMBRE");
            entity.Property(e => e.Paterno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PATERNO");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.Username)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("USERNAME");
        });

        modelBuilder.Entity<TempModelosMic>(entity =>
        {
            entity.HasKey(e => e.IdTempModelosMic).HasName("PK__TEMP_MOD__9C9AE6DDB62D6D2A");

            entity.ToTable("TEMP_MODELOS_MIC");

            entity.Property(e => e.IdTempModelosMic).HasColumnName("ID_TEMP_MODELOS_MIC");
            entity.Property(e => e.DescModeloMic)
                .IsUnicode(false)
                .HasColumnName("DESC_MODELO_MIC");
            entity.Property(e => e.IdModeloMic).HasColumnName("ID_MODELO_MIC");
        });

        modelBuilder.Entity<TempNegocio>(entity =>
        {
            entity.ToTable("TEMP_NEGOCIOS");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Colonia)
                .HasMaxLength(255)
                .HasColumnName("COLONIA");
            entity.Property(e => e.Cp)
                .HasMaxLength(5)
                .HasColumnName("CP");
            entity.Property(e => e.DescNegocio)
                .HasMaxLength(255)
                .HasColumnName("DESC_NEGOCIO");
            entity.Property(e => e.Direccion)
                .HasMaxLength(255)
                .HasColumnName("DIRECCION");
            entity.Property(e => e.Estado)
                .HasMaxLength(255)
                .HasColumnName("ESTADO");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdEstado).HasColumnName("ID_ESTADO");
            entity.Property(e => e.IdRegion).HasColumnName("ID_REGION");
            entity.Property(e => e.IdSegmento).HasColumnName("ID_SEGMENTO");
            entity.Property(e => e.IdZona).HasColumnName("ID_ZONA");
            entity.Property(e => e.IsDuplicated).HasColumnName("IS_DUPLICATED");
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(255)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.Poblacion)
                .HasMaxLength(255)
                .HasColumnName("POBLACION");
            entity.Property(e => e.Segmento)
                .HasMaxLength(255)
                .HasColumnName("SEGMENTO");
        });

        modelBuilder.Entity<TempNegociosBanamex>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEMP_NEGOCIOS_BANAMEX");

            entity.Property(e => e.Cp)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("CP");
            entity.Property(e => e.Estado)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("ESTADO");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdEstado).HasColumnName("ID_ESTADO");
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.Poblacion)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("POBLACION");
        });

        modelBuilder.Entity<TempNegociosBanamexAtm>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEMP_NEGOCIOS_BANAMEX_ATM");

            entity.Property(e => e.Colonia)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("COLONIA");
            entity.Property(e => e.Cp)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("CP");
            entity.Property(e => e.Direccion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");
            entity.Property(e => e.Estado)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ESTADO");
            entity.Property(e => e.IdEstado).HasColumnName("ID_ESTADO");
            entity.Property(e => e.IdRegion).HasColumnName("ID_REGION");
            entity.Property(e => e.IdZona).HasColumnName("ID_ZONA");
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.Poblacion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("POBLACION");
        });

        modelBuilder.Entity<TempNegociosRegistro>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("temp_negocios_registro");

            entity.Property(e => e.Colonia)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("COLONIA");
            entity.Property(e => e.Cp)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("CP");
            entity.Property(e => e.DescCliente)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_CLIENTE");
            entity.Property(e => e.DescLocalidad)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("DESC_LOCALIDAD");
            entity.Property(e => e.DescNegocio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_NEGOCIO");
            entity.Property(e => e.DescRegion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_REGION");
            entity.Property(e => e.DescZona)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_ZONA");
            entity.Property(e => e.Direccion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");
            entity.Property(e => e.IdNegocio).HasColumnName("ID_NEGOCIO");
            entity.Property(e => e.Latitud)
                .IsUnicode(false)
                .HasColumnName("LATITUD");
            entity.Property(e => e.Longitud)
                .IsUnicode(false)
                .HasColumnName("LONGITUD");
            entity.Property(e => e.Mapa)
                .IsUnicode(false)
                .HasColumnName("MAPA");
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.Poblacion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("POBLACION");
            entity.Property(e => e.RazonSocial)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RAZON_SOCIAL");
            entity.Property(e => e.Rfc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RFC");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.Telefono)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");
        });

        modelBuilder.Entity<TempOkiServiciosCorrectivo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEMP_OKI_SERVICIOS_CORRECTIVOS");

            entity.Property(e => e.Cajero)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CAJERO");
            entity.Property(e => e.CausaRechazo)
                .IsUnicode(false)
                .HasColumnName("CAUSA_RECHAZO");
            entity.Property(e => e.Cierre)
                .IsUnicode(false)
                .HasColumnName("CIERRE");
            entity.Property(e => e.Cliente)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CLIENTE");
            entity.Property(e => e.Cod0)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("COD_0");
            entity.Property(e => e.Cod1)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("COD_1");
            entity.Property(e => e.Cod2)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("COD_2");
            entity.Property(e => e.CodigoIntervencion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CODIGO_INTERVENCION");
            entity.Property(e => e.EfectividadAsignacion)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("EFECTIVIDAD_ASIGNACION");
            entity.Property(e => e.EfectividadCarga)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("EFECTIVIDAD_CARGA");
            entity.Property(e => e.EfectividadCita)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("EFECTIVIDAD_CITA");
            entity.Property(e => e.EfectividadLlegada)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("EFECTIVIDAD_LLEGADA");
            entity.Property(e => e.EfectividadTiempoCierre)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("EFECTIVIDAD_TIEMPO_CIERRE");
            entity.Property(e => e.EspecificacionSolucion)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("ESPECIFICACION_SOLUCION");
            entity.Property(e => e.ExitoRechazo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("EXITO/RECHAZO");
            entity.Property(e => e.FecConsulta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_CONSULTA");
            entity.Property(e => e.FechaCarga)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FECHA_CARGA");
            entity.Property(e => e.FechaCierre)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FECHA_CIERRE");
            entity.Property(e => e.FechaCita)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FECHA_CITA");
            entity.Property(e => e.FechaFinIng)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FECHA_FIN_ING");
            entity.Property(e => e.FechaGarantia)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FECHA_GARANTIA");
            entity.Property(e => e.FechaIncio)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FECHA_INCIO");
            entity.Property(e => e.FechaInicioIng)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FECHA_INICIO_ING");
            entity.Property(e => e.FechaInterfaz)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FECHA_INTERFAZ");
            entity.Property(e => e.FechaLlegada)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("FECHA_LLEGADA");
            entity.Property(e => e.HoraCarga)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("HORA_CARGA");
            entity.Property(e => e.HoraCierre)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("HORA_CIERRE");
            entity.Property(e => e.HoraCita)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("HORA_CITA");
            entity.Property(e => e.HoraFinIng)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("HORA_FIN_ING");
            entity.Property(e => e.HoraGarantia)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("HORA_GARANTIA");
            entity.Property(e => e.HoraInicio)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("HORA_INICIO");
            entity.Property(e => e.HoraInicioIng)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("HORA_INICIO_ING");
            entity.Property(e => e.HoraInterfaz)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("HORA_INTERFAZ");
            entity.Property(e => e.HoraLlegada)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("HORA_LLEGADA");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IngenieroDeCampo)
                .HasMaxLength(152)
                .IsUnicode(false)
                .HasColumnName("INGENIERO_DE_CAMPO");
            entity.Property(e => e.MotivoRetipificado)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("MOTIVO_RETIPIFICADO");
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.NoAr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AR");
            entity.Property(e => e.PrimerAtendido)
                .HasMaxLength(61)
                .IsUnicode(false)
                .HasColumnName("PRIMER_ATENDIDO");
            entity.Property(e => e.PrimeroAsignado)
                .HasMaxLength(61)
                .IsUnicode(false)
                .HasColumnName("PRIMERO_ASIGNADO");
            entity.Property(e => e.Region)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("REGION");
            entity.Property(e => e.Retipificado)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("RETIPIFICADO");
            entity.Property(e => e.Servicio)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("SERVICIO");
            entity.Property(e => e.Solucion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SOLUCION");
            entity.Property(e => e.TiempoDeArribo)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("TIEMPO_DE_ARRIBO");
            entity.Property(e => e.TiempoDeCarga).HasColumnName("TIEMPO_DE_CARGA");
            entity.Property(e => e.TiempoDeLlegada).HasColumnName("TIEMPO_DE_LLEGADA");
            entity.Property(e => e.TiempoSolucionMin).HasColumnName("TIEMPO_SOLUCION_MIN");
            entity.Property(e => e.Zona)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZONA");
        });

        modelBuilder.Entity<TempOkiServiciosCorrectivos2>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEMP_OKI_SERVICIOS_CORRECTIVOS_2");

            entity.Property(e => e.CausaRechazo)
                .IsUnicode(false)
                .HasColumnName("CAUSA_RECHAZO");
            entity.Property(e => e.Cierre)
                .IsUnicode(false)
                .HasColumnName("CIERRE");
            entity.Property(e => e.Cliente)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CLIENTE");
            entity.Property(e => e.EfectividadAsignacion)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("EFECTIVIDAD_ASIGNACION");
            entity.Property(e => e.EfectividadCarga)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("EFECTIVIDAD_CARGA");
            entity.Property(e => e.EfectividadCita)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("EFECTIVIDAD_CITA");
            entity.Property(e => e.EfectividadLlegada)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("EFECTIVIDAD_LLEGADA");
            entity.Property(e => e.EfectividadTiempoCierre)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("EFECTIVIDAD_TIEMPO_CIERRE");
            entity.Property(e => e.EspecificacionSolucion)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("ESPECIFICACION_SOLUCION");
            entity.Property(e => e.ExitoRechazo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("EXITO/RECHAZO");
            entity.Property(e => e.FecConsulta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_CONSULTA");
            entity.Property(e => e.FechaCarga)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FECHA_CARGA");
            entity.Property(e => e.FechaCierre)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FECHA_CIERRE");
            entity.Property(e => e.FechaCita)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FECHA_CITA");
            entity.Property(e => e.FechaFinIng)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FECHA_FIN_ING");
            entity.Property(e => e.FechaGarantia)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FECHA_GARANTIA");
            entity.Property(e => e.FechaIncio)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FECHA_INCIO");
            entity.Property(e => e.FechaInicioIng)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FECHA_INICIO_ING");
            entity.Property(e => e.FechaLlegada)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("FECHA_LLEGADA");
            entity.Property(e => e.HoraCarga)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("HORA_CARGA");
            entity.Property(e => e.HoraCierre)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("HORA_CIERRE");
            entity.Property(e => e.HoraCita)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("HORA_CITA");
            entity.Property(e => e.HoraFinIng)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("HORA_FIN_ING");
            entity.Property(e => e.HoraGarantia)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("HORA_GARANTIA");
            entity.Property(e => e.HoraInicio)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("HORA_INICIO");
            entity.Property(e => e.HoraInicioIng)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("HORA_INICIO_ING");
            entity.Property(e => e.HoraLlegada)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("HORA_LLEGADA");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IngenieroDeCampo)
                .HasMaxLength(152)
                .IsUnicode(false)
                .HasColumnName("INGENIERO_DE_CAMPO");
            entity.Property(e => e.MotivoRetipificado)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("MOTIVO_RETIPIFICADO");
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.NoAr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AR");
            entity.Property(e => e.PrimerAtendido)
                .HasMaxLength(61)
                .IsUnicode(false)
                .HasColumnName("PRIMER_ATENDIDO");
            entity.Property(e => e.PrimeroAsignado)
                .HasMaxLength(61)
                .IsUnicode(false)
                .HasColumnName("PRIMERO_ASIGNADO");
            entity.Property(e => e.Region)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("REGION");
            entity.Property(e => e.Retipificado)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("RETIPIFICADO");
            entity.Property(e => e.Servicio)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("SERVICIO");
            entity.Property(e => e.Solucion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SOLUCION");
            entity.Property(e => e.TiempoDeArribo)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("TIEMPO_DE_ARRIBO");
            entity.Property(e => e.TiempoDeCarga).HasColumnName("TIEMPO_DE_CARGA");
            entity.Property(e => e.TiempoSolucionMin).HasColumnName("TIEMPO_SOLUCION_MIN");
            entity.Property(e => e.Zona)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZONA");
        });

        modelBuilder.Entity<TempOkiServiciosCorrectivosOki>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEMP_OKI_SERVICIOS_CORRECTIVOS_OKI");

            entity.Property(e => e.Cajero)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CAJERO");
            entity.Property(e => e.CausaRechazo)
                .IsUnicode(false)
                .HasColumnName("CAUSA_RECHAZO");
            entity.Property(e => e.Cierre)
                .IsUnicode(false)
                .HasColumnName("CIERRE");
            entity.Property(e => e.Cliente)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CLIENTE");
            entity.Property(e => e.Cod0)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("COD_0");
            entity.Property(e => e.Cod1)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("COD_1");
            entity.Property(e => e.Cod2)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("COD_2");
            entity.Property(e => e.CodigoIntervencion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CODIGO_INTERVENCION");
            entity.Property(e => e.EfectividadAsignacion)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("EFECTIVIDAD_ASIGNACION");
            entity.Property(e => e.EfectividadCarga)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("EFECTIVIDAD_CARGA");
            entity.Property(e => e.EfectividadCita)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("EFECTIVIDAD_CITA");
            entity.Property(e => e.EfectividadLlegada)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("EFECTIVIDAD_LLEGADA");
            entity.Property(e => e.EfectividadTiempoCierre)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("EFECTIVIDAD_TIEMPO_CIERRE");
            entity.Property(e => e.EspecificacionSolucion)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("ESPECIFICACION_SOLUCION");
            entity.Property(e => e.ExitoRechazo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("EXITO/RECHAZO");
            entity.Property(e => e.FecConsulta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_CONSULTA");
            entity.Property(e => e.FechaCarga)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FECHA_CARGA");
            entity.Property(e => e.FechaCierre)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FECHA_CIERRE");
            entity.Property(e => e.FechaCita)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FECHA_CITA");
            entity.Property(e => e.FechaFinIng)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FECHA_FIN_ING");
            entity.Property(e => e.FechaGarantia)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FECHA_GARANTIA");
            entity.Property(e => e.FechaIncio)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FECHA_INCIO");
            entity.Property(e => e.FechaInicioIng)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FECHA_INICIO_ING");
            entity.Property(e => e.FechaInterfaz)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FECHA_INTERFAZ");
            entity.Property(e => e.FechaLlegada)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("FECHA_LLEGADA");
            entity.Property(e => e.HoraCarga)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("HORA_CARGA");
            entity.Property(e => e.HoraCierre)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("HORA_CIERRE");
            entity.Property(e => e.HoraCita)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("HORA_CITA");
            entity.Property(e => e.HoraFinIng)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("HORA_FIN_ING");
            entity.Property(e => e.HoraGarantia)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("HORA_GARANTIA");
            entity.Property(e => e.HoraInicio)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("HORA_INICIO");
            entity.Property(e => e.HoraInicioIng)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("HORA_INICIO_ING");
            entity.Property(e => e.HoraInterfaz)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("HORA_INTERFAZ");
            entity.Property(e => e.HoraLlegada)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("HORA_LLEGADA");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IngenieroDeCampo)
                .HasMaxLength(152)
                .IsUnicode(false)
                .HasColumnName("INGENIERO_DE_CAMPO");
            entity.Property(e => e.MotivoRetipificado)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("MOTIVO_RETIPIFICADO");
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.NoAr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AR");
            entity.Property(e => e.PrimerAtendido)
                .HasMaxLength(61)
                .IsUnicode(false)
                .HasColumnName("PRIMER_ATENDIDO");
            entity.Property(e => e.PrimeroAsignado)
                .HasMaxLength(61)
                .IsUnicode(false)
                .HasColumnName("PRIMERO_ASIGNADO");
            entity.Property(e => e.Region)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("REGION");
            entity.Property(e => e.Retipificado)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("RETIPIFICADO");
            entity.Property(e => e.Servicio)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("SERVICIO");
            entity.Property(e => e.Solucion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SOLUCION");
            entity.Property(e => e.TiempoDeArribo)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("TIEMPO_DE_ARRIBO");
            entity.Property(e => e.TiempoDeCarga).HasColumnName("TIEMPO_DE_CARGA");
            entity.Property(e => e.TiempoDeLlegada).HasColumnName("TIEMPO_DE_LLEGADA");
            entity.Property(e => e.TiempoSolucionMin).HasColumnName("TIEMPO_SOLUCION_MIN");
            entity.Property(e => e.Zona)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZONA");
        });

        modelBuilder.Entity<TempPreporteInventariosTpvVerifoneSustitucionesFecha>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEMP_PREPORTE_INVENTARIOS_TPV_VERIFONE_SUSTITUCIONES_FECHA");

            entity.Property(e => e.Cliente)
                .IsRequired()
                .HasMaxLength(26)
                .IsUnicode(false);
            entity.Property(e => e.DescMarca)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_MARCA");
            entity.Property(e => e.DescModelo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_MODELO");
            entity.Property(e => e.DescNivelDiagnostico)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("DESC_NIVEL_DIAGNOSTICO");
            entity.Property(e => e.DescStatusUnidad)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_STATUS_UNIDAD");
            entity.Property(e => e.DescTipoResponsable)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_TIPO_RESPONSABLE");
            entity.Property(e => e.DescZona)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Expr1)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.FecStatus)
                .HasMaxLength(61)
                .IsUnicode(false)
                .HasColumnName("FEC_STATUS");
            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");
            entity.Property(e => e.IsDaniada).HasColumnName("IS_DANIADA");
            entity.Property(e => e.IsNueva).HasColumnName("IS_NUEVA");
            entity.Property(e => e.IsReparada).HasColumnName("IS_REPARADA");
            entity.Property(e => e.IsRetiro).HasColumnName("IS_RETIRO");
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.NoImei)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_IMEI");
            entity.Property(e => e.NoInventario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_INVENTARIO");
            entity.Property(e => e.NoSerie)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");
            entity.Property(e => e.NoSim)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SIM");
        });

        modelBuilder.Entity<TempPresupuestosCubo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEMP_PRESUPUESTOS_CUBO");

            entity.Property(e => e.CostoTotal)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("COSTO_TOTAL");
            entity.Property(e => e.GastosIndirectos)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("GASTOS_INDIRECTOS");
            entity.Property(e => e.GastosOperacion)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("GASTOS_OPERACION");
            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.ManoObra)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("MANO_OBRA");
            entity.Property(e => e.MargenContribucion)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("MARGEN_CONTRIBUCION");
            entity.Property(e => e.Penalizaciones)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("PENALIZACIONES");
            entity.Property(e => e.Refacciones)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("REFACCIONES");
            entity.Property(e => e.Tipo)
                .IsRequired()
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("TIPO");
            entity.Property(e => e.Utilidad)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("UTILIDAD");
            entity.Property(e => e.VentasBrutas)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("VENTAS_BRUTAS");
            entity.Property(e => e.VentasNetas)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("VENTAS_NETAS");
            entity.Property(e => e.Year).HasColumnName("YEAR");
        });

        modelBuilder.Entity<TempProgramado>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEMP_PROGRAMADOS");

            entity.Property(e => e.AltaPor)
                .IsUnicode(false)
                .HasColumnName("ALTA_POR");
            entity.Property(e => e.AreaCarga)
                .IsUnicode(false)
                .HasColumnName("AREA_CARGA");
            entity.Property(e => e.AreaCierra)
                .IsUnicode(false)
                .HasColumnName("AREA_CIERRA");
            entity.Property(e => e.CerradoPor)
                .IsUnicode(false)
                .HasColumnName("CERRADO_POR");
            entity.Property(e => e.Ciudad)
                .IsUnicode(false)
                .HasColumnName("CIUDAD");
            entity.Property(e => e.CodigoPostal)
                .IsUnicode(false)
                .HasColumnName("CODIGO_POSTAL");
            entity.Property(e => e.Colonia)
                .IsUnicode(false)
                .HasColumnName("COLONIA");
            entity.Property(e => e.Comercio)
                .IsUnicode(false)
                .HasColumnName("COMERCIO");
            entity.Property(e => e.Conclusiones)
                .IsUnicode(false)
                .HasColumnName("CONCLUSIONES");
            entity.Property(e => e.Descripcion)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");
            entity.Property(e => e.Direccion)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");
            entity.Property(e => e.Estado)
                .IsUnicode(false)
                .HasColumnName("ESTADO");
            entity.Property(e => e.EstatusServicio)
                .IsUnicode(false)
                .HasColumnName("ESTATUS_SERVICIO");
            entity.Property(e => e.FecAbierta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ABIERTA");
            entity.Property(e => e.FecAlta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.FecProgramado)
                .HasColumnType("datetime")
                .HasColumnName("FEC_PROGRAMADO");
            entity.Property(e => e.FechaAltaSistema)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ALTA_SISTEMA");
            entity.Property(e => e.FechaAtencionProveedor)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ATENCION_PROVEEDOR");
            entity.Property(e => e.FechaCierreSistema)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_CIERRE_SISTEMA");
            entity.Property(e => e.FechaFinBitacora)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_FIN_BITACORA");
            entity.Property(e => e.FechaInicioBitacora)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_INICIO_BITACORA");
            entity.Property(e => e.FechaVencimiento)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_VENCIMIENTO");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IdFalla).HasColumnName("ID_FALLA");
            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");
            entity.Property(e => e.IdServicio).HasColumnName("ID_SERVICIO");
            entity.Property(e => e.IdStatusAr).HasColumnName("ID_STATUS_AR");
            entity.Property(e => e.IdUsuarioProgramado).HasColumnName("ID_USUARIO_PROGRAMADO");
            entity.Property(e => e.IdZona).HasColumnName("ID_ZONA");
            entity.Property(e => e.MotivoRechazo)
                .IsUnicode(false)
                .HasColumnName("MOTIVO_RECHAZO");
            entity.Property(e => e.Nivel)
                .IsUnicode(false)
                .HasColumnName("NIVEL");
            entity.Property(e => e.NoAfiliacion)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.Observaciones)
                .IsUnicode(false)
                .HasColumnName("OBSERVACIONES");
            entity.Property(e => e.Odt)
                .IsUnicode(false)
                .HasColumnName("ODT");
            entity.Property(e => e.OdtSalesforce)
                .IsUnicode(false)
                .HasColumnName("ODT_SALESFORCE");
            entity.Property(e => e.Proveedor)
                .IsUnicode(false)
                .HasColumnName("PROVEEDOR");
            entity.Property(e => e.Rechazo)
                .IsUnicode(false)
                .HasColumnName("RECHAZO");
            entity.Property(e => e.SlaFijo).HasColumnName("SLA_FIJO");
            entity.Property(e => e.SubTipoServicio)
                .IsUnicode(false)
                .HasColumnName("SUB_TIPO_SERVICIO");
            entity.Property(e => e.Telefono)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");
            entity.Property(e => e.TipoCarga)
                .IsUnicode(false)
                .HasColumnName("TIPO_CARGA");
            entity.Property(e => e.TipoComercio)
                .IsUnicode(false)
                .HasColumnName("TIPO_COMERCIO");
            entity.Property(e => e.TipoServicio)
                .IsUnicode(false)
                .HasColumnName("TIPO_SERVICIO");
            entity.Property(e => e.Usuario).HasColumnName("USUARIO");
            entity.Property(e => e.Zona)
                .IsUnicode(false)
                .HasColumnName("ZONA");
        });

        modelBuilder.Entity<TempProgramados2>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEMP_PROGRAMADOS2");

            entity.Property(e => e.AltaPor)
                .HasMaxLength(152)
                .IsUnicode(false)
                .HasColumnName("ALTA_POR");
            entity.Property(e => e.AreaCarga)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AREA_CARGA");
            entity.Property(e => e.AreaCierra)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AREA_CIERRA");
            entity.Property(e => e.CerradoPor)
                .HasMaxLength(152)
                .IsUnicode(false)
                .HasColumnName("CERRADO_POR");
            entity.Property(e => e.Ciudad)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CIUDAD");
            entity.Property(e => e.CodigoPostal)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("CODIGO_POSTAL");
            entity.Property(e => e.Colonia)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("COLONIA");
            entity.Property(e => e.Comercio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("COMERCIO");
            entity.Property(e => e.Conclusiones)
                .HasMaxLength(3000)
                .IsUnicode(false)
                .HasColumnName("CONCLUSIONES");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");
            entity.Property(e => e.Direccion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");
            entity.Property(e => e.Estado)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ESTADO");
            entity.Property(e => e.EstatusServicio)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ESTATUS_SERVICIO");
            entity.Property(e => e.FecAbierta)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ABIERTA");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.FecProgramado)
                .HasColumnType("datetime")
                .HasColumnName("FEC_PROGRAMADO");
            entity.Property(e => e.FechaAltaSistema)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_ALTA_SISTEMA");
            entity.Property(e => e.FechaAtencionProveedor)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_ATENCION_PROVEEDOR");
            entity.Property(e => e.FechaCierreSistema)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_CIERRE_SISTEMA");
            entity.Property(e => e.FechaFinBitacora)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_FIN_BITACORA");
            entity.Property(e => e.FechaInicioBitacora)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_INICIO_BITACORA");
            entity.Property(e => e.FechaVencimiento)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_VENCIMIENTO");
            entity.Property(e => e.IdAr)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_AR");
            entity.Property(e => e.IdUsuarioProgramado).HasColumnName("ID_USUARIO_PROGRAMADO");
            entity.Property(e => e.MotivoRechazo)
                .IsUnicode(false)
                .HasColumnName("MOTIVO_RECHAZO");
            entity.Property(e => e.Nivel)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("NIVEL");
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.Observaciones)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("OBSERVACIONES");
            entity.Property(e => e.Odt)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ODT");
            entity.Property(e => e.OdtSalesforce)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ODT_SALESFORCE");
            entity.Property(e => e.Proveedor)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("PROVEEDOR");
            entity.Property(e => e.Rechazo)
                .IsUnicode(false)
                .HasColumnName("RECHAZO");
            entity.Property(e => e.SlaFijo).HasColumnName("SLA_FIJO");
            entity.Property(e => e.SubTipoServicio)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("SUB_TIPO_SERVICIO");
            entity.Property(e => e.Telefono)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");
            entity.Property(e => e.TipoCarga)
                .IsRequired()
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("TIPO_CARGA");
            entity.Property(e => e.TipoComercio)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TIPO_COMERCIO");
            entity.Property(e => e.TipoServicio)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("TIPO_SERVICIO");
            entity.Property(e => e.Usuario).HasColumnName("USUARIO");
            entity.Property(e => e.Zona)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZONA");
        });

        modelBuilder.Entity<TempPrueba>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEMP_PRUEBA");

            entity.Property(e => e.Afiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AFILIACION");
            entity.Property(e => e.Ar)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AR");
            entity.Property(e => e.Cliente)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CLIENTE");
            entity.Property(e => e.Colonia)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("COLONIA");
            entity.Property(e => e.ConsultaFecha)
                .HasColumnType("smalldatetime")
                .HasColumnName("CONSULTA_FECHA");
            entity.Property(e => e.Cp)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("CP");
            entity.Property(e => e.Direccion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");
            entity.Property(e => e.Estado)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ESTADO");
            entity.Property(e => e.FechaDeCierre)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FECHA DE CIERRE");
            entity.Property(e => e.FechaDeInventario)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FECHA DE INVENTARIO");
            entity.Property(e => e.MarcaEntra)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MARCA ENTRA");
            entity.Property(e => e.MarcaSale)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MARCA SALE");
            entity.Property(e => e.ModeloEntra)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MODELO ENTRA");
            entity.Property(e => e.ModeloSale)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MODELO SALE");
            entity.Property(e => e.Negocio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NEGOCIO");
            entity.Property(e => e.NoSerieEntra)
                .IsRequired()
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("NO. SERIE ENTRA");
            entity.Property(e => e.NoSerieSale)
                .IsRequired()
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("NO. SERIE SALE");
            entity.Property(e => e.Poblacion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("POBLACION");
            entity.Property(e => e.Region)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("REGION");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.Tecnico)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("TECNICO");
            entity.Property(e => e.Zona)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZONA");
        });

        modelBuilder.Entity<TempPrueba1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEMP_PRUEBAS");

            entity.Property(e => e.IdAplicativoEntrada).HasColumnName("ID_APLICATIVO_ENTRADA");
            entity.Property(e => e.IdAplicativoSalida).HasColumnName("ID_APLICATIVO_SALIDA");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IdArchivoMovimiento).HasColumnName("ID_ARCHIVO_MOVIMIENTO");
            entity.Property(e => e.IdBdMovInventarios)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_BD_MOV_INVENTARIOS");
            entity.Property(e => e.IdConectividadEntrada).HasColumnName("ID_CONECTIVIDAD_ENTRADA");
            entity.Property(e => e.IdConectividadSalida).HasColumnName("ID_CONECTIVIDAD_SALIDA");
            entity.Property(e => e.InstalacionesElavonDescModelo)
                .IsUnicode(false)
                .HasColumnName("INSTALACIONES_ELAVON_DESC_MODELO");
            entity.Property(e => e.InstalacionesElavonNoSerie)
                .IsUnicode(false)
                .HasColumnName("INSTALACIONES_ELAVON_NO_SERIE");
            entity.Property(e => e.InstalacionesIdUnidad).HasColumnName("INSTALACIONES_ID_UNIDAD");
            entity.Property(e => e.NoAr)
                .IsUnicode(false)
                .HasColumnName("NO_AR");
            entity.Property(e => e.Observaciones)
                .IsUnicode(false)
                .HasColumnName("OBSERVACIONES");
            entity.Property(e => e.RetirosElavonDescModelo)
                .IsUnicode(false)
                .HasColumnName("RETIROS_ELAVON_DESC_MODELO");
            entity.Property(e => e.RetirosElavonNoSerie)
                .IsUnicode(false)
                .HasColumnName("RETIROS_ELAVON_NO_SERIE");
            entity.Property(e => e.RetirosIdUnidad).HasColumnName("RETIROS_ID_UNIDAD");
        });

        modelBuilder.Entity<TempPruebaA>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEMP_PRUEBA_A");

            entity.Property(e => e.Aplicacion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("APLICACION");
            entity.Property(e => e.Carrier)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("CARRIER");
            entity.Property(e => e.Danio)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("DANIO");
            entity.Property(e => e.Destino)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("DESTINO");
            entity.Property(e => e.Estatus)
                .IsRequired()
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("ESTATUS");
            entity.Property(e => e.EstatusSgs)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ESTATUS_SGS");
            entity.Property(e => e.Fecha)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA");
            entity.Property(e => e.Modelo)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MODELO");
            entity.Property(e => e.ModeloBanco)
                .HasMaxLength(400)
                .IsUnicode(false)
                .HasColumnName("MODELO_BANCO");
            entity.Property(e => e.NoGuia)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_GUIA");
            entity.Property(e => e.NoSerie)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");
            entity.Property(e => e.Origen)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("ORIGEN");
            entity.Property(e => e.Plaza)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("PLAZA");
            entity.Property(e => e.Reporte)
                .HasMaxLength(400)
                .IsUnicode(false)
                .HasColumnName("REPORTE");
            entity.Property(e => e.Responsable)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RESPONSABLE");
            entity.Property(e => e.Sim)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("SIM");
            entity.Property(e => e.Tecnologia)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("TECNOLOGIA");
            entity.Property(e => e.Zona)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("ZONA");
            entity.Property(e => e.ZonaDestino)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("ZONA_DESTINO");
        });

        modelBuilder.Entity<TempRepTpvEglobalGral>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEMP_REP_TPV_EGLOBAL_GRAL");

            entity.Property(e => e.Aplicacion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("APLICACION");
            entity.Property(e => e.Carrier)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("CARRIER");
            entity.Property(e => e.Danio)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("DANIO");
            entity.Property(e => e.Destino)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("DESTINO");
            entity.Property(e => e.Estatus)
                .IsRequired()
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("ESTATUS");
            entity.Property(e => e.EstatusSgs)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ESTATUS_SGS");
            entity.Property(e => e.Fecha)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA");
            entity.Property(e => e.Modelo)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MODELO");
            entity.Property(e => e.ModeloBanco)
                .HasMaxLength(400)
                .IsUnicode(false)
                .HasColumnName("MODELO_BANCO");
            entity.Property(e => e.NoGuia)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_GUIA");
            entity.Property(e => e.NoSerie)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");
            entity.Property(e => e.Origen)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("ORIGEN");
            entity.Property(e => e.Plaza)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("PLAZA");
            entity.Property(e => e.Reporte)
                .HasMaxLength(400)
                .IsUnicode(false)
                .HasColumnName("REPORTE");
            entity.Property(e => e.Responsable)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RESPONSABLE");
            entity.Property(e => e.Sim)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("SIM");
            entity.Property(e => e.Tecnologia)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("TECNOLOGIA");
            entity.Property(e => e.Zona)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("ZONA");
            entity.Property(e => e.ZonaDestino)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("ZONA_DESTINO");
        });

        modelBuilder.Entity<TempReporteFillRateBancomer>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEMP_REPORTE_FILL_RATE_BANCOMER");

            entity.Property(e => e.Afiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AFILIACION");
            entity.Property(e => e.Ar)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AR");
            entity.Property(e => e.Cliente)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CLIENTE");
            entity.Property(e => e.FecCierre)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_CIERRE");
            entity.Property(e => e.FechaDeCierre)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FECHA DE CIERRE");
            entity.Property(e => e.FechaDeInventario)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FECHA DE INVENTARIO");
            entity.Property(e => e.MarcaEntra)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MARCA ENTRA");
            entity.Property(e => e.ModeloEntra)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MODELO ENTRA");
            entity.Property(e => e.Negocio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NEGOCIO");
            entity.Property(e => e.NoSerieEntra)
                .IsRequired()
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("NO. SERIE ENTRA");
            entity.Property(e => e.Region)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("REGION");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.Tecnico)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("TECNICO");
            entity.Property(e => e.TipoComunicacion)
                .IsRequired()
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("TIPO_COMUNICACION");
            entity.Property(e => e.Zona)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZONA");
        });

        modelBuilder.Entity<TempReporteFillRateBancomerDisponible>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEMP_REPORTE_FILL_RATE_BANCOMER_DISPONIBLE");

            entity.Property(e => e.Cliente)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CLIENTE");
            entity.Property(e => e.Dañana)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("DAÑANA");
            entity.Property(e => e.DescModelo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_MODELO");
            entity.Property(e => e.FechaDeStatus)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FECHA DE STATUS");
            entity.Property(e => e.Marca)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MARCA");
            entity.Property(e => e.NoSerie)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("NO. SERIE");
            entity.Property(e => e.NoSim)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("NO. SIM");
            entity.Property(e => e.NoUnidad).HasColumnName("NO. UNIDAD");
            entity.Property(e => e.Responsable)
                .IsRequired()
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("RESPONSABLE");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.TipoComunicacion)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("TIPO_COMUNICACION");
            entity.Property(e => e.TipoDeResponsable)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TIPO DE RESPONSABLE");
            entity.Property(e => e.Zona)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("ZONA");
        });

        modelBuilder.Entity<TempReporteInventarioMultivaFecha>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEMP_REPORTE_INVENTARIO_MULTIVA_FECHA");

            entity.Property(e => e.Aplicativo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APLICATIVO");
            entity.Property(e => e.Cliente)
                .IsRequired()
                .HasMaxLength(7)
                .IsUnicode(false);
            entity.Property(e => e.Conectividad)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CONECTIVIDAD");
            entity.Property(e => e.DescMarca)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_MARCA");
            entity.Property(e => e.DescModelo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_MODELO");
            entity.Property(e => e.DescNivelDiagnostico)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("DESC_NIVEL_DIAGNOSTICO");
            entity.Property(e => e.DescStatusUnidad)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_STATUS_UNIDAD");
            entity.Property(e => e.DescTipoResponsable)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_TIPO_RESPONSABLE");
            entity.Property(e => e.DescZona)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Expr1)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.FecStatus)
                .HasMaxLength(61)
                .IsUnicode(false)
                .HasColumnName("FEC_STATUS");
            entity.Property(e => e.IdAplicativo).HasColumnName("ID_APLICATIVO");
            entity.Property(e => e.IdConectividad).HasColumnName("ID_CONECTIVIDAD");
            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");
            entity.Property(e => e.IsDaniada).HasColumnName("IS_DANIADA");
            entity.Property(e => e.IsNueva).HasColumnName("IS_NUEVA");
            entity.Property(e => e.IsReparada).HasColumnName("IS_REPARADA");
            entity.Property(e => e.IsRetiro).HasColumnName("IS_RETIRO");
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.NoImei)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_IMEI");
            entity.Property(e => e.NoInventario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_INVENTARIO");
            entity.Property(e => e.NoSerie)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");
            entity.Property(e => e.NoSim)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SIM");
        });

        modelBuilder.Entity<TempReporteInventariosBanamexTnmFecha>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEMP_REPORTE_INVENTARIOS_BANAMEX_TNM_FECHA");

            entity.Property(e => e.Cliente)
                .IsRequired()
                .HasMaxLength(13)
                .IsUnicode(false);
            entity.Property(e => e.DescMarca)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_MARCA");
            entity.Property(e => e.DescModelo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_MODELO");
            entity.Property(e => e.DescStatusUnidad)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_STATUS_UNIDAD");
            entity.Property(e => e.DescTipoResponsable)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_TIPO_RESPONSABLE");
            entity.Property(e => e.DescZona)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Expr1)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.FecStatus)
                .HasMaxLength(61)
                .IsUnicode(false)
                .HasColumnName("FEC_STATUS");
            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");
            entity.Property(e => e.IsDaniada).HasColumnName("IS_DANIADA");
            entity.Property(e => e.IsNueva).HasColumnName("IS_NUEVA");
            entity.Property(e => e.IsReparada).HasColumnName("IS_REPARADA");
            entity.Property(e => e.IsRetiro).HasColumnName("IS_RETIRO");
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.NoImei)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_IMEI");
            entity.Property(e => e.NoInventario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_INVENTARIO");
            entity.Property(e => e.NoSerie)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");
            entity.Property(e => e.NoSim)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SIM");
        });

        modelBuilder.Entity<TempReporteInventariosIngenico>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEMP_REPORTE_INVENTARIOS_INGENICO");

            entity.Property(e => e.Cliente)
                .IsRequired()
                .HasMaxLength(31)
                .IsUnicode(false);
            entity.Property(e => e.DescMarca)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_MARCA");
            entity.Property(e => e.DescModelo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_MODELO");
            entity.Property(e => e.DescStatusUnidad)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_STATUS_UNIDAD");
            entity.Property(e => e.DescTipoResponsable)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_TIPO_RESPONSABLE");
            entity.Property(e => e.DescZona)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Expr1)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.FecStatus)
                .HasMaxLength(61)
                .IsUnicode(false)
                .HasColumnName("FEC_STATUS");
            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");
            entity.Property(e => e.IsDaniada).HasColumnName("IS_DANIADA");
            entity.Property(e => e.IsNueva).HasColumnName("IS_NUEVA");
            entity.Property(e => e.IsReparada).HasColumnName("IS_REPARADA");
            entity.Property(e => e.IsRetiro).HasColumnName("IS_RETIRO");
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.NoImei)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_IMEI");
            entity.Property(e => e.NoInventario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_INVENTARIO");
            entity.Property(e => e.NoSerie)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");
            entity.Property(e => e.NoSim)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SIM");
        });

        modelBuilder.Entity<TempReporteInventariosIngenicoBanbajio>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEMP_REPORTE_INVENTARIOS_INGENICO_BANBAJIO");

            entity.Property(e => e.Aplicativo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APLICATIVO");
            entity.Property(e => e.Cliente)
                .IsRequired()
                .HasMaxLength(17)
                .IsUnicode(false);
            entity.Property(e => e.Conectividad)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CONECTIVIDAD");
            entity.Property(e => e.DescMarca)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_MARCA");
            entity.Property(e => e.DescModelo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_MODELO");
            entity.Property(e => e.DescStatusUnidad)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_STATUS_UNIDAD");
            entity.Property(e => e.DescTipoResponsable)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_TIPO_RESPONSABLE");
            entity.Property(e => e.DescZona)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Expr1)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.FecStatus)
                .HasMaxLength(61)
                .IsUnicode(false)
                .HasColumnName("FEC_STATUS");
            entity.Property(e => e.IdAplicativo).HasColumnName("ID_APLICATIVO");
            entity.Property(e => e.IdConectividad).HasColumnName("ID_CONECTIVIDAD");
            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");
            entity.Property(e => e.IsDaniada).HasColumnName("IS_DANIADA");
            entity.Property(e => e.IsNueva).HasColumnName("IS_NUEVA");
            entity.Property(e => e.IsReparada).HasColumnName("IS_REPARADA");
            entity.Property(e => e.IsRetiro).HasColumnName("IS_RETIRO");
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.NoImei)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_IMEI");
            entity.Property(e => e.NoInventario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_INVENTARIO");
            entity.Property(e => e.NoSerie)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");
            entity.Property(e => e.NoSim)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SIM");
        });

        modelBuilder.Entity<TempReporteInventariosIngenicoSantander>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEMP_REPORTE_INVENTARIOS_INGENICO_SANTANDER");

            entity.Property(e => e.Cliente)
                .IsRequired()
                .HasMaxLength(18)
                .IsUnicode(false);
            entity.Property(e => e.DescMarca)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_MARCA");
            entity.Property(e => e.DescModelo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_MODELO");
            entity.Property(e => e.DescStatusUnidad)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_STATUS_UNIDAD");
            entity.Property(e => e.DescTipoResponsable)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_TIPO_RESPONSABLE");
            entity.Property(e => e.DescZona)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Expr1)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.FecStatus)
                .HasMaxLength(61)
                .IsUnicode(false)
                .HasColumnName("FEC_STATUS");
            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");
            entity.Property(e => e.IsDaniada).HasColumnName("IS_DANIADA");
            entity.Property(e => e.IsNueva).HasColumnName("IS_NUEVA");
            entity.Property(e => e.IsReparada).HasColumnName("IS_REPARADA");
            entity.Property(e => e.IsRetiro).HasColumnName("IS_RETIRO");
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.NoImei)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_IMEI");
            entity.Property(e => e.NoInventario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_INVENTARIO");
            entity.Property(e => e.NoSerie)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");
            entity.Property(e => e.NoSim)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SIM");
        });

        modelBuilder.Entity<TempReporteInventariosMit>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEMP_REPORTE_INVENTARIOS_MIT");

            entity.Property(e => e.Cliente)
                .IsRequired()
                .HasMaxLength(24)
                .IsUnicode(false);
            entity.Property(e => e.DescMarca)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_MARCA");
            entity.Property(e => e.DescModelo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_MODELO");
            entity.Property(e => e.DescStatusUnidad)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_STATUS_UNIDAD");
            entity.Property(e => e.DescTipoResponsable)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_TIPO_RESPONSABLE");
            entity.Property(e => e.DescZona)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Expr1)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.FecStatus)
                .HasMaxLength(61)
                .IsUnicode(false)
                .HasColumnName("FEC_STATUS");
            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");
            entity.Property(e => e.IsDaniada).HasColumnName("IS_DANIADA");
            entity.Property(e => e.IsNueva).HasColumnName("IS_NUEVA");
            entity.Property(e => e.IsReparada).HasColumnName("IS_REPARADA");
            entity.Property(e => e.IsRetiro).HasColumnName("IS_RETIRO");
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.NoImei)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_IMEI");
            entity.Property(e => e.NoInventario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_INVENTARIO");
            entity.Property(e => e.NoSerie)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");
            entity.Property(e => e.NoSim)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SIM");
        });

        modelBuilder.Entity<TempReporteInventariosSolucion>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEMP_REPORTE_INVENTARIOS_SOLUCION");

            entity.Property(e => e.Aplicativo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APLICATIVO");
            entity.Property(e => e.Cliente)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Conectividad)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CONECTIVIDAD");
            entity.Property(e => e.DescMarca)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_MARCA");
            entity.Property(e => e.DescModelo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_MODELO");
            entity.Property(e => e.DescStatusUnidad)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_STATUS_UNIDAD");
            entity.Property(e => e.DescTipoResponsable)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_TIPO_RESPONSABLE");
            entity.Property(e => e.DescZona)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Expr1)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.FecStatus)
                .HasMaxLength(61)
                .IsUnicode(false)
                .HasColumnName("FEC_STATUS");
            entity.Property(e => e.IdAplicativo).HasColumnName("ID_APLICATIVO");
            entity.Property(e => e.IdConectividad).HasColumnName("ID_CONECTIVIDAD");
            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");
            entity.Property(e => e.IsDaniada).HasColumnName("IS_DANIADA");
            entity.Property(e => e.IsNueva).HasColumnName("IS_NUEVA");
            entity.Property(e => e.IsReparada).HasColumnName("IS_REPARADA");
            entity.Property(e => e.IsRetiro).HasColumnName("IS_RETIRO");
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.NoImei)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_IMEI");
            entity.Property(e => e.NoInventario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_INVENTARIO");
            entity.Property(e => e.NoSerie)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");
            entity.Property(e => e.NoSim)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SIM");
        });

        modelBuilder.Entity<TempReporteInventariosTedisa>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEMP_REPORTE_INVENTARIOS_TEDISA");

            entity.Property(e => e.Aplicativo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APLICATIVO");
            entity.Property(e => e.Cliente)
                .IsRequired()
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.Conectividad)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CONECTIVIDAD");
            entity.Property(e => e.DescMarca)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_MARCA");
            entity.Property(e => e.DescModelo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_MODELO");
            entity.Property(e => e.DescStatusUnidad)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_STATUS_UNIDAD");
            entity.Property(e => e.DescTipoResponsable)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_TIPO_RESPONSABLE");
            entity.Property(e => e.DescZona)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Expr1)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.FecStatus)
                .HasMaxLength(61)
                .IsUnicode(false)
                .HasColumnName("FEC_STATUS");
            entity.Property(e => e.IdAplicativo).HasColumnName("ID_APLICATIVO");
            entity.Property(e => e.IdConectividad).HasColumnName("ID_CONECTIVIDAD");
            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");
            entity.Property(e => e.IsDaniada).HasColumnName("IS_DANIADA");
            entity.Property(e => e.IsNueva).HasColumnName("IS_NUEVA");
            entity.Property(e => e.IsReparada).HasColumnName("IS_REPARADA");
            entity.Property(e => e.IsRetiro).HasColumnName("IS_RETIRO");
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.NoImei)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_IMEI");
            entity.Property(e => e.NoInventario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_INVENTARIO");
            entity.Property(e => e.NoSerie)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");
            entity.Property(e => e.NoSim)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SIM");
        });

        modelBuilder.Entity<TempReporteInventariosVerifonElavonSantander>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEMP_REPORTE_INVENTARIOS_VERIFON_ELAVON_SANTANDER");

            entity.Property(e => e.Aplicativo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APLICATIVO");
            entity.Property(e => e.Cliente)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Conectividad)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CONECTIVIDAD");
            entity.Property(e => e.DescMarca)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_MARCA");
            entity.Property(e => e.DescModelo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_MODELO");
            entity.Property(e => e.DescStatusUnidad)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_STATUS_UNIDAD");
            entity.Property(e => e.DescTipoResponsable)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_TIPO_RESPONSABLE");
            entity.Property(e => e.DescZona)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Expr1)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.FecStatus)
                .HasMaxLength(61)
                .IsUnicode(false)
                .HasColumnName("FEC_STATUS");
            entity.Property(e => e.IdAplicativo).HasColumnName("ID_APLICATIVO");
            entity.Property(e => e.IdConectividad).HasColumnName("ID_CONECTIVIDAD");
            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");
            entity.Property(e => e.IsDaniada).HasColumnName("IS_DANIADA");
            entity.Property(e => e.IsNueva).HasColumnName("IS_NUEVA");
            entity.Property(e => e.IsReparada).HasColumnName("IS_REPARADA");
            entity.Property(e => e.IsRetiro).HasColumnName("IS_RETIRO");
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.NoImei)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_IMEI");
            entity.Property(e => e.NoInventario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_INVENTARIO");
            entity.Property(e => e.NoSerie)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");
            entity.Property(e => e.NoSim)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SIM");
        });

        modelBuilder.Entity<TempRespaldoAfiliacione>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("temp_respaldo_afiliaciones");

            entity.Property(e => e.Aproximado).HasColumnName("APROXIMADO");
            entity.Property(e => e.CalleNumFiscal)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("CALLE_NUM_FISCAL");
            entity.Property(e => e.Colonia)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("COLONIA");
            entity.Property(e => e.ColoniaFiscal)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("COLONIA_FISCAL");
            entity.Property(e => e.CorreoEjecutivo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CORREO_EJECUTIVO");
            entity.Property(e => e.Cp)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("CP");
            entity.Property(e => e.CpFiscal)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("CP_FISCAL");
            entity.Property(e => e.DescNegocio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_NEGOCIO");
            entity.Property(e => e.Direccion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");
            entity.Property(e => e.Estado)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ESTADO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.FecAltaIguala)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA_IGUALA");
            entity.Property(e => e.FecBajaIguala)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_BAJA_IGUALA");
            entity.Property(e => e.FecUpdate)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_UPDATE");
            entity.Property(e => e.GradoError)
                .HasColumnType("numeric(20, 10)")
                .HasColumnName("GRADO_ERROR");
            entity.Property(e => e.IdCargaAlta).HasColumnName("ID_CARGA_ALTA");
            entity.Property(e => e.IdCargaStatus).HasColumnName("ID_CARGA_STATUS");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdEstado).HasColumnName("ID_ESTADO");
            entity.Property(e => e.IdEstadoFiscal)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("ID_ESTADO_FISCAL");
            entity.Property(e => e.IdHorarioAcceso).HasColumnName("ID_HORARIO_ACCESO");
            entity.Property(e => e.IdHorarioUptime).HasColumnName("ID_HORARIO_UPTIME");
            entity.Property(e => e.IdMoneda).HasColumnName("ID_MONEDA");
            entity.Property(e => e.IdNegocio)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_NEGOCIO");
            entity.Property(e => e.IdRegion).HasColumnName("ID_REGION");
            entity.Property(e => e.IdSegmento).HasColumnName("ID_SEGMENTO");
            entity.Property(e => e.IdTipoCobroNegocio).HasColumnName("ID_TIPO_COBRO_NEGOCIO");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.IdUsuarioUpdate).HasColumnName("ID_USUARIO_UPDATE");
            entity.Property(e => e.IdZona).HasColumnName("ID_ZONA");
            entity.Property(e => e.Latitud)
                .HasColumnType("numeric(20, 15)")
                .HasColumnName("LATITUD");
            entity.Property(e => e.Longitud)
                .HasColumnType("numeric(20, 15)")
                .HasColumnName("LONGITUD");
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.NombreFiscal)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("NOMBRE_FISCAL");
            entity.Property(e => e.Poblacion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("POBLACION");
            entity.Property(e => e.PoblacionFiscal)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("POBLACION_FISCAL");
            entity.Property(e => e.Precio)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("PRECIO");
            entity.Property(e => e.RazonSocial)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RAZON_SOCIAL");
            entity.Property(e => e.RfcFiscal)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RFC_FISCAL");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.Telefono)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");
        });

        modelBuilder.Entity<TempRespaldoCUsuario>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("temp_respaldo_c_usuarios");

            entity.Property(e => e.Celular)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CELULAR");
            entity.Property(e => e.ComentariosOki).HasColumnName("COMENTARIOS_OKI");
            entity.Property(e => e.Credencial)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("CREDENCIAL");
            entity.Property(e => e.Curp)
                .HasMaxLength(18)
                .IsUnicode(false)
                .HasColumnName("CURP");
            entity.Property(e => e.DiasVacaciones).HasColumnName("DIAS_VACACIONES");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("EMAIL");
            entity.Property(e => e.EmailServiceClose).HasColumnName("EMAIL_SERVICE_CLOSE");
            entity.Property(e => e.ExcelUltimoMov).HasColumnName("EXCEL_ULTIMO_MOV");
            entity.Property(e => e.ExcelUsuarioCierre).HasColumnName("EXCEL_USUARIO_CIERRE");
            entity.Property(e => e.FecAccesoPda)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ACCESO_PDA");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.FecBaja)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_BAJA");
            entity.Property(e => e.FecExp)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_EXP");
            entity.Property(e => e.FecIngreso)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_INGRESO");
            entity.Property(e => e.FecNac)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_NAC");
            entity.Property(e => e.FecReingreso)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_REINGRESO");
            entity.Property(e => e.FecStatus)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_STATUS");
            entity.Property(e => e.Frase)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("FRASE");
            entity.Property(e => e.HrefFoto)
                .HasMaxLength(75)
                .IsUnicode(false)
                .HasColumnName("HREF_FOTO");
            entity.Property(e => e.IdAlmacenOld).HasColumnName("ID_ALMACEN_OLD");
            entity.Property(e => e.IdArea).HasColumnName("ID_AREA");
            entity.Property(e => e.IdDatosFiscales).HasColumnName("ID_DATOS_FISCALES");
            entity.Property(e => e.IdDirecciones).HasColumnName("ID_DIRECCIONES");
            entity.Property(e => e.IdEdoNac).HasColumnName("ID_EDO_NAC");
            entity.Property(e => e.IdHorario).HasColumnName("ID_HORARIO");
            entity.Property(e => e.IdJefe).HasColumnName("ID_JEFE");
            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");
            entity.Property(e => e.IdPuesto).HasColumnName("ID_PUESTO");
            entity.Property(e => e.IdTipoUsuario).HasColumnName("ID_TIPO_USUARIO");
            entity.Property(e => e.IdUsuario)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_USUARIO");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.IdUsuarioStatus).HasColumnName("ID_USUARIO_STATUS");
            entity.Property(e => e.IdZona).HasColumnName("ID_ZONA");
            entity.Property(e => e.IsActualizacionMasivaCoordenadasNegocio).HasColumnName("IS_ACTUALIZACION_MASIVA_COORDENADAS_NEGOCIO");
            entity.Property(e => e.IsAddReplicate).HasColumnName("IS_ADD_REPLICATE");
            entity.Property(e => e.IsAdiministrarUsuarios).HasColumnName("IS_ADIMINISTRAR_USUARIOS");
            entity.Property(e => e.IsAllCliente).HasColumnName("IS_ALL_CLIENTE");
            entity.Property(e => e.IsAltaMasivaNegocios).HasColumnName("IS_ALTA_MASIVA_NEGOCIOS");
            entity.Property(e => e.IsAltaMasivaViaticos).HasColumnName("IS_ALTA_MASIVA_VIATICOS");
            entity.Property(e => e.IsAutorizaVacaciones).HasColumnName("IS_AUTORIZA_VACACIONES");
            entity.Property(e => e.IsCache).HasColumnName("IS_CACHE");
            entity.Property(e => e.IsConsultaUnidad).HasColumnName("IS_CONSULTA_UNIDAD");
            entity.Property(e => e.IsDaniadaUsuario).HasColumnName("IS_DANIADA_USUARIO");
            entity.Property(e => e.IsDeleteDrive).HasColumnName("IS_DELETE_DRIVE");
            entity.Property(e => e.IsDispatchProgramados).HasColumnName("IS_DISPATCH_PROGRAMADOS");
            entity.Property(e => e.IsEditaNegocios).HasColumnName("IS_EDITA_NEGOCIOS");
            entity.Property(e => e.IsEditarAlmacen).HasColumnName("IS_EDITAR_ALMACEN");
            entity.Property(e => e.IsEditarEspecificacionesServicio).HasColumnName("IS_EDITAR_ESPECIFICACIONES_SERVICIO");
            entity.Property(e => e.IsElavon).HasColumnName("IS_ELAVON");
            entity.Property(e => e.IsEligeVacaciones).HasColumnName("IS_ELIGE_VACACIONES");
            entity.Property(e => e.IsEmailServiceCharge).HasColumnName("IS_EMAIL_SERVICE_CHARGE");
            entity.Property(e => e.IsExlsNegocios).HasColumnName("IS_EXLS_NEGOCIOS");
            entity.Property(e => e.IsFecGarantiaChange).HasColumnName("IS_FEC_GARANTIA_CHANGE");
            entity.Property(e => e.IsFollowerDispatch).HasColumnName("IS_FOLLOWER_DISPATCH");
            entity.Property(e => e.IsModCUsuarios).HasColumnName("is_mod_c_usuarios");
            entity.Property(e => e.IsModificaMensajeria).HasColumnName("IS_MODIFICA_MENSAJERIA");
            entity.Property(e => e.IsModifiedAr).HasColumnName("IS_MODIFIED_AR");
            entity.Property(e => e.IsPadronIngenieros).HasColumnName("IS_PADRON_INGENIEROS");
            entity.Property(e => e.IsPda).HasColumnName("IS_PDA");
            entity.Property(e => e.IsReabrirAuditoria).HasColumnName("IS_REABRIR_AUDITORIA");
            entity.Property(e => e.IsRecoverPassword).HasColumnName("IS_RECOVER_PASSWORD");
            entity.Property(e => e.IsRedireccionEnvio).HasColumnName("IS_REDIRECCION_ENVIO");
            entity.Property(e => e.IsReporteDesviacion).HasColumnName("IS_REPORTE_DESVIACION");
            entity.Property(e => e.IsReporteLicenciasDhl).HasColumnName("IS_REPORTE_LICENCIAS_DHL");
            entity.Property(e => e.IsStatusCambioAbiertas).HasColumnName("is_status_cambio_abiertas");
            entity.Property(e => e.IsStolenUnit).HasColumnName("IS_STOLEN_UNIT");
            entity.Property(e => e.IsUpdatePosicionInventario).HasColumnName("IS_UPDATE_POSICION_INVENTARIO");
            entity.Property(e => e.Materno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MATERNO");
            entity.Property(e => e.ModificaMUnidad).HasColumnName("MODIFICA_M_UNIDAD");
            entity.Property(e => e.NoIdNextel)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("NO_ID_NEXTEL");
            entity.Property(e => e.NoTelNextel)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("NO_TEL_NEXTEL");
            entity.Property(e => e.Nombre)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NOMBRE");
            entity.Property(e => e.Password)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("PASSWORD");
            entity.Property(e => e.Paterno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PATERNO");
            entity.Property(e => e.Sexo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SEXO");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.Telefono)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");
            entity.Property(e => e.TelefonoCasa)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TELEFONO_CASA");
            entity.Property(e => e.TelefonoOficina)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TELEFONO_OFICINA");
            entity.Property(e => e.TelefonoOficinaExt)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("TELEFONO_OFICINA_EXT");
            entity.Property(e => e.Username)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("USERNAME");
        });

        modelBuilder.Entity<TempSegmentoBanamex>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("temp_segmento_banamex");

            entity.Property(e => e.IdSegmento).HasColumnName("ID_SEGMENTO");
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
        });

        modelBuilder.Entity<TempSim1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEMP_SIM_1");

            entity.Property(e => e.AfiliacionDeInstalacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AFILIACION_DE_INSTALACION");
            entity.Property(e => e.AfiliacionDeRetiro)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("AFILIACION_DE_RETIRO");
            entity.Property(e => e.Avance)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("AVANCE");
            entity.Property(e => e.CategoriaDeRecepcion)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("CATEGORIA_DE_RECEPCION");
            entity.Property(e => e.FechaDeMovimiento)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_DE_MOVIMIENTO");
            entity.Property(e => e.IdAr)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_AR");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IsExito).HasColumnName("IS_EXITO");
            entity.Property(e => e.Localidad)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("LOCALIDAD");
            entity.Property(e => e.NoAr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AR");
            entity.Property(e => e.NoSerieFalla)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE_FALLA");
            entity.Property(e => e.NoSim)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NO_SIM");
            entity.Property(e => e.SerieOAr)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SERIE_O_AR");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.TipoServicio).HasColumnName("TIPO_SERVICIO");
            entity.Property(e => e.Ubicacion)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("UBICACION");
        });

        modelBuilder.Entity<TempSim2>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEMP_SIM_2");

            entity.Property(e => e.AfiliacionDeInstalacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AFILIACION_DE_INSTALACION");
            entity.Property(e => e.AfiliacionDeRetiro)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("AFILIACION_DE_RETIRO");
            entity.Property(e => e.Avance)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("AVANCE");
            entity.Property(e => e.CategoriaDeRecepcion)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("CATEGORIA_DE_RECEPCION");
            entity.Property(e => e.Compania)
                .IsRequired()
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("COMPANIA");
            entity.Property(e => e.FechaDeMovimiento)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_DE_MOVIMIENTO");
            entity.Property(e => e.IdAr)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_AR");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IsExito).HasColumnName("IS_EXITO");
            entity.Property(e => e.Localidad)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("LOCALIDAD");
            entity.Property(e => e.NoAr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AR");
            entity.Property(e => e.NoSerie)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");
            entity.Property(e => e.NoSerieFalla)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE_FALLA");
            entity.Property(e => e.NoSim)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NO_SIM");
            entity.Property(e => e.SerieOAr)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SERIE_O_AR");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.TipoServicio).HasColumnName("TIPO_SERVICIO");
            entity.Property(e => e.Ubicacion)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("UBICACION");
        });

        modelBuilder.Entity<TempSim3>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEMP_SIM_3");

            entity.Property(e => e.AfiliacionDeInstalacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AFILIACION_DE_INSTALACION");
            entity.Property(e => e.AfiliacionDeRetiro)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AFILIACION_DE_RETIRO");
            entity.Property(e => e.Avance)
                .IsRequired()
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("AVANCE");
            entity.Property(e => e.CategoriaDeRecepcion)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("CATEGORIA_DE_RECEPCION");
            entity.Property(e => e.Compania)
                .IsRequired()
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("COMPANIA");
            entity.Property(e => e.FechaDeMovimiento)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_DE_MOVIMIENTO");
            entity.Property(e => e.FechaMovimiento)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("FECHA_MOVIMIENTO");
            entity.Property(e => e.IsExito).HasColumnName("IS_EXITO");
            entity.Property(e => e.Localidad)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("LOCALIDAD");
            entity.Property(e => e.NCaracteres)
                .IsRequired()
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("N_CARACTERES");
            entity.Property(e => e.NoAr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AR");
            entity.Property(e => e.NoSerie)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");
            entity.Property(e => e.NoSim)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NO_SIM");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.TipoServicio).HasColumnName("TIPO_SERVICIO");
            entity.Property(e => e.Ubicacion)
                .IsRequired()
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("UBICACION");
        });

        modelBuilder.Entity<TempSim4>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEMP_SIM_4");

            entity.Property(e => e.AfiliacionDeInstalacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AFILIACION_DE_INSTALACION");
            entity.Property(e => e.AfiliacionDeRetiro)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AFILIACION_DE_RETIRO");
            entity.Property(e => e.Avance)
                .IsRequired()
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("AVANCE");
            entity.Property(e => e.CategoriaDeRecepcion)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("CATEGORIA_DE_RECEPCION");
            entity.Property(e => e.Compania)
                .IsRequired()
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("COMPANIA");
            entity.Property(e => e.FechaDeMovimiento)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_DE_MOVIMIENTO");
            entity.Property(e => e.FechaMovimiento)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("FECHA_MOVIMIENTO");
            entity.Property(e => e.IsExito).HasColumnName("IS_EXITO");
            entity.Property(e => e.Localidad)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("LOCALIDAD");
            entity.Property(e => e.NCaracteres)
                .IsRequired()
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("N_CARACTERES");
            entity.Property(e => e.NoAr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AR");
            entity.Property(e => e.NoSerie)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");
            entity.Property(e => e.NoSim)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NO_SIM");
            entity.Property(e => e.Registros).HasColumnName("REGISTROS");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.TipoServicio).HasColumnName("TIPO_SERVICIO");
            entity.Property(e => e.Ubicacion)
                .IsRequired()
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("UBICACION");
        });

        modelBuilder.Entity<TempSim5>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEMP_SIM_5");

            entity.Property(e => e.AfiliacionDeInstalacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AFILIACION_DE_INSTALACION");
            entity.Property(e => e.AfiliacionDeRetiro)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AFILIACION_DE_RETIRO");
            entity.Property(e => e.Avance)
                .IsRequired()
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("AVANCE");
            entity.Property(e => e.CategoriaDeRecepcion)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("CATEGORIA_DE_RECEPCION");
            entity.Property(e => e.Compania)
                .IsRequired()
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("COMPANIA");
            entity.Property(e => e.FechaDeMovimiento)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_DE_MOVIMIENTO");
            entity.Property(e => e.FechaMovimiento)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("FECHA_MOVIMIENTO");
            entity.Property(e => e.IsRepetido).HasColumnName("IS_REPETIDO");
            entity.Property(e => e.Localidad)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("LOCALIDAD");
            entity.Property(e => e.NCaracteres)
                .IsRequired()
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("N_CARACTERES");
            entity.Property(e => e.NoAr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AR");
            entity.Property(e => e.NoSerie)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");
            entity.Property(e => e.NoSim)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NO_SIM");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.Ubicacion)
                .IsRequired()
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("UBICACION");
        });

        modelBuilder.Entity<TempTableNg>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEMP_TABLE_NG");

            entity.Property(e => e.Aproximado).HasColumnName("APROXIMADO");
            entity.Property(e => e.Colonia)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("COLONIA");
            entity.Property(e => e.Cp)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("CP");
            entity.Property(e => e.DescCliente)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_CLIENTE");
            entity.Property(e => e.DescNegocio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_NEGOCIO");
            entity.Property(e => e.DescRegion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_REGION");
            entity.Property(e => e.DescZona)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_ZONA");
            entity.Property(e => e.Direccion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");
            entity.Property(e => e.Estado)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ESTADO");
            entity.Property(e => e.FecMigracion)
                .HasColumnType("datetime")
                .HasColumnName("FEC_MIGRACION");
            entity.Property(e => e.IdNegocio).HasColumnName("ID_NEGOCIO");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.Image)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMAGE");
            entity.Property(e => e.Latitud)
                .HasColumnType("numeric(20, 15)")
                .HasColumnName("LATITUD");
            entity.Property(e => e.Longitud)
                .HasColumnType("numeric(20, 15)")
                .HasColumnName("LONGITUD");
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.Poblacion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("POBLACION");
            entity.Property(e => e.Segmento)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SEGMENTO");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.Telefono)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");
        });

        modelBuilder.Entity<TempTelefono>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEMP_TELEFONOS");

            entity.Property(e => e.DescNegocio)
                .IsUnicode(false)
                .HasColumnName("DESC_NEGOCIO");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.NoAfiliacion)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.Telefono)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");
        });

        modelBuilder.Entity<TempTipoPlazaCliente>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEMP_TIPO_PLAZA_CLIENTE");

            entity.Property(e => e.Cp)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("CP");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdTipoPlazaCliente).HasColumnName("ID_TIPO_PLAZA_CLIENTE");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
        });

        modelBuilder.Entity<TempUpdateDireccione>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEMP_UPDATE_DIRECCIONES");

            entity.Property(e => e.Colonia)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("COLONIA");
            entity.Property(e => e.Cp)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("CP");
            entity.Property(e => e.DirPasada)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("DIR_PASADA");
            entity.Property(e => e.Direccion)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");
            entity.Property(e => e.Estado)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("ESTADO");
            entity.Property(e => e.IdDireccion).HasColumnName("ID_DIRECCION");
            entity.Property(e => e.Poblacion)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("POBLACION");
        });

        modelBuilder.Entity<TempUpdateFecCierre>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEMP_UPDATE_FEC_CIERRE");

            entity.Property(e => e.FecCierre)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_CIERRE");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
        });

        modelBuilder.Entity<TempUpdateNoInventario>(entity =>
        {
            entity.HasKey(e => e.IdTempUpdateNoInventario);

            entity.ToTable("TEMP_UPDATE_NO_INVENTARIO");

            entity.Property(e => e.IdTempUpdateNoInventario).HasColumnName("ID_TEMP_UPDATE_NO_INVENTARIO");
            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");
            entity.Property(e => e.NoInventario)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_INVENTARIO");
        });

        modelBuilder.Entity<TempUsuario>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("temp_usuarios");

            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
        });

        modelBuilder.Entity<TempUsuariosActivosGetnet>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEMP_USUARIOS_ACTIVOS_GETNET");

            entity.Property(e => e.DescTipoUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_TIPO_USUARIO");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("EMAIL");
            entity.Property(e => e.FecStatusAccesso)
                .IsUnicode(false)
                .HasColumnName("FEC_STATUS_ACCESSO");
            entity.Property(e => e.IdUsuario)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_USUARIO");
            entity.Property(e => e.Materno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MATERNO");
            entity.Property(e => e.Nombre)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NOMBRE");
            entity.Property(e => e.Paterno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PATERNO");
            entity.Property(e => e.Proveedor)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("PROVEEDOR");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.Username)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("USERNAME");
        });

        modelBuilder.Entity<TempoMarcaModeloBanamex>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEMPO_MARCA_MODELO_BANAMEX");

            entity.Property(e => e.IdMarca).HasColumnName("ID_MARCA");
            entity.Property(e => e.IdModelo).HasColumnName("ID_MODELO");
            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");
        });

        modelBuilder.Entity<TempoUnidadesSim>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEMPO_UNIDADES_SIM");

            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");
            entity.Property(e => e.NoSim)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SIM");
        });

        modelBuilder.Entity<Temporal2>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEMPORAL_2");

            entity.Property(e => e.DescRegion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_REGION");
            entity.Property(e => e.EnTiempo).HasColumnName("EN_TIEMPO");
            entity.Property(e => e.FueraDeTiempo).HasColumnName("FUERA_DE_TIEMPO");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
        });

        modelBuilder.Entity<TemporalModemSoftel>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEMPORAL_MODEM_SOFTEL");

            entity.Property(e => e.EfectividadAsignacion)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("EFECTIVIDAD_ASIGNACION");
            entity.Property(e => e.EfectividadAsignacionDif).HasColumnName("EFECTIVIDAD_ASIGNACION_DIF");
            entity.Property(e => e.EfectividadCarga)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("EFECTIVIDAD_CARGA");
            entity.Property(e => e.EfectividadCita)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("EFECTIVIDAD_CITA");
            entity.Property(e => e.EfectividadLlegada)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("EFECTIVIDAD_LLEGADA");
            entity.Property(e => e.EfectividadTiempoCierre)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("EFECTIVIDAD_TIEMPO_CIERRE");
            entity.Property(e => e.EfectividadTiempoCierreDif).HasColumnName("EFECTIVIDAD_TIEMPO_CIERRE_DIF");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.FecAltaWincor)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA_WINCOR");
            entity.Property(e => e.FecAtencion)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ATENCION");
            entity.Property(e => e.FecBitacora)
                .HasColumnType("datetime")
                .HasColumnName("FEC_BITACORA");
            entity.Property(e => e.FecCierre)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_CIERRE");
            entity.Property(e => e.FecFinIngeniero)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_FIN_INGENIERO");
            entity.Property(e => e.FecGarantia)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_GARANTIA");
            entity.Property(e => e.FecIniIngeniero)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_INI_INGENIERO");
            entity.Property(e => e.FecInicio)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_INICIO");
            entity.Property(e => e.FecLlegada)
                .HasColumnType("datetime")
                .HasColumnName("FEC_LLEGADA");
            entity.Property(e => e.FechaPrimerStatusAsignacionPorConfirmar)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_PRIMER_STATUS_ASIGNACION_POR_CONFIRMAR");
            entity.Property(e => e.FechaPrimerStatusAtendidoORechazado)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_PRIMER_STATUS_ATENDIDO_O_RECHAZADO");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdRegion).HasColumnName("ID_REGION");
            entity.Property(e => e.IdZona).HasColumnName("ID_ZONA");
            entity.Property(e => e.StatusFinAr).HasColumnName("STATUS_FIN_AR");
            entity.Property(e => e.TiempoDeCarga).HasColumnName("TIEMPO_DE_CARGA");
            entity.Property(e => e.TiempoDeLlegada).HasColumnName("TIEMPO_DE_LLEGADA");
            entity.Property(e => e.TiempoSolucionMin).HasColumnName("TIEMPO_SOLUCION_MIN");
        });

        modelBuilder.Entity<TemporalOki>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEMPORAL_OKI");

            entity.Property(e => e.EfectividadAsignacion)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("EFECTIVIDAD_ASIGNACION");
            entity.Property(e => e.EfectividadAsignacionDif).HasColumnName("EFECTIVIDAD_ASIGNACION_DIF");
            entity.Property(e => e.EfectividadCarga)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("EFECTIVIDAD_CARGA");
            entity.Property(e => e.EfectividadCita)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("EFECTIVIDAD_CITA");
            entity.Property(e => e.EfectividadLlegada)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("EFECTIVIDAD_LLEGADA");
            entity.Property(e => e.EfectividadTiempoCierre)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("EFECTIVIDAD_TIEMPO_CIERRE");
            entity.Property(e => e.EfectividadTiempoCierreDif).HasColumnName("EFECTIVIDAD_TIEMPO_CIERRE_DIF");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.FecAltaWincor)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA_WINCOR");
            entity.Property(e => e.FecAtencion)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ATENCION");
            entity.Property(e => e.FecBitacora)
                .HasColumnType("datetime")
                .HasColumnName("FEC_BITACORA");
            entity.Property(e => e.FecCierre)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_CIERRE");
            entity.Property(e => e.FecFinIngeniero)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_FIN_INGENIERO");
            entity.Property(e => e.FecGarantia)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_GARANTIA");
            entity.Property(e => e.FecIniIngeniero)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_INI_INGENIERO");
            entity.Property(e => e.FecInicio)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_INICIO");
            entity.Property(e => e.FecLlegada)
                .HasColumnType("datetime")
                .HasColumnName("FEC_LLEGADA");
            entity.Property(e => e.FechaPrimerStatusAsignacionPorConfirmar)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_PRIMER_STATUS_ASIGNACION_POR_CONFIRMAR");
            entity.Property(e => e.FechaPrimerStatusAtendidoORechazado)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_PRIMER_STATUS_ATENDIDO_O_RECHAZADO");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdRegion).HasColumnName("ID_REGION");
            entity.Property(e => e.IdZona).HasColumnName("ID_ZONA");
            entity.Property(e => e.StatusFinAr).HasColumnName("STATUS_FIN_AR");
            entity.Property(e => e.TiempoDeCarga).HasColumnName("TIEMPO_DE_CARGA");
            entity.Property(e => e.TiempoDeLlegada).HasColumnName("TIEMPO_DE_LLEGADA");
            entity.Property(e => e.TiempoSolucionMin).HasColumnName("TIEMPO_SOLUCION_MIN");
        });

        modelBuilder.Entity<TemporalReporte>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEMPORAL_REPORTE");

            entity.Property(e => e.ActReferencias)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ACT_REFERENCIAS");
            entity.Property(e => e.Afiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AFILIACION");
            entity.Property(e => e.AfiliacionAmex)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AFILIACION_AMEX");
            entity.Property(e => e.AfiliacionAmexCierre)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AFILIACION_AMEX_CIERRE");
            entity.Property(e => e.AltaPor)
                .HasMaxLength(152)
                .IsUnicode(false)
                .HasColumnName("ALTA_POR");
            entity.Property(e => e.AmexPlan)
                .IsUnicode(false)
                .HasColumnName("AMEX_PLAN");
            entity.Property(e => e.Aplicativo)
                .IsUnicode(false)
                .HasColumnName("APLICATIVO");
            entity.Property(e => e.AreaCarga)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AREA_CARGA");
            entity.Property(e => e.AreaCierra)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AREA_CIERRA");
            entity.Property(e => e.AtiendeEnComercio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ATIENDE_EN_COMERCIO");
            entity.Property(e => e.Base)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BASE");
            entity.Property(e => e.CableCorriente)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CABLE_CORRIENTE");
            entity.Property(e => e.Caja)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CAJA");
            entity.Property(e => e.Canal)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CANAL");
            entity.Property(e => e.CantidadArchivos).HasColumnName("CANTIDAD_ARCHIVOS");
            entity.Property(e => e.Cargador)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CARGADOR");
            entity.Property(e => e.Carnet)
                .IsUnicode(false)
                .HasColumnName("CARNET");
            entity.Property(e => e.CasoSf)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CASO_SF");
            entity.Property(e => e.CerradoPor)
                .HasMaxLength(152)
                .IsUnicode(false)
                .HasColumnName("CERRADO_POR");
            entity.Property(e => e.Codigo)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CODIGO");
            entity.Property(e => e.CodigoAfiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CODIGO_AFILIACION");
            entity.Property(e => e.CodigoPostal)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("CODIGO_POSTAL");
            entity.Property(e => e.Colonia)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("COLONIA");
            entity.Property(e => e.Comentarios).HasColumnName("COMENTARIOS");
            entity.Property(e => e.Comercio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("COMERCIO");
            entity.Property(e => e.Conclusiones)
                .HasMaxLength(3000)
                .IsUnicode(false)
                .HasColumnName("CONCLUSIONES");
            entity.Property(e => e.Conectividad)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CONECTIVIDAD");
            entity.Property(e => e.Contacto1)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CONTACTO1");
            entity.Property(e => e.CorreoEjecutivo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CORREO_EJECUTIVO");
            entity.Property(e => e.CriterioCambio)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CRITERIO_CAMBIO");
            entity.Property(e => e.DescGiro)
                .IsUnicode(false)
                .HasColumnName("DESC_GIRO");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");
            entity.Property(e => e.DiasSlaAdmin)
                .HasColumnType("numeric(1, 1)")
                .HasColumnName("DIAS_SLA_ADMIN");
            entity.Property(e => e.DiasSlaGlobal)
                .HasColumnType("numeric(1, 1)")
                .HasColumnName("DIAS_SLA_GLOBAL");
            entity.Property(e => e.Direccion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");
            entity.Property(e => e.DireccionAlternaComercio)
                .IsUnicode(false)
                .HasColumnName("DIRECCION_ALTERNA_COMERCIO");
            entity.Property(e => e.Divisa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DIVISA");
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EMAIL");
            entity.Property(e => e.Equipo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("EQUIPO");
            entity.Property(e => e.Estado)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ESTADO");
            entity.Property(e => e.EstatusServicio)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ESTATUS_SERVICIO");
            entity.Property(e => e.EstatusServicio1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ESTATUS SERVICIO");
            entity.Property(e => e.FechaAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_ALTA");
            entity.Property(e => e.FechaAltaSistema)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_ALTA_SISTEMA");
            entity.Property(e => e.FechaAtencionProveedor)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_ATENCION_PROVEEDOR");
            entity.Property(e => e.FechaCierreSistema)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_CIERRE_SISTEMA");
            entity.Property(e => e.FechaInicioSlaInv).HasColumnName("FECHA_INICIO_SLA_INV");
            entity.Property(e => e.FechaMovInventario).HasColumnName("FECHA_MOV_INVENTARIO");
            entity.Property(e => e.FechaVencimiento)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_VENCIMIENTO");
            entity.Property(e => e.HorasVencidas)
                .IsRequired()
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("HORAS_VENCIDAS");
            entity.Property(e => e.IdAr)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_AR");
            entity.Property(e => e.IdFalla).HasColumnName("ID_FALLA");
            entity.Property(e => e.IdServicio).HasColumnName("ID_SERVICIO");
            entity.Property(e => e.IdTecnico)
                .HasMaxLength(152)
                .IsUnicode(false)
                .HasColumnName("ID_TECNICO");
            entity.Property(e => e.IdUsuarioAltaSf).HasColumnName("ID_USUARIO_ALTA_SF");
            entity.Property(e => e.Idamex)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IDAMEX");
            entity.Property(e => e.Industria)
                .IsUnicode(false)
                .HasColumnName("INDUSTRIA");
            entity.Property(e => e.MiComercio).HasColumnName("MI_COMERCIO");
            entity.Property(e => e.Modelo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("MODELO");
            entity.Property(e => e.ModeloInstalado)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("MODELO_INSTALADO");
            entity.Property(e => e.ModeloTerminalSale)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("MODELO_TERMINAL_SALE");
            entity.Property(e => e.MotivoCancelacion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("MOTIVO_CANCELACION");
            entity.Property(e => e.MotivoRechazo)
                .IsUnicode(false)
                .HasColumnName("MOTIVO_RECHAZO");
            entity.Property(e => e.MsiProsa)
                .IsUnicode(false)
                .HasColumnName("MSI_PROSA");
            entity.Property(e => e.MsiSantander)
                .IsUnicode(false)
                .HasColumnName("MSI_SANTANDER");
            entity.Property(e => e.NegotiationType)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Nivel)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("NIVEL");
            entity.Property(e => e.NivelSla)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("NIVEL_SLA");
            entity.Property(e => e.NivelSlaInventario)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("NIVEL_SLA_INVENTARIO");
            entity.Property(e => e.NumSerieSimEntra)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NUM_SERIE_SIM_ENTRA");
            entity.Property(e => e.NumSerieSimSale)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NUM_SERIE_SIM_SALE");
            entity.Property(e => e.NumSerieTerminalEntra)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NUM_SERIE_TERMINAL_ENTRA");
            entity.Property(e => e.NumSerieTerminalMto)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("NUM_SERIE_TERMINAL_MTO");
            entity.Property(e => e.NumSerieTerminalSale)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NUM_SERIE_TERMINAL_SALE");
            entity.Property(e => e.Observaciones)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("OBSERVACIONES");
            entity.Property(e => e.Odt)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ODT");
            entity.Property(e => e.OdtSalesforce)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ODT_SALESFORCE");
            entity.Property(e => e.Poblacion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("POBLACION");
            entity.Property(e => e.Producto)
                .IsUnicode(false)
                .HasColumnName("PRODUCTO");
            entity.Property(e => e.Proveedor)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("PROVEEDOR");
            entity.Property(e => e.Qps)
                .IsUnicode(false)
                .HasColumnName("QPS");
            entity.Property(e => e.RazonSocial)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RAZON_SOCIAL");
            entity.Property(e => e.Rechazo)
                .IsUnicode(false)
                .HasColumnName("RECHAZO");
            entity.Property(e => e.Rfc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RFC");
            entity.Property(e => e.RolloEntregados)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ROLLO_ENTREGADOS");
            entity.Property(e => e.RollosAInstalar).HasColumnName("ROLLOS_A_INSTALAR");
            entity.Property(e => e.SlaFijo).HasColumnName("SLA_FIJO");
            entity.Property(e => e.SubTipoServicio)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("SUB_TIPO_SERVICIO");
            entity.Property(e => e.Telefono)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");
            entity.Property(e => e.TelefonosEnCampo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TELEFONOS_EN_CAMPO");
            entity.Property(e => e.TidAmexCierre)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TID_AMEX_CIERRE");
            entity.Property(e => e.TieneAmex)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("TIENE_AMEX");
            entity.Property(e => e.TipoAB)
                .IsUnicode(false)
                .HasColumnName("TIPO_A_B");
            entity.Property(e => e.TipoCarga)
                .IsRequired()
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("TIPO_CARGA");
            entity.Property(e => e.TipoComercio2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TIPO_COMERCIO_2");
            entity.Property(e => e.TipoDeConfiguracionMit)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TIPO_DE_CONFIGURACION_MIT");
            entity.Property(e => e.TipoServicio)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("TIPO_SERVICIO");
            entity.Property(e => e.VestidurasGetnet)
                .IsRequired()
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("VESTIDURAS_GETNET");
            entity.Property(e => e.VoltajeNeutro)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("VOLTAJE_NEUTRO");
            entity.Property(e => e.Zona)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZONA");
        });

        modelBuilder.Entity<TemporalReporteRetiro>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEMPORAL_REPORTE_RETIROS");

            entity.Property(e => e.Consulta)
                .HasColumnType("smalldatetime")
                .HasColumnName("CONSULTA");
            entity.Property(e => e.DescMarca)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_MARCA");
            entity.Property(e => e.DescModelo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_MODELO");
            entity.Property(e => e.DescServicio)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("DESC_SERVICIO");
            entity.Property(e => e.DescZona)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_ZONA");
            entity.Property(e => e.FecCierre)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("FEC_CIERRE");
            entity.Property(e => e.FecCierrePrimerMes)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("FEC_CIERRE_PRIMER_MES");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IsDanada)
                .IsRequired()
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("IS_DANADA");
            entity.Property(e => e.IsNueva)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("IS_NUEVA");
            entity.Property(e => e.NoAr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AR");
            entity.Property(e => e.NoSerie)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");
            entity.Property(e => e.Nro).HasColumnName("NRO");
            entity.Property(e => e.OdtMin)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ODT_MIN");
        });

        modelBuilder.Entity<TemporalRespaldo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("temporal_respaldo");

            entity.Property(e => e.Aplicativo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APLICATIVO");
            entity.Property(e => e.Cliente)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("CLIENTE");
            entity.Property(e => e.Comentario)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("COMENTARIO");
            entity.Property(e => e.Conectividad)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CONECTIVIDAD");
            entity.Property(e => e.Daniada).HasColumnName("DANIADA");
            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");
            entity.Property(e => e.IdAuditoria).HasColumnName("ID_AUDITORIA");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdFisico).HasColumnName("ID_FISICO");
            entity.Property(e => e.IdModelo).HasColumnName("ID_MODELO");
            entity.Property(e => e.IdRazon).HasColumnName("ID_RAZON");
            entity.Property(e => e.IdStatusUnidad).HasColumnName("ID_STATUS_UNIDAD");
            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");
            entity.Property(e => e.IdUnidadPaso)
                .ValueGeneratedOnAdd()
                .HasColumnName("id_unidad_paso");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.IsConfirmacion).HasColumnName("IS_CONFIRMACION");
            entity.Property(e => e.IsNoConfirmacion).HasColumnName("IS_NO_CONFIRMACION");
            entity.Property(e => e.Marca)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MARCA");
            entity.Property(e => e.Modelo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MODELO");
            entity.Property(e => e.NoSerie)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");
            entity.Property(e => e.Producto)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PRODUCTO");
        });

        modelBuilder.Entity<TemporalWincor>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEMPORAL_WINCOR");

            entity.Property(e => e.EfectividadAsignacion)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("EFECTIVIDAD_ASIGNACION");
            entity.Property(e => e.EfectividadAsignacionDif).HasColumnName("EFECTIVIDAD_ASIGNACION_DIF");
            entity.Property(e => e.EfectividadCarga)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("EFECTIVIDAD_CARGA");
            entity.Property(e => e.EfectividadCita)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("EFECTIVIDAD_CITA");
            entity.Property(e => e.EfectividadLlegada)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("EFECTIVIDAD_LLEGADA");
            entity.Property(e => e.EfectividadTiempoCierre)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("EFECTIVIDAD_TIEMPO_CIERRE");
            entity.Property(e => e.EfectividadTiempoCierreDif).HasColumnName("EFECTIVIDAD_TIEMPO_CIERRE_DIF");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.FecAltaWincor)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA_WINCOR");
            entity.Property(e => e.FecAtencion)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ATENCION");
            entity.Property(e => e.FecCierre)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_CIERRE");
            entity.Property(e => e.FecFinIngeniero)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_FIN_INGENIERO");
            entity.Property(e => e.FecGarantia)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_GARANTIA");
            entity.Property(e => e.FecIniIngeniero)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_INI_INGENIERO");
            entity.Property(e => e.FecLlegada)
                .HasColumnType("datetime")
                .HasColumnName("FEC_LLEGADA");
            entity.Property(e => e.FechaPrimerStatusAsignacionPorConfirmar)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_PRIMER_STATUS_ASIGNACION_POR_CONFIRMAR");
            entity.Property(e => e.FechaPrimerStatusAtendidoORechazado)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_PRIMER_STATUS_ATENDIDO_O_RECHAZADO");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdRegion).HasColumnName("ID_REGION");
            entity.Property(e => e.IdZona).HasColumnName("ID_ZONA");
            entity.Property(e => e.TiempoDeCarga).HasColumnName("TIEMPO_DE_CARGA");
            entity.Property(e => e.TiempoDeLlegada).HasColumnName("TIEMPO_DE_LLEGADA");
            entity.Property(e => e.TiempoSolucionMin).HasColumnName("TIEMPO_SOLUCION_MIN");
        });

        modelBuilder.Entity<TemporalWincor2>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEMPORAL_WINCOR_2");

            entity.Property(e => e.EfectividadAsignacion)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("EFECTIVIDAD_ASIGNACION");
            entity.Property(e => e.EfectividadAsignacionDif).HasColumnName("EFECTIVIDAD_ASIGNACION_DIF");
            entity.Property(e => e.EfectividadCarga)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("EFECTIVIDAD_CARGA");
            entity.Property(e => e.EfectividadCita)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("EFECTIVIDAD_CITA");
            entity.Property(e => e.EfectividadLlegada)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("EFECTIVIDAD_LLEGADA");
            entity.Property(e => e.EfectividadTiempoCierre)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("EFECTIVIDAD_TIEMPO_CIERRE");
            entity.Property(e => e.EfectividadTiempoCierreDif).HasColumnName("EFECTIVIDAD_TIEMPO_CIERRE_DIF");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.FecAltaWincor)
                .HasColumnType("datetime")
                .HasColumnName("FEC_ALTA_WINCOR");
            entity.Property(e => e.FecAtencion)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ATENCION");
            entity.Property(e => e.FecCierre)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_CIERRE");
            entity.Property(e => e.FecFinIngeniero)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_FIN_INGENIERO");
            entity.Property(e => e.FecGarantia)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_GARANTIA");
            entity.Property(e => e.FecIniIngeniero)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_INI_INGENIERO");
            entity.Property(e => e.FecLlegada)
                .HasColumnType("datetime")
                .HasColumnName("FEC_LLEGADA");
            entity.Property(e => e.FechaPrimerStatusAsignacionPorConfirmar)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_PRIMER_STATUS_ASIGNACION_POR_CONFIRMAR");
            entity.Property(e => e.FechaPrimerStatusAtendidoORechazado)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_PRIMER_STATUS_ATENDIDO_O_RECHAZADO");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdRegion).HasColumnName("ID_REGION");
            entity.Property(e => e.IdZona).HasColumnName("ID_ZONA");
            entity.Property(e => e.StatusFinAr).HasColumnName("STATUS_FIN_AR");
            entity.Property(e => e.TiempoDeCarga).HasColumnName("TIEMPO_DE_CARGA");
            entity.Property(e => e.TiempoDeLlegada).HasColumnName("TIEMPO_DE_LLEGADA");
            entity.Property(e => e.TiempoSolucionMin).HasColumnName("TIEMPO_SOLUCION_MIN");
        });

        modelBuilder.Entity<TestDepuraInsumo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEST_DEPURA_INSUMO");

            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IdArInsumo).HasColumnName("ID_AR_INSUMO");
            entity.Property(e => e.IdCantidad).HasColumnName("ID_CANTIDAD");
            entity.Property(e => e.IdInsumo).HasColumnName("ID_INSUMO");
            entity.Property(e => e.Numero).HasColumnName("NUMERO");
        });

        modelBuilder.Entity<TiempoAltaCau>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("TIEMPO_ALTA_CAU");

            entity.Property(e => e.Año).HasColumnName("AÑO");
            entity.Property(e => e.DescCliente)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_CLIENTE");
            entity.Property(e => e.DescProducto)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_PRODUCTO");
            entity.Property(e => e.DescRegion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_REGION");
            entity.Property(e => e.DescTipoServicio)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_TIPO_SERVICIO");
            entity.Property(e => e.DescZona)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_ZONA");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.FecInicio)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_INICIO");
            entity.Property(e => e.FechaCargaTicket)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_CARGA_TICKET");
            entity.Property(e => e.Mes).HasColumnName("MES");
            entity.Property(e => e.Minutos).HasColumnName("MINUTOS");
            entity.Property(e => e.NoAr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AR");
            entity.Property(e => e.Semana).HasColumnName("SEMANA");
        });

        modelBuilder.Entity<TiempoPrimerAsCdo>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("TIEMPO_PRIMER_AS_CDO");

            entity.Property(e => e.ApellidoMaterno)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("APELLIDO_MATERNO");
            entity.Property(e => e.ApellidoPaterno)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("APELLIDO_PATERNO");
            entity.Property(e => e.Año).HasColumnName("AÑO");
            entity.Property(e => e.DescCliente)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_CLIENTE");
            entity.Property(e => e.DescProducto)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_PRODUCTO");
            entity.Property(e => e.FechaAcdo)
                .HasColumnType("datetime")
                .HasColumnName("Fecha_ACDO");
            entity.Property(e => e.FechaAxc)
                .HasColumnType("datetime")
                .HasColumnName("Fecha_AXC");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IdIngeniero)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("ID_INGENIERO");
            entity.Property(e => e.Mes).HasColumnName("MES");
            entity.Property(e => e.NoAr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AR");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("NOMBRE");
            entity.Property(e => e.Semana).HasColumnName("SEMANA");
            entity.Property(e => e.Tiempo)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("TIEMPO");
        });

        modelBuilder.Entity<TiempoPrimerAsignacion>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("TIEMPO_PRIMER_ASIGNACION");

            entity.Property(e => e.Año).HasColumnName("AÑO");
            entity.Property(e => e.DescCliente)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_CLIENTE");
            entity.Property(e => e.DescProducto)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_PRODUCTO");
            entity.Property(e => e.DescRegion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_REGION");
            entity.Property(e => e.DescTipoServicio)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_TIPO_SERVICIO");
            entity.Property(e => e.DescZona)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_ZONA");
            entity.Property(e => e.FechaAsignadoPorConfirmar)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ASIGNADO_POR_CONFIRMAR");
            entity.Property(e => e.FechaPorAsignar)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_POR_ASIGNAR");
            entity.Property(e => e.Mes).HasColumnName("MES");
            entity.Property(e => e.NoAr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AR");
            entity.Property(e => e.Semana).HasColumnName("SEMANA");
            entity.Property(e => e.TiempoPrimeraAsignación).HasColumnName("TIEMPO_PRIMERA_ASIGNACIÓN");
        });

        modelBuilder.Entity<Tmp01>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TMP_01");

            entity.Property(e => e.DescStatusUnidad)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_STATUS_UNIDAD");
            entity.Property(e => e.DescTipoResponsable)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_TIPO_RESPONSABLE");
            entity.Property(e => e.FechaUltimoMovimientoBitacora)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_ULTIMO_MOVIMIENTO_BITACORA");
            entity.Property(e => e.Guia)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("GUIA");
            entity.Property(e => e.IdModelo).HasColumnName("ID_MODELO");
            entity.Property(e => e.IdResponsable).HasColumnName("ID_RESPONSABLE");
            entity.Property(e => e.IdStatusUnidad).HasColumnName("ID_STATUS_UNIDAD");
            entity.Property(e => e.IdTipoResponsable).HasColumnName("ID_TIPO_RESPONSABLE");
            entity.Property(e => e.IsDaniada)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("IS_DANIADA");
            entity.Property(e => e.NoSerie)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");
            entity.Property(e => e.Responsable)
                .HasMaxLength(152)
                .IsUnicode(false)
                .HasColumnName("RESPONSABLE");
            entity.Property(e => e.ResponsableDestino)
                .HasMaxLength(152)
                .IsUnicode(false)
                .HasColumnName("RESPONSABLE_DESTINO");
            entity.Property(e => e.ResponsableOrigen)
                .HasMaxLength(152)
                .IsUnicode(false)
                .HasColumnName("RESPONSABLE_ORIGEN");
            entity.Property(e => e.ZonaDestino)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZONA_DESTINO");
            entity.Property(e => e.ZonaResponsable)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZONA_RESPONSABLE");
        });

        modelBuilder.Entity<Tmp3m>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TMP_3M");

            entity.Property(e => e.Iva)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("IVA");
            entity.Property(e => e.Subtotal)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TmpBdPresupuestoEjercidoMensual>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TMP_BD_PRESUPUESTO_EJERCIDO_MENSUAL");

            entity.Property(e => e.Abril)
                .HasColumnType("decimal(24, 2)")
                .HasColumnName("ABRIL");
            entity.Property(e => e.Agosto)
                .HasColumnType("decimal(24, 2)")
                .HasColumnName("AGOSTO");
            entity.Property(e => e.Diciembre)
                .HasColumnType("decimal(24, 2)")
                .HasColumnName("DICIEMBRE");
            entity.Property(e => e.Enero)
                .HasColumnType("decimal(24, 2)")
                .HasColumnName("ENERO");
            entity.Property(e => e.Febrero)
                .HasColumnType("decimal(24, 2)")
                .HasColumnName("FEBRERO");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.Julio)
                .HasColumnType("decimal(24, 2)")
                .HasColumnName("JULIO");
            entity.Property(e => e.Junio)
                .HasColumnType("decimal(24, 2)")
                .HasColumnName("JUNIO");
            entity.Property(e => e.Marzo)
                .HasColumnType("decimal(24, 2)")
                .HasColumnName("MARZO");
            entity.Property(e => e.Mayo)
                .HasColumnType("decimal(24, 2)")
                .HasColumnName("MAYO");
            entity.Property(e => e.Noviembre)
                .HasColumnType("decimal(24, 2)")
                .HasColumnName("NOVIEMBRE");
            entity.Property(e => e.Octubre)
                .HasColumnType("decimal(24, 2)")
                .HasColumnName("OCTUBRE");
            entity.Property(e => e.Septiembre)
                .HasColumnType("decimal(24, 2)")
                .HasColumnName("SEPTIEMBRE");
            entity.Property(e => e.Tipo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TIPO");
            entity.Property(e => e.Year).HasColumnName("YEAR");
        });

        modelBuilder.Entity<TmpBody>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TMP_BODY");

            entity.Property(e => e.Cadena)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CADENA");
        });

        modelBuilder.Entity<TmpCalificaPdf>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TMP_CALIFICA_PDF");

            entity.Property(e => e.Calificacion)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CALIFICACION");
            entity.Property(e => e.DescCliente)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("desc_cliente");
            entity.Property(e => e.DescRegion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("desc_region");
            entity.Property(e => e.FecAtencion)
                .HasColumnType("smalldatetime")
                .HasColumnName("fec_atencion");
            entity.Property(e => e.FecCargaPdf)
                .HasColumnType("datetime")
                .HasColumnName("fec_carga_pdf");
            entity.Property(e => e.Hoy)
                .HasColumnType("smalldatetime")
                .HasColumnName("hoy");
            entity.Property(e => e.IsPdf).HasColumnName("is_pdf");
            entity.Property(e => e.Tecnico)
                .HasMaxLength(152)
                .IsUnicode(false)
                .HasColumnName("tecnico");
        });

        modelBuilder.Entity<UnidadesAActualizar>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("UNIDADES_A_ACTUALIZAR");

            entity.Property(e => e.Caja)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("CAJA");
            entity.Property(e => e.Comentarios)
                .IsUnicode(false)
                .HasColumnName("COMENTARIOS");
            entity.Property(e => e.Costo)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("COSTO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.FecInicio)
                .HasColumnType("datetime")
                .HasColumnName("FEC_INICIO");
            entity.Property(e => e.FechaVencimientoKernel)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA_VENCIMIENTO_KERNEL");
            entity.Property(e => e.FolioTelmex)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("FOLIO_TELMEX");
            entity.Property(e => e.IdAplicativo).HasColumnName("ID_APLICATIVO");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdConectividad).HasColumnName("ID_CONECTIVIDAD");
            entity.Property(e => e.IdFabricante).HasColumnName("ID_FABRICANTE");
            entity.Property(e => e.IdItemsSolicitudAlmacen).HasColumnName("ID_ITEMS_SOLICITUD_ALMACEN");
            entity.Property(e => e.IdLlave).HasColumnName("ID_LLAVE");
            entity.Property(e => e.IdMarca).HasColumnName("ID_MARCA");
            entity.Property(e => e.IdModelo).HasColumnName("ID_MODELO");
            entity.Property(e => e.IdMoneda).HasColumnName("ID_MONEDA");
            entity.Property(e => e.IdNivelDiagnostico).HasColumnName("ID_NIVEL_DIAGNOSTICO");
            entity.Property(e => e.IdOrdenCompra).HasColumnName("ID_ORDEN_COMPRA");
            entity.Property(e => e.IdParent).HasColumnName("ID_PARENT");
            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");
            entity.Property(e => e.IdResponsable).HasColumnName("ID_RESPONSABLE");
            entity.Property(e => e.IdSim).HasColumnName("ID_SIM");
            entity.Property(e => e.IdSoftware).HasColumnName("ID_SOFTWARE");
            entity.Property(e => e.IdSolicitudRecoleccion).HasColumnName("ID_SOLICITUD_RECOLECCION");
            entity.Property(e => e.IdStatusUnidad).HasColumnName("ID_STATUS_UNIDAD");
            entity.Property(e => e.IdTecnicoEnviadaScrap).HasColumnName("ID_TECNICO_ENVIADA_SCRAP");
            entity.Property(e => e.IdTipoConexion).HasColumnName("ID_TIPO_CONEXION");
            entity.Property(e => e.IdTipoResponsable).HasColumnName("ID_TIPO_RESPONSABLE");
            entity.Property(e => e.IdTipoTerminal).HasColumnName("ID_TIPO_TERMINAL");
            entity.Property(e => e.IdUnidad)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_UNIDAD");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.IsDaniada).HasColumnName("IS_DANIADA");
            entity.Property(e => e.IsDato).HasColumnName("IS_DATO");
            entity.Property(e => e.IsDiagnosticada).HasColumnName("IS_DIAGNOSTICADA");
            entity.Property(e => e.IsFacturable).HasColumnName("IS_FACTURABLE");
            entity.Property(e => e.IsGarantia).HasColumnName("IS_GARANTIA");
            entity.Property(e => e.IsInternacional).HasColumnName("IS_INTERNACIONAL");
            entity.Property(e => e.IsNueva).HasColumnName("IS_NUEVA");
            entity.Property(e => e.IsPropiedadCliente).HasColumnName("IS_PROPIEDAD_CLIENTE");
            entity.Property(e => e.IsRetiro).HasColumnName("IS_RETIRO");
            entity.Property(e => e.IsVenta).HasColumnName("IS_VENTA");
            entity.Property(e => e.MotivoEnviadaScrap)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("MOTIVO_ENVIADA_SCRAP");
            entity.Property(e => e.NoEquipo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_EQUIPO");
            entity.Property(e => e.NoImei)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_IMEI");
            entity.Property(e => e.NoInventario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_INVENTARIO");
            entity.Property(e => e.NoSerie)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");
            entity.Property(e => e.NoSim)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SIM");
            entity.Property(e => e.NoTarima)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_TARIMA");
            entity.Property(e => e.OrdenCompra)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ORDEN_COMPRA");
            entity.Property(e => e.PosicionInventario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("POSICION_INVENTARIO");
            entity.Property(e => e.PurchaseOrderNo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("purchase_order_no");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.Version)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("VERSION");
            entity.Property(e => e.VersionKernel)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("VERSION_KERNEL");
            entity.Property(e => e.Vigencia)
                .HasColumnType("datetime")
                .HasColumnName("VIGENCIA");
        });

        modelBuilder.Entity<UnidadesBnmAtm>(entity =>
        {
            entity.ToTable("UNIDADES_BNM_ATM");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdLlave).HasColumnName("ID_LLAVE");
            entity.Property(e => e.IdMarca).HasColumnName("ID_MARCA");
            entity.Property(e => e.IdModelo).HasColumnName("ID_MODELO");
            entity.Property(e => e.IdParent).HasColumnName("ID_PARENT");
            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");
            entity.Property(e => e.IdResponsable).HasColumnName("ID_RESPONSABLE");
            entity.Property(e => e.IdSim).HasColumnName("ID_SIM");
            entity.Property(e => e.IdSoftware).HasColumnName("ID_SOFTWARE");
            entity.Property(e => e.IdSolicitudRecoleccion).HasColumnName("ID_SOLICITUD_RECOLECCION");
            entity.Property(e => e.IdStatusUnidad).HasColumnName("ID_STATUS_UNIDAD");
            entity.Property(e => e.IdTipoResponsable).HasColumnName("ID_TIPO_RESPONSABLE");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.IsDaniada).HasColumnName("IS_DANIADA");
            entity.Property(e => e.IsDuplicadoLista).HasColumnName("IS_DUPLICADO_LISTA");
            entity.Property(e => e.IsErrorAfiliacion).HasColumnName("IS_ERROR_AFILIACION");
            entity.Property(e => e.IsNueva).HasColumnName("IS_NUEVA");
            entity.Property(e => e.IsRetiro).HasColumnName("IS_RETIRO");
            entity.Property(e => e.IsSystema).HasColumnName("IS_SYSTEMA");
            entity.Property(e => e.Modelo)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.NoEquipo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NO_EQUIPO");
            entity.Property(e => e.NoImei)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NO_IMEI");
            entity.Property(e => e.NoInventario)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NO_INVENTARIO");
            entity.Property(e => e.NoSerie)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");
            entity.Property(e => e.NoSim)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NO_SIM");
            entity.Property(e => e.PosicionInv)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("POSICION_INV");
            entity.Property(e => e.Status)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<UnidadesDisponible>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("UNIDADES_DISPONIBLES");

            entity.Property(e => e.DescMarca)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_MARCA");
            entity.Property(e => e.DescModelo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_MODELO");
            entity.Property(e => e.DescTipoResponsable)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_TIPO_RESPONSABLE");
            entity.Property(e => e.IdModelo).HasColumnName("ID_MODELO");
            entity.Property(e => e.IdResponsable).HasColumnName("ID_RESPONSABLE");
            entity.Property(e => e.IdStatusUnidad).HasColumnName("ID_STATUS_UNIDAD");
            entity.Property(e => e.IdTipoResponsable).HasColumnName("ID_TIPO_RESPONSABLE");
            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");
            entity.Property(e => e.NoSerie)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");
            entity.Property(e => e.Region)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("REGION");
            entity.Property(e => e.Responsable)
                .HasMaxLength(152)
                .IsUnicode(false)
                .HasColumnName("RESPONSABLE");
            entity.Property(e => e.Zona)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZONA");
        });

        modelBuilder.Entity<UnidadesFujitsu>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("UNIDADES_FUJITSU");

            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdLlave).HasColumnName("ID_LLAVE");
            entity.Property(e => e.IdMarca).HasColumnName("ID_MARCA");
            entity.Property(e => e.IdModelo).HasColumnName("ID_MODELO");
            entity.Property(e => e.IdParent).HasColumnName("ID_PARENT");
            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");
            entity.Property(e => e.IdResponsable).HasColumnName("ID_RESPONSABLE");
            entity.Property(e => e.IdSim).HasColumnName("ID_SIM");
            entity.Property(e => e.IdSoftware).HasColumnName("ID_SOFTWARE");
            entity.Property(e => e.IdSolicitudRecoleccion).HasColumnName("ID_SOLICITUD_RECOLECCION");
            entity.Property(e => e.IdStatusUnidad).HasColumnName("ID_STATUS_UNIDAD");
            entity.Property(e => e.IdTipoResponsable).HasColumnName("ID_TIPO_RESPONSABLE");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.IsDaniada).HasColumnName("IS_DANIADA");
            entity.Property(e => e.IsNueva).HasColumnName("IS_NUEVA");
            entity.Property(e => e.IsRetiro).HasColumnName("IS_RETIRO");
            entity.Property(e => e.NoEquipo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_EQUIPO");
            entity.Property(e => e.NoImei)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_IMEI");
            entity.Property(e => e.NoInventario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_INVENTARIO");
            entity.Property(e => e.NoSerie)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");
            entity.Property(e => e.NoSim)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SIM");
            entity.Property(e => e.PosicionInv)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("POSICION_INV");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<UnidadesNoInstalada>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("UNIDADES_NO_INSTALADAS");

            entity.Property(e => e.Costo)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("COSTO");
            entity.Property(e => e.DescCliente)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_CLIENTE");
            entity.Property(e => e.DescMarca)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_MARCA");
            entity.Property(e => e.DescModelo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_MODELO");
            entity.Property(e => e.DescStatusUnidad)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_STATUS_UNIDAD");
            entity.Property(e => e.DescTipoResponsable)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_TIPO_RESPONSABLE");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");
            entity.Property(e => e.IsDaniada)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("IS_DANIADA");
            entity.Property(e => e.IsNueva)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("IS_NUEVA");
            entity.Property(e => e.IsPropiedadCliente)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("IS_PROPIEDAD_CLIENTE");
            entity.Property(e => e.IsRetiro)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("IS_RETIRO");
            entity.Property(e => e.Moneda)
                .IsRequired()
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("MONEDA");
            entity.Property(e => e.NoInventario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_INVENTARIO");
            entity.Property(e => e.NoSerie)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");
            entity.Property(e => e.Producto)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PRODUCTO");
            entity.Property(e => e.Responsable)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("RESPONSABLE");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SKU");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<UnidadesTransito>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("UNIDADES_TRANSITO");

            entity.Property(e => e.DescMarca)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_MARCA");
            entity.Property(e => e.DescModelo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_MODELO");
            entity.Property(e => e.DescStatusEnvio)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_STATUS_ENVIO");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdEnvio).HasColumnName("ID_ENVIO");
            entity.Property(e => e.IdModelo).HasColumnName("ID_MODELO");
            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");
            entity.Property(e => e.RegionDestino)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("REGION_DESTINO");
            entity.Property(e => e.ResponsableDestino)
                .HasMaxLength(152)
                .IsUnicode(false)
                .HasColumnName("RESPONSABLE_DESTINO");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.ZonaDestino)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZONA_DESTINO");
        });

        modelBuilder.Entity<UnidadesWincor>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("UNIDADES_WINCOR");

            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdLlave).HasColumnName("ID_LLAVE");
            entity.Property(e => e.IdMarca).HasColumnName("ID_MARCA");
            entity.Property(e => e.IdModelo).HasColumnName("ID_MODELO");
            entity.Property(e => e.IdParent).HasColumnName("ID_PARENT");
            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");
            entity.Property(e => e.IdResponsable).HasColumnName("ID_RESPONSABLE");
            entity.Property(e => e.IdSim).HasColumnName("ID_SIM");
            entity.Property(e => e.IdSoftware).HasColumnName("ID_SOFTWARE");
            entity.Property(e => e.IdSolicitudRecoleccion).HasColumnName("ID_SOLICITUD_RECOLECCION");
            entity.Property(e => e.IdStatusUnidad).HasColumnName("ID_STATUS_UNIDAD");
            entity.Property(e => e.IdTipoResponsable).HasColumnName("ID_TIPO_RESPONSABLE");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.IsDaniada).HasColumnName("IS_DANIADA");
            entity.Property(e => e.IsNueva).HasColumnName("IS_NUEVA");
            entity.Property(e => e.IsRetiro).HasColumnName("IS_RETIRO");
            entity.Property(e => e.NoEquipo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_EQUIPO");
            entity.Property(e => e.NoImei)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_IMEI");
            entity.Property(e => e.NoInventario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_INVENTARIO");
            entity.Property(e => e.NoSerie)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");
            entity.Property(e => e.NoSim)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SIM");
            entity.Property(e => e.PosicionInv)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("POSICION_INV");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<UnidadesWincorFujitsu>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("UNIDADES_WINCOR_FUJITSU");

            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdLlave).HasColumnName("ID_LLAVE");
            entity.Property(e => e.IdMarca).HasColumnName("ID_MARCA");
            entity.Property(e => e.IdModelo).HasColumnName("ID_MODELO");
            entity.Property(e => e.IdParent).HasColumnName("ID_PARENT");
            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");
            entity.Property(e => e.IdResponsable).HasColumnName("ID_RESPONSABLE");
            entity.Property(e => e.IdSim).HasColumnName("ID_SIM");
            entity.Property(e => e.IdSoftware).HasColumnName("ID_SOFTWARE");
            entity.Property(e => e.IdSolicitudRecoleccion).HasColumnName("ID_SOLICITUD_RECOLECCION");
            entity.Property(e => e.IdStatusUnidad).HasColumnName("ID_STATUS_UNIDAD");
            entity.Property(e => e.IdTipoResponsable).HasColumnName("ID_TIPO_RESPONSABLE");
            entity.Property(e => e.IdUsuarioAlta).HasColumnName("ID_USUARIO_ALTA");
            entity.Property(e => e.IsDaniada).HasColumnName("IS_DANIADA");
            entity.Property(e => e.IsNueva).HasColumnName("IS_NUEVA");
            entity.Property(e => e.IsRetiro).HasColumnName("IS_RETIRO");
            entity.Property(e => e.Modelo)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.NoEquipo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NO_EQUIPO");
            entity.Property(e => e.NoImei)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NO_IMEI");
            entity.Property(e => e.NoInventario)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NO_INVENTARIO");
            entity.Property(e => e.NoSerie)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");
            entity.Property(e => e.NoSim)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NO_SIM");
            entity.Property(e => e.PosicionInv)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("POSICION_INV");
            entity.Property(e => e.Status)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<VBdUniversoSim>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vBD_UNIVERSO_SIMS");

            entity.Property(e => e.Carrier)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("CARRIER");
            entity.Property(e => e.EstatusGeneral)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("ESTATUS_GENERAL");
            entity.Property(e => e.FechaActual)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("FECHA_ACTUAL");
            entity.Property(e => e.FechaCarga)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_CARGA");
            entity.Property(e => e.IdProceso)
                .HasMaxLength(50)
                .IsFixedLength()
                .HasColumnName("ID_PROCESO");
            entity.Property(e => e.IdUniversoSims).HasColumnName("ID_UNIVERSO_SIMS");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.Linea)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("LINEA");
            entity.Property(e => e.Nombre)
                .HasMaxLength(152)
                .IsUnicode(false)
                .HasColumnName("NOMBRE");
            entity.Property(e => e.Observaciones)
                .HasColumnType("text")
                .HasColumnName("OBSERVACIONES");
            entity.Property(e => e.Origen)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("ORIGEN");
            entity.Property(e => e.Sim)
                .HasMaxLength(35)
                .IsFixedLength()
                .HasColumnName("SIM");
            entity.Property(e => e.StatusCarga)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("STATUS_CARGA");
        });

        modelBuilder.Entity<VBdUniversoUnidade>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vBD_UNIVERSO_UNIDADES");

            entity.Property(e => e.AssetNumber)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("ASSET_NUMBER");
            entity.Property(e => e.FecAlta)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.IdProceso)
                .HasMaxLength(50)
                .IsFixedLength()
                .HasColumnName("ID_PROCESO");
            entity.Property(e => e.IdUniversoUnidades).HasColumnName("ID_UNIVERSO_UNIDADES");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            entity.Property(e => e.MajorCategory)
                .HasMaxLength(15)
                .IsFixedLength()
                .HasColumnName("MAJOR_CATEGORY");
            entity.Property(e => e.MinorCategory)
                .HasMaxLength(30)
                .IsFixedLength()
                .HasColumnName("MINOR_CATEGORY");
            entity.Property(e => e.NoSerie)
                .HasMaxLength(30)
                .IsFixedLength()
                .HasColumnName("NO_SERIE");
            entity.Property(e => e.Nombre)
                .HasMaxLength(152)
                .IsUnicode(false)
                .HasColumnName("NOMBRE");
            entity.Property(e => e.Observaciones)
                .HasColumnType("text")
                .HasColumnName("OBSERVACIONES");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("STATUS");
            entity.Property(e => e.StatusCarga)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("STATUS_CARGA");
        });

        modelBuilder.Entity<VDarReporte>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_Dar_Reporte");

            entity.Property(e => e.Almacen)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Danana)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("DANANA");
            entity.Property(e => e.Estado)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EstatusCmp)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("Estatus_CMP");
            entity.Property(e => e.EstatusMf)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Estatus_MF");
            entity.Property(e => e.Marca)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Modelo)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Region)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Serie)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VEquipoDisponible>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_Equipo_Disponible");

            entity.Property(e => e.Almacen)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Danana)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("DANANA");
            entity.Property(e => e.DescModelo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_MODELO");
            entity.Property(e => e.EstatusCmp)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("Estatus_CMP");
            entity.Property(e => e.EstatusMf)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Estatus_MF");
            entity.Property(e => e.Marca)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NoSerie)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");
        });

        modelBuilder.Entity<Vehiculo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("VEHICULOS");

            entity.Property(e => e.Curp)
                .HasMaxLength(40)
                .IsFixedLength()
                .HasColumnName("CURP");
            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnName("id");
            entity.Property(e => e.Mantenimiento).HasColumnName("MANTENIMIENTO");
            entity.Property(e => e.Modelo)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("MODELO");
            entity.Property(e => e.Month).HasColumnName("MONTH");
            entity.Property(e => e.Nombre)
                .HasMaxLength(80)
                .IsFixedLength()
                .HasColumnName("NOMBRE");
            entity.Property(e => e.Renta).HasColumnName("RENTA");
            entity.Property(e => e.Tipo)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("TIPO");
            entity.Property(e => e.Year).HasColumnName("YEAR");
            entity.Property(e => e.YearVehiculo).HasColumnName("YEAR_VEHICULO");
        });

        modelBuilder.Entity<ViaticosPmo>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VIATICOS_PMO");

            entity.Property(e => e.CantidadAutorizada)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("CANTIDAD_AUTORIZADA");
            entity.Property(e => e.FecConfirmacion)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_CONFIRMACION");
            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.IdConceptoPmo).HasColumnName("ID_CONCEPTO_PMO");
            entity.Property(e => e.IdRegion).HasColumnName("ID_REGION");
            entity.Property(e => e.IdSolicitudViaticos).HasColumnName("ID_SOLICITUD_VIATICOS");
            entity.Property(e => e.IdUsuarioSolicitado).HasColumnName("ID_USUARIO_SOLICITADO");
            entity.Property(e => e.IdViatico).HasColumnName("ID_VIATICO");
            entity.Property(e => e.Producto)
                .IsRequired()
                .HasMaxLength(15)
                .IsFixedLength()
                .HasColumnName("PRODUCTO");
            entity.Property(e => e.Tipo)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("TIPO");
        });

        modelBuilder.Entity<ViewAsignacionDeCitasWincorRegion>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VIEW_ASIGNACION_DE_CITAS_WINCOR_REGION");

            entity.Property(e => e.EnTiempo).HasColumnName("EN_TIEMPO");
            entity.Property(e => e.FueraDeTiempo).HasColumnName("FUERA_DE_TIEMPO");
            entity.Property(e => e.Region)
                .IsRequired()
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("REGION");
            entity.Property(e => e.TotalGeeneral).HasColumnName("TOTAL_GEENERAL");
        });

        modelBuilder.Entity<ViewEfectividadCargaRegion>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VIEW_EFECTIVIDAD_CARGA_REGION");

            entity.Property(e => e.DescRegion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_REGION");
            entity.Property(e => e.EnTiempo).HasColumnName("EN_TIEMPO");
            entity.Property(e => e.FecCierre)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_CIERRE");
            entity.Property(e => e.FueraDeTiempo).HasColumnName("FUERA_DE_TIEMPO");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
        });

        modelBuilder.Entity<ViewEquipo>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VIEW_EQUIPOS");

            entity.Property(e => e.Cliente)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CLIENTE");
            entity.Property(e => e.Danada)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("DANADA");
            entity.Property(e => e.DescModelo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_MODELO");
            entity.Property(e => e.FechaDeStatus)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FECHA_DE_STATUS");
            entity.Property(e => e.Marca)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MARCA");
            entity.Property(e => e.NoSerie)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");
            entity.Property(e => e.NoSim)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("NO_SIM");
            entity.Property(e => e.NoUnidad).HasColumnName("NO. UNIDAD");
            entity.Property(e => e.Responsable)
                .IsRequired()
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("RESPONSABLE");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.TipoDeResponsable)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TIPO_DE_RESPONSABLE");
            entity.Property(e => e.Zona)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("ZONA");
        });

        modelBuilder.Entity<ViewReporteRetiro>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VIEW_REPORTE_RETIROS");

            entity.Property(e => e.Consulta)
                .HasColumnType("smalldatetime")
                .HasColumnName("CONSULTA");
            entity.Property(e => e.DescMarca)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_MARCA");
            entity.Property(e => e.DescModelo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_MODELO");
            entity.Property(e => e.DescServicio)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("DESC_SERVICIO");
            entity.Property(e => e.DescZona)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_ZONA");
            entity.Property(e => e.FecCierre)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("FEC_CIERRE");
            entity.Property(e => e.FecCierrePrimerMes)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("FEC_CIERRE_PRIMER_MES");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IsDanada)
                .IsRequired()
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("IS_DANADA");
            entity.Property(e => e.IsNueva)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("IS_NUEVA");
            entity.Property(e => e.NoAr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AR");
            entity.Property(e => e.NoSerie)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");
            entity.Property(e => e.Nro).HasColumnName("NRO");
        });

        modelBuilder.Entity<Visita>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VISITAS");

            entity.Property(e => e.Anio).HasColumnName("ANIO");
            entity.Property(e => e.DescCliente)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_CLIENTE");
            entity.Property(e => e.DescProducto)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_PRODUCTO");
            entity.Property(e => e.DescTipoServicio)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_TIPO_SERVICIO");
            entity.Property(e => e.Dia).HasColumnName("DIA");
            entity.Property(e => e.DuracionVisita).HasColumnName("DURACION_VISITA");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IdBitacoraAr).HasColumnName("ID_BITACORA_AR");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");
            entity.Property(e => e.IdTipoServicio).HasColumnName("ID_TIPO_SERVICIO");
            entity.Property(e => e.Mes).HasColumnName("MES");
            entity.Property(e => e.Visitas).HasColumnName("VISITAS");
        });

        modelBuilder.Entity<VwAmCheck>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VW_AM_CHECK");

            entity.Property(e => e.Año).HasColumnName("AÑO");
            entity.Property(e => e.Dia).HasColumnName("DIA");
            entity.Property(e => e.Fecha)
                .HasColumnType("smalldatetime")
                .HasColumnName("FECHA");
            entity.Property(e => e.Hora)
                .HasColumnType("datetime")
                .HasColumnName("HORA");
            entity.Property(e => e.Mes).HasColumnName("MES");
            entity.Property(e => e.NombreIngeniero)
                .IsRequired()
                .HasMaxLength(152)
                .IsUnicode(false)
                .HasColumnName("NOMBRE INGENIERO");
            entity.Property(e => e.Regional)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("REGIONAL");
            entity.Property(e => e.Semana).HasColumnName("SEMANA");
        });

        modelBuilder.Entity<VwCierresDiarioTecnico>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VW_CIERRES_DIARIO_TECNICO");

            entity.Property(e => e.FechaCierre)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("FECHA_CIERRE");
            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");
            entity.Property(e => e.IdTecnico).HasColumnName("ID_TECNICO");
            entity.Property(e => e.NoArs).HasColumnName("NO_ARS");
        });

        modelBuilder.Entity<VwCostoTotalInsumoPorAr>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VW_COSTO_TOTAL_INSUMO_POR_AR");

            entity.Property(e => e.CostoTotal)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("COSTO_TOTAL");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
        });

        modelBuilder.Entity<VwRandom>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwRandom");
        });

        modelBuilder.Entity<VwReportePrefacturacion>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VW_REPORTE_PREFACTURACION");

            entity.Property(e => e.CadenaCierre)
                .IsRequired()
                .IsUnicode(false)
                .HasColumnName("CADENA_CIERRE");
            entity.Property(e => e.Colonia)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("COLONIA");
            entity.Property(e => e.Comentario)
                .IsRequired()
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("COMENTARIO");
            entity.Property(e => e.Cp)
                .IsRequired()
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("CP");
            entity.Property(e => e.DescModelo)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_MODELO");
            entity.Property(e => e.DescNegocio)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESC_NEGOCIO");
            entity.Property(e => e.DescResponsableAgendado)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_RESPONSABLE_AGENDADO");
            entity.Property(e => e.DescripcionTrabajo)
                .IsRequired()
                .HasMaxLength(3000)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_TRABAJO");
            entity.Property(e => e.Direccion)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");
            entity.Property(e => e.Estado)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ESTADO");
            entity.Property(e => e.FecAlta)
                .HasColumnType("smalldatetime")
                .HasColumnName("FEC_ALTA");
            entity.Property(e => e.FecCierreAgendado)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("FEC_CIERRE_AGENDADO");
            entity.Property(e => e.FolioValidacion)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("FOLIO_VALIDACION");
            entity.Property(e => e.IdAr).HasColumnName("ID_AR");
            entity.Property(e => e.IdArPrefacturacion).HasColumnName("ID_AR_PREFACTURACION");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");
            entity.Property(e => e.IdStatusDoctoPrefacturacionDigital).HasColumnName("ID_STATUS_DOCTO_PREFACTURACION_DIGITAL");
            entity.Property(e => e.IdTecnico).HasColumnName("ID_TECNICO");
            entity.Property(e => e.IdZona).HasColumnName("ID_ZONA");
            entity.Property(e => e.IsVisitaAgendado)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("IS_VISITA_AGENDADO");
            entity.Property(e => e.NoAfiliacion)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.NoRepCliente)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_REP_CLIENTE");
            entity.Property(e => e.NoReporteProveedor)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_REPORTE_PROVEEDOR");
            entity.Property(e => e.NoSerie)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_SERIE");
            entity.Property(e => e.NoTicketGasper)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NO_TICKET_GASPER");
            entity.Property(e => e.NoVisita).HasColumnName("NO_VISITA");
            entity.Property(e => e.NombreArchivo)
                .HasMaxLength(322)
                .IsUnicode(false)
                .HasColumnName("NOMBRE_ARCHIVO");
            entity.Property(e => e.Poblacion)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("POBLACION");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.TipoServicio)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("TIPO_SERVICIO");
            entity.Property(e => e.UsoPartes)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("USO_PARTES");
        });

        modelBuilder.Entity<VwTotalTareasWincor>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VW_TOTAL_TAREAS_WINCOR");

            entity.Property(e => e.Fecha)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("FECHA");
            entity.Property(e => e.Porcentaje)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("PORCENTAJE");
            entity.Property(e => e.StatusTareas)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("STATUS_TAREAS");
            entity.Property(e => e.Tareas).HasColumnName("TAREAS");
        });

        modelBuilder.Entity<WincorInbox>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("WINCOR_INBOX");

            entity.Property(e => e.City)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("CITY");
            entity.Property(e => e.Comentarios)
                .IsUnicode(false)
                .HasColumnName("COMENTARIOS");
            entity.Property(e => e.Cp)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("CP");
            entity.Property(e => e.CustomerName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CUSTOMER_NAME");
            entity.Property(e => e.DefectDescription)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("DEFECT_DESCRIPTION");
            entity.Property(e => e.Direccion)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");
            entity.Property(e => e.FecCarga)
                .HasColumnType("datetime")
                .HasColumnName("FEC_CARGA");
            entity.Property(e => e.FecRecibido)
                .HasColumnType("datetime")
                .HasColumnName("FEC_RECIBIDO");
            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");
            entity.Property(e => e.HelpdeskNumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("HELPDESK_NUMBER");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdFalla).HasColumnName("ID_FALLA");
            entity.Property(e => e.IdInbox)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_INBOX");
            entity.Property(e => e.IdProyecto).HasColumnName("ID_PROYECTO");
            entity.Property(e => e.IdSegmento).HasColumnName("ID_SEGMENTO");
            entity.Property(e => e.IdServicio).HasColumnName("ID_SERVICIO");
            entity.Property(e => e.IncidentNumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("INCIDENT_NUMBER");
            entity.Property(e => e.IsFollowDispatch).HasColumnName("IS_FOLLOW_DISPATCH");
            entity.Property(e => e.ManualInputHold).HasColumnName("MANUAL_INPUT_HOLD");
            entity.Property(e => e.NoAfiliacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NO_AFILIACION");
            entity.Property(e => e.NotasRemedy)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("NOTAS_REMEDY");
            entity.Property(e => e.OriginalCustomerReference)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("ORIGINAL_CUSTOMER_REFERENCE");
            entity.Property(e => e.PlannedEndDate)
                .HasColumnType("datetime")
                .HasColumnName("PLANNED_END_DATE");
            entity.Property(e => e.PlannedStartDate)
                .HasColumnType("datetime")
                .HasColumnName("PLANNED_START_DATE");
            entity.Property(e => e.Request)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("REQUEST");
            entity.Property(e => e.SerialNumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SERIAL_NUMBER");
            entity.Property(e => e.Severity)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SEVERITY");
            entity.Property(e => e.State)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("STATE");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.TaskAssignmentId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TASK_ASSIGNMENT_ID");
            entity.Property(e => e.TaskNumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TASK_NUMBER");
            entity.Property(e => e.Telefono)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");
            entity.Property(e => e.Urgency)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("URGENCY");
            entity.Property(e => e.XmlString).HasColumnName("XML_string");
        });

        modelBuilder.Entity<WincorOutbox>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("WINCOR_OUTBOX");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");
            entity.Property(e => e.FechaEnvio)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ENVIO");
            entity.Property(e => e.Helpdesk)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("HELPDESK");
            entity.Property(e => e.IdBitacoraAr).HasColumnName("ID_BITACORA_AR");
            entity.Property(e => e.IdOutbox)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_OUTBOX");
            entity.Property(e => e.Incident)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("INCIDENT");
            entity.Property(e => e.StatusEnvio)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS_ENVIO");
            entity.Property(e => e.StatusXml)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS_XML");
            entity.Property(e => e.Task)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TASK");
            entity.Property(e => e.Taskid)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TASKID");
            entity.Property(e => e.Xml)
                .IsUnicode(false)
                .HasColumnName("XML");
        });

        modelBuilder.Entity<ZonaEstadoSepomex>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ZONA_ESTADO_SEPOMEX");

            entity.Property(e => e.IdEstado).HasColumnName("ID_ESTADO");
            entity.Property(e => e.IdRegion).HasColumnName("ID_REGION");
            entity.Property(e => e.IdZona).HasColumnName("ID_ZONA");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}
